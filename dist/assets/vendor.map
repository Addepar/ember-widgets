{"version":3,"sources":["vendor/ember-cli/vendor-prepend.js","bower_components/loader.js/loader.js","bower_components/jquery/dist/jquery.js","bower_components/handlebars/handlebars.js","bower_components/ember/ember.js","bower_components/ember-cli-shims/app-shims.js","bower_components/ember-resolver/dist/modules/ember-resolver.js","bower_components/ember-load-initializers/ember-load-initializers.js","vendor/ic-ajax/dist/named-amd/main.js","bower_components/bootstrap/dist/js/bootstrap.min.js","bower_components/lodash/dist/lodash.min.js","bower_components/modernizr/modernizr.js","vendor/list-view/list-view.js"],"sourcesContent":["/* jshint ignore:start */\n\nwindow.EmberENV = {\"FEATURES\":{}};\nvar runningTests = false;\n\n/* jshint ignore:end */\n","var define, requireModule, require, requirejs;\n\n(function() {\n\n  var _isArray;\n  if (!Array.isArray) {\n    _isArray = function (x) {\n      return Object.prototype.toString.call(x) === \"[object Array]\";\n    };\n  } else {\n    _isArray = Array.isArray;\n  }\n  \n  var registry = {}, seen = {}, state = {};\n  var FAILED = false;\n\n  define = function(name, deps, callback) {\n  \n    if (!_isArray(deps)) {\n      callback = deps;\n      deps     =  [];\n    }\n  \n    registry[name] = {\n      deps: deps,\n      callback: callback\n    };\n  };\n\n  function reify(deps, name, seen) {\n    var length = deps.length;\n    var reified = new Array(length);\n    var dep;\n    var exports;\n\n    for (var i = 0, l = length; i < l; i++) {\n      dep = deps[i];\n      if (dep === 'exports') {\n        exports = reified[i] = seen;\n      } else {\n        reified[i] = require(resolve(dep, name));\n      }\n    }\n\n    return {\n      deps: reified,\n      exports: exports\n    };\n  }\n\n  requirejs = require = requireModule = function(name) {\n    if (state[name] !== FAILED &&\n        seen.hasOwnProperty(name)) {\n      return seen[name];\n    }\n\n    if (!registry[name]) {\n      throw new Error('Could not find module ' + name);\n    }\n\n    var mod = registry[name];\n    var reified;\n    var module;\n    var loaded = false;\n\n    seen[name] = { }; // placeholder for run-time cycles\n\n    try {\n      reified = reify(mod.deps, name, seen[name]);\n      module = mod.callback.apply(this, reified.deps);\n      loaded = true;\n    } finally {\n      if (!loaded) {\n        state[name] = FAILED;\n      }\n    }\n\n    return reified.exports ? seen[name] : (seen[name] = module);\n  };\n\n  function resolve(child, name) {\n    if (child.charAt(0) !== '.') { return child; }\n\n    var parts = child.split('/');\n    var nameParts = name.split('/');\n    var parentBase;\n\n    if (nameParts.length === 1) {\n      parentBase = nameParts;\n    } else {\n      parentBase = nameParts.slice(0, -1);\n    }\n\n    for (var i = 0, l = parts.length; i < l; i++) {\n      var part = parts[i];\n\n      if (part === '..') { parentBase.pop(); }\n      else if (part === '.') { continue; }\n      else { parentBase.push(part); }\n    }\n\n    return parentBase.join('/');\n  }\n\n  requirejs.entries = requirejs._eak_seen = registry;\n  requirejs.clear = function(){\n    requirejs.entries = requirejs._eak_seen = registry = {};\n    seen = state = {};\n  };\n})();\n","/*!\n * jQuery JavaScript Library v1.11.2\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2014-12-17T15:27Z\n */\n\n(function( global, factory ) {\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\t\t// For CommonJS and CommonJS-like environments where a proper window is present,\n\t\t// execute the factory and get jQuery\n\t\t// For environments that do not inherently posses a window with a document\n\t\t// (such as Node.js), expose a jQuery-making factory as module.exports\n\t\t// This accentuates the need for the creation of a real window\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n}(typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Can't do this because several apps including ASP.NET trace\n// the stack via arguments.caller.callee and Firefox dies if\n// you try to trace through \"use strict\" call chains. (#13335)\n// Support: Firefox 18+\n//\n\nvar deletedIds = [];\n\nvar slice = deletedIds.slice;\n\nvar concat = deletedIds.concat;\n\nvar push = deletedIds.push;\n\nvar indexOf = deletedIds.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar support = {};\n\n\n\nvar\n\tversion = \"1.11.2\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android<4.1, IE<9\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([\\da-z])/gi,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// Start with an empty selector\n\tselector: \"\",\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\t\treturn num != null ?\n\n\t\t\t// Return just the one element from the set\n\t\t\t( num < 0 ? this[ num + this.length ] : this[ num ] ) :\n\n\t\t\t// Return all the elements in a clean array\n\t\t\tslice.call( this );\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\t\tret.context = this.context;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\t// (You can seed the arguments with an array of args, but this is\n\t// only used internally.)\n\teach: function( callback, args ) {\n\t\treturn jQuery.each( this, callback, args );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map(this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t}));\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor(null);\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: deletedIds.sort,\n\tsplice: deletedIds.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar src, copyIsArray, copy, name, options, clone,\n\t\ttarget = arguments[0] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction(target) ) {\n\t\ttarget = {};\n\t}\n\n\t// extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\t\t// Only deal with non-null/undefined values\n\t\tif ( (options = arguments[ i ]) != null ) {\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray(src) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend({\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\t// See test/unit/core.js for details concerning isFunction.\n\t// Since version 1.3, DOM methods and functions like alert\n\t// aren't supported. They return false on IE (#2968).\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type(obj) === \"function\";\n\t},\n\n\tisArray: Array.isArray || function( obj ) {\n\t\treturn jQuery.type(obj) === \"array\";\n\t},\n\n\tisWindow: function( obj ) {\n\t\t/* jshint eqeqeq: false */\n\t\treturn obj != null && obj == obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\t\t// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t// adding 1 corrects loss of precision from parseFloat (#15100)\n\t\treturn !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar key;\n\n\t\t// Must be an Object.\n\t\t// Because of IE, we also have to check the presence of the constructor property.\n\t\t// Make sure that DOM nodes and window objects don't pass through, as well\n\t\tif ( !obj || jQuery.type(obj) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\t// Not own constructor property must be Object\n\t\t\tif ( obj.constructor &&\n\t\t\t\t!hasOwn.call(obj, \"constructor\") &&\n\t\t\t\t!hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\") ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\t// IE8,9 Will throw exceptions on certain host objects #9897\n\t\t\treturn false;\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Handle iteration over inherited properties before own properties.\n\t\tif ( support.ownLast ) {\n\t\t\tfor ( key in obj ) {\n\t\t\t\treturn hasOwn.call( obj, key );\n\t\t\t}\n\t\t}\n\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own.\n\t\tfor ( key in obj ) {}\n\n\t\treturn key === undefined || hasOwn.call( obj, key );\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call(obj) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\t// Workarounds based on findings by Jim Driscoll\n\t// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context\n\tglobalEval: function( data ) {\n\t\tif ( data && jQuery.trim( data ) ) {\n\t\t\t// We use execScript on Internet Explorer\n\t\t\t// We use an anonymous function so that context is window\n\t\t\t// rather than jQuery in Firefox\n\t\t\t( window.execScript || function( data ) {\n\t\t\t\twindow[ \"eval\" ].call( window, data );\n\t\t\t} )( data );\n\t\t}\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\tnodeName: function( elem, name ) {\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t},\n\n\t// args is for internal usage only\n\teach: function( obj, callback, args ) {\n\t\tvar value,\n\t\t\ti = 0,\n\t\t\tlength = obj.length,\n\t\t\tisArray = isArraylike( obj );\n\n\t\tif ( args ) {\n\t\t\tif ( isArray ) {\n\t\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\t\tvalue = callback.apply( obj[ i ], args );\n\n\t\t\t\t\tif ( value === false ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( i in obj ) {\n\t\t\t\t\tvalue = callback.apply( obj[ i ], args );\n\n\t\t\t\t\tif ( value === false ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// A special, fast, case for the most common use of each\n\t\t} else {\n\t\t\tif ( isArray ) {\n\t\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\t\tvalue = callback.call( obj[ i ], i, obj[ i ] );\n\n\t\t\t\t\tif ( value === false ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( i in obj ) {\n\t\t\t\t\tvalue = callback.call( obj[ i ], i, obj[ i ] );\n\n\t\t\t\t\tif ( value === false ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android<4.1, IE<9\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArraylike( Object(arr) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\tvar len;\n\n\t\tif ( arr ) {\n\t\t\tif ( indexOf ) {\n\t\t\t\treturn indexOf.call( arr, elem, i );\n\t\t\t}\n\n\t\t\tlen = arr.length;\n\t\t\ti = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;\n\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t// Skip accessing in sparse arrays\n\t\t\t\tif ( i in arr && arr[ i ] === elem ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\twhile ( j < len ) {\n\t\t\tfirst[ i++ ] = second[ j++ ];\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)\n\t\tif ( len !== len ) {\n\t\t\twhile ( second[j] !== undefined ) {\n\t\t\t\tfirst[ i++ ] = second[ j++ ];\n\t\t\t}\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar value,\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tisArray = isArraylike( elems ),\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArray ) {\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar args, proxy, tmp;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: function() {\n\t\treturn +( new Date() );\n\t},\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n});\n\n// Populate the class2type map\njQuery.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function(i, name) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n});\n\nfunction isArraylike( obj ) {\n\tvar length = obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\tif ( obj.nodeType === 1 && length ) {\n\t\treturn true;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.2.0-pre\n * http://sizzlejs.com/\n *\n * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2014-12-16\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// General-purpose constants\n\tMAX_NEGATIVE = 1 << 31,\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// http://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\t// http://www.w3.org/TR/css3-syntax/#characters\n\tcharacterEncoding = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n\n\t// Loosely modeled on CSS identifier characters\n\t// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors\n\t// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = characterEncoding.replace( \"w\", \"w#\" ),\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + characterEncoding + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + characterEncoding + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + characterEncoding + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + characterEncoding + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + characterEncoding.replace( \"w\", \"w*\" ) + \")\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\trescape = /'|\\\\/g,\n\n\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t};\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar match, elem, m, nodeType,\n\t\t// QSA vars\n\t\ti, groups, old, nid, newContext, newSelector;\n\n\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\n\tcontext = context || document;\n\tresults = results || [];\n\tnodeType = context.nodeType;\n\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\tif ( !seed && documentIsHTML ) {\n\n\t\t// Try to shortcut find operations when possible (e.g., not under DocumentFragment)\n\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\t\t\t// Speed-up: Sizzle(\"#ID\")\n\t\t\tif ( (m = match[1]) ) {\n\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\telem = context.getElementById( m );\n\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t// nodes that are no longer in the document (jQuery #6963)\n\t\t\t\t\tif ( elem && elem.parentNode ) {\n\t\t\t\t\t\t// Handle the case where IE, Opera, and Webkit return items\n\t\t\t\t\t\t// by name instead of ID\n\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Context is not a document\n\t\t\t\t\tif ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&\n\t\t\t\t\t\tcontains( context, elem ) && elem.id === m ) {\n\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Speed-up: Sizzle(\"TAG\")\n\t\t\t} else if ( match[2] ) {\n\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\treturn results;\n\n\t\t\t// Speed-up: Sizzle(\".CLASS\")\n\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName ) {\n\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\treturn results;\n\t\t\t}\n\t\t}\n\n\t\t// QSA path\n\t\tif ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\t\t\tnid = old = expando;\n\t\t\tnewContext = context;\n\t\t\tnewSelector = nodeType !== 1 && selector;\n\n\t\t\t// qSA works strangely on Element-rooted queries\n\t\t\t// We can work around this by specifying an extra ID on the root\n\t\t\t// and working up from there (Thanks to Andrew Dupont for the technique)\n\t\t\t// IE 8 doesn't work on object elements\n\t\t\tif ( nodeType === 1 && context.nodeName.toLowerCase() !== \"object\" ) {\n\t\t\t\tgroups = tokenize( selector );\n\n\t\t\t\tif ( (old = context.getAttribute(\"id\")) ) {\n\t\t\t\t\tnid = old.replace( rescape, \"\\\\$&\" );\n\t\t\t\t} else {\n\t\t\t\t\tcontext.setAttribute( \"id\", nid );\n\t\t\t\t}\n\t\t\t\tnid = \"[id='\" + nid + \"'] \";\n\n\t\t\t\ti = groups.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tgroups[i] = nid + toSelector( groups[i] );\n\t\t\t\t}\n\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;\n\t\t\t\tnewSelector = groups.join(\",\");\n\t\t\t}\n\n\t\t\tif ( newSelector ) {\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch(qsaError) {\n\t\t\t\t} finally {\n\t\t\t\t\tif ( !old ) {\n\t\t\t\t\t\tcontext.removeAttribute(\"id\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {Function(string, Object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created div and expects a boolean result\n */\nfunction assert( fn ) {\n\tvar div = document.createElement(\"div\");\n\n\ttry {\n\t\treturn !!fn( div );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( div.parentNode ) {\n\t\t\tdiv.parentNode.removeChild( div );\n\t\t}\n\t\t// release memory in IE\n\t\tdiv = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = attrs.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\t( ~b.sourceIndex || MAX_NEGATIVE ) -\n\t\t\t( ~a.sourceIndex || MAX_NEGATIVE );\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, parent,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// If no document and documentElement is available, return\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Set our document\n\tdocument = doc;\n\tdocElem = doc.documentElement;\n\tparent = doc.defaultView;\n\n\t// Support: IE>8\n\t// If iframe document is assigned to \"document\" variable and if iframe has been reloaded,\n\t// IE will throw \"permission denied\" error when accessing \"document\" variable, see jQuery #13936\n\t// IE6-8 do not support the defaultView property so parent will be undefined\n\tif ( parent && parent !== parent.top ) {\n\t\t// IE11 does not have attachEvent, so all must suffer\n\t\tif ( parent.addEventListener ) {\n\t\t\tparent.addEventListener( \"unload\", unloadHandler, false );\n\t\t} else if ( parent.attachEvent ) {\n\t\t\tparent.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Support tests\n\t---------------------------------------------------------------------- */\n\tdocumentIsHTML = !isXML( doc );\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( div ) {\n\t\tdiv.className = \"i\";\n\t\treturn !div.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( div ) {\n\t\tdiv.appendChild( doc.createComment(\"\") );\n\t\treturn !div.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( doc.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( div ) {\n\t\tdocElem.appendChild( div ).id = expando;\n\t\treturn !doc.getElementsByName || !doc.getElementsByName( expando ).length;\n\t});\n\n\t// ID find and filter\n\tif ( support.getById ) {\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar m = context.getElementById( id );\n\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t// nodes that are no longer in the document #6963\n\t\t\t\treturn m && m.parentNode ? [ m ] : [];\n\t\t\t}\n\t\t};\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t} else {\n\t\t// Support: IE6/7\n\t\t// getElementById is not reliable as a find shortcut\n\t\tdelete Expr.find[\"ID\"];\n\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" && elem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See http://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( div ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// http://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( div ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\f]' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( div.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !div.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+\n\t\t\tif ( !div.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibing-combinator selector` fails\n\t\t\tif ( !div.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( div ) {\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = doc.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tdiv.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( div.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":enabled\").length ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tdiv.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( div ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( div, \"div\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( div, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully does not implement inclusive descendent\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === doc ? -1 :\n\t\t\t\tb === doc ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn doc;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, outerCache, node, diff, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\t\t\t\t\t\t\touterCache = parent[ expando ] || (parent[ expando ] = {});\n\t\t\t\t\t\t\tcache = outerCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[0] === dirruns && cache[1];\n\t\t\t\t\t\t\tdiff = cache[0] === dirruns && cache[2];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {\n\t\t\t\t\t\t\tdiff = cache[1];\n\n\t\t\t\t\t\t// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\tif ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {\n\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": function( elem ) {\n\t\t\treturn elem.disabled === false;\n\t\t},\n\n\t\t\"disabled\": function( elem ) {\n\t\t\treturn elem.disabled === true;\n\t\t},\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tcheckNonElements = base && dir === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\t\t\t\t\t\tif ( (oldCache = outerCache[ dir ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\touterCache[ dir ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context !== document && context;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Keep `i` a string if there are no elements so `matchedCount` will be \"00\" below\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\tmatchedCount += i;\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is no seed and only one group\n\tif ( match.length === 1 ) {\n\n\t\t// Take a shortcut and set the context if the root selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tsupport.getById && context.nodeType === 9 && documentIsHTML &&\n\t\t\t\tExpr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\trsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( div1 ) {\n\t// Should return 1, but returns 4 (following)\n\treturn div1.compareDocumentPosition( document.createElement(\"div\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( div ) {\n\tdiv.innerHTML = \"<a href='#'></a>\";\n\treturn div.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( div ) {\n\tdiv.innerHTML = \"<input/>\";\n\tdiv.firstChild.setAttribute( \"value\", \"\" );\n\treturn div.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( div ) {\n\treturn div.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\njQuery.expr[\":\"] = jQuery.expr.pseudos;\njQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\n\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = (/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/);\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\t/* jshint -W018 */\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t});\n\n\t}\n\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t});\n\n\t}\n\n\tif ( typeof qualifier === \"string\" ) {\n\t\tif ( risSimple.test( qualifier ) ) {\n\t\t\treturn jQuery.filter( qualifier, elements, not );\n\t\t}\n\n\t\tqualifier = jQuery.filter( qualifier, elements );\n\t}\n\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;\n\t});\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\treturn elems.length === 1 && elem.nodeType === 1 ?\n\t\tjQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :\n\t\tjQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\t\treturn elem.nodeType === 1;\n\t\t}));\n};\n\njQuery.fn.extend({\n\tfind: function( selector ) {\n\t\tvar i,\n\t\t\tret = [],\n\t\t\tself = this,\n\t\t\tlen = self.length;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter(function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}) );\n\t\t}\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )\n\t\tret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );\n\t\tret.selector = this.selector ? this.selector + \" \" + selector : selector;\n\t\treturn ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow(this, selector || [], false) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow(this, selector || [], true) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n});\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// Use the correct document accordingly with window argument (sandbox)\n\tdocument = window.document,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\n\tinit = jQuery.fn.init = function( selector, context ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector.charAt(0) === \"<\" && selector.charAt( selector.length - 1 ) === \">\" && selector.length >= 3 ) {\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && (match[1] || !context) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[1] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[0] : context;\n\n\t\t\t\t\t// scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[1],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[2] );\n\n\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t// nodes that are no longer in the document #6963\n\t\t\t\t\tif ( elem && elem.parentNode ) {\n\t\t\t\t\t\t// Handle the case where IE and Opera return items\n\t\t\t\t\t\t// by name instead of ID\n\t\t\t\t\t\tif ( elem.id !== match[2] ) {\n\t\t\t\t\t\t\treturn rootjQuery.find( selector );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Otherwise, we inject the element directly into the jQuery object\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t\tthis[0] = elem;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.context = document;\n\t\t\t\t\tthis.selector = selector;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || rootjQuery ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis.context = this[0] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn typeof rootjQuery.ready !== \"undefined\" ?\n\t\t\t\trootjQuery.ready( selector ) :\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\tif ( selector.selector !== undefined ) {\n\t\t\tthis.selector = selector.selector;\n\t\t\tthis.context = selector.context;\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\t// methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.extend({\n\tdir: function( elem, dir, until ) {\n\t\tvar matched = [],\n\t\t\tcur = elem[ dir ];\n\n\t\twhile ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {\n\t\t\tif ( cur.nodeType === 1 ) {\n\t\t\t\tmatched.push( cur );\n\t\t\t}\n\t\t\tcur = cur[dir];\n\t\t}\n\t\treturn matched;\n\t},\n\n\tsibling: function( n, elem ) {\n\t\tvar r = [];\n\n\t\tfor ( ; n; n = n.nextSibling ) {\n\t\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\t\tr.push( n );\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n});\n\njQuery.fn.extend({\n\thas: function( target ) {\n\t\tvar i,\n\t\t\ttargets = jQuery( target, this ),\n\t\t\tlen = targets.length;\n\n\t\treturn this.filter(function() {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[i] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\tpos = rneedsContext.test( selectors ) || typeof selectors !== \"string\" ?\n\t\t\t\tjQuery( selectors, context || this.context ) :\n\t\t\t\t0;\n\n\t\tfor ( ; i < l; i++ ) {\n\t\t\tfor ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {\n\t\t\t\t// Always skip document fragments\n\t\t\t\tif ( cur.nodeType < 11 && (pos ?\n\t\t\t\t\tpos.index(cur) > -1 :\n\n\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\tjQuery.find.matchesSelector(cur, selectors)) ) {\n\n\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within\n\t// the matched set of elements\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn jQuery.inArray( this[0], jQuery( elem ) );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn jQuery.inArray(\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[0] : elem, this );\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.unique(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter(selector)\n\t\t);\n\t}\n});\n\nfunction sibling( cur, dir ) {\n\tdo {\n\t\tcur = cur[ dir ];\n\t} while ( cur && cur.nodeType !== 1 );\n\n\treturn cur;\n}\n\njQuery.each({\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn jQuery.dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn jQuery.dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn jQuery.dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn jQuery.dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn jQuery.dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn jQuery.dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn jQuery.sibling( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\treturn jQuery.nodeName( elem, \"iframe\" ) ?\n\t\t\telem.contentDocument || elem.contentWindow.document :\n\t\t\tjQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar ret = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tret = jQuery.filter( selector, ret );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tret = jQuery.unique( ret );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tret = ret.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n});\nvar rnotwhite = (/\\S+/g);\n\n\n\n// String to Object options format cache\nvar optionsCache = {};\n\n// Convert String-formatted options into Object-formatted ones and store in cache\nfunction createOptions( options ) {\n\tvar object = optionsCache[ options ] = {};\n\tjQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t});\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\t( optionsCache[ options ] || createOptions( options ) ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\t\t// Last fire value (for non-forgettable lists)\n\t\tmemory,\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\t\t// End of the loop when firing\n\t\tfiringLength,\n\t\t// Index of currently firing callback (modified by remove if needed)\n\t\tfiringIndex,\n\t\t// First callback to fire (used internally by add and fireWith)\n\t\tfiringStart,\n\t\t// Actual callback list\n\t\tlist = [],\n\t\t// Stack of fire calls for repeatable lists\n\t\tstack = !options.once && [],\n\t\t// Fire callbacks\n\t\tfire = function( data ) {\n\t\t\tmemory = options.memory && data;\n\t\t\tfired = true;\n\t\t\tfiringIndex = firingStart || 0;\n\t\t\tfiringStart = 0;\n\t\t\tfiringLength = list.length;\n\t\t\tfiring = true;\n\t\t\tfor ( ; list && firingIndex < firingLength; firingIndex++ ) {\n\t\t\t\tif ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {\n\t\t\t\t\tmemory = false; // To prevent further calls using add\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiring = false;\n\t\t\tif ( list ) {\n\t\t\t\tif ( stack ) {\n\t\t\t\t\tif ( stack.length ) {\n\t\t\t\t\t\tfire( stack.shift() );\n\t\t\t\t\t}\n\t\t\t\t} else if ( memory ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t} else {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// Actual Callbacks object\n\t\tself = {\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\t// First, we save the current length\n\t\t\t\t\tvar start = list.length;\n\t\t\t\t\t(function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tvar type = jQuery.type( arg );\n\t\t\t\t\t\t\tif ( type === \"function\" ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && type !== \"string\" ) {\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})( arguments );\n\t\t\t\t\t// Do we need to add the callbacks to the\n\t\t\t\t\t// current firing batch?\n\t\t\t\t\tif ( firing ) {\n\t\t\t\t\t\tfiringLength = list.length;\n\t\t\t\t\t// With memory, if we're not firing then\n\t\t\t\t\t// we should call right away\n\t\t\t\t\t} else if ( memory ) {\n\t\t\t\t\t\tfiringStart = start;\n\t\t\t\t\t\tfire( memory );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\t\tvar index;\n\t\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\t\tlist.splice( index, 1 );\n\t\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\t\tif ( firing ) {\n\t\t\t\t\t\t\t\tif ( index <= firingLength ) {\n\t\t\t\t\t\t\t\t\tfiringLength--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );\n\t\t\t},\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tlist = [];\n\t\t\t\tfiringLength = 0;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Have the list do nothing anymore\n\t\t\tdisable: function() {\n\t\t\t\tlist = stack = memory = undefined;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it disabled?\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\t\t\t// Lock the list in its current state\n\t\t\tlock: function() {\n\t\t\t\tstack = undefined;\n\t\t\t\tif ( !memory ) {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it locked?\n\t\t\tlocked: function() {\n\t\t\t\treturn !stack;\n\t\t\t},\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( list && ( !fired || stack ) ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tif ( firing ) {\n\t\t\t\t\t\tstack.push( args );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfire( args );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\njQuery.extend({\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\t\t\t\t// action, add listener, listener list, final state\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), \"rejected\" ],\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks(\"memory\") ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tthen: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\t\t\t\t\treturn jQuery.Deferred(function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\n\t\t\t\t\t\t\tdeferred[ tuple[1] ](function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject )\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t}).promise();\n\t\t\t\t},\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Keep pipe for back-compat\n\t\tpromise.pipe = promise.then;\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 3 ];\n\n\t\t\t// promise[ done | fail | progress ] = list.add\n\t\t\tpromise[ tuple[1] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(function() {\n\t\t\t\t\t// state = [ resolved | rejected ]\n\t\t\t\t\tstate = stateString;\n\n\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\n\t\t\t\t}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\n\t\t\t}\n\n\t\t\t// deferred[ resolve | reject | notify ]\n\t\t\tdeferred[ tuple[0] ] = function() {\n\t\t\t\tdeferred[ tuple[0] + \"With\" ]( this === deferred ? promise : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\t\t\tdeferred[ tuple[0] + \"With\" ] = list.fireWith;\n\t\t});\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( subordinate /* , ..., subordinateN */ ) {\n\t\tvar i = 0,\n\t\t\tresolveValues = slice.call( arguments ),\n\t\t\tlength = resolveValues.length,\n\n\t\t\t// the count of uncompleted subordinates\n\t\t\tremaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\n\n\t\t\t// the master Deferred. If resolveValues consist of only a single Deferred, just use that.\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n\t\t\t// Update function for both resolve and progress values\n\t\t\tupdateFunc = function( i, contexts, values ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tcontexts[ i ] = this;\n\t\t\t\t\tvalues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( values === progressValues ) {\n\t\t\t\t\t\tdeferred.notifyWith( contexts, values );\n\n\t\t\t\t\t} else if ( !(--remaining) ) {\n\t\t\t\t\t\tdeferred.resolveWith( contexts, values );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tprogressValues, progressContexts, resolveContexts;\n\n\t\t// add listeners to Deferred subordinates; treat others as resolved\n\t\tif ( length > 1 ) {\n\t\t\tprogressValues = new Array( length );\n\t\t\tprogressContexts = new Array( length );\n\t\t\tresolveContexts = new Array( length );\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\n\t\t\t\t\tresolveValues[ i ].promise()\n\t\t\t\t\t\t.done( updateFunc( i, resolveContexts, resolveValues ) )\n\t\t\t\t\t\t.fail( deferred.reject )\n\t\t\t\t\t\t.progress( updateFunc( i, progressContexts, progressValues ) );\n\t\t\t\t} else {\n\t\t\t\t\t--remaining;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// if we're not waiting on anything, resolve the master\n\t\tif ( !remaining ) {\n\t\t\tdeferred.resolveWith( resolveContexts, resolveValues );\n\t\t}\n\n\t\treturn deferred.promise();\n\t}\n});\n\n\n// The deferred used on DOM ready\nvar readyList;\n\njQuery.fn.ready = function( fn ) {\n\t// Add the callback\n\tjQuery.ready.promise().done( fn );\n\n\treturn this;\n};\n\njQuery.extend({\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready( true );\n\t\t}\n\t},\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n\t\tif ( !document.body ) {\n\t\t\treturn setTimeout( jQuery.ready );\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\n\t\t// Trigger any bound ready events\n\t\tif ( jQuery.fn.triggerHandler ) {\n\t\t\tjQuery( document ).triggerHandler( \"ready\" );\n\t\t\tjQuery( document ).off( \"ready\" );\n\t\t}\n\t}\n});\n\n/**\n * Clean-up method for dom ready events\n */\nfunction detach() {\n\tif ( document.addEventListener ) {\n\t\tdocument.removeEventListener( \"DOMContentLoaded\", completed, false );\n\t\twindow.removeEventListener( \"load\", completed, false );\n\n\t} else {\n\t\tdocument.detachEvent( \"onreadystatechange\", completed );\n\t\twindow.detachEvent( \"onload\", completed );\n\t}\n}\n\n/**\n * The ready event handler and self cleanup method\n */\nfunction completed() {\n\t// readyState === \"complete\" is good enough for us to call the dom ready in oldIE\n\tif ( document.addEventListener || event.type === \"load\" || document.readyState === \"complete\" ) {\n\t\tdetach();\n\t\tjQuery.ready();\n\t}\n}\n\njQuery.ready.promise = function( obj ) {\n\tif ( !readyList ) {\n\n\t\treadyList = jQuery.Deferred();\n\n\t\t// Catch cases where $(document).ready() is called after the browser event has already occurred.\n\t\t// we once tried to use readyState \"interactive\" here, but it caused issues like the one\n\t\t// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n\t\tif ( document.readyState === \"complete\" ) {\n\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\t\tsetTimeout( jQuery.ready );\n\n\t\t// Standards-based browsers support DOMContentLoaded\n\t\t} else if ( document.addEventListener ) {\n\t\t\t// Use the handy event callback\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", completed, false );\n\n\t\t\t// A fallback to window.onload, that will always work\n\t\t\twindow.addEventListener( \"load\", completed, false );\n\n\t\t// If IE event model is used\n\t\t} else {\n\t\t\t// Ensure firing before onload, maybe late but safe also for iframes\n\t\t\tdocument.attachEvent( \"onreadystatechange\", completed );\n\n\t\t\t// A fallback to window.onload, that will always work\n\t\t\twindow.attachEvent( \"onload\", completed );\n\n\t\t\t// If IE and not a frame\n\t\t\t// continually check to see if the document is ready\n\t\t\tvar top = false;\n\n\t\t\ttry {\n\t\t\t\ttop = window.frameElement == null && document.documentElement;\n\t\t\t} catch(e) {}\n\n\t\t\tif ( top && top.doScroll ) {\n\t\t\t\t(function doScrollCheck() {\n\t\t\t\t\tif ( !jQuery.isReady ) {\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Use the trick by Diego Perini\n\t\t\t\t\t\t\t// http://javascript.nwbox.com/IEContentLoaded/\n\t\t\t\t\t\t\ttop.doScroll(\"left\");\n\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\treturn setTimeout( doScrollCheck, 50 );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// detach all dom ready events\n\t\t\t\t\t\tdetach();\n\n\t\t\t\t\t\t// and execute any waiting functions\n\t\t\t\t\t\tjQuery.ready();\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t}\n\t\t}\n\t}\n\treturn readyList.promise( obj );\n};\n\n\nvar strundefined = typeof undefined;\n\n\n\n// Support: IE<9\n// Iteration over object's inherited properties before its own\nvar i;\nfor ( i in jQuery( support ) ) {\n\tbreak;\n}\nsupport.ownLast = i !== \"0\";\n\n// Note: most support tests are defined in their respective modules.\n// false until the test is run\nsupport.inlineBlockNeedsLayout = false;\n\n// Execute ASAP in case we need to set body.style.zoom\njQuery(function() {\n\t// Minified: var a,b,c,d\n\tvar val, div, body, container;\n\n\tbody = document.getElementsByTagName( \"body\" )[ 0 ];\n\tif ( !body || !body.style ) {\n\t\t// Return for frameset docs that don't have a body\n\t\treturn;\n\t}\n\n\t// Setup\n\tdiv = document.createElement( \"div\" );\n\tcontainer = document.createElement( \"div\" );\n\tcontainer.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\";\n\tbody.appendChild( container ).appendChild( div );\n\n\tif ( typeof div.style.zoom !== strundefined ) {\n\t\t// Support: IE<8\n\t\t// Check if natively block-level elements act like inline-block\n\t\t// elements when setting their display to 'inline' and giving\n\t\t// them layout\n\t\tdiv.style.cssText = \"display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1\";\n\n\t\tsupport.inlineBlockNeedsLayout = val = div.offsetWidth === 3;\n\t\tif ( val ) {\n\t\t\t// Prevent IE 6 from affecting layout for positioned elements #11048\n\t\t\t// Prevent IE from shrinking the body in IE 7 mode #12869\n\t\t\t// Support: IE<8\n\t\t\tbody.style.zoom = 1;\n\t\t}\n\t}\n\n\tbody.removeChild( container );\n});\n\n\n\n\n(function() {\n\tvar div = document.createElement( \"div\" );\n\n\t// Execute the test only if not already executed in another module.\n\tif (support.deleteExpando == null) {\n\t\t// Support: IE<9\n\t\tsupport.deleteExpando = true;\n\t\ttry {\n\t\t\tdelete div.test;\n\t\t} catch( e ) {\n\t\t\tsupport.deleteExpando = false;\n\t\t}\n\t}\n\n\t// Null elements to avoid leaks in IE.\n\tdiv = null;\n})();\n\n\n/**\n * Determines whether an object can have data\n */\njQuery.acceptData = function( elem ) {\n\tvar noData = jQuery.noData[ (elem.nodeName + \" \").toLowerCase() ],\n\t\tnodeType = +elem.nodeType || 1;\n\n\t// Do not set data on non-element DOM nodes because it will not be cleared (#8335).\n\treturn nodeType !== 1 && nodeType !== 9 ?\n\t\tfalse :\n\n\t\t// Nodes accept data unless otherwise specified; rejection can be conditional\n\t\t!noData || noData !== true && elem.getAttribute(\"classid\") === noData;\n};\n\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /([A-Z])/g;\n\nfunction dataAttr( elem, key, data ) {\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\n\t\tvar name = \"data-\" + key.replace( rmultiDash, \"-$1\" ).toLowerCase();\n\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = data === \"true\" ? true :\n\t\t\t\t\tdata === \"false\" ? false :\n\t\t\t\t\tdata === \"null\" ? null :\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\n\t\t\t\t\t+data + \"\" === data ? +data :\n\t\t\t\t\trbrace.test( data ) ? jQuery.parseJSON( data ) :\n\t\t\t\t\tdata;\n\t\t\t} catch( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tjQuery.data( elem, key, data );\n\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\n\treturn data;\n}\n\n// checks a cache object for emptiness\nfunction isEmptyDataObject( obj ) {\n\tvar name;\n\tfor ( name in obj ) {\n\n\t\t// if the public data object is empty, the private is still empty\n\t\tif ( name === \"data\" && jQuery.isEmptyObject( obj[name] ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( name !== \"toJSON\" ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction internalData( elem, name, data, pvt /* Internal Use Only */ ) {\n\tif ( !jQuery.acceptData( elem ) ) {\n\t\treturn;\n\t}\n\n\tvar ret, thisCache,\n\t\tinternalKey = jQuery.expando,\n\n\t\t// We have to handle DOM nodes and JS objects differently because IE6-7\n\t\t// can't GC object references properly across the DOM-JS boundary\n\t\tisNode = elem.nodeType,\n\n\t\t// Only DOM nodes need the global jQuery cache; JS object data is\n\t\t// attached directly to the object so GC can occur automatically\n\t\tcache = isNode ? jQuery.cache : elem,\n\n\t\t// Only defining an ID for JS objects if its cache already exists allows\n\t\t// the code to shortcut on the same path as a DOM node with no cache\n\t\tid = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;\n\n\t// Avoid doing any more work than we need to when trying to get data on an\n\t// object that has no data at all\n\tif ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === \"string\" ) {\n\t\treturn;\n\t}\n\n\tif ( !id ) {\n\t\t// Only DOM nodes need a new unique ID for each element since their data\n\t\t// ends up in the global cache\n\t\tif ( isNode ) {\n\t\t\tid = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;\n\t\t} else {\n\t\t\tid = internalKey;\n\t\t}\n\t}\n\n\tif ( !cache[ id ] ) {\n\t\t// Avoid exposing jQuery metadata on plain JS objects when the object\n\t\t// is serialized using JSON.stringify\n\t\tcache[ id ] = isNode ? {} : { toJSON: jQuery.noop };\n\t}\n\n\t// An object can be passed to jQuery.data instead of a key/value pair; this gets\n\t// shallow copied over onto the existing cache\n\tif ( typeof name === \"object\" || typeof name === \"function\" ) {\n\t\tif ( pvt ) {\n\t\t\tcache[ id ] = jQuery.extend( cache[ id ], name );\n\t\t} else {\n\t\t\tcache[ id ].data = jQuery.extend( cache[ id ].data, name );\n\t\t}\n\t}\n\n\tthisCache = cache[ id ];\n\n\t// jQuery data() is stored in a separate object inside the object's internal data\n\t// cache in order to avoid key collisions between internal data and user-defined\n\t// data.\n\tif ( !pvt ) {\n\t\tif ( !thisCache.data ) {\n\t\t\tthisCache.data = {};\n\t\t}\n\n\t\tthisCache = thisCache.data;\n\t}\n\n\tif ( data !== undefined ) {\n\t\tthisCache[ jQuery.camelCase( name ) ] = data;\n\t}\n\n\t// Check for both converted-to-camel and non-converted data property names\n\t// If a data property was specified\n\tif ( typeof name === \"string\" ) {\n\n\t\t// First Try to find as-is property data\n\t\tret = thisCache[ name ];\n\n\t\t// Test for null|undefined property data\n\t\tif ( ret == null ) {\n\n\t\t\t// Try to find the camelCased property\n\t\t\tret = thisCache[ jQuery.camelCase( name ) ];\n\t\t}\n\t} else {\n\t\tret = thisCache;\n\t}\n\n\treturn ret;\n}\n\nfunction internalRemoveData( elem, name, pvt ) {\n\tif ( !jQuery.acceptData( elem ) ) {\n\t\treturn;\n\t}\n\n\tvar thisCache, i,\n\t\tisNode = elem.nodeType,\n\n\t\t// See jQuery.data for more information\n\t\tcache = isNode ? jQuery.cache : elem,\n\t\tid = isNode ? elem[ jQuery.expando ] : jQuery.expando;\n\n\t// If there is already no cache entry for this object, there is no\n\t// purpose in continuing\n\tif ( !cache[ id ] ) {\n\t\treturn;\n\t}\n\n\tif ( name ) {\n\n\t\tthisCache = pvt ? cache[ id ] : cache[ id ].data;\n\n\t\tif ( thisCache ) {\n\n\t\t\t// Support array or space separated string names for data keys\n\t\t\tif ( !jQuery.isArray( name ) ) {\n\n\t\t\t\t// try the string as a key before any manipulation\n\t\t\t\tif ( name in thisCache ) {\n\t\t\t\t\tname = [ name ];\n\t\t\t\t} else {\n\n\t\t\t\t\t// split the camel cased version by spaces unless a key with the spaces exists\n\t\t\t\t\tname = jQuery.camelCase( name );\n\t\t\t\t\tif ( name in thisCache ) {\n\t\t\t\t\t\tname = [ name ];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tname = name.split(\" \");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If \"name\" is an array of keys...\n\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,\n\t\t\t\t// keys will be converted to camelCase.\n\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\n\t\t\t\t// both plain key and camelCase key. #12786\n\t\t\t\t// This will only penalize the array argument path.\n\t\t\t\tname = name.concat( jQuery.map( name, jQuery.camelCase ) );\n\t\t\t}\n\n\t\t\ti = name.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete thisCache[ name[i] ];\n\t\t\t}\n\n\t\t\t// If there is no data left in the cache, we want to continue\n\t\t\t// and let the cache object itself get destroyed\n\t\t\tif ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\t// See jQuery.data for more information\n\tif ( !pvt ) {\n\t\tdelete cache[ id ].data;\n\n\t\t// Don't destroy the parent cache unless the internal data object\n\t\t// had been the only thing left in it\n\t\tif ( !isEmptyDataObject( cache[ id ] ) ) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// Destroy the cache\n\tif ( isNode ) {\n\t\tjQuery.cleanData( [ elem ], true );\n\n\t// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)\n\t/* jshint eqeqeq: false */\n\t} else if ( support.deleteExpando || cache != cache.window ) {\n\t\t/* jshint eqeqeq: true */\n\t\tdelete cache[ id ];\n\n\t// When all else fails, null\n\t} else {\n\t\tcache[ id ] = null;\n\t}\n}\n\njQuery.extend({\n\tcache: {},\n\n\t// The following elements (space-suffixed to avoid Object.prototype collisions)\n\t// throw uncatchable exceptions if you attempt to set expando properties\n\tnoData: {\n\t\t\"applet \": true,\n\t\t\"embed \": true,\n\t\t// ...but Flash objects (which have this classid) *can* handle expandos\n\t\t\"object \": \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n\t},\n\n\thasData: function( elem ) {\n\t\telem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];\n\t\treturn !!elem && !isEmptyDataObject( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn internalData( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\treturn internalRemoveData( elem, name );\n\t},\n\n\t// For internal use only.\n\t_data: function( elem, name, data ) {\n\t\treturn internalData( elem, name, data, true );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\treturn internalRemoveData( elem, name, true );\n\t}\n});\n\njQuery.fn.extend({\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[0],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Special expections of .data basically thwart jQuery.access,\n\t\t// so implement the relevant behavior ourselves\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = jQuery.data( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !jQuery._data( elem, \"parsedAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE11+\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice(5) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tjQuery._data( elem, \"parsedAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each(function() {\n\t\t\t\tjQuery.data( this, key );\n\t\t\t});\n\t\t}\n\n\t\treturn arguments.length > 1 ?\n\n\t\t\t// Sets one value\n\t\t\tthis.each(function() {\n\t\t\t\tjQuery.data( this, key, value );\n\t\t\t}) :\n\n\t\t\t// Gets one value\n\t\t\t// Try to fetch any internally stored data first\n\t\t\telem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each(function() {\n\t\t\tjQuery.removeData( this, key );\n\t\t});\n\t}\n});\n\n\njQuery.extend({\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = jQuery._data( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || jQuery.isArray(data) ) {\n\t\t\t\t\tqueue = jQuery._data( elem, type, jQuery.makeArray(data) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// not intended for public consumption - generates a queueHooks object, or returns the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn jQuery._data( elem, key ) || jQuery._data( elem, key, {\n\t\t\tempty: jQuery.Callbacks(\"once memory\").add(function() {\n\t\t\t\tjQuery._removeData( elem, type + \"queue\" );\n\t\t\t\tjQuery._removeData( elem, key );\n\t\t\t})\n\t\t});\n\t}\n});\n\njQuery.fn.extend({\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[0], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each(function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[0] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t});\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each(function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t});\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = jQuery._data( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n});\nvar pnum = (/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/).source;\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHidden = function( elem, el ) {\n\t\t// isHidden might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\t\treturn jQuery.css( elem, \"display\" ) === \"none\" || !jQuery.contains( elem.ownerDocument, elem );\n\t};\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlength = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\tjQuery.access( elems, fn, i, key[i], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tfn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn chainable ?\n\t\telems :\n\n\t\t// Gets\n\t\tbulk ?\n\t\t\tfn.call( elems ) :\n\t\t\tlength ? fn( elems[0], key ) : emptyGet;\n};\nvar rcheckableType = (/^(?:checkbox|radio)$/i);\n\n\n\n(function() {\n\t// Minified: var a,b,c\n\tvar input = document.createElement( \"input\" ),\n\t\tdiv = document.createElement( \"div\" ),\n\t\tfragment = document.createDocumentFragment();\n\n\t// Setup\n\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\n\n\t// IE strips leading whitespace when .innerHTML is used\n\tsupport.leadingWhitespace = div.firstChild.nodeType === 3;\n\n\t// Make sure that tbody elements aren't automatically inserted\n\t// IE will insert them into empty tables\n\tsupport.tbody = !div.getElementsByTagName( \"tbody\" ).length;\n\n\t// Make sure that link elements get serialized correctly by innerHTML\n\t// This requires a wrapper element in IE\n\tsupport.htmlSerialize = !!div.getElementsByTagName( \"link\" ).length;\n\n\t// Makes sure cloning an html5 element does not cause problems\n\t// Where outerHTML is undefined, this still works\n\tsupport.html5Clone =\n\t\tdocument.createElement( \"nav\" ).cloneNode( true ).outerHTML !== \"<:nav></:nav>\";\n\n\t// Check if a disconnected checkbox will retain its checked\n\t// value of true after appended to the DOM (IE6/7)\n\tinput.type = \"checkbox\";\n\tinput.checked = true;\n\tfragment.appendChild( input );\n\tsupport.appendChecked = input.checked;\n\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\t// Support: IE6-IE11+\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// #11217 - WebKit loses check when the name is after the checked attribute\n\tfragment.appendChild( div );\n\tdiv.innerHTML = \"<input type='radio' checked='checked' name='t'/>\";\n\n\t// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3\n\t// old WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE<9\n\t// Opera does not clone events (and typeof div.attachEvent === undefined).\n\t// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()\n\tsupport.noCloneEvent = true;\n\tif ( div.attachEvent ) {\n\t\tdiv.attachEvent( \"onclick\", function() {\n\t\t\tsupport.noCloneEvent = false;\n\t\t});\n\n\t\tdiv.cloneNode( true ).click();\n\t}\n\n\t// Execute the test only if not already executed in another module.\n\tif (support.deleteExpando == null) {\n\t\t// Support: IE<9\n\t\tsupport.deleteExpando = true;\n\t\ttry {\n\t\t\tdelete div.test;\n\t\t} catch( e ) {\n\t\t\tsupport.deleteExpando = false;\n\t\t}\n\t}\n})();\n\n\n(function() {\n\tvar i, eventName,\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)\n\tfor ( i in { submit: true, change: true, focusin: true }) {\n\t\teventName = \"on\" + i;\n\n\t\tif ( !(support[ i + \"Bubbles\" ] = eventName in window) ) {\n\t\t\t// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)\n\t\t\tdiv.setAttribute( eventName, \"t\" );\n\t\t\tsupport[ i + \"Bubbles\" ] = div.attributes[ eventName ].expando === false;\n\t\t}\n\t}\n\n\t// Null elements to avoid leaks in IE.\n\tdiv = null;\n})();\n\n\nvar rformElems = /^(?:input|select|textarea)$/i,\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,\n\trfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)$/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\t\tvar tmp, events, t, handleObjIn,\n\t\t\tspecial, eventHandle, handleObj,\n\t\t\thandlers, type, namespaces, origType,\n\t\t\telemData = jQuery._data( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !(events = elemData.events) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !(eventHandle = elemData.handle) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?\n\t\t\t\t\tjQuery.event.dispatch.apply( eventHandle.elem, arguments ) :\n\t\t\t\t\tundefined;\n\t\t\t};\n\t\t\t// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events\n\t\t\teventHandle.elem = elem;\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[t] ) || [];\n\t\t\ttype = origType = tmp[1];\n\t\t\tnamespaces = ( tmp[2] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend({\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join(\".\")\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !(handlers = events[ type ]) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener/attachEvent if the special events handler returns false\n\t\t\t\tif ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\t\t\t\t\t// Bind the global event handler to the element\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle, false );\n\n\t\t\t\t\t} else if ( elem.attachEvent ) {\n\t\t\t\t\t\telem.attachEvent( \"on\" + type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t\t// Nullify elem to prevent memory leaks in IE\n\t\telem = null;\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\t\tvar j, handleObj, tmp,\n\t\t\torigCount, t, events,\n\t\t\tspecial, handlers, type,\n\t\t\tnamespaces, origType,\n\t\t\telemData = jQuery.hasData( elem ) && jQuery._data( elem );\n\n\t\tif ( !elemData || !(events = elemData.events) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[t] ) || [];\n\t\t\ttype = origType = tmp[1];\n\t\t\tnamespaces = ( tmp[2] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[2] && new RegExp( \"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdelete elemData.handle;\n\n\t\t\t// removeData also checks for emptiness and clears the expando if empty\n\t\t\t// so use it instead of delete\n\t\t\tjQuery._removeData( elem, \"events\" );\n\t\t}\n\t},\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\t\tvar handle, ontype, cur,\n\t\t\tbubbleType, special, tmp, i,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split(\".\") : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf(\".\") >= 0 ) {\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split(\".\");\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf(\":\") < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join(\".\");\n\t\tevent.namespace_re = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === (elem.ownerDocument || document) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( jQuery._data( cur, \"events\" ) || {} )[ event.type ] && jQuery._data( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && jQuery.acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&\n\t\t\t\tjQuery.acceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name name as the event.\n\t\t\t\t// Can't use an .isFunction() check here because IE6/7 fails that test.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\ttry {\n\t\t\t\t\t\telem[ type ]();\n\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t// IE<9 dies on focus/blur to hidden element (#1486,#12518)\n\t\t\t\t\t\t// only reproducible on winXP IE8 native, not IE9 in IE8 mode\n\t\t\t\t\t}\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\tdispatch: function( event ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tevent = jQuery.event.fix( event );\n\n\t\tvar i, ret, handleObj, matched, j,\n\t\t\thandlerQueue = [],\n\t\t\targs = slice.call( arguments ),\n\t\t\thandlers = ( jQuery._data( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[0] = event;\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or\n\t\t\t\t// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )\n\t\t\t\t\t\t\t.apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( (event.result = ret) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar sel, handleObj, matches, i,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\t// Black-hole SVG <use> instance trees (#13180)\n\t\t// Avoid non-left-click bubbling in Firefox (#3861)\n\t\tif ( delegateCount && cur.nodeType && (!event.button || event.type !== \"click\") ) {\n\n\t\t\t/* jshint eqeqeq: false */\n\t\t\tfor ( ; cur != this; cur = cur.parentNode || this ) {\n\t\t\t\t/* jshint eqeqeq: true */\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== \"click\") ) {\n\t\t\t\t\tmatches = [];\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matches[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatches[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) >= 0 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matches[ sel ] ) {\n\t\t\t\t\t\t\tmatches.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matches.length ) {\n\t\t\t\t\t\thandlerQueue.push({ elem: cur, handlers: matches });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\tfix: function( event ) {\n\t\tif ( event[ jQuery.expando ] ) {\n\t\t\treturn event;\n\t\t}\n\n\t\t// Create a writable copy of the event object and normalize some properties\n\t\tvar i, prop, copy,\n\t\t\ttype = event.type,\n\t\t\toriginalEvent = event,\n\t\t\tfixHook = this.fixHooks[ type ];\n\n\t\tif ( !fixHook ) {\n\t\t\tthis.fixHooks[ type ] = fixHook =\n\t\t\t\trmouseEvent.test( type ) ? this.mouseHooks :\n\t\t\t\trkeyEvent.test( type ) ? this.keyHooks :\n\t\t\t\t{};\n\t\t}\n\t\tcopy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;\n\n\t\tevent = new jQuery.Event( originalEvent );\n\n\t\ti = copy.length;\n\t\twhile ( i-- ) {\n\t\t\tprop = copy[ i ];\n\t\t\tevent[ prop ] = originalEvent[ prop ];\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Fix target property (#1925)\n\t\tif ( !event.target ) {\n\t\t\tevent.target = originalEvent.srcElement || document;\n\t\t}\n\n\t\t// Support: Chrome 23+, Safari?\n\t\t// Target should not be a text node (#504, #13143)\n\t\tif ( event.target.nodeType === 3 ) {\n\t\t\tevent.target = event.target.parentNode;\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)\n\t\tevent.metaKey = !!event.metaKey;\n\n\t\treturn fixHook.filter ? fixHook.filter( event, originalEvent ) : event;\n\t},\n\n\t// Includes some event props shared by KeyEvent and MouseEvent\n\tprops: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n\n\tfixHooks: {},\n\n\tkeyHooks: {\n\t\tprops: \"char charCode key keyCode\".split(\" \"),\n\t\tfilter: function( event, original ) {\n\n\t\t\t// Add which for key events\n\t\t\tif ( event.which == null ) {\n\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tmouseHooks: {\n\t\tprops: \"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n\t\tfilter: function( event, original ) {\n\t\t\tvar body, eventDoc, doc,\n\t\t\t\tbutton = original.button,\n\t\t\t\tfromElement = original.fromElement;\n\n\t\t\t// Calculate pageX/Y if missing and clientX/Y available\n\t\t\tif ( event.pageX == null && original.clientX != null ) {\n\t\t\t\teventDoc = event.target.ownerDocument || document;\n\t\t\t\tdoc = eventDoc.documentElement;\n\t\t\t\tbody = eventDoc.body;\n\n\t\t\t\tevent.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );\n\t\t\t\tevent.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );\n\t\t\t}\n\n\t\t\t// Add relatedTarget, if necessary\n\t\t\tif ( !event.relatedTarget && fromElement ) {\n\t\t\t\tevent.relatedTarget = fromElement === event.target ? original.toElement : fromElement;\n\t\t\t}\n\n\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\t\t// Note: button is not normalized, so don't use it\n\t\t\tif ( !event.which && button !== undefined ) {\n\t\t\t\tevent.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tspecial: {\n\t\tload: {\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.focus();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t// Support: IE<9\n\t\t\t\t\t\t// If we error on focus to hidden element (#1486, #12518),\n\t\t\t\t\t\t// let .trigger() run the handlers\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( jQuery.nodeName( this, \"input\" ) && this.type === \"checkbox\" && this.click ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tsimulate: function( type, elem, event, bubble ) {\n\t\t// Piggyback on a donor event to simulate a different one.\n\t\t// Fake originalEvent to avoid donor's stopPropagation, but if the\n\t\t// simulated event prevents default then we do the same on the donor.\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true,\n\t\t\t\toriginalEvent: {}\n\t\t\t}\n\t\t);\n\t\tif ( bubble ) {\n\t\t\tjQuery.event.trigger( e, null, elem );\n\t\t} else {\n\t\t\tjQuery.event.dispatch.call( elem, e );\n\t\t}\n\t\tif ( e.isDefaultPrevented() ) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n};\n\njQuery.removeEvent = document.removeEventListener ?\n\tfunction( elem, type, handle ) {\n\t\tif ( elem.removeEventListener ) {\n\t\t\telem.removeEventListener( type, handle, false );\n\t\t}\n\t} :\n\tfunction( elem, type, handle ) {\n\t\tvar name = \"on\" + type;\n\n\t\tif ( elem.detachEvent ) {\n\n\t\t\t// #8545, #7054, preventing memory leaks for custom events in IE6-8\n\t\t\t// detachEvent needed property on element, by name of that event, to properly expose it to GC\n\t\t\tif ( typeof elem[ name ] === strundefined ) {\n\t\t\t\telem[ name ] = null;\n\t\t\t}\n\n\t\t\telem.detachEvent( name, handle );\n\t\t}\n\t};\n\njQuery.Event = function( src, props ) {\n\t// Allow instantiation without the 'new' keyword\n\tif ( !(this instanceof jQuery.Event) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\t\t\t\t// Support: IE < 9, Android < 4.0\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\t\tif ( !e ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If preventDefault exists, run it on the original event\n\t\tif ( e.preventDefault ) {\n\t\t\te.preventDefault();\n\n\t\t// Support: IE\n\t\t// Otherwise set the returnValue property of the original event to false\n\t\t} else {\n\t\t\te.returnValue = false;\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\t\tif ( !e ) {\n\t\t\treturn;\n\t\t}\n\t\t// If stopPropagation exists, run it on the original event\n\t\tif ( e.stopPropagation ) {\n\t\t\te.stopPropagation();\n\t\t}\n\n\t\t// Support: IE\n\t\t// Set the cancelBubble property of the original event to true\n\t\te.cancelBubble = true;\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && e.stopImmediatePropagation ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\njQuery.each({\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mousenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || (related !== target && !jQuery.contains( target, related )) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n});\n\n// IE submit delegation\nif ( !support.submitBubbles ) {\n\n\tjQuery.event.special.submit = {\n\t\tsetup: function() {\n\t\t\t// Only need this for delegated form submit events\n\t\t\tif ( jQuery.nodeName( this, \"form\" ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Lazy-add a submit handler when a descendant form may potentially be submitted\n\t\t\tjQuery.event.add( this, \"click._submit keypress._submit\", function( e ) {\n\t\t\t\t// Node name check avoids a VML-related crash in IE (#9807)\n\t\t\t\tvar elem = e.target,\n\t\t\t\t\tform = jQuery.nodeName( elem, \"input\" ) || jQuery.nodeName( elem, \"button\" ) ? elem.form : undefined;\n\t\t\t\tif ( form && !jQuery._data( form, \"submitBubbles\" ) ) {\n\t\t\t\t\tjQuery.event.add( form, \"submit._submit\", function( event ) {\n\t\t\t\t\t\tevent._submit_bubble = true;\n\t\t\t\t\t});\n\t\t\t\t\tjQuery._data( form, \"submitBubbles\", true );\n\t\t\t\t}\n\t\t\t});\n\t\t\t// return undefined since we don't need an event listener\n\t\t},\n\n\t\tpostDispatch: function( event ) {\n\t\t\t// If form was submitted by the user, bubble the event up the tree\n\t\t\tif ( event._submit_bubble ) {\n\t\t\t\tdelete event._submit_bubble;\n\t\t\t\tif ( this.parentNode && !event.isTrigger ) {\n\t\t\t\t\tjQuery.event.simulate( \"submit\", this.parentNode, event, true );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tteardown: function() {\n\t\t\t// Only need this for delegated form submit events\n\t\t\tif ( jQuery.nodeName( this, \"form\" ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Remove delegated handlers; cleanData eventually reaps submit handlers attached above\n\t\t\tjQuery.event.remove( this, \"._submit\" );\n\t\t}\n\t};\n}\n\n// IE change delegation and checkbox/radio fix\nif ( !support.changeBubbles ) {\n\n\tjQuery.event.special.change = {\n\n\t\tsetup: function() {\n\n\t\t\tif ( rformElems.test( this.nodeName ) ) {\n\t\t\t\t// IE doesn't fire change on a check/radio until blur; trigger it on click\n\t\t\t\t// after a propertychange. Eat the blur-change in special.change.handle.\n\t\t\t\t// This still fires onchange a second time for check/radio after blur.\n\t\t\t\tif ( this.type === \"checkbox\" || this.type === \"radio\" ) {\n\t\t\t\t\tjQuery.event.add( this, \"propertychange._change\", function( event ) {\n\t\t\t\t\t\tif ( event.originalEvent.propertyName === \"checked\" ) {\n\t\t\t\t\t\t\tthis._just_changed = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tjQuery.event.add( this, \"click._change\", function( event ) {\n\t\t\t\t\t\tif ( this._just_changed && !event.isTrigger ) {\n\t\t\t\t\t\t\tthis._just_changed = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Allow triggered, simulated change events (#11500)\n\t\t\t\t\t\tjQuery.event.simulate( \"change\", this, event, true );\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Delegated event; lazy-add a change handler on descendant inputs\n\t\t\tjQuery.event.add( this, \"beforeactivate._change\", function( e ) {\n\t\t\t\tvar elem = e.target;\n\n\t\t\t\tif ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, \"changeBubbles\" ) ) {\n\t\t\t\t\tjQuery.event.add( elem, \"change._change\", function( event ) {\n\t\t\t\t\t\tif ( this.parentNode && !event.isSimulated && !event.isTrigger ) {\n\t\t\t\t\t\t\tjQuery.event.simulate( \"change\", this.parentNode, event, true );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tjQuery._data( elem, \"changeBubbles\", true );\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\thandle: function( event ) {\n\t\t\tvar elem = event.target;\n\n\t\t\t// Swallow native change events from checkbox/radio, we already triggered them above\n\t\t\tif ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== \"radio\" && elem.type !== \"checkbox\") ) {\n\t\t\t\treturn event.handleObj.handler.apply( this, arguments );\n\t\t\t}\n\t\t},\n\n\t\tteardown: function() {\n\t\t\tjQuery.event.remove( this, \"._change\" );\n\n\t\t\treturn !rformElems.test( this.nodeName );\n\t\t}\n\t};\n}\n\n// Create \"bubbling\" focus and blur events\nif ( !support.focusinBubbles ) {\n\tjQuery.each({ focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );\n\t\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = jQuery._data( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tjQuery._data( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = jQuery._data( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tjQuery._removeData( doc, fix );\n\t\t\t\t} else {\n\t\t\t\t\tjQuery._data( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t});\n}\n\njQuery.fn.extend({\n\n\ton: function( types, selector, data, fn, /*INTERNAL*/ one ) {\n\t\tvar type, origFn;\n\n\t\t// Types can be a map of types/handlers\n\t\tif ( typeof types === \"object\" ) {\n\t\t\t// ( types-Object, selector, data )\n\t\t\tif ( typeof selector !== \"string\" ) {\n\t\t\t\t// ( types-Object, data )\n\t\t\t\tdata = data || selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.on( type, selector, data, types[ type ], one );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\tif ( data == null && fn == null ) {\n\t\t\t// ( types, fn )\n\t\t\tfn = selector;\n\t\t\tdata = selector = undefined;\n\t\t} else if ( fn == null ) {\n\t\t\tif ( typeof selector === \"string\" ) {\n\t\t\t\t// ( types, selector, fn )\n\t\t\t\tfn = data;\n\t\t\t\tdata = undefined;\n\t\t\t} else {\n\t\t\t\t// ( types, data, fn )\n\t\t\t\tfn = data;\n\t\t\t\tdata = selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t} else if ( !fn ) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif ( one === 1 ) {\n\t\t\torigFn = fn;\n\t\t\tfn = function( event ) {\n\t\t\t\t// Can use an empty set, since event contains the info\n\t\t\t\tjQuery().off( event );\n\t\t\t\treturn origFn.apply( this, arguments );\n\t\t\t};\n\t\t\t// Use same guid so caller can remove using origFn\n\t\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.add( this, types, fn, data, selector );\n\t\t});\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn this.on( types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each(function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t});\n\t},\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each(function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t});\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[0];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n});\n\n\nfunction createSafeFragment( document ) {\n\tvar list = nodeNames.split( \"|\" ),\n\t\tsafeFrag = document.createDocumentFragment();\n\n\tif ( safeFrag.createElement ) {\n\t\twhile ( list.length ) {\n\t\t\tsafeFrag.createElement(\n\t\t\t\tlist.pop()\n\t\t\t);\n\t\t}\n\t}\n\treturn safeFrag;\n}\n\nvar nodeNames = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|\" +\n\t\t\"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",\n\trinlinejQuery = / jQuery\\d+=\"(?:null|\\d+)\"/g,\n\trnoshimcache = new RegExp(\"<(?:\" + nodeNames + \")[\\\\s/>]\", \"i\"),\n\trleadingWhitespace = /^\\s+/,\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n\trtagName = /<([\\w:]+)/,\n\trtbody = /<tbody/i,\n\trhtml = /<|&#?\\w+;/,\n\trnoInnerhtml = /<(?:script|style|link)/i,\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptType = /^$|\\/(?:java|ecma)script/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n\n\t// We have to close these tags to support XHTML (#13200)\n\twrapMap = {\n\t\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\t\tlegend: [ 1, \"<fieldset>\", \"</fieldset>\" ],\n\t\tarea: [ 1, \"<map>\", \"</map>\" ],\n\t\tparam: [ 1, \"<object>\", \"</object>\" ],\n\t\tthead: [ 1, \"<table>\", \"</table>\" ],\n\t\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\t\tcol: [ 2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\" ],\n\t\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t\t// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,\n\t\t// unless wrapped in a div with non-breaking characters in front of it.\n\t\t_default: support.htmlSerialize ? [ 0, \"\", \"\" ] : [ 1, \"X<div>\", \"</div>\"  ]\n\t},\n\tsafeFragment = createSafeFragment( document ),\n\tfragmentDiv = safeFragment.appendChild( document.createElement(\"div\") );\n\nwrapMap.optgroup = wrapMap.option;\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\nfunction getAll( context, tag ) {\n\tvar elems, elem,\n\t\ti = 0,\n\t\tfound = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || \"*\" ) :\n\t\t\ttypeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || \"*\" ) :\n\t\t\tundefined;\n\n\tif ( !found ) {\n\t\tfor ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {\n\t\t\tif ( !tag || jQuery.nodeName( elem, tag ) ) {\n\t\t\t\tfound.push( elem );\n\t\t\t} else {\n\t\t\t\tjQuery.merge( found, getAll( elem, tag ) );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn tag === undefined || tag && jQuery.nodeName( context, tag ) ?\n\t\tjQuery.merge( [ context ], found ) :\n\t\tfound;\n}\n\n// Used in buildFragment, fixes the defaultChecked property\nfunction fixDefaultChecked( elem ) {\n\tif ( rcheckableType.test( elem.type ) ) {\n\t\telem.defaultChecked = elem.checked;\n\t}\n}\n\n// Support: IE<8\n// Manipulating tables requires a tbody\nfunction manipulationTarget( elem, content ) {\n\treturn jQuery.nodeName( elem, \"table\" ) &&\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ?\n\n\t\telem.getElementsByTagName(\"tbody\")[0] ||\n\t\t\telem.appendChild( elem.ownerDocument.createElement(\"tbody\") ) :\n\t\telem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = (jQuery.find.attr( elem, \"type\" ) !== null) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\tif ( match ) {\n\t\telem.type = match[1];\n\t} else {\n\t\telem.removeAttribute(\"type\");\n\t}\n\treturn elem;\n}\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar elem,\n\t\ti = 0;\n\tfor ( ; (elem = elems[i]) != null; i++ ) {\n\t\tjQuery._data( elem, \"globalEval\", !refElements || jQuery._data( refElements[i], \"globalEval\" ) );\n\t}\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\n\tif ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {\n\t\treturn;\n\t}\n\n\tvar type, i, l,\n\t\toldData = jQuery._data( src ),\n\t\tcurData = jQuery._data( dest, oldData ),\n\t\tevents = oldData.events;\n\n\tif ( events ) {\n\t\tdelete curData.handle;\n\t\tcurData.events = {};\n\n\t\tfor ( type in events ) {\n\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t// make the cloned public data object a copy from the original\n\tif ( curData.data ) {\n\t\tcurData.data = jQuery.extend( {}, curData.data );\n\t}\n}\n\nfunction fixCloneNodeIssues( src, dest ) {\n\tvar nodeName, e, data;\n\n\t// We do not need to do anything for non-Elements\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\tnodeName = dest.nodeName.toLowerCase();\n\n\t// IE6-8 copies events bound via attachEvent when using cloneNode.\n\tif ( !support.noCloneEvent && dest[ jQuery.expando ] ) {\n\t\tdata = jQuery._data( dest );\n\n\t\tfor ( e in data.events ) {\n\t\t\tjQuery.removeEvent( dest, e, data.handle );\n\t\t}\n\n\t\t// Event data gets referenced instead of copied if the expando gets copied too\n\t\tdest.removeAttribute( jQuery.expando );\n\t}\n\n\t// IE blanks contents when cloning scripts, and tries to evaluate newly-set text\n\tif ( nodeName === \"script\" && dest.text !== src.text ) {\n\t\tdisableScript( dest ).text = src.text;\n\t\trestoreScript( dest );\n\n\t// IE6-10 improperly clones children of object elements using classid.\n\t// IE10 throws NoModificationAllowedError if parent is null, #12132.\n\t} else if ( nodeName === \"object\" ) {\n\t\tif ( dest.parentNode ) {\n\t\t\tdest.outerHTML = src.outerHTML;\n\t\t}\n\n\t\t// This path appears unavoidable for IE9. When cloning an object\n\t\t// element in IE9, the outerHTML strategy above is not sufficient.\n\t\t// If the src has innerHTML and the destination does not,\n\t\t// copy the src.innerHTML into the dest.innerHTML. #10324\n\t\tif ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {\n\t\t\tdest.innerHTML = src.innerHTML;\n\t\t}\n\n\t} else if ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\t// IE6-8 fails to persist the checked state of a cloned checkbox\n\t\t// or radio button. Worse, IE6-7 fail to give the cloned element\n\t\t// a checked appearance if the defaultChecked value isn't also set\n\n\t\tdest.defaultChecked = dest.checked = src.checked;\n\n\t\t// IE6-7 get confused and end up setting the value of a cloned\n\t\t// checkbox/radio button to an empty string instead of \"on\"\n\t\tif ( dest.value !== src.value ) {\n\t\t\tdest.value = src.value;\n\t\t}\n\n\t// IE6-8 fails to return the selected option to the default selected\n\t// state when cloning options\n\t} else if ( nodeName === \"option\" ) {\n\t\tdest.defaultSelected = dest.selected = src.defaultSelected;\n\n\t// IE6-8 fails to set the defaultValue to the correct value when\n\t// cloning other types of input fields\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\njQuery.extend({\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar destElements, node, clone, i, srcElements,\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\tif ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( \"<\" + elem.nodeName + \">\" ) ) {\n\t\t\tclone = elem.cloneNode( true );\n\n\t\t// IE<=8 does not properly clone detached, unknown element nodes\n\t\t} else {\n\t\t\tfragmentDiv.innerHTML = elem.outerHTML;\n\t\t\tfragmentDiv.removeChild( clone = fragmentDiv.firstChild );\n\t\t}\n\n\t\tif ( (!support.noCloneEvent || !support.noCloneChecked) &&\n\t\t\t\t(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\t// Fix all IE cloning issues\n\t\t\tfor ( i = 0; (node = srcElements[i]) != null; ++i ) {\n\t\t\t\t// Ensure that the destination node is not null; Fixes #9587\n\t\t\t\tif ( destElements[i] ) {\n\t\t\t\t\tfixCloneNodeIssues( node, destElements[i] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0; (node = srcElements[i]) != null; i++ ) {\n\t\t\t\t\tcloneCopyEvent( node, destElements[i] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\tdestElements = srcElements = node = null;\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tbuildFragment: function( elems, context, scripts, selection ) {\n\t\tvar j, elem, contains,\n\t\t\ttmp, tag, tbody, wrap,\n\t\t\tl = elems.length,\n\n\t\t\t// Ensure a safe fragment\n\t\t\tsafe = createSafeFragment( context ),\n\n\t\t\tnodes = [],\n\t\t\ti = 0;\n\n\t\tfor ( ; i < l; i++ ) {\n\t\t\telem = elems[ i ];\n\n\t\t\tif ( elem || elem === 0 ) {\n\n\t\t\t\t// Add nodes directly\n\t\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\t\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t\t// Convert non-html into a text node\n\t\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t\t// Convert html into DOM nodes\n\t\t\t\t} else {\n\t\t\t\t\ttmp = tmp || safe.appendChild( context.createElement(\"div\") );\n\n\t\t\t\t\t// Deserialize a standard representation\n\t\t\t\t\ttag = (rtagName.exec( elem ) || [ \"\", \"\" ])[ 1 ].toLowerCase();\n\t\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\n\t\t\t\t\ttmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, \"<$1></$2>\" ) + wrap[2];\n\n\t\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\t\tj = wrap[0];\n\t\t\t\t\twhile ( j-- ) {\n\t\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Manually add leading whitespace removed by IE\n\t\t\t\t\tif ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {\n\t\t\t\t\t\tnodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove IE's autoinserted <tbody> from table fragments\n\t\t\t\t\tif ( !support.tbody ) {\n\n\t\t\t\t\t\t// String was a <table>, *may* have spurious <tbody>\n\t\t\t\t\t\telem = tag === \"table\" && !rtbody.test( elem ) ?\n\t\t\t\t\t\t\ttmp.firstChild :\n\n\t\t\t\t\t\t\t// String was a bare <thead> or <tfoot>\n\t\t\t\t\t\t\twrap[1] === \"<table>\" && !rtbody.test( elem ) ?\n\t\t\t\t\t\t\t\ttmp :\n\t\t\t\t\t\t\t\t0;\n\n\t\t\t\t\t\tj = elem && elem.childNodes.length;\n\t\t\t\t\t\twhile ( j-- ) {\n\t\t\t\t\t\t\tif ( jQuery.nodeName( (tbody = elem.childNodes[j]), \"tbody\" ) && !tbody.childNodes.length ) {\n\t\t\t\t\t\t\t\telem.removeChild( tbody );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t\t// Fix #12392 for WebKit and IE > 9\n\t\t\t\t\ttmp.textContent = \"\";\n\n\t\t\t\t\t// Fix #12392 for oldIE\n\t\t\t\t\twhile ( tmp.firstChild ) {\n\t\t\t\t\t\ttmp.removeChild( tmp.firstChild );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remember the top-level container for proper cleanup\n\t\t\t\t\ttmp = safe.lastChild;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fix #11356: Clear elements from fragment\n\t\tif ( tmp ) {\n\t\t\tsafe.removeChild( tmp );\n\t\t}\n\n\t\t// Reset defaultChecked for any radios and checkboxes\n\t\t// about to be appended to the DOM in IE 6/7 (#8060)\n\t\tif ( !support.appendChecked ) {\n\t\t\tjQuery.grep( getAll( nodes, \"input\" ), fixDefaultChecked );\n\t\t}\n\n\t\ti = 0;\n\t\twhile ( (elem = nodes[ i++ ]) ) {\n\n\t\t\t// #4087 - If origin and destination elements are the same, and this is\n\t\t\t// that element, do not do anything\n\t\t\tif ( selection && jQuery.inArray( elem, selection ) !== -1 ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t\t// Append to fragment\n\t\t\ttmp = getAll( safe.appendChild( elem ), \"script\" );\n\n\t\t\t// Preserve script evaluation history\n\t\t\tif ( contains ) {\n\t\t\t\tsetGlobalEval( tmp );\n\t\t\t}\n\n\t\t\t// Capture executables\n\t\t\tif ( scripts ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (elem = tmp[ j++ ]) ) {\n\t\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\t\tscripts.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttmp = null;\n\n\t\treturn safe;\n\t},\n\n\tcleanData: function( elems, /* internal */ acceptData ) {\n\t\tvar elem, type, id, data,\n\t\t\ti = 0,\n\t\t\tinternalKey = jQuery.expando,\n\t\t\tcache = jQuery.cache,\n\t\t\tdeleteExpando = support.deleteExpando,\n\t\t\tspecial = jQuery.event.special;\n\n\t\tfor ( ; (elem = elems[i]) != null; i++ ) {\n\t\t\tif ( acceptData || jQuery.acceptData( elem ) ) {\n\n\t\t\t\tid = elem[ internalKey ];\n\t\t\t\tdata = id && cache[ id ];\n\n\t\t\t\tif ( data ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove cache only if it was not already removed by jQuery.event.remove\n\t\t\t\t\tif ( cache[ id ] ) {\n\n\t\t\t\t\t\tdelete cache[ id ];\n\n\t\t\t\t\t\t// IE does not allow us to delete expando properties from nodes,\n\t\t\t\t\t\t// nor does it have a removeAttribute function on Document nodes;\n\t\t\t\t\t\t// we must handle all of these cases\n\t\t\t\t\t\tif ( deleteExpando ) {\n\t\t\t\t\t\t\tdelete elem[ internalKey ];\n\n\t\t\t\t\t\t} else if ( typeof elem.removeAttribute !== strundefined ) {\n\t\t\t\t\t\t\telem.removeAttribute( internalKey );\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telem[ internalKey ] = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdeletedIds.push( id );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\njQuery.fn.extend({\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn this.domManip( arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t});\n\t},\n\n\tprepend: function() {\n\t\treturn this.domManip( arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t});\n\t},\n\n\tbefore: function() {\n\t\treturn this.domManip( arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t});\n\t},\n\n\tafter: function() {\n\t\treturn this.domManip( arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t});\n\t},\n\n\tremove: function( selector, keepData /* Internal Use Only */ ) {\n\t\tvar elem,\n\t\t\telems = selector ? jQuery.filter( selector, this ) : this,\n\t\t\ti = 0;\n\n\t\tfor ( ; (elem = elems[i]) != null; i++ ) {\n\n\t\t\tif ( !keepData && elem.nodeType === 1 ) {\n\t\t\t\tjQuery.cleanData( getAll( elem ) );\n\t\t\t}\n\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\tif ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\t\t\tsetGlobalEval( getAll( elem, \"script\" ) );\n\t\t\t\t}\n\t\t\t\telem.parentNode.removeChild( elem );\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; (elem = this[i]) != null; i++ ) {\n\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t}\n\n\t\t\t// Remove any remaining nodes\n\t\t\twhile ( elem.firstChild ) {\n\t\t\t\telem.removeChild( elem.firstChild );\n\t\t\t}\n\n\t\t\t// If this is a select, ensure that it displays empty (#12336)\n\t\t\t// Support: IE<9\n\t\t\tif ( elem.options && jQuery.nodeName( elem, \"select\" ) ) {\n\t\t\t\telem.options.length = 0;\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map(function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t});\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined ) {\n\t\t\t\treturn elem.nodeType === 1 ?\n\t\t\t\t\telem.innerHTML.replace( rinlinejQuery, \"\" ) :\n\t\t\t\t\tundefined;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t( support.htmlSerialize || !rnoshimcache.test( value )  ) &&\n\t\t\t\t( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&\n\t\t\t\t!wrapMap[ (rtagName.exec( value ) || [ \"\", \"\" ])[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = value.replace( rxhtmlTag, \"<$1></$2>\" );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (; i < l; i++ ) {\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\telem = this[i] || {};\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch(e) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar arg = arguments[ 0 ];\n\n\t\t// Make the changes, replacing each context element with the new content\n\t\tthis.domManip( arguments, function( elem ) {\n\t\t\targ = this.parentNode;\n\n\t\t\tjQuery.cleanData( getAll( this ) );\n\n\t\t\tif ( arg ) {\n\t\t\t\targ.replaceChild( elem, this );\n\t\t\t}\n\t\t});\n\n\t\t// Force removal if there was no new content (e.g., from empty arguments)\n\t\treturn arg && (arg.length || arg.nodeType) ? this : this.remove();\n\t},\n\n\tdetach: function( selector ) {\n\t\treturn this.remove( selector, true );\n\t},\n\n\tdomManip: function( args, callback ) {\n\n\t\t// Flatten any nested arrays\n\t\targs = concat.apply( [], args );\n\n\t\tvar first, node, hasScripts,\n\t\t\tscripts, doc, fragment,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tset = this,\n\t\t\tiNoClone = l - 1,\n\t\t\tvalue = args[0],\n\t\t\tisFunction = jQuery.isFunction( value );\n\n\t\t// We can't cloneNode fragments that contain checked, in WebKit\n\t\tif ( isFunction ||\n\t\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\t\treturn this.each(function( index ) {\n\t\t\t\tvar self = set.eq( index );\n\t\t\t\tif ( isFunction ) {\n\t\t\t\t\targs[0] = value.call( this, index, self.html() );\n\t\t\t\t}\n\t\t\t\tself.domManip( args, callback );\n\t\t\t});\n\t\t}\n\n\t\tif ( l ) {\n\t\t\tfragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );\n\t\t\tfirst = fragment.firstChild;\n\n\t\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\t\tfragment = first;\n\t\t\t}\n\n\t\t\tif ( first ) {\n\t\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\t\thasScripts = scripts.length;\n\n\t\t\t\t// Use the original fragment for the last item instead of the first because it can end up\n\t\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\tnode = fragment;\n\n\t\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\t\tif ( hasScripts ) {\n\t\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcallback.call( this[i], node, i );\n\t\t\t\t}\n\n\t\t\t\tif ( hasScripts ) {\n\t\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t\t// Reenable scripts\n\t\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t\t!jQuery._data( node, \"globalEval\" ) && jQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\t\tif ( node.src ) {\n\t\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.globalEval( ( node.text || node.textContent || node.innerHTML || \"\" ).replace( rcleanScript, \"\" ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Fix #11809: Avoid leaking memory\n\t\t\t\tfragment = first = null;\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n});\n\njQuery.each({\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\ti = 0,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone(true);\n\t\t\tjQuery( insert[i] )[ original ]( elems );\n\n\t\t\t// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n});\n\n\nvar iframe,\n\telemdisplay = {};\n\n/**\n * Retrieve the actual display of a element\n * @param {String} name nodeName of the element\n * @param {Object} doc Document object\n */\n// Called only from within defaultDisplay\nfunction actualDisplay( name, doc ) {\n\tvar style,\n\t\telem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\n\n\t\t// getDefaultComputedStyle might be reliably used only on attached element\n\t\tdisplay = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?\n\n\t\t\t// Use of this method is a temporary fix (more like optmization) until something better comes along,\n\t\t\t// since it was removed from specification and supported only in FF\n\t\t\tstyle.display : jQuery.css( elem[ 0 ], \"display\" );\n\n\t// We don't have any data stored on the element,\n\t// so use \"detach\" method as fast way to get rid of the element\n\telem.detach();\n\n\treturn display;\n}\n\n/**\n * Try to determine the default display value of an element\n * @param {String} nodeName\n */\nfunction defaultDisplay( nodeName ) {\n\tvar doc = document,\n\t\tdisplay = elemdisplay[ nodeName ];\n\n\tif ( !display ) {\n\t\tdisplay = actualDisplay( nodeName, doc );\n\n\t\t// If the simple way fails, read from inside an iframe\n\t\tif ( display === \"none\" || !display ) {\n\n\t\t\t// Use the already-created iframe if possible\n\t\t\tiframe = (iframe || jQuery( \"<iframe frameborder='0' width='0' height='0'/>\" )).appendTo( doc.documentElement );\n\n\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\t\t\tdoc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;\n\n\t\t\t// Support: IE\n\t\t\tdoc.write();\n\t\t\tdoc.close();\n\n\t\t\tdisplay = actualDisplay( nodeName, doc );\n\t\t\tiframe.detach();\n\t\t}\n\n\t\t// Store the correct default display\n\t\telemdisplay[ nodeName ] = display;\n\t}\n\n\treturn display;\n}\n\n\n(function() {\n\tvar shrinkWrapBlocksVal;\n\n\tsupport.shrinkWrapBlocks = function() {\n\t\tif ( shrinkWrapBlocksVal != null ) {\n\t\t\treturn shrinkWrapBlocksVal;\n\t\t}\n\n\t\t// Will be changed later if needed.\n\t\tshrinkWrapBlocksVal = false;\n\n\t\t// Minified: var b,c,d\n\t\tvar div, body, container;\n\n\t\tbody = document.getElementsByTagName( \"body\" )[ 0 ];\n\t\tif ( !body || !body.style ) {\n\t\t\t// Test fired too early or in an unsupported environment, exit.\n\t\t\treturn;\n\t\t}\n\n\t\t// Setup\n\t\tdiv = document.createElement( \"div\" );\n\t\tcontainer = document.createElement( \"div\" );\n\t\tcontainer.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\";\n\t\tbody.appendChild( container ).appendChild( div );\n\n\t\t// Support: IE6\n\t\t// Check if elements with layout shrink-wrap their children\n\t\tif ( typeof div.style.zoom !== strundefined ) {\n\t\t\t// Reset CSS: box-sizing; display; margin; border\n\t\t\tdiv.style.cssText =\n\t\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t\t// Vendor-prefix box-sizing\n\t\t\t\t\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\" +\n\t\t\t\t\"box-sizing:content-box;display:block;margin:0;border:0;\" +\n\t\t\t\t\"padding:1px;width:1px;zoom:1\";\n\t\t\tdiv.appendChild( document.createElement( \"div\" ) ).style.width = \"5px\";\n\t\t\tshrinkWrapBlocksVal = div.offsetWidth !== 3;\n\t\t}\n\n\t\tbody.removeChild( container );\n\n\t\treturn shrinkWrapBlocksVal;\n\t};\n\n})();\nvar rmargin = (/^margin/);\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\n\n\nvar getStyles, curCSS,\n\trposition = /^(top|right|bottom|left)$/;\n\nif ( window.getComputedStyle ) {\n\tgetStyles = function( elem ) {\n\t\t// Support: IE<=11+, Firefox<=30+ (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tif ( elem.ownerDocument.defaultView.opener ) {\n\t\t\treturn elem.ownerDocument.defaultView.getComputedStyle( elem, null );\n\t\t}\n\n\t\treturn window.getComputedStyle( elem, null );\n\t};\n\n\tcurCSS = function( elem, name, computed ) {\n\t\tvar width, minWidth, maxWidth, ret,\n\t\t\tstyle = elem.style;\n\n\t\tcomputed = computed || getStyles( elem );\n\n\t\t// getPropertyValue is only needed for .css('filter') in IE9, see #12537\n\t\tret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;\n\n\t\tif ( computed ) {\n\n\t\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\t\tret = jQuery.style( elem, name );\n\t\t\t}\n\n\t\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t\t// Chrome < 17 and Safari 5.0 uses \"computed value\" instead of \"used value\" for margin-right\n\t\t\t// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels\n\t\t\t// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values\n\t\t\tif ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t\t// Remember the original values\n\t\t\t\twidth = style.width;\n\t\t\t\tminWidth = style.minWidth;\n\t\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t\t// Put in the new values to get a computed value out\n\t\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\t\tret = computed.width;\n\n\t\t\t\t// Revert the changed values\n\t\t\t\tstyle.width = width;\n\t\t\t\tstyle.minWidth = minWidth;\n\t\t\t\tstyle.maxWidth = maxWidth;\n\t\t\t}\n\t\t}\n\n\t\t// Support: IE\n\t\t// IE returns zIndex value as an integer.\n\t\treturn ret === undefined ?\n\t\t\tret :\n\t\t\tret + \"\";\n\t};\n} else if ( document.documentElement.currentStyle ) {\n\tgetStyles = function( elem ) {\n\t\treturn elem.currentStyle;\n\t};\n\n\tcurCSS = function( elem, name, computed ) {\n\t\tvar left, rs, rsLeft, ret,\n\t\t\tstyle = elem.style;\n\n\t\tcomputed = computed || getStyles( elem );\n\t\tret = computed ? computed[ name ] : undefined;\n\n\t\t// Avoid setting ret to empty string here\n\t\t// so we don't default to auto\n\t\tif ( ret == null && style && style[ name ] ) {\n\t\t\tret = style[ name ];\n\t\t}\n\n\t\t// From the awesome hack by Dean Edwards\n\t\t// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291\n\n\t\t// If we're not dealing with a regular pixel number\n\t\t// but a number that has a weird ending, we need to convert it to pixels\n\t\t// but not position css attributes, as those are proportional to the parent element instead\n\t\t// and we can't measure the parent instead because it might trigger a \"stacking dolls\" problem\n\t\tif ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\tleft = style.left;\n\t\t\trs = elem.runtimeStyle;\n\t\t\trsLeft = rs && rs.left;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tif ( rsLeft ) {\n\t\t\t\trs.left = elem.currentStyle.left;\n\t\t\t}\n\t\t\tstyle.left = name === \"fontSize\" ? \"1em\" : ret;\n\t\t\tret = style.pixelLeft + \"px\";\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.left = left;\n\t\t\tif ( rsLeft ) {\n\t\t\t\trs.left = rsLeft;\n\t\t\t}\n\t\t}\n\n\t\t// Support: IE\n\t\t// IE returns zIndex value as an integer.\n\t\treturn ret === undefined ?\n\t\t\tret :\n\t\t\tret + \"\" || \"auto\";\n\t};\n}\n\n\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tvar condition = conditionFn();\n\n\t\t\tif ( condition == null ) {\n\t\t\t\t// The test was not ready at this point; screw the hook this time\n\t\t\t\t// but check again when needed next time.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( condition ) {\n\t\t\t\t// Hook not needed (or it's not possible to use it due to missing dependency),\n\t\t\t\t// remove it.\n\t\t\t\t// Since there are no other hooks for marginRight, remove the whole object.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\n\t\t\treturn (this.get = hookFn).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\n(function() {\n\t// Minified: var b,c,d,e,f,g, h,i\n\tvar div, style, a, pixelPositionVal, boxSizingReliableVal,\n\t\treliableHiddenOffsetsVal, reliableMarginRightVal;\n\n\t// Setup\n\tdiv = document.createElement( \"div\" );\n\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\n\ta = div.getElementsByTagName( \"a\" )[ 0 ];\n\tstyle = a && a.style;\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !style ) {\n\t\treturn;\n\t}\n\n\tstyle.cssText = \"float:left;opacity:.5\";\n\n\t// Support: IE<9\n\t// Make sure that element opacity exists (as opposed to filter)\n\tsupport.opacity = style.opacity === \"0.5\";\n\n\t// Verify style float existence\n\t// (IE uses styleFloat instead of cssFloat)\n\tsupport.cssFloat = !!style.cssFloat;\n\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\t// Support: Firefox<29, Android 2.3\n\t// Vendor-prefix box-sizing\n\tsupport.boxSizing = style.boxSizing === \"\" || style.MozBoxSizing === \"\" ||\n\t\tstyle.WebkitBoxSizing === \"\";\n\n\tjQuery.extend(support, {\n\t\treliableHiddenOffsets: function() {\n\t\t\tif ( reliableHiddenOffsetsVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn reliableHiddenOffsetsVal;\n\t\t},\n\n\t\tboxSizingReliable: function() {\n\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\n\t\tpixelPosition: function() {\n\t\t\tif ( pixelPositionVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn pixelPositionVal;\n\t\t},\n\n\t\t// Support: Android 2.3\n\t\treliableMarginRight: function() {\n\t\t\tif ( reliableMarginRightVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn reliableMarginRightVal;\n\t\t}\n\t});\n\n\tfunction computeStyleTests() {\n\t\t// Minified: var b,c,d,j\n\t\tvar div, body, container, contents;\n\n\t\tbody = document.getElementsByTagName( \"body\" )[ 0 ];\n\t\tif ( !body || !body.style ) {\n\t\t\t// Test fired too early or in an unsupported environment, exit.\n\t\t\treturn;\n\t\t}\n\n\t\t// Setup\n\t\tdiv = document.createElement( \"div\" );\n\t\tcontainer = document.createElement( \"div\" );\n\t\tcontainer.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\";\n\t\tbody.appendChild( container ).appendChild( div );\n\n\t\tdiv.style.cssText =\n\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t// Vendor-prefix box-sizing\n\t\t\t\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;\" +\n\t\t\t\"box-sizing:border-box;display:block;margin-top:1%;top:1%;\" +\n\t\t\t\"border:1px;padding:1px;width:4px;position:absolute\";\n\n\t\t// Support: IE<9\n\t\t// Assume reasonable values in the absence of getComputedStyle\n\t\tpixelPositionVal = boxSizingReliableVal = false;\n\t\treliableMarginRightVal = true;\n\n\t\t// Check for getComputedStyle so that this code is not run in IE<9.\n\t\tif ( window.getComputedStyle ) {\n\t\t\tpixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== \"1%\";\n\t\t\tboxSizingReliableVal =\n\t\t\t\t( window.getComputedStyle( div, null ) || { width: \"4px\" } ).width === \"4px\";\n\n\t\t\t// Support: Android 2.3\n\t\t\t// Div with explicit width and no margin-right incorrectly\n\t\t\t// gets computed margin-right based on width of container (#3333)\n\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\tcontents = div.appendChild( document.createElement( \"div\" ) );\n\n\t\t\t// Reset CSS: box-sizing; display; margin; border; padding\n\t\t\tcontents.style.cssText = div.style.cssText =\n\t\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t\t// Vendor-prefix box-sizing\n\t\t\t\t\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\" +\n\t\t\t\t\"box-sizing:content-box;display:block;margin:0;border:0;padding:0\";\n\t\t\tcontents.style.marginRight = contents.style.width = \"0\";\n\t\t\tdiv.style.width = \"1px\";\n\n\t\t\treliableMarginRightVal =\n\t\t\t\t!parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );\n\n\t\t\tdiv.removeChild( contents );\n\t\t}\n\n\t\t// Support: IE8\n\t\t// Check if table cells still have offsetWidth/Height when they are set\n\t\t// to display:none and there are still other visible table cells in a\n\t\t// table row; if so, offsetWidth/Height are not reliable for use when\n\t\t// determining if an element has been hidden directly using\n\t\t// display:none (it is still safe to use offsets if a parent element is\n\t\t// hidden; don safety goggles and see bug #4512 for more information).\n\t\tdiv.innerHTML = \"<table><tr><td></td><td>t</td></tr></table>\";\n\t\tcontents = div.getElementsByTagName( \"td\" );\n\t\tcontents[ 0 ].style.cssText = \"margin:0;border:0;padding:0;display:none\";\n\t\treliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;\n\t\tif ( reliableHiddenOffsetsVal ) {\n\t\t\tcontents[ 0 ].style.display = \"\";\n\t\t\tcontents[ 1 ].style.display = \"none\";\n\t\t\treliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;\n\t\t}\n\n\t\tbody.removeChild( container );\n\t}\n\n})();\n\n\n// A method for quickly swapping in/out CSS properties to get correct calculations.\njQuery.swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar\n\t\tralpha = /alpha\\([^)]*\\)/i,\n\tropacity = /opacity\\s*=\\s*([^)]*)/,\n\n\t// swappable if display is none or starts with table except \"table\", \"table-cell\", or \"table-caption\"\n\t// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trnumsplit = new RegExp( \"^(\" + pnum + \")(.*)$\", \"i\" ),\n\trrelNum = new RegExp( \"^([+-])=(\" + pnum + \")\", \"i\" ),\n\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"O\", \"Moz\", \"ms\" ];\n\n\n// return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( style, name ) {\n\n\t// shortcut for names that are not vendor prefixed\n\tif ( name in style ) {\n\t\treturn name;\n\t}\n\n\t// check for vendor prefixed names\n\tvar capName = name.charAt(0).toUpperCase() + name.slice(1),\n\t\torigName = name,\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in style ) {\n\t\t\treturn name;\n\t\t}\n\t}\n\n\treturn origName;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem, hidden,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalues[ index ] = jQuery._data( elem, \"olddisplay\" );\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\t\t\t// Reset the inline display of this element to learn if it is\n\t\t\t// being hidden by cascaded rules or not\n\t\t\tif ( !values[ index ] && display === \"none\" ) {\n\t\t\t\telem.style.display = \"\";\n\t\t\t}\n\n\t\t\t// Set elements which have been overridden with display: none\n\t\t\t// in a stylesheet to whatever the default browser style is\n\t\t\t// for such an element\n\t\t\tif ( elem.style.display === \"\" && isHidden( elem ) ) {\n\t\t\t\tvalues[ index ] = jQuery._data( elem, \"olddisplay\", defaultDisplay(elem.nodeName) );\n\t\t\t}\n\t\t} else {\n\t\t\thidden = isHidden( elem );\n\n\t\t\tif ( display && display !== \"none\" || !hidden ) {\n\t\t\t\tjQuery._data( elem, \"olddisplay\", hidden ? display : jQuery.css( elem, \"display\" ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of most of the elements in a second loop\n\t// to avoid the constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( !show || elem.style.display === \"none\" || elem.style.display === \"\" ) {\n\t\t\telem.style.display = show ? values[ index ] || \"\" : \"none\";\n\t\t}\n\t}\n\n\treturn elements;\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\tvar matches = rnumsplit.exec( value );\n\treturn matches ?\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i = extra === ( isBorderBox ? \"border\" : \"content\" ) ?\n\t\t// If we already have the right measurement, avoid augmentation\n\t\t4 :\n\t\t// Otherwise initialize for horizontal or vertical properties\n\t\tname === \"width\" ? 1 : 0,\n\n\t\tval = 0;\n\n\tfor ( ; i < 4; i += 2 ) {\n\t\t// both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// at this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\t\t\t// at this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// at this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with offset property, which is equivalent to the border-box value\n\tvar valueIsBorderBox = true,\n\t\tval = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n\t\tstyles = getStyles( elem ),\n\t\tisBorderBox = support.boxSizing && jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\tif ( val <= 0 || val == null ) {\n\t\t// Fall back to computed then uncomputed css if necessary\n\t\tval = curCSS( elem, name, styles );\n\t\tif ( val < 0 || val == null ) {\n\t\t\tval = elem.style[ name ];\n\t\t}\n\n\t\t// Computed unit is not pixels. Stop here and return.\n\t\tif ( rnumnonpx.test(val) ) {\n\t\t\treturn val;\n\t\t}\n\n\t\t// we need the check for style in case a browser which returns unreliable values\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\tvalueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t\t// Normalize \"\", auto, and prepare for extra\n\t\tval = parseFloat( val ) || 0;\n\t}\n\n\t// use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend({\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t// normalize float css property\n\t\t\"float\": support.cssFloat ? \"cssFloat\" : \"styleFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tstyle = elem.style;\n\n\t\tname = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );\n\n\t\t// gets hook for the prefixed version\n\t\t// followed by the unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// convert relative number strings (+= or -=) to relative numbers. #7345\n\t\t\tif ( type === \"string\" && (ret = rrelNum.exec( value )) ) {\n\t\t\t\tvalue = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set. See: #7116\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add 'px' to the (except for certain CSS properties)\n\t\t\tif ( type === \"number\" && !jQuery.cssNumber[ origName ] ) {\n\t\t\t\tvalue += \"px\";\n\t\t\t}\n\n\t\t\t// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,\n\t\t\t// but it would mean to define eight (for every problematic property) identical functions\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !(\"set\" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {\n\n\t\t\t\t// Support: IE\n\t\t\t\t// Swallow errors from 'invalid' CSS values (#5509)\n\t\t\t\ttry {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t} catch(e) {}\n\t\t\t}\n\n\t\t} else {\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar num, val, hooks,\n\t\t\torigName = jQuery.camelCase( name );\n\n\t\t// Make sure that we're working with the right name\n\t\tname = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );\n\n\t\t// gets hook for the prefixed version\n\t\t// followed by the unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t//convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Return, converting to number if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || jQuery.isNumeric( num ) ? num || 0 : val;\n\t\t}\n\t\treturn val;\n\t}\n});\n\njQuery.each([ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\t\t\t\t// certain elements can have dimension info if we invisibly show them\n\t\t\t\t// however, it must have a current display style that would benefit from this\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) && elem.offsetWidth === 0 ?\n\t\t\t\t\tjQuery.swap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t}) :\n\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar styles = extra && getStyles( elem );\n\t\t\treturn setPositiveNumber( elem, value, extra ?\n\t\t\t\taugmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tsupport.boxSizing && jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t) : 0\n\t\t\t);\n\t\t}\n\t};\n});\n\nif ( !support.opacity ) {\n\tjQuery.cssHooks.opacity = {\n\t\tget: function( elem, computed ) {\n\t\t\t// IE uses filters for opacity\n\t\t\treturn ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || \"\" ) ?\n\t\t\t\t( 0.01 * parseFloat( RegExp.$1 ) ) + \"\" :\n\t\t\t\tcomputed ? \"1\" : \"\";\n\t\t},\n\n\t\tset: function( elem, value ) {\n\t\t\tvar style = elem.style,\n\t\t\t\tcurrentStyle = elem.currentStyle,\n\t\t\t\topacity = jQuery.isNumeric( value ) ? \"alpha(opacity=\" + value * 100 + \")\" : \"\",\n\t\t\t\tfilter = currentStyle && currentStyle.filter || style.filter || \"\";\n\n\t\t\t// IE has trouble with opacity if it does not have layout\n\t\t\t// Force it by setting the zoom level\n\t\t\tstyle.zoom = 1;\n\n\t\t\t// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652\n\t\t\t// if value === \"\", then remove inline opacity #12685\n\t\t\tif ( ( value >= 1 || value === \"\" ) &&\n\t\t\t\t\tjQuery.trim( filter.replace( ralpha, \"\" ) ) === \"\" &&\n\t\t\t\t\tstyle.removeAttribute ) {\n\n\t\t\t\t// Setting style.filter to null, \"\" & \" \" still leave \"filter:\" in the cssText\n\t\t\t\t// if \"filter:\" is present at all, clearType is disabled, we want to avoid this\n\t\t\t\t// style.removeAttribute is IE Only, but so apparently is this code path...\n\t\t\t\tstyle.removeAttribute( \"filter\" );\n\n\t\t\t\t// if there is no filter style applied in a css rule or unset inline opacity, we are done\n\t\t\t\tif ( value === \"\" || currentStyle && !currentStyle.filter ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// otherwise, set new filter values\n\t\t\tstyle.filter = ralpha.test( filter ) ?\n\t\t\t\tfilter.replace( ralpha, opacity ) :\n\t\t\t\tfilter + \" \" + opacity;\n\t\t}\n\t};\n}\n\njQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\t// Work around by temporarily setting element display to inline-block\n\t\t\treturn jQuery.swap( elem, { \"display\": \"inline-block\" },\n\t\t\t\tcurCSS, [ elem, \"marginRight\" ] );\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each({\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split(\" \") : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n});\n\njQuery.fn.extend({\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( jQuery.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t},\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each(function() {\n\t\t\tif ( isHidden( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t});\n\t}\n});\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || \"swing\";\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\tif ( tween.elem[ tween.prop ] != null &&\n\t\t\t\t(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails\n\t\t\t// so, simple values such as \"10px\" are parsed to Float.\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\t\t\t// use step hook for back compat - use cssHook if its there - use .style if its\n\t\t\t// available and use plain properties where available\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9\n// Panic based approach to setting things on disconnected nodes\n\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t}\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back Compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, timerId,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trfxnum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" ),\n\trrun = /queueHooks$/,\n\tanimationPrefilters = [ defaultPrefilter ],\n\ttweeners = {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value ),\n\t\t\t\ttarget = tween.cur(),\n\t\t\t\tparts = rfxnum.exec( value ),\n\t\t\t\tunit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t\t\t// Starting value computation is required for potential unit mismatches\n\t\t\t\tstart = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +target ) &&\n\t\t\t\t\trfxnum.exec( jQuery.css( tween.elem, prop ) ),\n\t\t\t\tscale = 1,\n\t\t\t\tmaxIterations = 20;\n\n\t\t\tif ( start && start[ 3 ] !== unit ) {\n\t\t\t\t// Trust units reported by jQuery.css\n\t\t\t\tunit = unit || start[ 3 ];\n\n\t\t\t\t// Make sure we update the tween properties later on\n\t\t\t\tparts = parts || [];\n\n\t\t\t\t// Iteratively approximate from a nonzero starting point\n\t\t\t\tstart = +target || 1;\n\n\t\t\t\tdo {\n\t\t\t\t\t// If previous iteration zeroed out, double until we get *something*\n\t\t\t\t\t// Use a string for doubling factor so we don't accidentally see scale as unchanged below\n\t\t\t\t\tscale = scale || \".5\";\n\n\t\t\t\t\t// Adjust and apply\n\t\t\t\t\tstart = start / scale;\n\t\t\t\t\tjQuery.style( tween.elem, prop, start + unit );\n\n\t\t\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t\t\t// And breaking the loop if scale is unchanged or perfect, or if we've just had enough\n\t\t\t\t} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );\n\t\t\t}\n\n\t\t\t// Update tween properties\n\t\t\tif ( parts ) {\n\t\t\t\tstart = tween.start = +start || +target || 0;\n\t\t\t\ttween.unit = unit;\n\t\t\t\t// If a +=/-= token was provided, we're doing a relative animation\n\t\t\t\ttween.end = parts[ 1 ] ?\n\t\t\t\t\tstart + ( parts[ 1 ] + 1 ) * parts[ 2 ] :\n\t\t\t\t\t+parts[ 2 ];\n\t\t\t}\n\n\t\t\treturn tween;\n\t\t} ]\n\t};\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\tsetTimeout(function() {\n\t\tfxNow = undefined;\n\t});\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\tattrs = { height: type },\n\t\ti = 0;\n\n\t// if we include width, step value is 1 to do all cssExpand values,\n\t// if we don't include width, step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4 ; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( tweeners[ prop ] || [] ).concat( tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( (tween = collection[ index ].call( animation, prop, value )) ) {\n\n\t\t\t// we're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\t/* jshint validthis: true */\n\tvar prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHidden( elem ),\n\t\tdataShow = jQuery._data( elem, \"fxshow\" );\n\n\t// handle queue: false promises\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always(function() {\n\t\t\t// doing this makes sure that the complete handler will be called\n\t\t\t// before this completes\n\t\t\tanim.always(function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t// height/width overflow pass\n\tif ( elem.nodeType === 1 && ( \"height\" in props || \"width\" in props ) ) {\n\t\t// Make sure that nothing sneaks out\n\t\t// Record all 3 overflow attributes because IE does not\n\t\t// change the overflow attribute when overflowX and\n\t\t// overflowY are set to the same value\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Set display property to inline-block for height/width\n\t\t// animations on inline elements that are having width/height animated\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\n\t\t// Test default display if display is currently \"none\"\n\t\tcheckDisplay = display === \"none\" ?\n\t\t\tjQuery._data( elem, \"olddisplay\" ) || defaultDisplay( elem.nodeName ) : display;\n\n\t\tif ( checkDisplay === \"inline\" && jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t// inline-level elements accept inline-block;\n\t\t\t// block-level elements need to be inline with layout\n\t\t\tif ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === \"inline\" ) {\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t} else {\n\t\t\t\tstyle.zoom = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tif ( !support.shrinkWrapBlocks() ) {\n\t\t\tanim.always(function() {\n\t\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t\t});\n\t\t}\n\t}\n\n\t// show/hide pass\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.exec( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\n\t\t// Any non-fx value stops us from restoring the original display value\n\t\t} else {\n\t\t\tdisplay = undefined;\n\t\t}\n\t}\n\n\tif ( !jQuery.isEmptyObject( orig ) ) {\n\t\tif ( dataShow ) {\n\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\thidden = dataShow.hidden;\n\t\t\t}\n\t\t} else {\n\t\t\tdataShow = jQuery._data( elem, \"fxshow\", {} );\n\t\t}\n\n\t\t// store state if its toggle - enables .stop().toggle() to \"reverse\"\n\t\tif ( toggle ) {\n\t\t\tdataShow.hidden = !hidden;\n\t\t}\n\t\tif ( hidden ) {\n\t\t\tjQuery( elem ).show();\n\t\t} else {\n\t\t\tanim.done(function() {\n\t\t\t\tjQuery( elem ).hide();\n\t\t\t});\n\t\t}\n\t\tanim.done(function() {\n\t\t\tvar prop;\n\t\t\tjQuery._removeData( elem, \"fxshow\" );\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t}\n\t\t});\n\t\tfor ( prop in orig ) {\n\t\t\ttween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\n\t\t\tif ( !( prop in dataShow ) ) {\n\t\t\t\tdataShow[ prop ] = tween.start;\n\t\t\t\tif ( hidden ) {\n\t\t\t\t\ttween.end = tween.start;\n\t\t\t\t\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t// If this is a noop like .hide().hide(), restore an overwritten display value\n\t} else if ( (display === \"none\" ? defaultDisplay( elem.nodeName ) : display) === \"inline\" ) {\n\t\tstyle.display = display;\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( jQuery.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// not quite $.extend, this wont overwrite keys already present.\n\t\t\t// also - reusing 'index' from above because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = animationPrefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\t\t\t// don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t}),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\t\t\t\t// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ]);\n\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tanimation = deferred.promise({\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, { specialEasing: {} }, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\t\t\t\t\t// if we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// resolve when we played the last frame\n\t\t\t\t// otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length ; index++ ) {\n\t\tresult = animationPrefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t})\n\t);\n\n\t// attach callbacks from options\n\treturn animation.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.split(\" \");\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length ; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\ttweeners[ prop ] = tweeners[ prop ] || [];\n\t\t\ttweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tanimationPrefilters.unshift( callback );\n\t\t} else {\n\t\t\tanimationPrefilters.push( callback );\n\t\t}\n\t}\n});\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration :\n\t\topt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;\n\n\t// normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend({\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHidden ).css( \"opacity\", 0 ).show()\n\n\t\t\t// animate to the value specified\n\t\t\t.end().animate({ opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || jQuery._data( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each(function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = jQuery._data( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// start the next in the queue if the last step wasn't forced\n\t\t\t// timers currently will call their complete callbacks, which will dequeue\n\t\t\t// but only if they were gotoEnd\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t});\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each(function() {\n\t\t\tvar index,\n\t\t\t\tdata = jQuery._data( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t});\n\t}\n});\n\njQuery.each([ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n});\n\n// Generate shortcuts for custom animations\njQuery.each({\n\tslideDown: genFx(\"show\"),\n\tslideUp: genFx(\"hide\"),\n\tslideToggle: genFx(\"toggle\"),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n});\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ttimers = jQuery.timers,\n\t\ti = 0;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\t\t// Checks the timer has not already been removed\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tif ( timer() ) {\n\t\tjQuery.fx.start();\n\t} else {\n\t\tjQuery.timers.pop();\n\t}\n};\n\njQuery.fx.interval = 13;\n\njQuery.fx.start = function() {\n\tif ( !timerId ) {\n\t\ttimerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );\n\t}\n};\n\njQuery.fx.stop = function() {\n\tclearInterval( timerId );\n\ttimerId = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\tclearTimeout( timeout );\n\t\t};\n\t});\n};\n\n\n(function() {\n\t// Minified: var a,b,c,d,e\n\tvar input, div, select, a, opt;\n\n\t// Setup\n\tdiv = document.createElement( \"div\" );\n\tdiv.setAttribute( \"className\", \"t\" );\n\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\n\ta = div.getElementsByTagName(\"a\")[ 0 ];\n\n\t// First batch of tests.\n\tselect = document.createElement(\"select\");\n\topt = select.appendChild( document.createElement(\"option\") );\n\tinput = div.getElementsByTagName(\"input\")[ 0 ];\n\n\ta.style.cssText = \"top:1px\";\n\n\t// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)\n\tsupport.getSetAttribute = div.className !== \"t\";\n\n\t// Get the style information from getAttribute\n\t// (IE uses .cssText instead)\n\tsupport.style = /top/.test( a.getAttribute(\"style\") );\n\n\t// Make sure that URLs aren't manipulated\n\t// (IE normalizes it by default)\n\tsupport.hrefNormalized = a.getAttribute(\"href\") === \"/a\";\n\n\t// Check the default checkbox/radio value (\"\" on WebKit; \"on\" elsewhere)\n\tsupport.checkOn = !!input.value;\n\n\t// Make sure that a selected-by-default option has a working selected property.\n\t// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)\n\tsupport.optSelected = opt.selected;\n\n\t// Tests for enctype support on a form (#6743)\n\tsupport.enctype = !!document.createElement(\"form\").enctype;\n\n\t// Make sure that the options inside disabled selects aren't marked as disabled\n\t// (WebKit marks them as disabled)\n\tselect.disabled = true;\n\tsupport.optDisabled = !opt.disabled;\n\n\t// Support: IE8 only\n\t// Check if we can trust getAttribute(\"value\")\n\tinput = document.createElement( \"input\" );\n\tinput.setAttribute( \"value\", \"\" );\n\tsupport.input = input.getAttribute( \"value\" ) === \"\";\n\n\t// Check if an input maintains its value after becoming a radio\n\tinput.value = \"t\";\n\tinput.setAttribute( \"type\", \"radio\" );\n\tsupport.radioValue = input.value === \"t\";\n})();\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend({\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[0];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks && \"get\" in hooks && (ret = hooks.get( elem, \"value\" )) !== undefined ) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\treturn typeof ret === \"string\" ?\n\t\t\t\t\t// handle most common string cases\n\t\t\t\t\tret.replace(rreturn, \"\") :\n\t\t\t\t\t// handle cases where value is null/undef or number\n\t\t\t\t\tret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each(function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\t\t\t} else if ( jQuery.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t});\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !(\"set\" in hooks) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t});\n\t}\n});\n\njQuery.extend({\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\t\t\t\t\t// Support: IE10-11+\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\tjQuery.trim( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\" || index < 0,\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length,\n\t\t\t\t\ti = index < 0 ?\n\t\t\t\t\t\tmax :\n\t\t\t\t\t\tone ? index : 0;\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// oldIE doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t( support.optDisabled ? !option.disabled : option.getAttribute(\"disabled\") === null ) &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {\n\n\t\t\t\t\t\t// Support: IE6\n\t\t\t\t\t\t// When new option element is added to select box we need to\n\t\t\t\t\t\t// force reflow of newly added node in order to workaround delay\n\t\t\t\t\t\t// of initialization properties\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\toption.selected = optionSet = true;\n\n\t\t\t\t\t\t} catch ( _ ) {\n\n\t\t\t\t\t\t\t// Will be executed only in IE6\n\t\t\t\t\t\t\toption.scrollHeight;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\toption.selected = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\n\t\t\t\treturn options;\n\t\t\t}\n\t\t}\n\t}\n});\n\n// Radios and checkboxes getter/setter\njQuery.each([ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( jQuery.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\t// Support: Webkit\n\t\t\t// \"\" is returned instead of \"on\" if a value isn't specified\n\t\t\treturn elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n\t\t};\n\t}\n});\n\n\n\n\nvar nodeHook, boolHook,\n\tattrHandle = jQuery.expr.attrHandle,\n\truseDefault = /^(?:checked|selected)$/i,\n\tgetSetAttribute = support.getSetAttribute,\n\tgetSetInput = support.input;\n\njQuery.fn.extend({\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each(function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t});\n\t}\n});\n\njQuery.extend({\n\tattr: function( elem, name, value ) {\n\t\tvar hooks, ret,\n\t\t\tnType = elem.nodeType;\n\n\t\t// don't get/set attributes on text, comment and attribute nodes\n\t\tif ( !elem || nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === strundefined ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// All attributes are lowercase\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\tname = name.toLowerCase();\n\t\t\thooks = jQuery.attrHooks[ name ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\n\t\t\t} else if ( hooks && \"set\" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {\n\t\t\t\treturn ret;\n\n\t\t\t} else {\n\t\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t} else if ( hooks && \"get\" in hooks && (ret = hooks.get( elem, name )) !== null ) {\n\t\t\treturn ret;\n\n\t\t} else {\n\t\t\tret = jQuery.find.attr( elem, name );\n\n\t\t\t// Non-existent attributes return null, we normalize to undefined\n\t\t\treturn ret == null ?\n\t\t\t\tundefined :\n\t\t\t\tret;\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name, propName,\n\t\t\ti = 0,\n\t\t\tattrNames = value && value.match( rnotwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( (name = attrNames[i++]) ) {\n\t\t\t\tpropName = jQuery.propFix[ name ] || name;\n\n\t\t\t\t// Boolean attributes get special treatment (#10870)\n\t\t\t\tif ( jQuery.expr.match.bool.test( name ) ) {\n\t\t\t\t\t// Set corresponding property to false\n\t\t\t\t\tif ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {\n\t\t\t\t\t\telem[ propName ] = false;\n\t\t\t\t\t// Support: IE<9\n\t\t\t\t\t// Also clear defaultChecked/defaultSelected (if appropriate)\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem[ jQuery.camelCase( \"default-\" + name ) ] =\n\t\t\t\t\t\t\telem[ propName ] = false;\n\t\t\t\t\t}\n\n\t\t\t\t// See #9699 for explanation of this approach (setting first, then removal)\n\t\t\t\t} else {\n\t\t\t\t\tjQuery.attr( elem, name, \"\" );\n\t\t\t\t}\n\n\t\t\t\telem.removeAttribute( getSetAttribute ? name : propName );\n\t\t\t}\n\t\t}\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" && jQuery.nodeName(elem, \"input\") ) {\n\t\t\t\t\t// Setting the type on a radio button after the value resets the value in IE6-9\n\t\t\t\t\t// Reset value to default in case type is set after value during creation\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\n// Hook for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {\n\t\t\t// IE<8 needs the *property* name\n\t\t\telem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );\n\n\t\t// Use defaultChecked and defaultSelected for oldIE\n\t\t} else {\n\t\t\telem[ jQuery.camelCase( \"default-\" + name ) ] = elem[ name ] = true;\n\t\t}\n\n\t\treturn name;\n\t}\n};\n\n// Retrieve booleans specially\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?\n\t\tfunction( elem, name, isXML ) {\n\t\t\tvar ret, handle;\n\t\t\tif ( !isXML ) {\n\t\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\t\thandle = attrHandle[ name ];\n\t\t\t\tattrHandle[ name ] = ret;\n\t\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\t\tname.toLowerCase() :\n\t\t\t\t\tnull;\n\t\t\t\tattrHandle[ name ] = handle;\n\t\t\t}\n\t\t\treturn ret;\n\t\t} :\n\t\tfunction( elem, name, isXML ) {\n\t\t\tif ( !isXML ) {\n\t\t\t\treturn elem[ jQuery.camelCase( \"default-\" + name ) ] ?\n\t\t\t\t\tname.toLowerCase() :\n\t\t\t\t\tnull;\n\t\t\t}\n\t\t};\n});\n\n// fix oldIE attroperties\nif ( !getSetInput || !getSetAttribute ) {\n\tjQuery.attrHooks.value = {\n\t\tset: function( elem, value, name ) {\n\t\t\tif ( jQuery.nodeName( elem, \"input\" ) ) {\n\t\t\t\t// Does not return so that setAttribute is also used\n\t\t\t\telem.defaultValue = value;\n\t\t\t} else {\n\t\t\t\t// Use nodeHook if defined (#1954); otherwise setAttribute is fine\n\t\t\t\treturn nodeHook && nodeHook.set( elem, value, name );\n\t\t\t}\n\t\t}\n\t};\n}\n\n// IE6/7 do not support getting/setting some attributes with get/setAttribute\nif ( !getSetAttribute ) {\n\n\t// Use this for any attribute in IE6/7\n\t// This fixes almost every IE6/7 issue\n\tnodeHook = {\n\t\tset: function( elem, value, name ) {\n\t\t\t// Set the existing or create a new attribute node\n\t\t\tvar ret = elem.getAttributeNode( name );\n\t\t\tif ( !ret ) {\n\t\t\t\telem.setAttributeNode(\n\t\t\t\t\t(ret = elem.ownerDocument.createAttribute( name ))\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tret.value = value += \"\";\n\n\t\t\t// Break association with cloned elements by also using setAttribute (#9646)\n\t\t\tif ( name === \"value\" || value === elem.getAttribute( name ) ) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t};\n\n\t// Some attributes are constructed with empty-string values when not defined\n\tattrHandle.id = attrHandle.name = attrHandle.coords =\n\t\tfunction( elem, name, isXML ) {\n\t\t\tvar ret;\n\t\t\tif ( !isXML ) {\n\t\t\t\treturn (ret = elem.getAttributeNode( name )) && ret.value !== \"\" ?\n\t\t\t\t\tret.value :\n\t\t\t\t\tnull;\n\t\t\t}\n\t\t};\n\n\t// Fixing value retrieval on a button requires this module\n\tjQuery.valHooks.button = {\n\t\tget: function( elem, name ) {\n\t\t\tvar ret = elem.getAttributeNode( name );\n\t\t\tif ( ret && ret.specified ) {\n\t\t\t\treturn ret.value;\n\t\t\t}\n\t\t},\n\t\tset: nodeHook.set\n\t};\n\n\t// Set contenteditable to false on removals(#10429)\n\t// Setting to empty string throws an error as an invalid value\n\tjQuery.attrHooks.contenteditable = {\n\t\tset: function( elem, value, name ) {\n\t\t\tnodeHook.set( elem, value === \"\" ? false : value, name );\n\t\t}\n\t};\n\n\t// Set width and height to auto instead of 0 on empty string( Bug #8150 )\n\t// This is for removals\n\tjQuery.each([ \"width\", \"height\" ], function( i, name ) {\n\t\tjQuery.attrHooks[ name ] = {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( value === \"\" ) {\n\t\t\t\t\telem.setAttribute( name, \"auto\" );\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t});\n}\n\nif ( !support.style ) {\n\tjQuery.attrHooks.style = {\n\t\tget: function( elem ) {\n\t\t\t// Return undefined in the case of empty string\n\t\t\t// Note: IE uppercases css property names, but if we were to .toLowerCase()\n\t\t\t// .cssText, that would destroy case senstitivity in URL's, like in \"background\"\n\t\t\treturn elem.style.cssText || undefined;\n\t\t},\n\t\tset: function( elem, value ) {\n\t\t\treturn ( elem.style.cssText = value + \"\" );\n\t\t}\n\t};\n}\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button|object)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend({\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\tname = jQuery.propFix[ name ] || name;\n\t\treturn this.each(function() {\n\t\t\t// try/catch handles cases where IE balks (such as removing a property on window)\n\t\t\ttry {\n\t\t\t\tthis[ name ] = undefined;\n\t\t\t\tdelete this[ name ];\n\t\t\t} catch( e ) {}\n\t\t});\n\t}\n});\n\njQuery.extend({\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t},\n\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks, notxml,\n\t\t\tnType = elem.nodeType;\n\n\t\t// don't get/set properties on text, comment and attribute nodes\n\t\tif ( !elem || nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tnotxml = nType !== 1 || !jQuery.isXMLDoc( elem );\n\n\t\tif ( notxml ) {\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\treturn hooks && \"set\" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?\n\t\t\t\tret :\n\t\t\t\t( elem[ name ] = value );\n\n\t\t} else {\n\t\t\treturn hooks && \"get\" in hooks && (ret = hooks.get( elem, name )) !== null ?\n\t\t\t\tret :\n\t\t\t\telem[ name ];\n\t\t}\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\t\t\t\t// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set\n\t\t\t\t// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\treturn tabindex ?\n\t\t\t\t\tparseInt( tabindex, 10 ) :\n\t\t\t\t\trfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?\n\t\t\t\t\t\t0 :\n\t\t\t\t\t\t-1;\n\t\t\t}\n\t\t}\n\t}\n});\n\n// Some attributes require a special call on IE\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !support.hrefNormalized ) {\n\t// href/src property should get the full normalized URL (#10299/#12915)\n\tjQuery.each([ \"href\", \"src\" ], function( i, name ) {\n\t\tjQuery.propHooks[ name ] = {\n\t\t\tget: function( elem ) {\n\t\t\t\treturn elem.getAttribute( name, 4 );\n\t\t\t}\n\t\t};\n\t});\n}\n\n// Support: Safari, IE9+\n// mis-reports the default selected property of an option\n// Accessing the parent's selectedIndex property fixes it\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\t\t\tvar parent = elem.parentNode;\n\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\t// Make sure that it also works with optgroups, see #5701\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t};\n}\n\njQuery.each([\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n});\n\n// IE6/7 call enctype encoding\nif ( !support.enctype ) {\n\tjQuery.propFix.enctype = \"encoding\";\n}\n\n\n\n\nvar rclass = /[\\t\\r\\n\\f]/g;\n\njQuery.fn.extend({\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, clazz, j, finalValue,\n\t\t\ti = 0,\n\t\t\tlen = this.length,\n\t\t\tproceed = typeof value === \"string\" && value;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each(function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, this.className ) );\n\t\t\t});\n\t\t}\n\n\t\tif ( proceed ) {\n\t\t\t// The disjunction here is for better compressibility (see removeClass)\n\t\t\tclasses = ( value || \"\" ).match( rnotwhite ) || [];\n\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\telem = this[ i ];\n\t\t\t\tcur = elem.nodeType === 1 && ( elem.className ?\n\t\t\t\t\t( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :\n\t\t\t\t\t\" \"\n\t\t\t\t);\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( (clazz = classes[j++]) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\n\t\t\t\t\tif ( elem.className !== finalValue ) {\n\t\t\t\t\t\telem.className = finalValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, clazz, j, finalValue,\n\t\t\ti = 0,\n\t\t\tlen = this.length,\n\t\t\tproceed = arguments.length === 0 || typeof value === \"string\" && value;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each(function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, this.className ) );\n\t\t\t});\n\t\t}\n\t\tif ( proceed ) {\n\t\t\tclasses = ( value || \"\" ).match( rnotwhite ) || [];\n\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\telem = this[ i ];\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( elem.className ?\n\t\t\t\t\t( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :\n\t\t\t\t\t\"\"\n\t\t\t\t);\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( (clazz = classes[j++]) ) {\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) >= 0 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = value ? jQuery.trim( cur ) : \"\";\n\t\t\t\t\tif ( elem.className !== finalValue ) {\n\t\t\t\t\t\telem.className = finalValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each(function( i ) {\n\t\t\t\tjQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );\n\t\t\t});\n\t\t}\n\n\t\treturn this.each(function() {\n\t\t\tif ( type === \"string\" ) {\n\t\t\t\t// toggle individual class names\n\t\t\t\tvar className,\n\t\t\t\t\ti = 0,\n\t\t\t\t\tself = jQuery( this ),\n\t\t\t\t\tclassNames = value.match( rnotwhite ) || [];\n\n\t\t\t\twhile ( (className = classNames[ i++ ]) ) {\n\t\t\t\t\t// check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( type === strundefined || type === \"boolean\" ) {\n\t\t\t\tif ( this.className ) {\n\t\t\t\t\t// store className if set\n\t\t\t\t\tjQuery._data( this, \"__className__\", this.className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed \"false\",\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tthis.className = this.className || value === false ? \"\" : jQuery._data( this, \"__className__\" ) || \"\";\n\t\t\t}\n\t\t});\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className = \" \" + selector + \" \",\n\t\t\ti = 0,\n\t\t\tl = this.length;\n\t\tfor ( ; i < l; i++ ) {\n\t\t\tif ( this[i].nodeType === 1 && (\" \" + this[i].className + \" \").replace(rclass, \" \").indexOf( className ) >= 0 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n});\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\njQuery.each( (\"blur focus focusin focusout load resize scroll unload click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup error contextmenu\").split(\" \"), function( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n});\n\njQuery.fn.extend({\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t},\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ? this.off( selector, \"**\" ) : this.off( types, selector || \"**\", fn );\n\t}\n});\n\n\nvar nonce = jQuery.now();\n\nvar rquery = (/\\?/);\n\n\n\nvar rvalidtokens = /(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g;\n\njQuery.parseJSON = function( data ) {\n\t// Attempt to parse using the native JSON parser first\n\tif ( window.JSON && window.JSON.parse ) {\n\t\t// Support: Android 2.3\n\t\t// Workaround failure to string-cast null input\n\t\treturn window.JSON.parse( data + \"\" );\n\t}\n\n\tvar requireNonComma,\n\t\tdepth = null,\n\t\tstr = jQuery.trim( data + \"\" );\n\n\t// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains\n\t// after removing valid tokens\n\treturn str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {\n\n\t\t// Force termination if we see a misplaced comma\n\t\tif ( requireNonComma && comma ) {\n\t\t\tdepth = 0;\n\t\t}\n\n\t\t// Perform no more replacements after returning to outermost depth\n\t\tif ( depth === 0 ) {\n\t\t\treturn token;\n\t\t}\n\n\t\t// Commas must not follow \"[\", \"{\", or \",\"\n\t\trequireNonComma = open || comma;\n\n\t\t// Determine new depth\n\t\t// array/object open (\"[\" or \"{\"): depth += true - false (increment)\n\t\t// array/object close (\"]\" or \"}\"): depth += false - true (decrement)\n\t\t// other cases (\",\" or primitive): depth += true - true (numeric cast)\n\t\tdepth += !close - !open;\n\n\t\t// Remove this token\n\t\treturn \"\";\n\t}) ) ?\n\t\t( Function( \"return \" + str ) )() :\n\t\tjQuery.error( \"Invalid JSON: \" + data );\n};\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, tmp;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tif ( window.DOMParser ) { // Standard\n\t\t\ttmp = new DOMParser();\n\t\t\txml = tmp.parseFromString( data, \"text/xml\" );\n\t\t} else { // IE\n\t\t\txml = new ActiveXObject( \"Microsoft.XMLDOM\" );\n\t\t\txml.async = \"false\";\n\t\t\txml.loadXML( data );\n\t\t}\n\t} catch( e ) {\n\t\txml = undefined;\n\t}\n\tif ( !xml || !xml.documentElement || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\t// Document location\n\tajaxLocParts,\n\tajaxLocation,\n\n\trhash = /#.*$/,\n\trts = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/mg, // IE leaves an \\r character at EOL\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\trurl = /^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat(\"*\");\n\n// #8138, IE may throw an exception when accessing\n// a field from window.location if document.domain has been set\ntry {\n\tajaxLocation = location.href;\n} catch( e ) {\n\t// Use the href attribute of an A element\n\t// since IE will modify it given document.location\n\tajaxLocation = document.createElement( \"a\" );\n\tajaxLocation.href = \"\";\n\tajaxLocation = ajaxLocation.href;\n}\n\n// Segment location into parts\najaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( (dataType = dataTypes[i++]) ) {\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType.charAt( 0 ) === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t(structure[ dataType ] = structure[ dataType ] || []).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t(structure[ dataType ] = structure[ dataType ] || []).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t});\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar deep, key,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\tvar firstDataType, ct, finalDataType, type,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[0] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s[ \"throws\" ] ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn { state: \"parsererror\", error: conv ? e : \"No conversion from \" + prev + \" to \" + current };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend({\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: ajaxLocation,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /xml/,\n\t\t\thtml: /html/,\n\t\t\tjson: /json/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": jQuery.parseJSON,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar // Cross-domain detection vars\n\t\t\tparts,\n\t\t\t// Loop variable\n\t\t\ti,\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\t\t\t// Response headers as string\n\t\t\tresponseHeadersString,\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\ttransport,\n\t\t\t// Response headers\n\t\t\tresponseHeaders,\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks(\"once memory\"),\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\t\t\t// The jqXHR state\n\t\t\tstate = 0,\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( state === 2 ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( (match = rheaders.exec( responseHeadersString )) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[1].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tvar lname = name.toLowerCase();\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\tname = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR ).complete = completeDeferred.add;\n\t\tjqXHR.success = jqXHR.done;\n\t\tjqXHR.error = jqXHR.fail;\n\n\t\t// Remove hash character (#7531: and string promotion)\n\t\t// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || ajaxLocation ) + \"\" ).replace( rhash, \"\" ).replace( rprotocol, ajaxLocParts[ 1 ] + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = jQuery.trim( s.dataType || \"*\" ).toLowerCase().match( rnotwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when we have a protocol:host:port mismatch\n\t\tif ( s.crossDomain == null ) {\n\t\t\tparts = rurl.exec( s.url.toLowerCase() );\n\t\t\ts.crossDomain = !!( parts &&\n\t\t\t\t( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||\n\t\t\t\t\t( parts[ 3 ] || ( parts[ 1 ] === \"http:\" ? \"80\" : \"443\" ) ) !==\n\t\t\t\t\t\t( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === \"http:\" ? \"80\" : \"443\" ) ) )\n\t\t\t);\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( state === 2 ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger(\"ajaxStart\");\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\tcacheURL = s.url;\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL = ( s.url += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data );\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add anti-cache in url if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\ts.url = rts.test( cacheURL ) ?\n\n\t\t\t\t\t// If there is already a '_' parameter, set its value\n\t\t\t\t\tcacheURL.replace( rts, \"$1_=\" + nonce++ ) :\n\n\t\t\t\t\t// Otherwise add one to the end\n\t\t\t\t\tcacheURL + ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + nonce++;\n\t\t\t}\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tfor ( i in { success: 1, error: 1, complete: 1 } ) {\n\t\t\tjqXHR[ i ]( s[ i ] );\n\t\t}\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = setTimeout(function() {\n\t\t\t\t\tjqXHR.abort(\"timeout\");\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tstate = 1;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\t\t\t\t// Propagate exception as error if not done\n\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\tdone( -1, e );\n\t\t\t\t// Simply rethrow otherwise\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Called once\n\t\t\tif ( state === 2 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// State is \"done\" now\n\t\t\tstate = 2;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\tclearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"Last-Modified\");\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"etag\");\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// We extract error from statusText\n\t\t\t\t// then normalize statusText and status for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger(\"ajaxStop\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n});\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\t\t// shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\treturn jQuery.ajax({\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t});\n\t};\n});\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax({\n\t\turl: url,\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t});\n};\n\n\njQuery.fn.extend({\n\twrapAll: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each(function(i) {\n\t\t\t\tjQuery(this).wrapAll( html.call(this, i) );\n\t\t\t});\n\t\t}\n\n\t\tif ( this[0] ) {\n\t\t\t// The elements to wrap the target around\n\t\t\tvar wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);\n\n\t\t\tif ( this[0].parentNode ) {\n\t\t\t\twrap.insertBefore( this[0] );\n\t\t\t}\n\n\t\t\twrap.map(function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstChild && elem.firstChild.nodeType === 1 ) {\n\t\t\t\t\telem = elem.firstChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t}).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each(function(i) {\n\t\t\t\tjQuery(this).wrapInner( html.call(this, i) );\n\t\t\t});\n\t\t}\n\n\t\treturn this.each(function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t});\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each(function(i) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );\n\t\t});\n\t},\n\n\tunwrap: function() {\n\t\treturn this.parent().each(function() {\n\t\t\tif ( !jQuery.nodeName( this, \"body\" ) ) {\n\t\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t\t}\n\t\t}).end();\n\t}\n});\n\n\njQuery.expr.filters.hidden = function( elem ) {\n\t// Support: Opera <= 12.12\n\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\n\treturn elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||\n\t\t(!support.reliableHiddenOffsets() &&\n\t\t\t((elem.style && elem.style.display) || jQuery.css( elem, \"display\" )) === \"none\");\n};\n\njQuery.expr.filters.visible = function( elem ) {\n\treturn !jQuery.expr.filters.hidden( elem );\n};\n\n\n\n\nvar r20 = /%20/g,\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( jQuery.isArray( obj ) ) {\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams( prefix + \"[\" + ( typeof v === \"object\" ? i : \"\" ) + \"]\", v, traditional, add );\n\t\t\t}\n\t\t});\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, value ) {\n\t\t\t// If value is a function, invoke it and return its value\n\t\t\tvalue = jQuery.isFunction( value ) ? value() : ( value == null ? \"\" : value );\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" + encodeURIComponent( value );\n\t\t};\n\n\t// Set traditional to true for jQuery <= 1.3.2 behavior.\n\tif ( traditional === undefined ) {\n\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t});\n\n\t} else {\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" ).replace( r20, \"+\" );\n};\n\njQuery.fn.extend({\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map(function() {\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t})\n\t\t.filter(function() {\n\t\t\tvar type = this.type;\n\t\t\t// Use .is(\":disabled\") so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t})\n\t\t.map(function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\treturn val == null ?\n\t\t\t\tnull :\n\t\t\t\tjQuery.isArray( val ) ?\n\t\t\t\t\tjQuery.map( val, function( val ) {\n\t\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t\t}) :\n\t\t\t\t\t{ name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t}).get();\n\t}\n});\n\n\n// Create the request object\n// (This is still attached to ajaxSettings for backward compatibility)\njQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?\n\t// Support: IE6+\n\tfunction() {\n\n\t\t// XHR cannot access local files, always use ActiveX for that case\n\t\treturn !this.isLocal &&\n\n\t\t\t// Support: IE7-8\n\t\t\t// oldIE XHR does not support non-RFC2616 methods (#13240)\n\t\t\t// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx\n\t\t\t// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9\n\t\t\t// Although this check for six methods instead of eight\n\t\t\t// since IE also does not support \"trace\" and \"connect\"\n\t\t\t/^(get|post|head|put|delete|options)$/i.test( this.type ) &&\n\n\t\t\tcreateStandardXHR() || createActiveXHR();\n\t} :\n\t// For all other browsers, use the standard XMLHttpRequest object\n\tcreateStandardXHR;\n\nvar xhrId = 0,\n\txhrCallbacks = {},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\n// Support: IE<10\n// Open requests must be manually aborted on unload (#5280)\n// See https://support.microsoft.com/kb/2856746 for more info\nif ( window.attachEvent ) {\n\twindow.attachEvent( \"onunload\", function() {\n\t\tfor ( var key in xhrCallbacks ) {\n\t\t\txhrCallbacks[ key ]( undefined, true );\n\t\t}\n\t});\n}\n\n// Determine support properties\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nxhrSupported = support.ajax = !!xhrSupported;\n\n// Create transport if the browser can provide an xhr\nif ( xhrSupported ) {\n\n\tjQuery.ajaxTransport(function( options ) {\n\t\t// Cross domain only allowed if supported through XMLHttpRequest\n\t\tif ( !options.crossDomain || support.cors ) {\n\n\t\t\tvar callback;\n\n\t\t\treturn {\n\t\t\t\tsend: function( headers, complete ) {\n\t\t\t\t\tvar i,\n\t\t\t\t\t\txhr = options.xhr(),\n\t\t\t\t\t\tid = ++xhrId;\n\n\t\t\t\t\t// Open the socket\n\t\t\t\t\txhr.open( options.type, options.url, options.async, options.username, options.password );\n\n\t\t\t\t\t// Apply custom fields if provided\n\t\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Override mime type if needed\n\t\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t\t}\n\n\t\t\t\t\t// X-Requested-With header\n\t\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\t\tif ( !options.crossDomain && !headers[\"X-Requested-With\"] ) {\n\t\t\t\t\t\theaders[\"X-Requested-With\"] = \"XMLHttpRequest\";\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set headers\n\t\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\t\t// Support: IE<9\n\t\t\t\t\t\t// IE's ActiveXObject throws a 'Type Mismatch' exception when setting\n\t\t\t\t\t\t// request header to a null-value.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// To keep consistent with other XHR implementations, cast the value\n\t\t\t\t\t\t// to string and ignore `undefined`.\n\t\t\t\t\t\tif ( headers[ i ] !== undefined ) {\n\t\t\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] + \"\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Do send the request\n\t\t\t\t\t// This may raise an exception which is actually\n\t\t\t\t\t// handled in jQuery.ajax (so no try/catch here)\n\t\t\t\t\txhr.send( ( options.hasContent && options.data ) || null );\n\n\t\t\t\t\t// Listener\n\t\t\t\t\tcallback = function( _, isAbort ) {\n\t\t\t\t\t\tvar status, statusText, responses;\n\n\t\t\t\t\t\t// Was never called and is aborted or complete\n\t\t\t\t\t\tif ( callback && ( isAbort || xhr.readyState === 4 ) ) {\n\t\t\t\t\t\t\t// Clean up\n\t\t\t\t\t\t\tdelete xhrCallbacks[ id ];\n\t\t\t\t\t\t\tcallback = undefined;\n\t\t\t\t\t\t\txhr.onreadystatechange = jQuery.noop;\n\n\t\t\t\t\t\t\t// Abort manually if needed\n\t\t\t\t\t\t\tif ( isAbort ) {\n\t\t\t\t\t\t\t\tif ( xhr.readyState !== 4 ) {\n\t\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponses = {};\n\t\t\t\t\t\t\t\tstatus = xhr.status;\n\n\t\t\t\t\t\t\t\t// Support: IE<10\n\t\t\t\t\t\t\t\t// Accessing binary-data responseText throws an exception\n\t\t\t\t\t\t\t\t// (#11426)\n\t\t\t\t\t\t\t\tif ( typeof xhr.responseText === \"string\" ) {\n\t\t\t\t\t\t\t\t\tresponses.text = xhr.responseText;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Firefox throws an exception when accessing\n\t\t\t\t\t\t\t\t// statusText for faulty cross-domain requests\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tstatusText = xhr.statusText;\n\t\t\t\t\t\t\t\t} catch( e ) {\n\t\t\t\t\t\t\t\t\t// We normalize with Webkit giving an empty statusText\n\t\t\t\t\t\t\t\t\tstatusText = \"\";\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Filter status for non standard behaviors\n\n\t\t\t\t\t\t\t\t// If the request is local and we have data: assume a success\n\t\t\t\t\t\t\t\t// (success with no data won't get notified, that's the best we\n\t\t\t\t\t\t\t\t// can do given current implementations)\n\t\t\t\t\t\t\t\tif ( !status && options.isLocal && !options.crossDomain ) {\n\t\t\t\t\t\t\t\t\tstatus = responses.text ? 200 : 404;\n\t\t\t\t\t\t\t\t// IE - #1450: sometimes returns 1223 when it should be 204\n\t\t\t\t\t\t\t\t} else if ( status === 1223 ) {\n\t\t\t\t\t\t\t\t\tstatus = 204;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Call complete if needed\n\t\t\t\t\t\tif ( responses ) {\n\t\t\t\t\t\t\tcomplete( status, statusText, responses, xhr.getAllResponseHeaders() );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( !options.async ) {\n\t\t\t\t\t\t// if we're in sync mode we fire the callback\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t} else if ( xhr.readyState === 4 ) {\n\t\t\t\t\t\t// (IE6 & IE7) if it's in cache and has been\n\t\t\t\t\t\t// retrieved directly we need to fire the callback\n\t\t\t\t\t\tsetTimeout( callback );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Add to the list of active xhr callbacks\n\t\t\t\t\t\txhr.onreadystatechange = xhrCallbacks[ id ] = callback;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tabort: function() {\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tcallback( undefined, true );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n}\n\n// Functions to create xhrs\nfunction createStandardXHR() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch( e ) {}\n}\n\nfunction createActiveXHR() {\n\ttry {\n\t\treturn new window.ActiveXObject( \"Microsoft.XMLHTTP\" );\n\t} catch( e ) {}\n}\n\n\n\n\n// Install script dataType\njQuery.ajaxSetup({\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /(?:java|ecma)script/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n});\n\n// Handle cache's special case and global\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t\ts.global = false;\n\t}\n});\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function(s) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\n\t\tvar script,\n\t\t\thead = document.head || jQuery(\"head\")[0] || document.documentElement;\n\n\t\treturn {\n\n\t\t\tsend: function( _, callback ) {\n\n\t\t\t\tscript = document.createElement(\"script\");\n\n\t\t\t\tscript.async = true;\n\n\t\t\t\tif ( s.scriptCharset ) {\n\t\t\t\t\tscript.charset = s.scriptCharset;\n\t\t\t\t}\n\n\t\t\t\tscript.src = s.url;\n\n\t\t\t\t// Attach handlers for all browsers\n\t\t\t\tscript.onload = script.onreadystatechange = function( _, isAbort ) {\n\n\t\t\t\t\tif ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {\n\n\t\t\t\t\t\t// Handle memory leak in IE\n\t\t\t\t\t\tscript.onload = script.onreadystatechange = null;\n\n\t\t\t\t\t\t// Remove the script\n\t\t\t\t\t\tif ( script.parentNode ) {\n\t\t\t\t\t\t\tscript.parentNode.removeChild( script );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Dereference the script\n\t\t\t\t\t\tscript = null;\n\n\t\t\t\t\t\t// Callback if not abort\n\t\t\t\t\t\tif ( !isAbort ) {\n\t\t\t\t\t\t\tcallback( 200, \"success\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\thead.insertBefore( script, head.firstChild );\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( script ) {\n\t\t\t\t\tscript.onload( undefined, true );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n});\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup({\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n});\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" && !( s.contentType || \"\" ).indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[\"script json\"] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always(function() {\n\t\t\t// Restore preexisting value\n\t\t\twindow[ callbackName ] = overwritten;\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\t\t\t\t// make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t});\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n});\n\n\n\n\n// data: string of html\n// context (optional): If specified, the fragment will be created in this context, defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\tcontext = context || document;\n\n\tvar parsed = rsingleTag.exec( data ),\n\t\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[1] ) ];\n\t}\n\n\tparsed = jQuery.buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n// Keep a copy of the old load method\nvar _load = jQuery.fn.load;\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tif ( typeof url !== \"string\" && _load ) {\n\t\treturn _load.apply( this, arguments );\n\t}\n\n\tvar selector, response, type,\n\t\tself = this,\n\t\toff = url.indexOf(\" \");\n\n\tif ( off >= 0 ) {\n\t\tselector = jQuery.trim( url.slice( off, url.length ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax({\n\t\t\turl: url,\n\n\t\t\t// if \"type\" variable is undefined, then \"GET\" method will be used\n\t\t\ttype: type,\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t}).done(function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery(\"<div>\").append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t}).complete( callback && function( jqXHR, status ) {\n\t\t\tself.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t});\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [ \"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\" ], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n});\n\n\n\n\njQuery.expr.filters.animated = function( elem ) {\n\treturn jQuery.grep(jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t}).length;\n};\n\n\n\n\n\nvar docElem = window.document.documentElement;\n\n/**\n * Gets a window from an element\n */\nfunction getWindow( elem ) {\n\treturn jQuery.isWindow( elem ) ?\n\t\telem :\n\t\telem.nodeType === 9 ?\n\t\t\telem.defaultView || elem.parentWindow :\n\t\t\tfalse;\n}\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\tjQuery.inArray(\"auto\", [ curCSSTop, curCSSLeft ] ) > -1;\n\n\t\t// need to be able to calculate position if either top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\t\t\toptions = options.call( elem, i, curOffset );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend({\n\toffset: function( options ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each(function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t});\n\t\t}\n\n\t\tvar docElem, win,\n\t\t\tbox = { top: 0, left: 0 },\n\t\t\telem = this[ 0 ],\n\t\t\tdoc = elem && elem.ownerDocument;\n\n\t\tif ( !doc ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdocElem = doc.documentElement;\n\n\t\t// Make sure it's not a disconnected DOM node\n\t\tif ( !jQuery.contains( docElem, elem ) ) {\n\t\t\treturn box;\n\t\t}\n\n\t\t// If we don't have gBCR, just use 0,0 rather than error\n\t\t// BlackBerry 5, iOS 3 (original iPhone)\n\t\tif ( typeof elem.getBoundingClientRect !== strundefined ) {\n\t\t\tbox = elem.getBoundingClientRect();\n\t\t}\n\t\twin = getWindow( doc );\n\t\treturn {\n\t\t\ttop: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),\n\t\t\tleft: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )\n\t\t};\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\tparentOffset = { top: 0, left: 0 },\n\t\t\telem = this[ 0 ];\n\n\t\t// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\t\t\t// we assume that getBoundingClientRect is available when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\t\t} else {\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset.top  += jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true );\n\t\t\tparentOffset.left += jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true );\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\t// note: when an element has margin: auto the offsetLeft and marginLeft\n\t\t// are the same in Safari causing offset.left to incorrectly be 0\n\t\treturn {\n\t\t\ttop:  offset.top  - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true)\n\t\t};\n\t},\n\n\toffsetParent: function() {\n\t\treturn this.map(function() {\n\t\t\tvar offsetParent = this.offsetParent || docElem;\n\n\t\t\twhile ( offsetParent && ( !jQuery.nodeName( offsetParent, \"html\" ) && jQuery.css( offsetParent, \"position\" ) === \"static\" ) ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\t\t\treturn offsetParent || docElem;\n\t\t});\n\t}\n});\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = /Y/.test( prop );\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\t\t\tvar win = getWindow( elem );\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? (prop in win) ? win[ prop ] :\n\t\t\t\t\twin.document.documentElement[ method ] :\n\t\t\t\t\telem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : jQuery( win ).scrollLeft(),\n\t\t\t\t\ttop ? val : jQuery( win ).scrollTop()\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length, null );\n\t};\n});\n\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// getComputedStyle returns percent when specified for top/left/bottom/right\n// rather than make the css module depend on the offset module, we just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\t\t\t\t// if curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n});\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name }, function( defaultExtra, funcName ) {\n\t\t// margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n\t\t\t\t\t// isn't a whole lot we can do. See pull request at this URL for discussion:\n\t\t\t\t\t// https://github.com/jquery/jquery/pull/764\n\t\t\t\t\treturn elem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest\n\t\t\t\t\t// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable, null );\n\t\t};\n\t});\n});\n\n\n// The number of elements contained in the matched element set\njQuery.fn.size = function() {\n\treturn this.length;\n};\n\njQuery.fn.andSelf = jQuery.fn.addBack;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t});\n}\n\n\n\n\nvar\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in\n// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( typeof noGlobal === strundefined ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n\n}));\n","/*!\n\n handlebars v1.3.0\n\nCopyright (C) 2011 by Yehuda Katz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n@license\n*/\n/* exported Handlebars */\nvar Handlebars = (function() {\n// handlebars/safe-string.js\nvar __module4__ = (function() {\n  \"use strict\";\n  var __exports__;\n  // Build out our basic SafeString type\n  function SafeString(string) {\n    this.string = string;\n  }\n\n  SafeString.prototype.toString = function() {\n    return \"\" + this.string;\n  };\n\n  __exports__ = SafeString;\n  return __exports__;\n})();\n\n// handlebars/utils.js\nvar __module3__ = (function(__dependency1__) {\n  \"use strict\";\n  var __exports__ = {};\n  /*jshint -W004 */\n  var SafeString = __dependency1__;\n\n  var escape = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#x27;\",\n    \"`\": \"&#x60;\"\n  };\n\n  var badChars = /[&<>\"'`]/g;\n  var possible = /[&<>\"'`]/;\n\n  function escapeChar(chr) {\n    return escape[chr] || \"&amp;\";\n  }\n\n  function extend(obj, value) {\n    for(var key in value) {\n      if(Object.prototype.hasOwnProperty.call(value, key)) {\n        obj[key] = value[key];\n      }\n    }\n  }\n\n  __exports__.extend = extend;var toString = Object.prototype.toString;\n  __exports__.toString = toString;\n  // Sourced from lodash\n  // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n  var isFunction = function(value) {\n    return typeof value === 'function';\n  };\n  // fallback for older versions of Chrome and Safari\n  if (isFunction(/x/)) {\n    isFunction = function(value) {\n      return typeof value === 'function' && toString.call(value) === '[object Function]';\n    };\n  }\n  var isFunction;\n  __exports__.isFunction = isFunction;\n  var isArray = Array.isArray || function(value) {\n    return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;\n  };\n  __exports__.isArray = isArray;\n\n  function escapeExpression(string) {\n    // don't escape SafeStrings, since they're already safe\n    if (string instanceof SafeString) {\n      return string.toString();\n    } else if (!string && string !== 0) {\n      return \"\";\n    }\n\n    // Force a string conversion as this will be done by the append regardless and\n    // the regex test will do this transparently behind the scenes, causing issues if\n    // an object's to string has escaped characters in it.\n    string = \"\" + string;\n\n    if(!possible.test(string)) { return string; }\n    return string.replace(badChars, escapeChar);\n  }\n\n  __exports__.escapeExpression = escapeExpression;function isEmpty(value) {\n    if (!value && value !== 0) {\n      return true;\n    } else if (isArray(value) && value.length === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  __exports__.isEmpty = isEmpty;\n  return __exports__;\n})(__module4__);\n\n// handlebars/exception.js\nvar __module5__ = (function() {\n  \"use strict\";\n  var __exports__;\n\n  var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];\n\n  function Exception(message, node) {\n    var line;\n    if (node && node.firstLine) {\n      line = node.firstLine;\n\n      message += ' - ' + line + ':' + node.firstColumn;\n    }\n\n    var tmp = Error.prototype.constructor.call(this, message);\n\n    // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n    for (var idx = 0; idx < errorProps.length; idx++) {\n      this[errorProps[idx]] = tmp[errorProps[idx]];\n    }\n\n    if (line) {\n      this.lineNumber = line;\n      this.column = node.firstColumn;\n    }\n  }\n\n  Exception.prototype = new Error();\n\n  __exports__ = Exception;\n  return __exports__;\n})();\n\n// handlebars/base.js\nvar __module2__ = (function(__dependency1__, __dependency2__) {\n  \"use strict\";\n  var __exports__ = {};\n  var Utils = __dependency1__;\n  var Exception = __dependency2__;\n\n  var VERSION = \"1.3.0\";\n  __exports__.VERSION = VERSION;var COMPILER_REVISION = 4;\n  __exports__.COMPILER_REVISION = COMPILER_REVISION;\n  var REVISION_CHANGES = {\n    1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it\n    2: '== 1.0.0-rc.3',\n    3: '== 1.0.0-rc.4',\n    4: '>= 1.0.0'\n  };\n  __exports__.REVISION_CHANGES = REVISION_CHANGES;\n  var isArray = Utils.isArray,\n      isFunction = Utils.isFunction,\n      toString = Utils.toString,\n      objectType = '[object Object]';\n\n  function HandlebarsEnvironment(helpers, partials) {\n    this.helpers = helpers || {};\n    this.partials = partials || {};\n\n    registerDefaultHelpers(this);\n  }\n\n  __exports__.HandlebarsEnvironment = HandlebarsEnvironment;HandlebarsEnvironment.prototype = {\n    constructor: HandlebarsEnvironment,\n\n    logger: logger,\n    log: log,\n\n    registerHelper: function(name, fn, inverse) {\n      if (toString.call(name) === objectType) {\n        if (inverse || fn) { throw new Exception('Arg not supported with multiple helpers'); }\n        Utils.extend(this.helpers, name);\n      } else {\n        if (inverse) { fn.not = inverse; }\n        this.helpers[name] = fn;\n      }\n    },\n\n    registerPartial: function(name, str) {\n      if (toString.call(name) === objectType) {\n        Utils.extend(this.partials,  name);\n      } else {\n        this.partials[name] = str;\n      }\n    }\n  };\n\n  function registerDefaultHelpers(instance) {\n    instance.registerHelper('helperMissing', function(arg) {\n      if(arguments.length === 2) {\n        return undefined;\n      } else {\n        throw new Exception(\"Missing helper: '\" + arg + \"'\");\n      }\n    });\n\n    instance.registerHelper('blockHelperMissing', function(context, options) {\n      var inverse = options.inverse || function() {}, fn = options.fn;\n\n      if (isFunction(context)) { context = context.call(this); }\n\n      if(context === true) {\n        return fn(this);\n      } else if(context === false || context == null) {\n        return inverse(this);\n      } else if (isArray(context)) {\n        if(context.length > 0) {\n          return instance.helpers.each(context, options);\n        } else {\n          return inverse(this);\n        }\n      } else {\n        return fn(context);\n      }\n    });\n\n    instance.registerHelper('each', function(context, options) {\n      var fn = options.fn, inverse = options.inverse;\n      var i = 0, ret = \"\", data;\n\n      if (isFunction(context)) { context = context.call(this); }\n\n      if (options.data) {\n        data = createFrame(options.data);\n      }\n\n      if(context && typeof context === 'object') {\n        if (isArray(context)) {\n          for(var j = context.length; i<j; i++) {\n            if (data) {\n              data.index = i;\n              data.first = (i === 0);\n              data.last  = (i === (context.length-1));\n            }\n            ret = ret + fn(context[i], { data: data });\n          }\n        } else {\n          for(var key in context) {\n            if(context.hasOwnProperty(key)) {\n              if(data) { \n                data.key = key; \n                data.index = i;\n                data.first = (i === 0);\n              }\n              ret = ret + fn(context[key], {data: data});\n              i++;\n            }\n          }\n        }\n      }\n\n      if(i === 0){\n        ret = inverse(this);\n      }\n\n      return ret;\n    });\n\n    instance.registerHelper('if', function(conditional, options) {\n      if (isFunction(conditional)) { conditional = conditional.call(this); }\n\n      // Default behavior is to render the positive path if the value is truthy and not empty.\n      // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n      // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n      if ((!options.hash.includeZero && !conditional) || Utils.isEmpty(conditional)) {\n        return options.inverse(this);\n      } else {\n        return options.fn(this);\n      }\n    });\n\n    instance.registerHelper('unless', function(conditional, options) {\n      return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});\n    });\n\n    instance.registerHelper('with', function(context, options) {\n      if (isFunction(context)) { context = context.call(this); }\n\n      if (!Utils.isEmpty(context)) return options.fn(context);\n    });\n\n    instance.registerHelper('log', function(context, options) {\n      var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;\n      instance.log(level, context);\n    });\n  }\n\n  var logger = {\n    methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },\n\n    // State enum\n    DEBUG: 0,\n    INFO: 1,\n    WARN: 2,\n    ERROR: 3,\n    level: 3,\n\n    // can be overridden in the host environment\n    log: function(level, obj) {\n      if (logger.level <= level) {\n        var method = logger.methodMap[level];\n        if (typeof console !== 'undefined' && console[method]) {\n          console[method].call(console, obj);\n        }\n      }\n    }\n  };\n  __exports__.logger = logger;\n  function log(level, obj) { logger.log(level, obj); }\n\n  __exports__.log = log;var createFrame = function(object) {\n    var obj = {};\n    Utils.extend(obj, object);\n    return obj;\n  };\n  __exports__.createFrame = createFrame;\n  return __exports__;\n})(__module3__, __module5__);\n\n// handlebars/runtime.js\nvar __module6__ = (function(__dependency1__, __dependency2__, __dependency3__) {\n  \"use strict\";\n  var __exports__ = {};\n  var Utils = __dependency1__;\n  var Exception = __dependency2__;\n  var COMPILER_REVISION = __dependency3__.COMPILER_REVISION;\n  var REVISION_CHANGES = __dependency3__.REVISION_CHANGES;\n\n  function checkRevision(compilerInfo) {\n    var compilerRevision = compilerInfo && compilerInfo[0] || 1,\n        currentRevision = COMPILER_REVISION;\n\n    if (compilerRevision !== currentRevision) {\n      if (compilerRevision < currentRevision) {\n        var runtimeVersions = REVISION_CHANGES[currentRevision],\n            compilerVersions = REVISION_CHANGES[compilerRevision];\n        throw new Exception(\"Template was precompiled with an older version of Handlebars than the current runtime. \"+\n              \"Please update your precompiler to a newer version (\"+runtimeVersions+\") or downgrade your runtime to an older version (\"+compilerVersions+\").\");\n      } else {\n        // Use the embedded version info since the runtime doesn't know about this revision yet\n        throw new Exception(\"Template was precompiled with a newer version of Handlebars than the current runtime. \"+\n              \"Please update your runtime to a newer version (\"+compilerInfo[1]+\").\");\n      }\n    }\n  }\n\n  __exports__.checkRevision = checkRevision;// TODO: Remove this line and break up compilePartial\n\n  function template(templateSpec, env) {\n    if (!env) {\n      throw new Exception(\"No environment passed to template\");\n    }\n\n    // Note: Using env.VM references rather than local var references throughout this section to allow\n    // for external users to override these as psuedo-supported APIs.\n    var invokePartialWrapper = function(partial, name, context, helpers, partials, data) {\n      var result = env.VM.invokePartial.apply(this, arguments);\n      if (result != null) { return result; }\n\n      if (env.compile) {\n        var options = { helpers: helpers, partials: partials, data: data };\n        partials[name] = env.compile(partial, { data: data !== undefined }, env);\n        return partials[name](context, options);\n      } else {\n        throw new Exception(\"The partial \" + name + \" could not be compiled when running in runtime-only mode\");\n      }\n    };\n\n    // Just add water\n    var container = {\n      escapeExpression: Utils.escapeExpression,\n      invokePartial: invokePartialWrapper,\n      programs: [],\n      program: function(i, fn, data) {\n        var programWrapper = this.programs[i];\n        if(data) {\n          programWrapper = program(i, fn, data);\n        } else if (!programWrapper) {\n          programWrapper = this.programs[i] = program(i, fn);\n        }\n        return programWrapper;\n      },\n      merge: function(param, common) {\n        var ret = param || common;\n\n        if (param && common && (param !== common)) {\n          ret = {};\n          Utils.extend(ret, common);\n          Utils.extend(ret, param);\n        }\n        return ret;\n      },\n      programWithDepth: env.VM.programWithDepth,\n      noop: env.VM.noop,\n      compilerInfo: null\n    };\n\n    return function(context, options) {\n      options = options || {};\n      var namespace = options.partial ? options : env,\n          helpers,\n          partials;\n\n      if (!options.partial) {\n        helpers = options.helpers;\n        partials = options.partials;\n      }\n      var result = templateSpec.call(\n            container,\n            namespace, context,\n            helpers,\n            partials,\n            options.data);\n\n      if (!options.partial) {\n        env.VM.checkRevision(container.compilerInfo);\n      }\n\n      return result;\n    };\n  }\n\n  __exports__.template = template;function programWithDepth(i, fn, data /*, $depth */) {\n    var args = Array.prototype.slice.call(arguments, 3);\n\n    var prog = function(context, options) {\n      options = options || {};\n\n      return fn.apply(this, [context, options.data || data].concat(args));\n    };\n    prog.program = i;\n    prog.depth = args.length;\n    return prog;\n  }\n\n  __exports__.programWithDepth = programWithDepth;function program(i, fn, data) {\n    var prog = function(context, options) {\n      options = options || {};\n\n      return fn(context, options.data || data);\n    };\n    prog.program = i;\n    prog.depth = 0;\n    return prog;\n  }\n\n  __exports__.program = program;function invokePartial(partial, name, context, helpers, partials, data) {\n    var options = { partial: true, helpers: helpers, partials: partials, data: data };\n\n    if(partial === undefined) {\n      throw new Exception(\"The partial \" + name + \" could not be found\");\n    } else if(partial instanceof Function) {\n      return partial(context, options);\n    }\n  }\n\n  __exports__.invokePartial = invokePartial;function noop() { return \"\"; }\n\n  __exports__.noop = noop;\n  return __exports__;\n})(__module3__, __module5__, __module2__);\n\n// handlebars.runtime.js\nvar __module1__ = (function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {\n  \"use strict\";\n  var __exports__;\n  /*globals Handlebars: true */\n  var base = __dependency1__;\n\n  // Each of these augment the Handlebars object. No need to setup here.\n  // (This is done to easily share code between commonjs and browse envs)\n  var SafeString = __dependency2__;\n  var Exception = __dependency3__;\n  var Utils = __dependency4__;\n  var runtime = __dependency5__;\n\n  // For compatibility and usage outside of module systems, make the Handlebars object a namespace\n  var create = function() {\n    var hb = new base.HandlebarsEnvironment();\n\n    Utils.extend(hb, base);\n    hb.SafeString = SafeString;\n    hb.Exception = Exception;\n    hb.Utils = Utils;\n\n    hb.VM = runtime;\n    hb.template = function(spec) {\n      return runtime.template(spec, hb);\n    };\n\n    return hb;\n  };\n\n  var Handlebars = create();\n  Handlebars.create = create;\n\n  __exports__ = Handlebars;\n  return __exports__;\n})(__module2__, __module4__, __module5__, __module3__, __module6__);\n\n// handlebars/compiler/ast.js\nvar __module7__ = (function(__dependency1__) {\n  \"use strict\";\n  var __exports__;\n  var Exception = __dependency1__;\n\n  function LocationInfo(locInfo){\n    locInfo = locInfo || {};\n    this.firstLine   = locInfo.first_line;\n    this.firstColumn = locInfo.first_column;\n    this.lastColumn  = locInfo.last_column;\n    this.lastLine    = locInfo.last_line;\n  }\n\n  var AST = {\n    ProgramNode: function(statements, inverseStrip, inverse, locInfo) {\n      var inverseLocationInfo, firstInverseNode;\n      if (arguments.length === 3) {\n        locInfo = inverse;\n        inverse = null;\n      } else if (arguments.length === 2) {\n        locInfo = inverseStrip;\n        inverseStrip = null;\n      }\n\n      LocationInfo.call(this, locInfo);\n      this.type = \"program\";\n      this.statements = statements;\n      this.strip = {};\n\n      if(inverse) {\n        firstInverseNode = inverse[0];\n        if (firstInverseNode) {\n          inverseLocationInfo = {\n            first_line: firstInverseNode.firstLine,\n            last_line: firstInverseNode.lastLine,\n            last_column: firstInverseNode.lastColumn,\n            first_column: firstInverseNode.firstColumn\n          };\n          this.inverse = new AST.ProgramNode(inverse, inverseStrip, inverseLocationInfo);\n        } else {\n          this.inverse = new AST.ProgramNode(inverse, inverseStrip);\n        }\n        this.strip.right = inverseStrip.left;\n      } else if (inverseStrip) {\n        this.strip.left = inverseStrip.right;\n      }\n    },\n\n    MustacheNode: function(rawParams, hash, open, strip, locInfo) {\n      LocationInfo.call(this, locInfo);\n      this.type = \"mustache\";\n      this.strip = strip;\n\n      // Open may be a string parsed from the parser or a passed boolean flag\n      if (open != null && open.charAt) {\n        // Must use charAt to support IE pre-10\n        var escapeFlag = open.charAt(3) || open.charAt(2);\n        this.escaped = escapeFlag !== '{' && escapeFlag !== '&';\n      } else {\n        this.escaped = !!open;\n      }\n\n      if (rawParams instanceof AST.SexprNode) {\n        this.sexpr = rawParams;\n      } else {\n        // Support old AST API\n        this.sexpr = new AST.SexprNode(rawParams, hash);\n      }\n\n      this.sexpr.isRoot = true;\n\n      // Support old AST API that stored this info in MustacheNode\n      this.id = this.sexpr.id;\n      this.params = this.sexpr.params;\n      this.hash = this.sexpr.hash;\n      this.eligibleHelper = this.sexpr.eligibleHelper;\n      this.isHelper = this.sexpr.isHelper;\n    },\n\n    SexprNode: function(rawParams, hash, locInfo) {\n      LocationInfo.call(this, locInfo);\n\n      this.type = \"sexpr\";\n      this.hash = hash;\n\n      var id = this.id = rawParams[0];\n      var params = this.params = rawParams.slice(1);\n\n      // a mustache is an eligible helper if:\n      // * its id is simple (a single part, not `this` or `..`)\n      var eligibleHelper = this.eligibleHelper = id.isSimple;\n\n      // a mustache is definitely a helper if:\n      // * it is an eligible helper, and\n      // * it has at least one parameter or hash segment\n      this.isHelper = eligibleHelper && (params.length || hash);\n\n      // if a mustache is an eligible helper but not a definite\n      // helper, it is ambiguous, and will be resolved in a later\n      // pass or at runtime.\n    },\n\n    PartialNode: function(partialName, context, strip, locInfo) {\n      LocationInfo.call(this, locInfo);\n      this.type         = \"partial\";\n      this.partialName  = partialName;\n      this.context      = context;\n      this.strip = strip;\n    },\n\n    BlockNode: function(mustache, program, inverse, close, locInfo) {\n      LocationInfo.call(this, locInfo);\n\n      if(mustache.sexpr.id.original !== close.path.original) {\n        throw new Exception(mustache.sexpr.id.original + \" doesn't match \" + close.path.original, this);\n      }\n\n      this.type = 'block';\n      this.mustache = mustache;\n      this.program  = program;\n      this.inverse  = inverse;\n\n      this.strip = {\n        left: mustache.strip.left,\n        right: close.strip.right\n      };\n\n      (program || inverse).strip.left = mustache.strip.right;\n      (inverse || program).strip.right = close.strip.left;\n\n      if (inverse && !program) {\n        this.isInverse = true;\n      }\n    },\n\n    ContentNode: function(string, locInfo) {\n      LocationInfo.call(this, locInfo);\n      this.type = \"content\";\n      this.string = string;\n    },\n\n    HashNode: function(pairs, locInfo) {\n      LocationInfo.call(this, locInfo);\n      this.type = \"hash\";\n      this.pairs = pairs;\n    },\n\n    IdNode: function(parts, locInfo) {\n      LocationInfo.call(this, locInfo);\n      this.type = \"ID\";\n\n      var original = \"\",\n          dig = [],\n          depth = 0;\n\n      for(var i=0,l=parts.length; i<l; i++) {\n        var part = parts[i].part;\n        original += (parts[i].separator || '') + part;\n\n        if (part === \"..\" || part === \".\" || part === \"this\") {\n          if (dig.length > 0) {\n            throw new Exception(\"Invalid path: \" + original, this);\n          } else if (part === \"..\") {\n            depth++;\n          } else {\n            this.isScoped = true;\n          }\n        } else {\n          dig.push(part);\n        }\n      }\n\n      this.original = original;\n      this.parts    = dig;\n      this.string   = dig.join('.');\n      this.depth    = depth;\n\n      // an ID is simple if it only has one part, and that part is not\n      // `..` or `this`.\n      this.isSimple = parts.length === 1 && !this.isScoped && depth === 0;\n\n      this.stringModeValue = this.string;\n    },\n\n    PartialNameNode: function(name, locInfo) {\n      LocationInfo.call(this, locInfo);\n      this.type = \"PARTIAL_NAME\";\n      this.name = name.original;\n    },\n\n    DataNode: function(id, locInfo) {\n      LocationInfo.call(this, locInfo);\n      this.type = \"DATA\";\n      this.id = id;\n    },\n\n    StringNode: function(string, locInfo) {\n      LocationInfo.call(this, locInfo);\n      this.type = \"STRING\";\n      this.original =\n        this.string =\n        this.stringModeValue = string;\n    },\n\n    IntegerNode: function(integer, locInfo) {\n      LocationInfo.call(this, locInfo);\n      this.type = \"INTEGER\";\n      this.original =\n        this.integer = integer;\n      this.stringModeValue = Number(integer);\n    },\n\n    BooleanNode: function(bool, locInfo) {\n      LocationInfo.call(this, locInfo);\n      this.type = \"BOOLEAN\";\n      this.bool = bool;\n      this.stringModeValue = bool === \"true\";\n    },\n\n    CommentNode: function(comment, locInfo) {\n      LocationInfo.call(this, locInfo);\n      this.type = \"comment\";\n      this.comment = comment;\n    }\n  };\n\n  // Must be exported as an object rather than the root of the module as the jison lexer\n  // most modify the object to operate properly.\n  __exports__ = AST;\n  return __exports__;\n})(__module5__);\n\n// handlebars/compiler/parser.js\nvar __module9__ = (function() {\n  \"use strict\";\n  var __exports__;\n  /* jshint ignore:start */\n  /* Jison generated parser */\n  var handlebars = (function(){\n  var parser = {trace: function trace() { },\n  yy: {},\n  symbols_: {\"error\":2,\"root\":3,\"statements\":4,\"EOF\":5,\"program\":6,\"simpleInverse\":7,\"statement\":8,\"openInverse\":9,\"closeBlock\":10,\"openBlock\":11,\"mustache\":12,\"partial\":13,\"CONTENT\":14,\"COMMENT\":15,\"OPEN_BLOCK\":16,\"sexpr\":17,\"CLOSE\":18,\"OPEN_INVERSE\":19,\"OPEN_ENDBLOCK\":20,\"path\":21,\"OPEN\":22,\"OPEN_UNESCAPED\":23,\"CLOSE_UNESCAPED\":24,\"OPEN_PARTIAL\":25,\"partialName\":26,\"partial_option0\":27,\"sexpr_repetition0\":28,\"sexpr_option0\":29,\"dataName\":30,\"param\":31,\"STRING\":32,\"INTEGER\":33,\"BOOLEAN\":34,\"OPEN_SEXPR\":35,\"CLOSE_SEXPR\":36,\"hash\":37,\"hash_repetition_plus0\":38,\"hashSegment\":39,\"ID\":40,\"EQUALS\":41,\"DATA\":42,\"pathSegments\":43,\"SEP\":44,\"$accept\":0,\"$end\":1},\n  terminals_: {2:\"error\",5:\"EOF\",14:\"CONTENT\",15:\"COMMENT\",16:\"OPEN_BLOCK\",18:\"CLOSE\",19:\"OPEN_INVERSE\",20:\"OPEN_ENDBLOCK\",22:\"OPEN\",23:\"OPEN_UNESCAPED\",24:\"CLOSE_UNESCAPED\",25:\"OPEN_PARTIAL\",32:\"STRING\",33:\"INTEGER\",34:\"BOOLEAN\",35:\"OPEN_SEXPR\",36:\"CLOSE_SEXPR\",40:\"ID\",41:\"EQUALS\",42:\"DATA\",44:\"SEP\"},\n  productions_: [0,[3,2],[3,1],[6,2],[6,3],[6,2],[6,1],[6,1],[6,0],[4,1],[4,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,4],[7,2],[17,3],[17,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,3],[37,1],[39,3],[26,1],[26,1],[26,1],[30,2],[21,1],[43,3],[43,1],[27,0],[27,1],[28,0],[28,2],[29,0],[29,1],[38,1],[38,2]],\n  performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {\n\n  var $0 = $$.length - 1;\n  switch (yystate) {\n  case 1: return new yy.ProgramNode($$[$0-1], this._$); \n  break;\n  case 2: return new yy.ProgramNode([], this._$); \n  break;\n  case 3:this.$ = new yy.ProgramNode([], $$[$0-1], $$[$0], this._$);\n  break;\n  case 4:this.$ = new yy.ProgramNode($$[$0-2], $$[$0-1], $$[$0], this._$);\n  break;\n  case 5:this.$ = new yy.ProgramNode($$[$0-1], $$[$0], [], this._$);\n  break;\n  case 6:this.$ = new yy.ProgramNode($$[$0], this._$);\n  break;\n  case 7:this.$ = new yy.ProgramNode([], this._$);\n  break;\n  case 8:this.$ = new yy.ProgramNode([], this._$);\n  break;\n  case 9:this.$ = [$$[$0]];\n  break;\n  case 10: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; \n  break;\n  case 11:this.$ = new yy.BlockNode($$[$0-2], $$[$0-1].inverse, $$[$0-1], $$[$0], this._$);\n  break;\n  case 12:this.$ = new yy.BlockNode($$[$0-2], $$[$0-1], $$[$0-1].inverse, $$[$0], this._$);\n  break;\n  case 13:this.$ = $$[$0];\n  break;\n  case 14:this.$ = $$[$0];\n  break;\n  case 15:this.$ = new yy.ContentNode($$[$0], this._$);\n  break;\n  case 16:this.$ = new yy.CommentNode($$[$0], this._$);\n  break;\n  case 17:this.$ = new yy.MustacheNode($$[$0-1], null, $$[$0-2], stripFlags($$[$0-2], $$[$0]), this._$);\n  break;\n  case 18:this.$ = new yy.MustacheNode($$[$0-1], null, $$[$0-2], stripFlags($$[$0-2], $$[$0]), this._$);\n  break;\n  case 19:this.$ = {path: $$[$0-1], strip: stripFlags($$[$0-2], $$[$0])};\n  break;\n  case 20:this.$ = new yy.MustacheNode($$[$0-1], null, $$[$0-2], stripFlags($$[$0-2], $$[$0]), this._$);\n  break;\n  case 21:this.$ = new yy.MustacheNode($$[$0-1], null, $$[$0-2], stripFlags($$[$0-2], $$[$0]), this._$);\n  break;\n  case 22:this.$ = new yy.PartialNode($$[$0-2], $$[$0-1], stripFlags($$[$0-3], $$[$0]), this._$);\n  break;\n  case 23:this.$ = stripFlags($$[$0-1], $$[$0]);\n  break;\n  case 24:this.$ = new yy.SexprNode([$$[$0-2]].concat($$[$0-1]), $$[$0], this._$);\n  break;\n  case 25:this.$ = new yy.SexprNode([$$[$0]], null, this._$);\n  break;\n  case 26:this.$ = $$[$0];\n  break;\n  case 27:this.$ = new yy.StringNode($$[$0], this._$);\n  break;\n  case 28:this.$ = new yy.IntegerNode($$[$0], this._$);\n  break;\n  case 29:this.$ = new yy.BooleanNode($$[$0], this._$);\n  break;\n  case 30:this.$ = $$[$0];\n  break;\n  case 31:$$[$0-1].isHelper = true; this.$ = $$[$0-1];\n  break;\n  case 32:this.$ = new yy.HashNode($$[$0], this._$);\n  break;\n  case 33:this.$ = [$$[$0-2], $$[$0]];\n  break;\n  case 34:this.$ = new yy.PartialNameNode($$[$0], this._$);\n  break;\n  case 35:this.$ = new yy.PartialNameNode(new yy.StringNode($$[$0], this._$), this._$);\n  break;\n  case 36:this.$ = new yy.PartialNameNode(new yy.IntegerNode($$[$0], this._$));\n  break;\n  case 37:this.$ = new yy.DataNode($$[$0], this._$);\n  break;\n  case 38:this.$ = new yy.IdNode($$[$0], this._$);\n  break;\n  case 39: $$[$0-2].push({part: $$[$0], separator: $$[$0-1]}); this.$ = $$[$0-2]; \n  break;\n  case 40:this.$ = [{part: $$[$0]}];\n  break;\n  case 43:this.$ = [];\n  break;\n  case 44:$$[$0-1].push($$[$0]);\n  break;\n  case 47:this.$ = [$$[$0]];\n  break;\n  case 48:$$[$0-1].push($$[$0]);\n  break;\n  }\n  },\n  table: [{3:1,4:2,5:[1,3],8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],25:[1,15]},{1:[3]},{5:[1,16],8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],25:[1,15]},{1:[2,2]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],25:[2,9]},{4:20,6:18,7:19,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,21],20:[2,8],22:[1,13],23:[1,14],25:[1,15]},{4:20,6:22,7:19,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,21],20:[2,8],22:[1,13],23:[1,14],25:[1,15]},{5:[2,13],14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],25:[2,13]},{5:[2,14],14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],25:[2,14]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],25:[2,15]},{5:[2,16],14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],25:[2,16]},{17:23,21:24,30:25,40:[1,28],42:[1,27],43:26},{17:29,21:24,30:25,40:[1,28],42:[1,27],43:26},{17:30,21:24,30:25,40:[1,28],42:[1,27],43:26},{17:31,21:24,30:25,40:[1,28],42:[1,27],43:26},{21:33,26:32,32:[1,34],33:[1,35],40:[1,28],43:26},{1:[2,1]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],25:[2,10]},{10:36,20:[1,37]},{4:38,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,7],22:[1,13],23:[1,14],25:[1,15]},{7:39,8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,21],20:[2,6],22:[1,13],23:[1,14],25:[1,15]},{17:23,18:[1,40],21:24,30:25,40:[1,28],42:[1,27],43:26},{10:41,20:[1,37]},{18:[1,42]},{18:[2,43],24:[2,43],28:43,32:[2,43],33:[2,43],34:[2,43],35:[2,43],36:[2,43],40:[2,43],42:[2,43]},{18:[2,25],24:[2,25],36:[2,25]},{18:[2,38],24:[2,38],32:[2,38],33:[2,38],34:[2,38],35:[2,38],36:[2,38],40:[2,38],42:[2,38],44:[1,44]},{21:45,40:[1,28],43:26},{18:[2,40],24:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],40:[2,40],42:[2,40],44:[2,40]},{18:[1,46]},{18:[1,47]},{24:[1,48]},{18:[2,41],21:50,27:49,40:[1,28],43:26},{18:[2,34],40:[2,34]},{18:[2,35],40:[2,35]},{18:[2,36],40:[2,36]},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],25:[2,11]},{21:51,40:[1,28],43:26},{8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,3],22:[1,13],23:[1,14],25:[1,15]},{4:52,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,5],22:[1,13],23:[1,14],25:[1,15]},{14:[2,23],15:[2,23],16:[2,23],19:[2,23],20:[2,23],22:[2,23],23:[2,23],25:[2,23]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],25:[2,12]},{14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],25:[2,18]},{18:[2,45],21:56,24:[2,45],29:53,30:60,31:54,32:[1,57],33:[1,58],34:[1,59],35:[1,61],36:[2,45],37:55,38:62,39:63,40:[1,64],42:[1,27],43:26},{40:[1,65]},{18:[2,37],24:[2,37],32:[2,37],33:[2,37],34:[2,37],35:[2,37],36:[2,37],40:[2,37],42:[2,37]},{14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],25:[2,17]},{5:[2,20],14:[2,20],15:[2,20],16:[2,20],19:[2,20],20:[2,20],22:[2,20],23:[2,20],25:[2,20]},{5:[2,21],14:[2,21],15:[2,21],16:[2,21],19:[2,21],20:[2,21],22:[2,21],23:[2,21],25:[2,21]},{18:[1,66]},{18:[2,42]},{18:[1,67]},{8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,4],22:[1,13],23:[1,14],25:[1,15]},{18:[2,24],24:[2,24],36:[2,24]},{18:[2,44],24:[2,44],32:[2,44],33:[2,44],34:[2,44],35:[2,44],36:[2,44],40:[2,44],42:[2,44]},{18:[2,46],24:[2,46],36:[2,46]},{18:[2,26],24:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[2,26],36:[2,26],40:[2,26],42:[2,26]},{18:[2,27],24:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],36:[2,27],40:[2,27],42:[2,27]},{18:[2,28],24:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[2,28],40:[2,28],42:[2,28]},{18:[2,29],24:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],40:[2,29],42:[2,29]},{18:[2,30],24:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],36:[2,30],40:[2,30],42:[2,30]},{17:68,21:24,30:25,40:[1,28],42:[1,27],43:26},{18:[2,32],24:[2,32],36:[2,32],39:69,40:[1,70]},{18:[2,47],24:[2,47],36:[2,47],40:[2,47]},{18:[2,40],24:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],40:[2,40],41:[1,71],42:[2,40],44:[2,40]},{18:[2,39],24:[2,39],32:[2,39],33:[2,39],34:[2,39],35:[2,39],36:[2,39],40:[2,39],42:[2,39],44:[2,39]},{5:[2,22],14:[2,22],15:[2,22],16:[2,22],19:[2,22],20:[2,22],22:[2,22],23:[2,22],25:[2,22]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],25:[2,19]},{36:[1,72]},{18:[2,48],24:[2,48],36:[2,48],40:[2,48]},{41:[1,71]},{21:56,30:60,31:73,32:[1,57],33:[1,58],34:[1,59],35:[1,61],40:[1,28],42:[1,27],43:26},{18:[2,31],24:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],36:[2,31],40:[2,31],42:[2,31]},{18:[2,33],24:[2,33],36:[2,33],40:[2,33]}],\n  defaultActions: {3:[2,2],16:[2,1],50:[2,42]},\n  parseError: function parseError(str, hash) {\n      throw new Error(str);\n  },\n  parse: function parse(input) {\n      var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n      this.lexer.setInput(input);\n      this.lexer.yy = this.yy;\n      this.yy.lexer = this.lexer;\n      this.yy.parser = this;\n      if (typeof this.lexer.yylloc == \"undefined\")\n          this.lexer.yylloc = {};\n      var yyloc = this.lexer.yylloc;\n      lstack.push(yyloc);\n      var ranges = this.lexer.options && this.lexer.options.ranges;\n      if (typeof this.yy.parseError === \"function\")\n          this.parseError = this.yy.parseError;\n      function popStack(n) {\n          stack.length = stack.length - 2 * n;\n          vstack.length = vstack.length - n;\n          lstack.length = lstack.length - n;\n      }\n      function lex() {\n          var token;\n          token = self.lexer.lex() || 1;\n          if (typeof token !== \"number\") {\n              token = self.symbols_[token] || token;\n          }\n          return token;\n      }\n      var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n      while (true) {\n          state = stack[stack.length - 1];\n          if (this.defaultActions[state]) {\n              action = this.defaultActions[state];\n          } else {\n              if (symbol === null || typeof symbol == \"undefined\") {\n                  symbol = lex();\n              }\n              action = table[state] && table[state][symbol];\n          }\n          if (typeof action === \"undefined\" || !action.length || !action[0]) {\n              var errStr = \"\";\n              if (!recovering) {\n                  expected = [];\n                  for (p in table[state])\n                      if (this.terminals_[p] && p > 2) {\n                          expected.push(\"'\" + this.terminals_[p] + \"'\");\n                      }\n                  if (this.lexer.showPosition) {\n                      errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + this.lexer.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n                  } else {\n                      errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == 1?\"end of input\":\"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n                  }\n                  this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});\n              }\n          }\n          if (action[0] instanceof Array && action.length > 1) {\n              throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n          }\n          switch (action[0]) {\n          case 1:\n              stack.push(symbol);\n              vstack.push(this.lexer.yytext);\n              lstack.push(this.lexer.yylloc);\n              stack.push(action[1]);\n              symbol = null;\n              if (!preErrorSymbol) {\n                  yyleng = this.lexer.yyleng;\n                  yytext = this.lexer.yytext;\n                  yylineno = this.lexer.yylineno;\n                  yyloc = this.lexer.yylloc;\n                  if (recovering > 0)\n                      recovering--;\n              } else {\n                  symbol = preErrorSymbol;\n                  preErrorSymbol = null;\n              }\n              break;\n          case 2:\n              len = this.productions_[action[1]][1];\n              yyval.$ = vstack[vstack.length - len];\n              yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};\n              if (ranges) {\n                  yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n              }\n              r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\n              if (typeof r !== \"undefined\") {\n                  return r;\n              }\n              if (len) {\n                  stack = stack.slice(0, -1 * len * 2);\n                  vstack = vstack.slice(0, -1 * len);\n                  lstack = lstack.slice(0, -1 * len);\n              }\n              stack.push(this.productions_[action[1]][0]);\n              vstack.push(yyval.$);\n              lstack.push(yyval._$);\n              newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n              stack.push(newState);\n              break;\n          case 3:\n              return true;\n          }\n      }\n      return true;\n  }\n  };\n\n\n  function stripFlags(open, close) {\n    return {\n      left: open.charAt(2) === '~',\n      right: close.charAt(0) === '~' || close.charAt(1) === '~'\n    };\n  }\n\n  /* Jison generated lexer */\n  var lexer = (function(){\n  var lexer = ({EOF:1,\n  parseError:function parseError(str, hash) {\n          if (this.yy.parser) {\n              this.yy.parser.parseError(str, hash);\n          } else {\n              throw new Error(str);\n          }\n      },\n  setInput:function (input) {\n          this._input = input;\n          this._more = this._less = this.done = false;\n          this.yylineno = this.yyleng = 0;\n          this.yytext = this.matched = this.match = '';\n          this.conditionStack = ['INITIAL'];\n          this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};\n          if (this.options.ranges) this.yylloc.range = [0,0];\n          this.offset = 0;\n          return this;\n      },\n  input:function () {\n          var ch = this._input[0];\n          this.yytext += ch;\n          this.yyleng++;\n          this.offset++;\n          this.match += ch;\n          this.matched += ch;\n          var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n          if (lines) {\n              this.yylineno++;\n              this.yylloc.last_line++;\n          } else {\n              this.yylloc.last_column++;\n          }\n          if (this.options.ranges) this.yylloc.range[1]++;\n\n          this._input = this._input.slice(1);\n          return ch;\n      },\n  unput:function (ch) {\n          var len = ch.length;\n          var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n          this._input = ch + this._input;\n          this.yytext = this.yytext.substr(0, this.yytext.length-len-1);\n          //this.yyleng -= len;\n          this.offset -= len;\n          var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n          this.match = this.match.substr(0, this.match.length-1);\n          this.matched = this.matched.substr(0, this.matched.length-1);\n\n          if (lines.length-1) this.yylineno -= lines.length-1;\n          var r = this.yylloc.range;\n\n          this.yylloc = {first_line: this.yylloc.first_line,\n            last_line: this.yylineno+1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:\n                this.yylloc.first_column - len\n            };\n\n          if (this.options.ranges) {\n              this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n          }\n          return this;\n      },\n  more:function () {\n          this._more = true;\n          return this;\n      },\n  less:function (n) {\n          this.unput(this.match.slice(n));\n      },\n  pastInput:function () {\n          var past = this.matched.substr(0, this.matched.length - this.match.length);\n          return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n      },\n  upcomingInput:function () {\n          var next = this.match;\n          if (next.length < 20) {\n              next += this._input.substr(0, 20-next.length);\n          }\n          return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\\n/g, \"\");\n      },\n  showPosition:function () {\n          var pre = this.pastInput();\n          var c = new Array(pre.length + 1).join(\"-\");\n          return pre + this.upcomingInput() + \"\\n\" + c+\"^\";\n      },\n  next:function () {\n          if (this.done) {\n              return this.EOF;\n          }\n          if (!this._input) this.done = true;\n\n          var token,\n              match,\n              tempMatch,\n              index,\n              col,\n              lines;\n          if (!this._more) {\n              this.yytext = '';\n              this.match = '';\n          }\n          var rules = this._currentRules();\n          for (var i=0;i < rules.length; i++) {\n              tempMatch = this._input.match(this.rules[rules[i]]);\n              if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                  match = tempMatch;\n                  index = i;\n                  if (!this.options.flex) break;\n              }\n          }\n          if (match) {\n              lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n              if (lines) this.yylineno += lines.length;\n              this.yylloc = {first_line: this.yylloc.last_line,\n                             last_line: this.yylineno+1,\n                             first_column: this.yylloc.last_column,\n                             last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length};\n              this.yytext += match[0];\n              this.match += match[0];\n              this.matches = match;\n              this.yyleng = this.yytext.length;\n              if (this.options.ranges) {\n                  this.yylloc.range = [this.offset, this.offset += this.yyleng];\n              }\n              this._more = false;\n              this._input = this._input.slice(match[0].length);\n              this.matched += match[0];\n              token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);\n              if (this.done && this._input) this.done = false;\n              if (token) return token;\n              else return;\n          }\n          if (this._input === \"\") {\n              return this.EOF;\n          } else {\n              return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\\n'+this.showPosition(),\n                      {text: \"\", token: null, line: this.yylineno});\n          }\n      },\n  lex:function lex() {\n          var r = this.next();\n          if (typeof r !== 'undefined') {\n              return r;\n          } else {\n              return this.lex();\n          }\n      },\n  begin:function begin(condition) {\n          this.conditionStack.push(condition);\n      },\n  popState:function popState() {\n          return this.conditionStack.pop();\n      },\n  _currentRules:function _currentRules() {\n          return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;\n      },\n  topState:function () {\n          return this.conditionStack[this.conditionStack.length-2];\n      },\n  pushState:function begin(condition) {\n          this.begin(condition);\n      }});\n  lexer.options = {};\n  lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\n\n\n  function strip(start, end) {\n    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);\n  }\n\n\n  var YYSTATE=YY_START\n  switch($avoiding_name_collisions) {\n  case 0:\n                                     if(yy_.yytext.slice(-2) === \"\\\\\\\\\") {\n                                       strip(0,1);\n                                       this.begin(\"mu\");\n                                     } else if(yy_.yytext.slice(-1) === \"\\\\\") {\n                                       strip(0,1);\n                                       this.begin(\"emu\");\n                                     } else {\n                                       this.begin(\"mu\");\n                                     }\n                                     if(yy_.yytext) return 14;\n                                   \n  break;\n  case 1:return 14;\n  break;\n  case 2:\n                                     this.popState();\n                                     return 14;\n                                   \n  break;\n  case 3:strip(0,4); this.popState(); return 15;\n  break;\n  case 4:return 35;\n  break;\n  case 5:return 36;\n  break;\n  case 6:return 25;\n  break;\n  case 7:return 16;\n  break;\n  case 8:return 20;\n  break;\n  case 9:return 19;\n  break;\n  case 10:return 19;\n  break;\n  case 11:return 23;\n  break;\n  case 12:return 22;\n  break;\n  case 13:this.popState(); this.begin('com');\n  break;\n  case 14:strip(3,5); this.popState(); return 15;\n  break;\n  case 15:return 22;\n  break;\n  case 16:return 41;\n  break;\n  case 17:return 40;\n  break;\n  case 18:return 40;\n  break;\n  case 19:return 44;\n  break;\n  case 20:// ignore whitespace\n  break;\n  case 21:this.popState(); return 24;\n  break;\n  case 22:this.popState(); return 18;\n  break;\n  case 23:yy_.yytext = strip(1,2).replace(/\\\\\"/g,'\"'); return 32;\n  break;\n  case 24:yy_.yytext = strip(1,2).replace(/\\\\'/g,\"'\"); return 32;\n  break;\n  case 25:return 42;\n  break;\n  case 26:return 34;\n  break;\n  case 27:return 34;\n  break;\n  case 28:return 33;\n  break;\n  case 29:return 40;\n  break;\n  case 30:yy_.yytext = strip(1,2); return 40;\n  break;\n  case 31:return 'INVALID';\n  break;\n  case 32:return 5;\n  break;\n  }\n  };\n  lexer.rules = [/^(?:[^\\x00]*?(?=(\\{\\{)))/,/^(?:[^\\x00]+)/,/^(?:[^\\x00]{2,}?(?=(\\{\\{|\\\\\\{\\{|\\\\\\\\\\{\\{|$)))/,/^(?:[\\s\\S]*?--\\}\\})/,/^(?:\\()/,/^(?:\\))/,/^(?:\\{\\{(~)?>)/,/^(?:\\{\\{(~)?#)/,/^(?:\\{\\{(~)?\\/)/,/^(?:\\{\\{(~)?\\^)/,/^(?:\\{\\{(~)?\\s*else\\b)/,/^(?:\\{\\{(~)?\\{)/,/^(?:\\{\\{(~)?&)/,/^(?:\\{\\{!--)/,/^(?:\\{\\{![\\s\\S]*?\\}\\})/,/^(?:\\{\\{(~)?)/,/^(?:=)/,/^(?:\\.\\.)/,/^(?:\\.(?=([=~}\\s\\/.)])))/,/^(?:[\\/.])/,/^(?:\\s+)/,/^(?:\\}(~)?\\}\\})/,/^(?:(~)?\\}\\})/,/^(?:\"(\\\\[\"]|[^\"])*\")/,/^(?:'(\\\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\\s)])))/,/^(?:false(?=([~}\\s)])))/,/^(?:-?[0-9]+(?=([~}\\s)])))/,/^(?:([^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=([=~}\\s\\/.)]))))/,/^(?:\\[[^\\]]*\\])/,/^(?:.)/,/^(?:$)/];\n  lexer.conditions = {\"mu\":{\"rules\":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],\"inclusive\":false},\"emu\":{\"rules\":[2],\"inclusive\":false},\"com\":{\"rules\":[3],\"inclusive\":false},\"INITIAL\":{\"rules\":[0,1,32],\"inclusive\":true}};\n  return lexer;})()\n  parser.lexer = lexer;\n  function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;\n  return new Parser;\n  })();__exports__ = handlebars;\n  /* jshint ignore:end */\n  return __exports__;\n})();\n\n// handlebars/compiler/base.js\nvar __module8__ = (function(__dependency1__, __dependency2__) {\n  \"use strict\";\n  var __exports__ = {};\n  var parser = __dependency1__;\n  var AST = __dependency2__;\n\n  __exports__.parser = parser;\n\n  function parse(input) {\n    // Just return if an already-compile AST was passed in.\n    if(input.constructor === AST.ProgramNode) { return input; }\n\n    parser.yy = AST;\n    return parser.parse(input);\n  }\n\n  __exports__.parse = parse;\n  return __exports__;\n})(__module9__, __module7__);\n\n// handlebars/compiler/compiler.js\nvar __module10__ = (function(__dependency1__) {\n  \"use strict\";\n  var __exports__ = {};\n  var Exception = __dependency1__;\n\n  function Compiler() {}\n\n  __exports__.Compiler = Compiler;// the foundHelper register will disambiguate helper lookup from finding a\n  // function in a context. This is necessary for mustache compatibility, which\n  // requires that context functions in blocks are evaluated by blockHelperMissing,\n  // and then proceed as if the resulting value was provided to blockHelperMissing.\n\n  Compiler.prototype = {\n    compiler: Compiler,\n\n    disassemble: function() {\n      var opcodes = this.opcodes, opcode, out = [], params, param;\n\n      for (var i=0, l=opcodes.length; i<l; i++) {\n        opcode = opcodes[i];\n\n        if (opcode.opcode === 'DECLARE') {\n          out.push(\"DECLARE \" + opcode.name + \"=\" + opcode.value);\n        } else {\n          params = [];\n          for (var j=0; j<opcode.args.length; j++) {\n            param = opcode.args[j];\n            if (typeof param === \"string\") {\n              param = \"\\\"\" + param.replace(\"\\n\", \"\\\\n\") + \"\\\"\";\n            }\n            params.push(param);\n          }\n          out.push(opcode.opcode + \" \" + params.join(\" \"));\n        }\n      }\n\n      return out.join(\"\\n\");\n    },\n\n    equals: function(other) {\n      var len = this.opcodes.length;\n      if (other.opcodes.length !== len) {\n        return false;\n      }\n\n      for (var i = 0; i < len; i++) {\n        var opcode = this.opcodes[i],\n            otherOpcode = other.opcodes[i];\n        if (opcode.opcode !== otherOpcode.opcode || opcode.args.length !== otherOpcode.args.length) {\n          return false;\n        }\n        for (var j = 0; j < opcode.args.length; j++) {\n          if (opcode.args[j] !== otherOpcode.args[j]) {\n            return false;\n          }\n        }\n      }\n\n      len = this.children.length;\n      if (other.children.length !== len) {\n        return false;\n      }\n      for (i = 0; i < len; i++) {\n        if (!this.children[i].equals(other.children[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    guid: 0,\n\n    compile: function(program, options) {\n      this.opcodes = [];\n      this.children = [];\n      this.depths = {list: []};\n      this.options = options;\n\n      // These changes will propagate to the other compiler components\n      var knownHelpers = this.options.knownHelpers;\n      this.options.knownHelpers = {\n        'helperMissing': true,\n        'blockHelperMissing': true,\n        'each': true,\n        'if': true,\n        'unless': true,\n        'with': true,\n        'log': true\n      };\n      if (knownHelpers) {\n        for (var name in knownHelpers) {\n          this.options.knownHelpers[name] = knownHelpers[name];\n        }\n      }\n\n      return this.accept(program);\n    },\n\n    accept: function(node) {\n      var strip = node.strip || {},\n          ret;\n      if (strip.left) {\n        this.opcode('strip');\n      }\n\n      ret = this[node.type](node);\n\n      if (strip.right) {\n        this.opcode('strip');\n      }\n\n      return ret;\n    },\n\n    program: function(program) {\n      var statements = program.statements;\n\n      for(var i=0, l=statements.length; i<l; i++) {\n        this.accept(statements[i]);\n      }\n      this.isSimple = l === 1;\n\n      this.depths.list = this.depths.list.sort(function(a, b) {\n        return a - b;\n      });\n\n      return this;\n    },\n\n    compileProgram: function(program) {\n      var result = new this.compiler().compile(program, this.options);\n      var guid = this.guid++, depth;\n\n      this.usePartial = this.usePartial || result.usePartial;\n\n      this.children[guid] = result;\n\n      for(var i=0, l=result.depths.list.length; i<l; i++) {\n        depth = result.depths.list[i];\n\n        if(depth < 2) { continue; }\n        else { this.addDepth(depth - 1); }\n      }\n\n      return guid;\n    },\n\n    block: function(block) {\n      var mustache = block.mustache,\n          program = block.program,\n          inverse = block.inverse;\n\n      if (program) {\n        program = this.compileProgram(program);\n      }\n\n      if (inverse) {\n        inverse = this.compileProgram(inverse);\n      }\n\n      var sexpr = mustache.sexpr;\n      var type = this.classifySexpr(sexpr);\n\n      if (type === \"helper\") {\n        this.helperSexpr(sexpr, program, inverse);\n      } else if (type === \"simple\") {\n        this.simpleSexpr(sexpr);\n\n        // now that the simple mustache is resolved, we need to\n        // evaluate it by executing `blockHelperMissing`\n        this.opcode('pushProgram', program);\n        this.opcode('pushProgram', inverse);\n        this.opcode('emptyHash');\n        this.opcode('blockValue');\n      } else {\n        this.ambiguousSexpr(sexpr, program, inverse);\n\n        // now that the simple mustache is resolved, we need to\n        // evaluate it by executing `blockHelperMissing`\n        this.opcode('pushProgram', program);\n        this.opcode('pushProgram', inverse);\n        this.opcode('emptyHash');\n        this.opcode('ambiguousBlockValue');\n      }\n\n      this.opcode('append');\n    },\n\n    hash: function(hash) {\n      var pairs = hash.pairs, pair, val;\n\n      this.opcode('pushHash');\n\n      for(var i=0, l=pairs.length; i<l; i++) {\n        pair = pairs[i];\n        val  = pair[1];\n\n        if (this.options.stringParams) {\n          if(val.depth) {\n            this.addDepth(val.depth);\n          }\n          this.opcode('getContext', val.depth || 0);\n          this.opcode('pushStringParam', val.stringModeValue, val.type);\n\n          if (val.type === 'sexpr') {\n            // Subexpressions get evaluated and passed in\n            // in string params mode.\n            this.sexpr(val);\n          }\n        } else {\n          this.accept(val);\n        }\n\n        this.opcode('assignToHash', pair[0]);\n      }\n      this.opcode('popHash');\n    },\n\n    partial: function(partial) {\n      var partialName = partial.partialName;\n      this.usePartial = true;\n\n      if(partial.context) {\n        this.ID(partial.context);\n      } else {\n        this.opcode('push', 'depth0');\n      }\n\n      this.opcode('invokePartial', partialName.name);\n      this.opcode('append');\n    },\n\n    content: function(content) {\n      this.opcode('appendContent', content.string);\n    },\n\n    mustache: function(mustache) {\n      this.sexpr(mustache.sexpr);\n\n      if(mustache.escaped && !this.options.noEscape) {\n        this.opcode('appendEscaped');\n      } else {\n        this.opcode('append');\n      }\n    },\n\n    ambiguousSexpr: function(sexpr, program, inverse) {\n      var id = sexpr.id,\n          name = id.parts[0],\n          isBlock = program != null || inverse != null;\n\n      this.opcode('getContext', id.depth);\n\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n\n      this.opcode('invokeAmbiguous', name, isBlock);\n    },\n\n    simpleSexpr: function(sexpr) {\n      var id = sexpr.id;\n\n      if (id.type === 'DATA') {\n        this.DATA(id);\n      } else if (id.parts.length) {\n        this.ID(id);\n      } else {\n        // Simplified ID for `this`\n        this.addDepth(id.depth);\n        this.opcode('getContext', id.depth);\n        this.opcode('pushContext');\n      }\n\n      this.opcode('resolvePossibleLambda');\n    },\n\n    helperSexpr: function(sexpr, program, inverse) {\n      var params = this.setupFullMustacheParams(sexpr, program, inverse),\n          name = sexpr.id.parts[0];\n\n      if (this.options.knownHelpers[name]) {\n        this.opcode('invokeKnownHelper', params.length, name);\n      } else if (this.options.knownHelpersOnly) {\n        throw new Exception(\"You specified knownHelpersOnly, but used the unknown helper \" + name, sexpr);\n      } else {\n        this.opcode('invokeHelper', params.length, name, sexpr.isRoot);\n      }\n    },\n\n    sexpr: function(sexpr) {\n      var type = this.classifySexpr(sexpr);\n\n      if (type === \"simple\") {\n        this.simpleSexpr(sexpr);\n      } else if (type === \"helper\") {\n        this.helperSexpr(sexpr);\n      } else {\n        this.ambiguousSexpr(sexpr);\n      }\n    },\n\n    ID: function(id) {\n      this.addDepth(id.depth);\n      this.opcode('getContext', id.depth);\n\n      var name = id.parts[0];\n      if (!name) {\n        this.opcode('pushContext');\n      } else {\n        this.opcode('lookupOnContext', id.parts[0]);\n      }\n\n      for(var i=1, l=id.parts.length; i<l; i++) {\n        this.opcode('lookup', id.parts[i]);\n      }\n    },\n\n    DATA: function(data) {\n      this.options.data = true;\n      if (data.id.isScoped || data.id.depth) {\n        throw new Exception('Scoped data references are not supported: ' + data.original, data);\n      }\n\n      this.opcode('lookupData');\n      var parts = data.id.parts;\n      for(var i=0, l=parts.length; i<l; i++) {\n        this.opcode('lookup', parts[i]);\n      }\n    },\n\n    STRING: function(string) {\n      this.opcode('pushString', string.string);\n    },\n\n    INTEGER: function(integer) {\n      this.opcode('pushLiteral', integer.integer);\n    },\n\n    BOOLEAN: function(bool) {\n      this.opcode('pushLiteral', bool.bool);\n    },\n\n    comment: function() {},\n\n    // HELPERS\n    opcode: function(name) {\n      this.opcodes.push({ opcode: name, args: [].slice.call(arguments, 1) });\n    },\n\n    declare: function(name, value) {\n      this.opcodes.push({ opcode: 'DECLARE', name: name, value: value });\n    },\n\n    addDepth: function(depth) {\n      if(depth === 0) { return; }\n\n      if(!this.depths[depth]) {\n        this.depths[depth] = true;\n        this.depths.list.push(depth);\n      }\n    },\n\n    classifySexpr: function(sexpr) {\n      var isHelper   = sexpr.isHelper;\n      var isEligible = sexpr.eligibleHelper;\n      var options    = this.options;\n\n      // if ambiguous, we can possibly resolve the ambiguity now\n      if (isEligible && !isHelper) {\n        var name = sexpr.id.parts[0];\n\n        if (options.knownHelpers[name]) {\n          isHelper = true;\n        } else if (options.knownHelpersOnly) {\n          isEligible = false;\n        }\n      }\n\n      if (isHelper) { return \"helper\"; }\n      else if (isEligible) { return \"ambiguous\"; }\n      else { return \"simple\"; }\n    },\n\n    pushParams: function(params) {\n      var i = params.length, param;\n\n      while(i--) {\n        param = params[i];\n\n        if(this.options.stringParams) {\n          if(param.depth) {\n            this.addDepth(param.depth);\n          }\n\n          this.opcode('getContext', param.depth || 0);\n          this.opcode('pushStringParam', param.stringModeValue, param.type);\n\n          if (param.type === 'sexpr') {\n            // Subexpressions get evaluated and passed in\n            // in string params mode.\n            this.sexpr(param);\n          }\n        } else {\n          this[param.type](param);\n        }\n      }\n    },\n\n    setupFullMustacheParams: function(sexpr, program, inverse) {\n      var params = sexpr.params;\n      this.pushParams(params);\n\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n\n      if (sexpr.hash) {\n        this.hash(sexpr.hash);\n      } else {\n        this.opcode('emptyHash');\n      }\n\n      return params;\n    }\n  };\n\n  function precompile(input, options, env) {\n    if (input == null || (typeof input !== 'string' && input.constructor !== env.AST.ProgramNode)) {\n      throw new Exception(\"You must pass a string or Handlebars AST to Handlebars.precompile. You passed \" + input);\n    }\n\n    options = options || {};\n    if (!('data' in options)) {\n      options.data = true;\n    }\n\n    var ast = env.parse(input);\n    var environment = new env.Compiler().compile(ast, options);\n    return new env.JavaScriptCompiler().compile(environment, options);\n  }\n\n  __exports__.precompile = precompile;function compile(input, options, env) {\n    if (input == null || (typeof input !== 'string' && input.constructor !== env.AST.ProgramNode)) {\n      throw new Exception(\"You must pass a string or Handlebars AST to Handlebars.compile. You passed \" + input);\n    }\n\n    options = options || {};\n\n    if (!('data' in options)) {\n      options.data = true;\n    }\n\n    var compiled;\n\n    function compileInput() {\n      var ast = env.parse(input);\n      var environment = new env.Compiler().compile(ast, options);\n      var templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);\n      return env.template(templateSpec);\n    }\n\n    // Template is only compiled on first use and cached after that point.\n    return function(context, options) {\n      if (!compiled) {\n        compiled = compileInput();\n      }\n      return compiled.call(this, context, options);\n    };\n  }\n\n  __exports__.compile = compile;\n  return __exports__;\n})(__module5__);\n\n// handlebars/compiler/javascript-compiler.js\nvar __module11__ = (function(__dependency1__, __dependency2__) {\n  \"use strict\";\n  var __exports__;\n  var COMPILER_REVISION = __dependency1__.COMPILER_REVISION;\n  var REVISION_CHANGES = __dependency1__.REVISION_CHANGES;\n  var log = __dependency1__.log;\n  var Exception = __dependency2__;\n\n  function Literal(value) {\n    this.value = value;\n  }\n\n  function JavaScriptCompiler() {}\n\n  JavaScriptCompiler.prototype = {\n    // PUBLIC API: You can override these methods in a subclass to provide\n    // alternative compiled forms for name lookup and buffering semantics\n    nameLookup: function(parent, name /* , type*/) {\n      var wrap,\n          ret;\n      if (parent.indexOf('depth') === 0) {\n        wrap = true;\n      }\n\n      if (/^[0-9]+$/.test(name)) {\n        ret = parent + \"[\" + name + \"]\";\n      } else if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {\n        ret = parent + \".\" + name;\n      }\n      else {\n        ret = parent + \"['\" + name + \"']\";\n      }\n\n      if (wrap) {\n        return '(' + parent + ' && ' + ret + ')';\n      } else {\n        return ret;\n      }\n    },\n\n    compilerInfo: function() {\n      var revision = COMPILER_REVISION,\n          versions = REVISION_CHANGES[revision];\n      return \"this.compilerInfo = [\"+revision+\",'\"+versions+\"'];\\n\";\n    },\n\n    appendToBuffer: function(string) {\n      if (this.environment.isSimple) {\n        return \"return \" + string + \";\";\n      } else {\n        return {\n          appendToBuffer: true,\n          content: string,\n          toString: function() { return \"buffer += \" + string + \";\"; }\n        };\n      }\n    },\n\n    initializeBuffer: function() {\n      return this.quotedString(\"\");\n    },\n\n    namespace: \"Handlebars\",\n    // END PUBLIC API\n\n    compile: function(environment, options, context, asObject) {\n      this.environment = environment;\n      this.options = options || {};\n\n      log('debug', this.environment.disassemble() + \"\\n\\n\");\n\n      this.name = this.environment.name;\n      this.isChild = !!context;\n      this.context = context || {\n        programs: [],\n        environments: [],\n        aliases: { }\n      };\n\n      this.preamble();\n\n      this.stackSlot = 0;\n      this.stackVars = [];\n      this.registers = { list: [] };\n      this.hashes = [];\n      this.compileStack = [];\n      this.inlineStack = [];\n\n      this.compileChildren(environment, options);\n\n      var opcodes = environment.opcodes, opcode;\n\n      this.i = 0;\n\n      for(var l=opcodes.length; this.i<l; this.i++) {\n        opcode = opcodes[this.i];\n\n        if(opcode.opcode === 'DECLARE') {\n          this[opcode.name] = opcode.value;\n        } else {\n          this[opcode.opcode].apply(this, opcode.args);\n        }\n\n        // Reset the stripNext flag if it was not set by this operation.\n        if (opcode.opcode !== this.stripNext) {\n          this.stripNext = false;\n        }\n      }\n\n      // Flush any trailing content that might be pending.\n      this.pushSource('');\n\n      if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {\n        throw new Exception('Compile completed with content left on stack');\n      }\n\n      return this.createFunctionContext(asObject);\n    },\n\n    preamble: function() {\n      var out = [];\n\n      if (!this.isChild) {\n        var namespace = this.namespace;\n\n        var copies = \"helpers = this.merge(helpers, \" + namespace + \".helpers);\";\n        if (this.environment.usePartial) { copies = copies + \" partials = this.merge(partials, \" + namespace + \".partials);\"; }\n        if (this.options.data) { copies = copies + \" data = data || {};\"; }\n        out.push(copies);\n      } else {\n        out.push('');\n      }\n\n      if (!this.environment.isSimple) {\n        out.push(\", buffer = \" + this.initializeBuffer());\n      } else {\n        out.push(\"\");\n      }\n\n      // track the last context pushed into place to allow skipping the\n      // getContext opcode when it would be a noop\n      this.lastContext = 0;\n      this.source = out;\n    },\n\n    createFunctionContext: function(asObject) {\n      var locals = this.stackVars.concat(this.registers.list);\n\n      if(locals.length > 0) {\n        this.source[1] = this.source[1] + \", \" + locals.join(\", \");\n      }\n\n      // Generate minimizer alias mappings\n      if (!this.isChild) {\n        for (var alias in this.context.aliases) {\n          if (this.context.aliases.hasOwnProperty(alias)) {\n            this.source[1] = this.source[1] + ', ' + alias + '=' + this.context.aliases[alias];\n          }\n        }\n      }\n\n      if (this.source[1]) {\n        this.source[1] = \"var \" + this.source[1].substring(2) + \";\";\n      }\n\n      // Merge children\n      if (!this.isChild) {\n        this.source[1] += '\\n' + this.context.programs.join('\\n') + '\\n';\n      }\n\n      if (!this.environment.isSimple) {\n        this.pushSource(\"return buffer;\");\n      }\n\n      var params = this.isChild ? [\"depth0\", \"data\"] : [\"Handlebars\", \"depth0\", \"helpers\", \"partials\", \"data\"];\n\n      for(var i=0, l=this.environment.depths.list.length; i<l; i++) {\n        params.push(\"depth\" + this.environment.depths.list[i]);\n      }\n\n      // Perform a second pass over the output to merge content when possible\n      var source = this.mergeSource();\n\n      if (!this.isChild) {\n        source = this.compilerInfo()+source;\n      }\n\n      if (asObject) {\n        params.push(source);\n\n        return Function.apply(this, params);\n      } else {\n        var functionSource = 'function ' + (this.name || '') + '(' + params.join(',') + ') {\\n  ' + source + '}';\n        log('debug', functionSource + \"\\n\\n\");\n        return functionSource;\n      }\n    },\n    mergeSource: function() {\n      // WARN: We are not handling the case where buffer is still populated as the source should\n      // not have buffer append operations as their final action.\n      var source = '',\n          buffer;\n      for (var i = 0, len = this.source.length; i < len; i++) {\n        var line = this.source[i];\n        if (line.appendToBuffer) {\n          if (buffer) {\n            buffer = buffer + '\\n    + ' + line.content;\n          } else {\n            buffer = line.content;\n          }\n        } else {\n          if (buffer) {\n            source += 'buffer += ' + buffer + ';\\n  ';\n            buffer = undefined;\n          }\n          source += line + '\\n  ';\n        }\n      }\n      return source;\n    },\n\n    // [blockValue]\n    //\n    // On stack, before: hash, inverse, program, value\n    // On stack, after: return value of blockHelperMissing\n    //\n    // The purpose of this opcode is to take a block of the form\n    // `{{#foo}}...{{/foo}}`, resolve the value of `foo`, and\n    // replace it on the stack with the result of properly\n    // invoking blockHelperMissing.\n    blockValue: function() {\n      this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';\n\n      var params = [\"depth0\"];\n      this.setupParams(0, params);\n\n      this.replaceStack(function(current) {\n        params.splice(1, 0, current);\n        return \"blockHelperMissing.call(\" + params.join(\", \") + \")\";\n      });\n    },\n\n    // [ambiguousBlockValue]\n    //\n    // On stack, before: hash, inverse, program, value\n    // Compiler value, before: lastHelper=value of last found helper, if any\n    // On stack, after, if no lastHelper: same as [blockValue]\n    // On stack, after, if lastHelper: value\n    ambiguousBlockValue: function() {\n      this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';\n\n      var params = [\"depth0\"];\n      this.setupParams(0, params);\n\n      var current = this.topStack();\n      params.splice(1, 0, current);\n\n      this.pushSource(\"if (!\" + this.lastHelper + \") { \" + current + \" = blockHelperMissing.call(\" + params.join(\", \") + \"); }\");\n    },\n\n    // [appendContent]\n    //\n    // On stack, before: ...\n    // On stack, after: ...\n    //\n    // Appends the string value of `content` to the current buffer\n    appendContent: function(content) {\n      if (this.pendingContent) {\n        content = this.pendingContent + content;\n      }\n      if (this.stripNext) {\n        content = content.replace(/^\\s+/, '');\n      }\n\n      this.pendingContent = content;\n    },\n\n    // [strip]\n    //\n    // On stack, before: ...\n    // On stack, after: ...\n    //\n    // Removes any trailing whitespace from the prior content node and flags\n    // the next operation for stripping if it is a content node.\n    strip: function() {\n      if (this.pendingContent) {\n        this.pendingContent = this.pendingContent.replace(/\\s+$/, '');\n      }\n      this.stripNext = 'strip';\n    },\n\n    // [append]\n    //\n    // On stack, before: value, ...\n    // On stack, after: ...\n    //\n    // Coerces `value` to a String and appends it to the current buffer.\n    //\n    // If `value` is truthy, or 0, it is coerced into a string and appended\n    // Otherwise, the empty string is appended\n    append: function() {\n      // Force anything that is inlined onto the stack so we don't have duplication\n      // when we examine local\n      this.flushInline();\n      var local = this.popStack();\n      this.pushSource(\"if(\" + local + \" || \" + local + \" === 0) { \" + this.appendToBuffer(local) + \" }\");\n      if (this.environment.isSimple) {\n        this.pushSource(\"else { \" + this.appendToBuffer(\"''\") + \" }\");\n      }\n    },\n\n    // [appendEscaped]\n    //\n    // On stack, before: value, ...\n    // On stack, after: ...\n    //\n    // Escape `value` and append it to the buffer\n    appendEscaped: function() {\n      this.context.aliases.escapeExpression = 'this.escapeExpression';\n\n      this.pushSource(this.appendToBuffer(\"escapeExpression(\" + this.popStack() + \")\"));\n    },\n\n    // [getContext]\n    //\n    // On stack, before: ...\n    // On stack, after: ...\n    // Compiler value, after: lastContext=depth\n    //\n    // Set the value of the `lastContext` compiler value to the depth\n    getContext: function(depth) {\n      if(this.lastContext !== depth) {\n        this.lastContext = depth;\n      }\n    },\n\n    // [lookupOnContext]\n    //\n    // On stack, before: ...\n    // On stack, after: currentContext[name], ...\n    //\n    // Looks up the value of `name` on the current context and pushes\n    // it onto the stack.\n    lookupOnContext: function(name) {\n      this.push(this.nameLookup('depth' + this.lastContext, name, 'context'));\n    },\n\n    // [pushContext]\n    //\n    // On stack, before: ...\n    // On stack, after: currentContext, ...\n    //\n    // Pushes the value of the current context onto the stack.\n    pushContext: function() {\n      this.pushStackLiteral('depth' + this.lastContext);\n    },\n\n    // [resolvePossibleLambda]\n    //\n    // On stack, before: value, ...\n    // On stack, after: resolved value, ...\n    //\n    // If the `value` is a lambda, replace it on the stack by\n    // the return value of the lambda\n    resolvePossibleLambda: function() {\n      this.context.aliases.functionType = '\"function\"';\n\n      this.replaceStack(function(current) {\n        return \"typeof \" + current + \" === functionType ? \" + current + \".apply(depth0) : \" + current;\n      });\n    },\n\n    // [lookup]\n    //\n    // On stack, before: value, ...\n    // On stack, after: value[name], ...\n    //\n    // Replace the value on the stack with the result of looking\n    // up `name` on `value`\n    lookup: function(name) {\n      this.replaceStack(function(current) {\n        return current + \" == null || \" + current + \" === false ? \" + current + \" : \" + this.nameLookup(current, name, 'context');\n      });\n    },\n\n    // [lookupData]\n    //\n    // On stack, before: ...\n    // On stack, after: data, ...\n    //\n    // Push the data lookup operator\n    lookupData: function() {\n      this.pushStackLiteral('data');\n    },\n\n    // [pushStringParam]\n    //\n    // On stack, before: ...\n    // On stack, after: string, currentContext, ...\n    //\n    // This opcode is designed for use in string mode, which\n    // provides the string value of a parameter along with its\n    // depth rather than resolving it immediately.\n    pushStringParam: function(string, type) {\n      this.pushStackLiteral('depth' + this.lastContext);\n\n      this.pushString(type);\n\n      // If it's a subexpression, the string result\n      // will be pushed after this opcode.\n      if (type !== 'sexpr') {\n        if (typeof string === 'string') {\n          this.pushString(string);\n        } else {\n          this.pushStackLiteral(string);\n        }\n      }\n    },\n\n    emptyHash: function() {\n      this.pushStackLiteral('{}');\n\n      if (this.options.stringParams) {\n        this.push('{}'); // hashContexts\n        this.push('{}'); // hashTypes\n      }\n    },\n    pushHash: function() {\n      if (this.hash) {\n        this.hashes.push(this.hash);\n      }\n      this.hash = {values: [], types: [], contexts: []};\n    },\n    popHash: function() {\n      var hash = this.hash;\n      this.hash = this.hashes.pop();\n\n      if (this.options.stringParams) {\n        this.push('{' + hash.contexts.join(',') + '}');\n        this.push('{' + hash.types.join(',') + '}');\n      }\n\n      this.push('{\\n    ' + hash.values.join(',\\n    ') + '\\n  }');\n    },\n\n    // [pushString]\n    //\n    // On stack, before: ...\n    // On stack, after: quotedString(string), ...\n    //\n    // Push a quoted version of `string` onto the stack\n    pushString: function(string) {\n      this.pushStackLiteral(this.quotedString(string));\n    },\n\n    // [push]\n    //\n    // On stack, before: ...\n    // On stack, after: expr, ...\n    //\n    // Push an expression onto the stack\n    push: function(expr) {\n      this.inlineStack.push(expr);\n      return expr;\n    },\n\n    // [pushLiteral]\n    //\n    // On stack, before: ...\n    // On stack, after: value, ...\n    //\n    // Pushes a value onto the stack. This operation prevents\n    // the compiler from creating a temporary variable to hold\n    // it.\n    pushLiteral: function(value) {\n      this.pushStackLiteral(value);\n    },\n\n    // [pushProgram]\n    //\n    // On stack, before: ...\n    // On stack, after: program(guid), ...\n    //\n    // Push a program expression onto the stack. This takes\n    // a compile-time guid and converts it into a runtime-accessible\n    // expression.\n    pushProgram: function(guid) {\n      if (guid != null) {\n        this.pushStackLiteral(this.programExpression(guid));\n      } else {\n        this.pushStackLiteral(null);\n      }\n    },\n\n    // [invokeHelper]\n    //\n    // On stack, before: hash, inverse, program, params..., ...\n    // On stack, after: result of helper invocation\n    //\n    // Pops off the helper's parameters, invokes the helper,\n    // and pushes the helper's return value onto the stack.\n    //\n    // If the helper is not found, `helperMissing` is called.\n    invokeHelper: function(paramSize, name, isRoot) {\n      this.context.aliases.helperMissing = 'helpers.helperMissing';\n      this.useRegister('helper');\n\n      var helper = this.lastHelper = this.setupHelper(paramSize, name, true);\n      var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');\n\n      var lookup = 'helper = ' + helper.name + ' || ' + nonHelper;\n      if (helper.paramsInit) {\n        lookup += ',' + helper.paramsInit;\n      }\n\n      this.push(\n        '('\n          + lookup\n          + ',helper '\n            + '? helper.call(' + helper.callParams + ') '\n            + ': helperMissing.call(' + helper.helperMissingParams + '))');\n\n      // Always flush subexpressions. This is both to prevent the compounding size issue that\n      // occurs when the code has to be duplicated for inlining and also to prevent errors\n      // due to the incorrect options object being passed due to the shared register.\n      if (!isRoot) {\n        this.flushInline();\n      }\n    },\n\n    // [invokeKnownHelper]\n    //\n    // On stack, before: hash, inverse, program, params..., ...\n    // On stack, after: result of helper invocation\n    //\n    // This operation is used when the helper is known to exist,\n    // so a `helperMissing` fallback is not required.\n    invokeKnownHelper: function(paramSize, name) {\n      var helper = this.setupHelper(paramSize, name);\n      this.push(helper.name + \".call(\" + helper.callParams + \")\");\n    },\n\n    // [invokeAmbiguous]\n    //\n    // On stack, before: hash, inverse, program, params..., ...\n    // On stack, after: result of disambiguation\n    //\n    // This operation is used when an expression like `{{foo}}`\n    // is provided, but we don't know at compile-time whether it\n    // is a helper or a path.\n    //\n    // This operation emits more code than the other options,\n    // and can be avoided by passing the `knownHelpers` and\n    // `knownHelpersOnly` flags at compile-time.\n    invokeAmbiguous: function(name, helperCall) {\n      this.context.aliases.functionType = '\"function\"';\n      this.useRegister('helper');\n\n      this.emptyHash();\n      var helper = this.setupHelper(0, name, helperCall);\n\n      var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');\n\n      var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');\n      var nextStack = this.nextStack();\n\n      if (helper.paramsInit) {\n        this.pushSource(helper.paramsInit);\n      }\n      this.pushSource('if (helper = ' + helperName + ') { ' + nextStack + ' = helper.call(' + helper.callParams + '); }');\n      this.pushSource('else { helper = ' + nonHelper + '; ' + nextStack + ' = typeof helper === functionType ? helper.call(' + helper.callParams + ') : helper; }');\n    },\n\n    // [invokePartial]\n    //\n    // On stack, before: context, ...\n    // On stack after: result of partial invocation\n    //\n    // This operation pops off a context, invokes a partial with that context,\n    // and pushes the result of the invocation back.\n    invokePartial: function(name) {\n      var params = [this.nameLookup('partials', name, 'partial'), \"'\" + name + \"'\", this.popStack(), \"helpers\", \"partials\"];\n\n      if (this.options.data) {\n        params.push(\"data\");\n      }\n\n      this.context.aliases.self = \"this\";\n      this.push(\"self.invokePartial(\" + params.join(\", \") + \")\");\n    },\n\n    // [assignToHash]\n    //\n    // On stack, before: value, hash, ...\n    // On stack, after: hash, ...\n    //\n    // Pops a value and hash off the stack, assigns `hash[key] = value`\n    // and pushes the hash back onto the stack.\n    assignToHash: function(key) {\n      var value = this.popStack(),\n          context,\n          type;\n\n      if (this.options.stringParams) {\n        type = this.popStack();\n        context = this.popStack();\n      }\n\n      var hash = this.hash;\n      if (context) {\n        hash.contexts.push(\"'\" + key + \"': \" + context);\n      }\n      if (type) {\n        hash.types.push(\"'\" + key + \"': \" + type);\n      }\n      hash.values.push(\"'\" + key + \"': (\" + value + \")\");\n    },\n\n    // HELPERS\n\n    compiler: JavaScriptCompiler,\n\n    compileChildren: function(environment, options) {\n      var children = environment.children, child, compiler;\n\n      for(var i=0, l=children.length; i<l; i++) {\n        child = children[i];\n        compiler = new this.compiler();\n\n        var index = this.matchExistingProgram(child);\n\n        if (index == null) {\n          this.context.programs.push('');     // Placeholder to prevent name conflicts for nested children\n          index = this.context.programs.length;\n          child.index = index;\n          child.name = 'program' + index;\n          this.context.programs[index] = compiler.compile(child, options, this.context);\n          this.context.environments[index] = child;\n        } else {\n          child.index = index;\n          child.name = 'program' + index;\n        }\n      }\n    },\n    matchExistingProgram: function(child) {\n      for (var i = 0, len = this.context.environments.length; i < len; i++) {\n        var environment = this.context.environments[i];\n        if (environment && environment.equals(child)) {\n          return i;\n        }\n      }\n    },\n\n    programExpression: function(guid) {\n      this.context.aliases.self = \"this\";\n\n      if(guid == null) {\n        return \"self.noop\";\n      }\n\n      var child = this.environment.children[guid],\n          depths = child.depths.list, depth;\n\n      var programParams = [child.index, child.name, \"data\"];\n\n      for(var i=0, l = depths.length; i<l; i++) {\n        depth = depths[i];\n\n        if(depth === 1) { programParams.push(\"depth0\"); }\n        else { programParams.push(\"depth\" + (depth - 1)); }\n      }\n\n      return (depths.length === 0 ? \"self.program(\" : \"self.programWithDepth(\") + programParams.join(\", \") + \")\";\n    },\n\n    register: function(name, val) {\n      this.useRegister(name);\n      this.pushSource(name + \" = \" + val + \";\");\n    },\n\n    useRegister: function(name) {\n      if(!this.registers[name]) {\n        this.registers[name] = true;\n        this.registers.list.push(name);\n      }\n    },\n\n    pushStackLiteral: function(item) {\n      return this.push(new Literal(item));\n    },\n\n    pushSource: function(source) {\n      if (this.pendingContent) {\n        this.source.push(this.appendToBuffer(this.quotedString(this.pendingContent)));\n        this.pendingContent = undefined;\n      }\n\n      if (source) {\n        this.source.push(source);\n      }\n    },\n\n    pushStack: function(item) {\n      this.flushInline();\n\n      var stack = this.incrStack();\n      if (item) {\n        this.pushSource(stack + \" = \" + item + \";\");\n      }\n      this.compileStack.push(stack);\n      return stack;\n    },\n\n    replaceStack: function(callback) {\n      var prefix = '',\n          inline = this.isInline(),\n          stack,\n          createdStack,\n          usedLiteral;\n\n      // If we are currently inline then we want to merge the inline statement into the\n      // replacement statement via ','\n      if (inline) {\n        var top = this.popStack(true);\n\n        if (top instanceof Literal) {\n          // Literals do not need to be inlined\n          stack = top.value;\n          usedLiteral = true;\n        } else {\n          // Get or create the current stack name for use by the inline\n          createdStack = !this.stackSlot;\n          var name = !createdStack ? this.topStackName() : this.incrStack();\n\n          prefix = '(' + this.push(name) + ' = ' + top + '),';\n          stack = this.topStack();\n        }\n      } else {\n        stack = this.topStack();\n      }\n\n      var item = callback.call(this, stack);\n\n      if (inline) {\n        if (!usedLiteral) {\n          this.popStack();\n        }\n        if (createdStack) {\n          this.stackSlot--;\n        }\n        this.push('(' + prefix + item + ')');\n      } else {\n        // Prevent modification of the context depth variable. Through replaceStack\n        if (!/^stack/.test(stack)) {\n          stack = this.nextStack();\n        }\n\n        this.pushSource(stack + \" = (\" + prefix + item + \");\");\n      }\n      return stack;\n    },\n\n    nextStack: function() {\n      return this.pushStack();\n    },\n\n    incrStack: function() {\n      this.stackSlot++;\n      if(this.stackSlot > this.stackVars.length) { this.stackVars.push(\"stack\" + this.stackSlot); }\n      return this.topStackName();\n    },\n    topStackName: function() {\n      return \"stack\" + this.stackSlot;\n    },\n    flushInline: function() {\n      var inlineStack = this.inlineStack;\n      if (inlineStack.length) {\n        this.inlineStack = [];\n        for (var i = 0, len = inlineStack.length; i < len; i++) {\n          var entry = inlineStack[i];\n          if (entry instanceof Literal) {\n            this.compileStack.push(entry);\n          } else {\n            this.pushStack(entry);\n          }\n        }\n      }\n    },\n    isInline: function() {\n      return this.inlineStack.length;\n    },\n\n    popStack: function(wrapped) {\n      var inline = this.isInline(),\n          item = (inline ? this.inlineStack : this.compileStack).pop();\n\n      if (!wrapped && (item instanceof Literal)) {\n        return item.value;\n      } else {\n        if (!inline) {\n          if (!this.stackSlot) {\n            throw new Exception('Invalid stack pop');\n          }\n          this.stackSlot--;\n        }\n        return item;\n      }\n    },\n\n    topStack: function(wrapped) {\n      var stack = (this.isInline() ? this.inlineStack : this.compileStack),\n          item = stack[stack.length - 1];\n\n      if (!wrapped && (item instanceof Literal)) {\n        return item.value;\n      } else {\n        return item;\n      }\n    },\n\n    quotedString: function(str) {\n      return '\"' + str\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\"/g, '\\\\\"')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/\\u2028/g, '\\\\u2028')   // Per Ecma-262 7.3 + 7.8.4\n        .replace(/\\u2029/g, '\\\\u2029') + '\"';\n    },\n\n    setupHelper: function(paramSize, name, missingParams) {\n      var params = [],\n          paramsInit = this.setupParams(paramSize, params, missingParams);\n      var foundHelper = this.nameLookup('helpers', name, 'helper');\n\n      return {\n        params: params,\n        paramsInit: paramsInit,\n        name: foundHelper,\n        callParams: [\"depth0\"].concat(params).join(\", \"),\n        helperMissingParams: missingParams && [\"depth0\", this.quotedString(name)].concat(params).join(\", \")\n      };\n    },\n\n    setupOptions: function(paramSize, params) {\n      var options = [], contexts = [], types = [], param, inverse, program;\n\n      options.push(\"hash:\" + this.popStack());\n\n      if (this.options.stringParams) {\n        options.push(\"hashTypes:\" + this.popStack());\n        options.push(\"hashContexts:\" + this.popStack());\n      }\n\n      inverse = this.popStack();\n      program = this.popStack();\n\n      // Avoid setting fn and inverse if neither are set. This allows\n      // helpers to do a check for `if (options.fn)`\n      if (program || inverse) {\n        if (!program) {\n          this.context.aliases.self = \"this\";\n          program = \"self.noop\";\n        }\n\n        if (!inverse) {\n          this.context.aliases.self = \"this\";\n          inverse = \"self.noop\";\n        }\n\n        options.push(\"inverse:\" + inverse);\n        options.push(\"fn:\" + program);\n      }\n\n      for(var i=0; i<paramSize; i++) {\n        param = this.popStack();\n        params.push(param);\n\n        if(this.options.stringParams) {\n          types.push(this.popStack());\n          contexts.push(this.popStack());\n        }\n      }\n\n      if (this.options.stringParams) {\n        options.push(\"contexts:[\" + contexts.join(\",\") + \"]\");\n        options.push(\"types:[\" + types.join(\",\") + \"]\");\n      }\n\n      if(this.options.data) {\n        options.push(\"data:data\");\n      }\n\n      return options;\n    },\n\n    // the params and contexts arguments are passed in arrays\n    // to fill in\n    setupParams: function(paramSize, params, useRegister) {\n      var options = '{' + this.setupOptions(paramSize, params).join(',') + '}';\n\n      if (useRegister) {\n        this.useRegister('options');\n        params.push('options');\n        return 'options=' + options;\n      } else {\n        params.push(options);\n        return '';\n      }\n    }\n  };\n\n  var reservedWords = (\n    \"break else new var\" +\n    \" case finally return void\" +\n    \" catch for switch while\" +\n    \" continue function this with\" +\n    \" default if throw\" +\n    \" delete in try\" +\n    \" do instanceof typeof\" +\n    \" abstract enum int short\" +\n    \" boolean export interface static\" +\n    \" byte extends long super\" +\n    \" char final native synchronized\" +\n    \" class float package throws\" +\n    \" const goto private transient\" +\n    \" debugger implements protected volatile\" +\n    \" double import public let yield\"\n  ).split(\" \");\n\n  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};\n\n  for(var i=0, l=reservedWords.length; i<l; i++) {\n    compilerWords[reservedWords[i]] = true;\n  }\n\n  JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {\n    if(!JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name)) {\n      return true;\n    }\n    return false;\n  };\n\n  __exports__ = JavaScriptCompiler;\n  return __exports__;\n})(__module2__, __module5__);\n\n// handlebars.js\nvar __module0__ = (function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {\n  \"use strict\";\n  var __exports__;\n  /*globals Handlebars: true */\n  var Handlebars = __dependency1__;\n\n  // Compiler imports\n  var AST = __dependency2__;\n  var Parser = __dependency3__.parser;\n  var parse = __dependency3__.parse;\n  var Compiler = __dependency4__.Compiler;\n  var compile = __dependency4__.compile;\n  var precompile = __dependency4__.precompile;\n  var JavaScriptCompiler = __dependency5__;\n\n  var _create = Handlebars.create;\n  var create = function() {\n    var hb = _create();\n\n    hb.compile = function(input, options) {\n      return compile(input, options, hb);\n    };\n    hb.precompile = function (input, options) {\n      return precompile(input, options, hb);\n    };\n\n    hb.AST = AST;\n    hb.Compiler = Compiler;\n    hb.JavaScriptCompiler = JavaScriptCompiler;\n    hb.Parser = Parser;\n    hb.parse = parse;\n\n    return hb;\n  };\n\n  Handlebars = create();\n  Handlebars.create = create;\n\n  __exports__ = Handlebars;\n  return __exports__;\n})(__module1__, __module7__, __module8__, __module10__, __module11__);\n\n  return __module0__;\n})();\n","/*!\n * @overview  Ember - JavaScript Application Framework\n * @copyright Copyright 2011-2014 Tilde Inc. and contributors\n *            Portions Copyright 2006-2011 Strobe Inc.\n *            Portions Copyright 2008-2011 Apple Inc. All rights reserved.\n * @license   Licensed under MIT license\n *            See https://raw.github.com/emberjs/ember.js/master/LICENSE\n * @version   1.8.1\n */\n\n(function() {\nvar enifed, requireModule, eriuqer, requirejs, Ember;\n\n(function() {\n  Ember = this.Ember = this.Ember || {};\n  if (typeof Ember === 'undefined') { Ember = {}; };\n\n  if (typeof Ember.__loader === 'undefined') {\n    var registry = {}, seen = {};\n\n    enifed = function(name, deps, callback) {\n      registry[name] = { deps: deps, callback: callback };\n    };\n\n    requirejs = eriuqer = requireModule = function(name) {\n      if (seen.hasOwnProperty(name)) { return seen[name]; }\n      seen[name] = {};\n\n      if (!registry[name]) {\n        throw new Error(\"Could not find module \" + name);\n      }\n\n      var mod = registry[name];\n      var deps = mod.deps;\n      var callback = mod.callback;\n      var reified = [];\n      var exports;\n\n      for (var i=0, l=deps.length; i<l; i++) {\n        if (deps[i] === 'exports') {\n          reified.push(exports = {});\n        } else {\n          reified.push(requireModule(resolve(deps[i])));\n        }\n      }\n\n      var value = callback.apply(this, reified);\n      return seen[name] = exports || value;\n\n      function resolve(child) {\n        if (child.charAt(0) !== '.') { return child; }\n        var parts = child.split(\"/\");\n        var parentBase = name.split(\"/\").slice(0, -1);\n\n        for (var i=0, l=parts.length; i<l; i++) {\n          var part = parts[i];\n\n          if (part === '..') { parentBase.pop(); }\n          else if (part === '.') { continue; }\n          else { parentBase.push(part); }\n        }\n\n        return parentBase.join(\"/\");\n      }\n    };\n    requirejs._eak_seen = registry;\n\n    Ember.__loader = {define: enifed, require: eriuqer, registry: registry};\n  } else {\n    enifed = Ember.__loader.define;\n    requirejs = eriuqer = requireModule = Ember.__loader.require;\n  }\n})();\n\nenifed(\"backburner\",\n  [\"backburner/utils\",\"backburner/platform\",\"backburner/binary-search\",\"backburner/deferred-action-queues\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var each = __dependency1__.each;\n    var isString = __dependency1__.isString;\n    var isFunction = __dependency1__.isFunction;\n    var isNumber = __dependency1__.isNumber;\n    var isCoercableNumber = __dependency1__.isCoercableNumber;\n    var wrapInTryCatch = __dependency1__.wrapInTryCatch;\n    var now = __dependency1__.now;\n\n    var needsIETryCatchFix = __dependency2__.needsIETryCatchFix;\n\n    var searchTimer = __dependency3__[\"default\"];\n\n    var DeferredActionQueues = __dependency4__[\"default\"];\n\n    var slice = [].slice;\n    var pop = [].pop;\n    var global = this;\n\n    function Backburner(queueNames, options) {\n      this.queueNames = queueNames;\n      this.options = options || {};\n      if (!this.options.defaultQueue) {\n        this.options.defaultQueue = queueNames[0];\n      }\n      this.instanceStack = [];\n      this._debouncees = [];\n      this._throttlers = [];\n      this._timers = [];\n    }\n\n    Backburner.prototype = {\n      begin: function() {\n        var options = this.options;\n        var onBegin = options && options.onBegin;\n        var previousInstance = this.currentInstance;\n\n        if (previousInstance) {\n          this.instanceStack.push(previousInstance);\n        }\n\n        this.currentInstance = new DeferredActionQueues(this.queueNames, options);\n        if (onBegin) {\n          onBegin(this.currentInstance, previousInstance);\n        }\n      },\n\n      end: function() {\n        var options = this.options;\n        var onEnd = options && options.onEnd;\n        var currentInstance = this.currentInstance;\n        var nextInstance = null;\n\n        // Prevent double-finally bug in Safari 6.0.2 and iOS 6\n        // This bug appears to be resolved in Safari 6.0.5 and iOS 7\n        var finallyAlreadyCalled = false;\n        try {\n          currentInstance.flush();\n        } finally {\n          if (!finallyAlreadyCalled) {\n            finallyAlreadyCalled = true;\n\n            this.currentInstance = null;\n\n            if (this.instanceStack.length) {\n              nextInstance = this.instanceStack.pop();\n              this.currentInstance = nextInstance;\n            }\n\n            if (onEnd) {\n              onEnd(currentInstance, nextInstance);\n            }\n          }\n        }\n      },\n\n      run: function(target, method /*, args */) {\n        var onError = getOnError(this.options);\n\n        this.begin();\n\n        if (!method) {\n          method = target;\n          target = null;\n        }\n\n        if (isString(method)) {\n          method = target[method];\n        }\n\n        var args = slice.call(arguments, 2);\n\n        // guard against Safari 6's double-finally bug\n        var didFinally = false;\n\n        if (onError) {\n          try {\n            return method.apply(target, args);\n          } catch(error) {\n            onError(error);\n          } finally {\n            if (!didFinally) {\n              didFinally = true;\n              this.end();\n            }\n          }\n        } else {\n          try {\n            return method.apply(target, args);\n          } finally {\n            if (!didFinally) {\n              didFinally = true;\n              this.end();\n            }\n          }\n        }\n      },\n\n      defer: function(queueName, target, method /* , args */) {\n        if (!method) {\n          method = target;\n          target = null;\n        }\n\n        if (isString(method)) {\n          method = target[method];\n        }\n\n        var stack = this.DEBUG ? new Error() : undefined;\n        var length = arguments.length;\n        var args;\n\n        if (length > 3) {\n          args = new Array(length - 3);\n          for (var i = 3; i < length; i++) {\n            args[i-3] = arguments[i];\n          }\n        } else {\n          args = undefined;\n        }\n\n        if (!this.currentInstance) { createAutorun(this); }\n        return this.currentInstance.schedule(queueName, target, method, args, false, stack);\n      },\n\n      deferOnce: function(queueName, target, method /* , args */) {\n        if (!method) {\n          method = target;\n          target = null;\n        }\n\n        if (isString(method)) {\n          method = target[method];\n        }\n\n        var stack = this.DEBUG ? new Error() : undefined;\n        var length = arguments.length;\n        var args;\n\n        if (length > 3) {\n          args = new Array(length - 3);\n          for (var i = 3; i < length; i++) {\n            args[i-3] = arguments[i];\n          }\n        } else {\n          args = undefined;\n        }\n\n        if (!this.currentInstance) {\n          createAutorun(this);\n        }\n        return this.currentInstance.schedule(queueName, target, method, args, true, stack);\n      },\n\n      setTimeout: function() {\n        var l = arguments.length;\n        var args = new Array(l);\n\n        for (var x = 0; x < l; x++) {\n          args[x] = arguments[x];\n        }\n\n        var length = args.length,\n            method, wait, target,\n            methodOrTarget, methodOrWait, methodOrArgs;\n\n        if (length === 0) {\n          return;\n        } else if (length === 1) {\n          method = args.shift();\n          wait = 0;\n        } else if (length === 2) {\n          methodOrTarget = args[0];\n          methodOrWait = args[1];\n\n          if (isFunction(methodOrWait) || isFunction(methodOrTarget[methodOrWait])) {\n            target = args.shift();\n            method = args.shift();\n            wait = 0;\n          } else if (isCoercableNumber(methodOrWait)) {\n            method = args.shift();\n            wait = args.shift();\n          } else {\n            method = args.shift();\n            wait =  0;\n          }\n        } else {\n          var last = args[args.length - 1];\n\n          if (isCoercableNumber(last)) {\n            wait = args.pop();\n          } else {\n            wait = 0;\n          }\n\n          methodOrTarget = args[0];\n          methodOrArgs = args[1];\n\n          if (isFunction(methodOrArgs) || (isString(methodOrArgs) &&\n                                          methodOrTarget !== null &&\n                                          methodOrArgs in methodOrTarget)) {\n            target = args.shift();\n            method = args.shift();\n          } else {\n            method = args.shift();\n          }\n        }\n\n        var executeAt = now() + parseInt(wait, 10);\n\n        if (isString(method)) {\n          method = target[method];\n        }\n\n        var onError = getOnError(this.options);\n\n        function fn() {\n          if (onError) {\n            try {\n              method.apply(target, args);\n            } catch (e) {\n              onError(e);\n            }\n          } else {\n            method.apply(target, args);\n          }\n        }\n\n        // find position to insert\n        var i = searchTimer(executeAt, this._timers);\n\n        this._timers.splice(i, 0, executeAt, fn);\n\n        updateLaterTimer(this, executeAt, wait);\n\n        return fn;\n      },\n\n      throttle: function(target, method /* , args, wait, [immediate] */) {\n        var backburner = this;\n        var args = arguments;\n        var immediate = pop.call(args);\n        var wait, throttler, index, timer;\n\n        if (isNumber(immediate) || isString(immediate)) {\n          wait = immediate;\n          immediate = true;\n        } else {\n          wait = pop.call(args);\n        }\n\n        wait = parseInt(wait, 10);\n\n        index = findThrottler(target, method, this._throttlers);\n        if (index > -1) { return this._throttlers[index]; } // throttled\n\n        timer = global.setTimeout(function() {\n          if (!immediate) {\n            backburner.run.apply(backburner, args);\n          }\n          var index = findThrottler(target, method, backburner._throttlers);\n          if (index > -1) {\n            backburner._throttlers.splice(index, 1);\n          }\n        }, wait);\n\n        if (immediate) {\n          this.run.apply(this, args);\n        }\n\n        throttler = [target, method, timer];\n\n        this._throttlers.push(throttler);\n\n        return throttler;\n      },\n\n      debounce: function(target, method /* , args, wait, [immediate] */) {\n        var backburner = this;\n        var args = arguments;\n        var immediate = pop.call(args);\n        var wait, index, debouncee, timer;\n\n        if (isNumber(immediate) || isString(immediate)) {\n          wait = immediate;\n          immediate = false;\n        } else {\n          wait = pop.call(args);\n        }\n\n        wait = parseInt(wait, 10);\n        // Remove debouncee\n        index = findDebouncee(target, method, this._debouncees);\n\n        if (index > -1) {\n          debouncee = this._debouncees[index];\n          this._debouncees.splice(index, 1);\n          clearTimeout(debouncee[2]);\n        }\n\n        timer = global.setTimeout(function() {\n          if (!immediate) {\n            backburner.run.apply(backburner, args);\n          }\n          var index = findDebouncee(target, method, backburner._debouncees);\n          if (index > -1) {\n            backburner._debouncees.splice(index, 1);\n          }\n        }, wait);\n\n        if (immediate && index === -1) {\n          backburner.run.apply(backburner, args);\n        }\n\n        debouncee = [\n          target,\n          method,\n          timer\n        ];\n\n        backburner._debouncees.push(debouncee);\n\n        return debouncee;\n      },\n\n      cancelTimers: function() {\n        var clearItems = function(item) {\n          clearTimeout(item[2]);\n        };\n\n        each(this._throttlers, clearItems);\n        this._throttlers = [];\n\n        each(this._debouncees, clearItems);\n        this._debouncees = [];\n\n        if (this._laterTimer) {\n          clearTimeout(this._laterTimer);\n          this._laterTimer = null;\n        }\n        this._timers = [];\n\n        if (this._autorun) {\n          clearTimeout(this._autorun);\n          this._autorun = null;\n        }\n      },\n\n      hasTimers: function() {\n        return !!this._timers.length || !!this._debouncees.length || !!this._throttlers.length || this._autorun;\n      },\n\n      cancel: function(timer) {\n        var timerType = typeof timer;\n\n        if (timer && timerType === 'object' && timer.queue && timer.method) { // we're cancelling a deferOnce\n          return timer.queue.cancel(timer);\n        } else if (timerType === 'function') { // we're cancelling a setTimeout\n          for (var i = 0, l = this._timers.length; i < l; i += 2) {\n            if (this._timers[i + 1] === timer) {\n              this._timers.splice(i, 2); // remove the two elements\n              if (i === 0) {\n                if (this._laterTimer) { // Active timer? Then clear timer and reset for future timer\n                  clearTimeout(this._laterTimer);\n                  this._laterTimer = null;\n                }\n                if (this._timers.length > 0) { // Update to next available timer when available\n                  updateLaterTimer(this, this._timers[0], this._timers[0] - now());\n                }\n              }\n              return true;\n            }\n          }\n        } else if (Object.prototype.toString.call(timer) === \"[object Array]\"){ // we're cancelling a throttle or debounce\n          return this._cancelItem(findThrottler, this._throttlers, timer) ||\n                   this._cancelItem(findDebouncee, this._debouncees, timer);\n        } else {\n          return; // timer was null or not a timer\n        }\n      },\n\n      _cancelItem: function(findMethod, array, timer){\n        var item, index;\n\n        if (timer.length < 3) { return false; }\n\n        index = findMethod(timer[0], timer[1], array);\n\n        if (index > -1) {\n\n          item = array[index];\n\n          if (item[2] === timer[2]) {\n            array.splice(index, 1);\n            clearTimeout(timer[2]);\n            return true;\n          }\n        }\n\n        return false;\n      }\n    };\n\n    Backburner.prototype.schedule = Backburner.prototype.defer;\n    Backburner.prototype.scheduleOnce = Backburner.prototype.deferOnce;\n    Backburner.prototype.later = Backburner.prototype.setTimeout;\n\n    if (needsIETryCatchFix) {\n      var originalRun = Backburner.prototype.run;\n      Backburner.prototype.run = wrapInTryCatch(originalRun);\n\n      var originalEnd = Backburner.prototype.end;\n      Backburner.prototype.end = wrapInTryCatch(originalEnd);\n    }\n\n    function getOnError(options) {\n      return options.onError || (options.onErrorTarget && options.onErrorTarget[options.onErrorMethod]);\n    }\n\n    function createAutorun(backburner) {\n      backburner.begin();\n      backburner._autorun = global.setTimeout(function() {\n        backburner._autorun = null;\n        backburner.end();\n      });\n    }\n\n    function updateLaterTimer(backburner, executeAt, wait) {\n      var n = now();\n      if (!backburner._laterTimer || executeAt < backburner._laterTimerExpiresAt || backburner._laterTimerExpiresAt < n) {\n\n        if (backburner._laterTimer) {\n          // Clear when:\n          // - Already expired\n          // - New timer is earlier\n          clearTimeout(backburner._laterTimer);\n\n          if (backburner._laterTimerExpiresAt < n) { // If timer was never triggered\n            // Calculate the left-over wait-time\n            wait = Math.max(0, executeAt - n);\n          }\n        }\n\n        backburner._laterTimer = global.setTimeout(function() {\n          backburner._laterTimer = null;\n          backburner._laterTimerExpiresAt = null;\n          executeTimers(backburner);\n        }, wait);\n\n        backburner._laterTimerExpiresAt = n + wait;\n      }\n    }\n\n    function executeTimers(backburner) {\n      var n = now();\n      var fns, i, l;\n\n      backburner.run(function() {\n        i = searchTimer(n, backburner._timers);\n\n        fns = backburner._timers.splice(0, i);\n\n        for (i = 1, l = fns.length; i < l; i += 2) {\n          backburner.schedule(backburner.options.defaultQueue, null, fns[i]);\n        }\n      });\n\n      if (backburner._timers.length) {\n        updateLaterTimer(backburner, backburner._timers[0], backburner._timers[0] - n);\n      }\n    }\n\n    function findDebouncee(target, method, debouncees) {\n      return findItem(target, method, debouncees);\n    }\n\n    function findThrottler(target, method, throttlers) {\n      return findItem(target, method, throttlers);\n    }\n\n    function findItem(target, method, collection) {\n      var item;\n      var index = -1;\n\n      for (var i = 0, l = collection.length; i < l; i++) {\n        item = collection[i];\n        if (item[0] === target && item[1] === method) {\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    }\n\n    __exports__[\"default\"] = Backburner;\n  });\nenifed(\"backburner.umd\",\n  [\"./backburner\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var Backburner = __dependency1__[\"default\"];\n\n    /* global define:true module:true window: true */\n    if (typeof enifed === 'function' && enifed.amd) {\n      enifed(function() { return Backburner; });\n    } else if (typeof module !== 'undefined' && module.exports) {\n      module.exports = Backburner;\n    } else if (typeof this !== 'undefined') {\n      this['Backburner'] = Backburner;\n    }\n  });\nenifed(\"backburner/binary-search\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = function binarySearch(time, timers) {\n      var start = 0;\n      var end = timers.length - 2;\n      var middle, l;\n\n      while (start < end) {\n        // since timers is an array of pairs 'l' will always\n        // be an integer\n        l = (end - start) / 2;\n\n        // compensate for the index in case even number\n        // of pairs inside timers\n        middle = start + l - (l % 2);\n\n        if (time >= timers[middle]) {\n          start = middle + 2;\n        } else {\n          end = middle;\n        }\n      }\n\n      return (time >= timers[start]) ? start + 2 : start;\n    }\n  });\nenifed(\"backburner/deferred-action-queues\",\n  [\"./utils\",\"./queue\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var each = __dependency1__.each;\n    var isString = __dependency1__.isString;\n    var Queue = __dependency2__[\"default\"];\n\n    function DeferredActionQueues(queueNames, options) {\n      var queues = this.queues = {};\n      this.queueNames = queueNames = queueNames || [];\n\n      this.options = options;\n\n      each(queueNames, function(queueName) {\n        queues[queueName] = new Queue(queueName, options[queueName], options);\n      });\n    }\n\n    function noSuchQueue(name) {\n      throw new Error(\"You attempted to schedule an action in a queue (\" + name + \") that doesn't exist\");\n    }\n\n    DeferredActionQueues.prototype = {\n      schedule: function(name, target, method, args, onceFlag, stack) {\n        var queues = this.queues;\n        var queue = queues[name];\n\n        if (!queue) { noSuchQueue(name); }\n\n        if (onceFlag) {\n          return queue.pushUnique(target, method, args, stack);\n        } else {\n          return queue.push(target, method, args, stack);\n        }\n      },\n\n      invoke: function(target, method, args, _, _errorRecordedForStack) {\n        if (args && args.length > 0) {\n          method.apply(target, args);\n        } else {\n          method.call(target);\n        }\n      },\n\n      invokeWithOnError: function(target, method, args, onError, errorRecordedForStack) {\n        try {\n          if (args && args.length > 0) {\n            method.apply(target, args);\n          } else {\n            method.call(target);\n          }\n        } catch(error) {\n          onError(error, errorRecordedForStack);\n        }\n      },\n\n      flush: function() {\n        var queues = this.queues;\n        var queueNames = this.queueNames;\n        var queueName, queue, queueItems, priorQueueNameIndex;\n        var queueNameIndex = 0;\n        var numberOfQueues = queueNames.length;\n        var options = this.options;\n        var onError = options.onError || (options.onErrorTarget && options.onErrorTarget[options.onErrorMethod]);\n        var invoke = onError ? this.invokeWithOnError : this.invoke;\n\n        while (queueNameIndex < numberOfQueues) {\n          queueName = queueNames[queueNameIndex];\n          queue = queues[queueName];\n          queueItems = queue._queueBeingFlushed = queue._queue.slice();\n          queue._queue = [];\n          queue.targetQueues = Object.create(null);\n\n          var queueOptions = queue.options; // TODO: write a test for this\n          var before = queueOptions && queueOptions.before;\n          var after = queueOptions && queueOptions.after;\n          var target, method, args, errorRecordedForStack;\n          var queueIndex = 0;\n          var numberOfQueueItems = queueItems.length;\n\n          if (numberOfQueueItems && before) {\n            before();\n          }\n\n          while (queueIndex < numberOfQueueItems) {\n            target                = queueItems[queueIndex];\n            method                = queueItems[queueIndex+1];\n            args                  = queueItems[queueIndex+2];\n            errorRecordedForStack = queueItems[queueIndex+3]; // Debugging assistance\n\n            //\n\n            if (isString(method)) {\n              method = target[method];\n            }\n\n            // method could have been nullified / canceled during flush\n            if (method) {\n              //\n              //    ** Attention intrepid developer **\n              //\n              //    To find out the stack of this task when it was scheduled onto\n              //    the run loop, add the following to your app.js:\n              //\n              //    Ember.run.backburner.DEBUG = true; // NOTE: This slows your app, don't leave it on in production.\n              //\n              //    Once that is in place, when you are at a breakpoint and navigate\n              //    here in the stack explorer, you can look at `errorRecordedForStack.stack`,\n              //    which will be the captured stack when this job was scheduled.\n              //\n              invoke(target, method, args, onError, errorRecordedForStack);\n            }\n\n            queueIndex += 4;\n          }\n\n          queue._queueBeingFlushed = null;\n          if (numberOfQueueItems && after) {\n            after();\n          }\n\n          if ((priorQueueNameIndex = indexOfPriorQueueWithActions(this, queueNameIndex)) !== -1) {\n            queueNameIndex = priorQueueNameIndex;\n          } else {\n            queueNameIndex++;\n          }\n        }\n      }\n    };\n\n    function indexOfPriorQueueWithActions(daq, currentQueueIndex) {\n      var queueName, queue;\n\n      for (var i = 0, l = currentQueueIndex; i <= l; i++) {\n        queueName = daq.queueNames[i];\n        queue = daq.queues[queueName];\n        if (queue._queue.length) { return i; }\n      }\n\n      return -1;\n    }\n\n    __exports__[\"default\"] = DeferredActionQueues;\n  });\nenifed(\"backburner/platform\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // In IE 6-8, try/finally doesn't work without a catch.\n    // Unfortunately, this is impossible to test for since wrapping it in a parent try/catch doesn't trigger the bug.\n    // This tests for another broken try/catch behavior that only exhibits in the same versions of IE.\n    var needsIETryCatchFix = (function(e,x){\n      try{ x(); }\n      catch(e) { } // jshint ignore:line\n      return !!e;\n    })();\n    __exports__.needsIETryCatchFix = needsIETryCatchFix;\n  });\nenifed(\"backburner/queue\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function Queue(name, options, globalOptions) {\n      this.name = name;\n      this.globalOptions = globalOptions || {};\n      this.options = options;\n      this._queue = [];\n      this.targetQueues = Object.create(null);\n      this._queueBeingFlushed = undefined;\n    }\n\n    Queue.prototype = {\n      push: function(target, method, args, stack) {\n        var queue = this._queue;\n        queue.push(target, method, args, stack);\n\n        return {\n          queue: this,\n          target: target,\n          method: method\n        };\n      },\n\n      pushUniqueWithoutGuid: function(target, method, args, stack) {\n        var queue = this._queue;\n\n        for (var i = 0, l = queue.length; i < l; i += 4) {\n          var currentTarget = queue[i];\n          var currentMethod = queue[i+1];\n\n          if (currentTarget === target && currentMethod === method) {\n            queue[i+2] = args;  // replace args\n            queue[i+3] = stack; // replace stack\n            return;\n          }\n        }\n\n        queue.push(target, method, args, stack);\n      },\n\n      targetQueue: function(targetQueue, target, method, args, stack) {\n        var queue = this._queue;\n\n        for (var i = 0, l = targetQueue.length; i < l; i += 4) {\n          var currentMethod = targetQueue[i];\n          var currentIndex  = targetQueue[i + 1];\n\n          if (currentMethod === method) {\n            queue[currentIndex + 2] = args;  // replace args\n            queue[currentIndex + 3] = stack; // replace stack\n            return;\n          }\n        }\n\n        targetQueue.push(\n          method,\n          queue.push(target, method, args, stack) - 4\n        );\n      },\n\n      pushUniqueWithGuid: function(guid, target, method, args, stack) {\n        var hasLocalQueue = this.targetQueues[guid];\n\n        if (hasLocalQueue) {\n          this.targetQueue(hasLocalQueue, target, method, args, stack);\n        } else {\n          this.targetQueues[guid] = [\n            method,\n            this._queue.push(target, method, args, stack) - 4\n          ];\n        }\n\n        return {\n          queue: this,\n          target: target,\n          method: method\n        };\n      },\n\n      pushUnique: function(target, method, args, stack) {\n        var queue = this._queue, currentTarget, currentMethod, i, l;\n        var KEY = this.globalOptions.GUID_KEY;\n\n        if (target && KEY) {\n          var guid = target[KEY];\n          if (guid) {\n            return this.pushUniqueWithGuid(guid, target, method, args, stack);\n          }\n        }\n\n        this.pushUniqueWithoutGuid(target, method, args, stack);\n\n        return {\n          queue: this,\n          target: target,\n          method: method\n        };\n      },\n\n      // TODO: remove me, only being used for Ember.run.sync\n      flush: function() {\n        var queue = this._queue;\n        var globalOptions = this.globalOptions;\n        var options = this.options;\n        var before = options && options.before;\n        var after = options && options.after;\n        var onError = globalOptions.onError || (globalOptions.onErrorTarget && globalOptions.onErrorTarget[globalOptions.onErrorMethod]);\n        var target, method, args, stack, i, l = queue.length;\n\n        this.targetQueues = Object.create(null);\n\n        if (l && before) { before(); }\n        for (i = 0; i < l; i += 4) {\n          target = queue[i];\n          method = queue[i+1];\n          args   = queue[i+2];\n          stack  = queue[i+3]; // Debugging assistance\n\n          // TODO: error handling\n          if (args && args.length > 0) {\n            if (onError) {\n              try {\n                method.apply(target, args);\n              } catch (e) {\n                onError(e);\n              }\n            } else {\n              method.apply(target, args);\n            }\n          } else {\n            if (onError) {\n              try {\n                method.call(target);\n              } catch(e) {\n                onError(e);\n              }\n            } else {\n              method.call(target);\n            }\n          }\n        }\n        if (l && after) { after(); }\n\n        // check if new items have been added\n        if (queue.length > l) {\n          this._queue = queue.slice(l);\n          this.flush();\n        } else {\n          this._queue.length = 0;\n        }\n      },\n\n      cancel: function(actionToCancel) {\n        var queue = this._queue, currentTarget, currentMethod, i, l;\n        var target = actionToCancel.target;\n        var method = actionToCancel.method;\n        var GUID_KEY = this.globalOptions.GUID_KEY;\n\n        if (GUID_KEY && this.targetQueues && target) {\n          var targetQueue = this.targetQueues[target[GUID_KEY]];\n\n          if (targetQueue) {\n            for (i = 0, l = targetQueue.length; i < l; i++) {\n              if (targetQueue[i] === method) {\n                targetQueue.splice(i, 1);\n              }\n            }\n          }\n        }\n\n        for (i = 0, l = queue.length; i < l; i += 4) {\n          currentTarget = queue[i];\n          currentMethod = queue[i+1];\n\n          if (currentTarget === target &&\n              currentMethod === method) {\n            queue.splice(i, 4);\n            return true;\n          }\n        }\n\n        // if not found in current queue\n        // could be in the queue that is being flushed\n        queue = this._queueBeingFlushed;\n        if (!queue) {\n          return;\n        }\n        for (i = 0, l = queue.length; i < l; i += 4) {\n          currentTarget = queue[i];\n          currentMethod = queue[i+1];\n\n          if (currentTarget === target &&\n              currentMethod === method) {\n            // don't mess with array during flush\n            // just nullify the method\n            queue[i+1] = null;\n            return true;\n          }\n        }\n      }\n    };\n\n    __exports__[\"default\"] = Queue;\n  });\nenifed(\"backburner/utils\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var NUMBER = /\\d+/;\n\n    function each(collection, callback) {\n      for (var i = 0; i < collection.length; i++) {\n        callback(collection[i]);\n      }\n    }\n\n    __exports__.each = each;// Date.now is not available in browsers < IE9\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility\n    var now = Date.now || function() { return new Date().getTime(); };\n    __exports__.now = now;\n    function isString(suspect) {\n      return typeof suspect === 'string';\n    }\n\n    __exports__.isString = isString;function isFunction(suspect) {\n      return typeof suspect === 'function';\n    }\n\n    __exports__.isFunction = isFunction;function isNumber(suspect) {\n      return typeof suspect === 'number';\n    }\n\n    __exports__.isNumber = isNumber;function isCoercableNumber(number) {\n      return isNumber(number) || NUMBER.test(number);\n    }\n\n    __exports__.isCoercableNumber = isCoercableNumber;function wrapInTryCatch(func) {\n      return function () {\n        try {\n          return func.apply(this, arguments);\n        } catch (e) {\n          throw e;\n        }\n      };\n    }\n\n    __exports__.wrapInTryCatch = wrapInTryCatch;\n  });\nenifed(\"calculateVersion\",\n  [],\n  function() {\n    \"use strict\";\n    'use strict';\n\n    var fs   = eriuqer('fs');\n    var path = eriuqer('path');\n\n    module.exports = function () {\n      var packageVersion = eriuqer('../package.json').version;\n      var output         = [packageVersion];\n      var gitPath        = path.join(__dirname,'..','.git');\n      var headFilePath   = path.join(gitPath, 'HEAD');\n\n      if (packageVersion.indexOf('+') > -1) {\n        try {\n          if (fs.existsSync(headFilePath)) {\n            var headFile = fs.readFileSync(headFilePath, {encoding: 'utf8'});\n            var branchName = headFile.split('/').slice(-1)[0].trim();\n            var refPath = headFile.split(' ')[1];\n            var branchSHA;\n\n            if (refPath) {\n              var branchPath = path.join(gitPath, refPath.trim());\n              branchSHA  = fs.readFileSync(branchPath);\n            } else {\n              branchSHA = branchName;\n            }\n\n            output.push(branchSHA.slice(0,10));\n          }\n        } catch (err) {\n          console.error(err.stack);\n        }\n        return output.join('.');\n      } else {\n        return packageVersion;\n      }\n    };\n  });\nenifed(\"container\",\n  [\"container/container\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /*\n    Public api for the container is still in flux.\n    The public api, specified on the application namespace should be considered the stable api.\n    // @module container\n      @private\n    */\n\n    /*\n     Flag to enable/disable model factory injections (disabled by default)\n     If model factory injections are enabled, models should not be\n     accessed globally (only through `container.lookupFactory('model:modelName'))`);\n    */\n    Ember.MODEL_FACTORY_INJECTIONS = false;\n\n    if (Ember.ENV && typeof Ember.ENV.MODEL_FACTORY_INJECTIONS !== 'undefined') {\n      Ember.MODEL_FACTORY_INJECTIONS = !!Ember.ENV.MODEL_FACTORY_INJECTIONS;\n    }\n\n\n    var Container = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Container;\n  });\nenifed(\"container/container\",\n  [\"ember-metal/core\",\"ember-metal/keys\",\"ember-metal/dictionary\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert\n    var emberKeys = __dependency2__[\"default\"];\n    var dictionary = __dependency3__[\"default\"];\n\n    // A lightweight container that helps to assemble and decouple components.\n    // Public api for the container is still in flux.\n    // The public api, specified on the application namespace should be considered the stable api.\n    function Container(parent) {\n      this.parent = parent;\n      this.children = [];\n\n      this.resolver = parent && parent.resolver || function() {};\n\n      this.registry       = dictionary(parent ? parent.registry : null);\n      this.cache          = dictionary(parent ? parent.cache : null);\n      this.factoryCache   = dictionary(parent ? parent.factoryCache : null);\n      this.resolveCache   = dictionary(parent ? parent.resolveCache : null);\n      this.typeInjections = dictionary(parent ? parent.typeInjections : null);\n      this.injections     = dictionary(null);\n      this.normalizeCache = dictionary(null);\n\n      this.factoryTypeInjections = dictionary(parent ? parent.factoryTypeInjections : null);\n      this.factoryInjections     = dictionary(null);\n\n      this._options     = dictionary(parent ? parent._options : null);\n      this._typeOptions = dictionary(parent ? parent._typeOptions : null);\n    }\n\n    Container.prototype = {\n\n      /**\n        @property parent\n        @type Container\n        @default null\n      */\n      parent: null,\n\n      /**\n        @property children\n        @type Array\n        @default []\n      */\n      children: null,\n\n      /**\n        @property resolver\n        @type function\n      */\n      resolver: null,\n\n      /**\n        @property registry\n        @type InheritingDict\n      */\n      registry: null,\n\n      /**\n        @property cache\n        @type InheritingDict\n      */\n      cache: null,\n\n      /**\n        @property typeInjections\n        @type InheritingDict\n      */\n      typeInjections: null,\n\n      /**\n        @property injections\n        @type Object\n        @default {}\n      */\n      injections: null,\n\n      /**\n        @private\n\n        @property _options\n        @type InheritingDict\n        @default null\n      */\n      _options: null,\n\n      /**\n        @private\n\n        @property _typeOptions\n        @type InheritingDict\n      */\n      _typeOptions: null,\n\n      /**\n        Returns a new child of the current container. These children are configured\n        to correctly inherit from the current container.\n\n        @method child\n        @return {Container}\n      */\n      child: function() {\n        var container = new Container(this);\n        this.children.push(container);\n        return container;\n      },\n\n      /**\n        Sets a key-value pair on the current container. If a parent container,\n        has the same key, once set on a child, the parent and child will diverge\n        as expected.\n\n        @method set\n        @param {Object} object\n        @param {String} key\n        @param {any} value\n      */\n      set: function(object, key, value) {\n        object[key] = value;\n      },\n\n      /**\n        Registers a factory for later injection.\n\n        Example:\n\n        ```javascript\n        var container = new Container();\n\n        container.register('model:user', Person, {singleton: false });\n        container.register('fruit:favorite', Orange);\n        container.register('communication:main', Email, {singleton: false});\n        ```\n\n        @method register\n        @param {String} fullName\n        @param {Function} factory\n        @param {Object} options\n      */\n      register: function(fullName, factory, options) {\n        Ember.assert('fullName must be a proper full name', validateFullName(fullName));\n\n        if (factory === undefined) {\n          throw new TypeError('Attempting to register an unknown factory: `' + fullName + '`');\n        }\n\n        var normalizedName = this.normalize(fullName);\n\n        if (normalizedName in this.cache) {\n          throw new Error('Cannot re-register: `' + fullName +'`, as it has already been looked up.');\n        }\n\n        this.registry[normalizedName] = factory;\n        this._options[normalizedName] = (options || {});\n      },\n\n      /**\n        Unregister a fullName\n\n        ```javascript\n        var container = new Container();\n        container.register('model:user', User);\n\n        container.lookup('model:user') instanceof User //=> true\n\n        container.unregister('model:user')\n        container.lookup('model:user') === undefined //=> true\n        ```\n\n        @method unregister\n        @param {String} fullName\n       */\n      unregister: function(fullName) {\n        Ember.assert('fullName must be a proper full name', validateFullName(fullName));\n\n        var normalizedName = this.normalize(fullName);\n\n        delete this.registry[normalizedName];\n        delete this.cache[normalizedName];\n        delete this.factoryCache[normalizedName];\n        delete this.resolveCache[normalizedName];\n        delete this._options[normalizedName];\n      },\n\n      /**\n        Given a fullName return the corresponding factory.\n\n        By default `resolve` will retrieve the factory from\n        its container's registry.\n\n        ```javascript\n        var container = new Container();\n        container.register('api:twitter', Twitter);\n\n        container.resolve('api:twitter') // => Twitter\n        ```\n\n        Optionally the container can be provided with a custom resolver.\n        If provided, `resolve` will first provide the custom resolver\n        the opportunity to resolve the fullName, otherwise it will fallback\n        to the registry.\n\n        ```javascript\n        var container = new Container();\n        container.resolver = function(fullName) {\n          // lookup via the module system of choice\n        };\n\n        // the twitter factory is added to the module system\n        container.resolve('api:twitter') // => Twitter\n        ```\n\n        @method resolve\n        @param {String} fullName\n        @return {Function} fullName's factory\n      */\n      resolve: function(fullName) {\n        Ember.assert('fullName must be a proper full name', validateFullName(fullName));\n        return resolve(this, this.normalize(fullName));\n      },\n\n      /**\n        A hook that can be used to describe how the resolver will\n        attempt to find the factory.\n\n        For example, the default Ember `.describe` returns the full\n        class name (including namespace) where Ember's resolver expects\n        to find the `fullName`.\n\n        @method describe\n        @param {String} fullName\n        @return {string} described fullName\n      */\n      describe: function(fullName) {\n        return fullName;\n      },\n\n      /**\n        A hook to enable custom fullName normalization behaviour\n\n        @method normalizeFullName\n        @param {String} fullName\n        @return {string} normalized fullName\n      */\n      normalizeFullName: function(fullName) {\n        return fullName;\n      },\n\n      /**\n        normalize a fullName based on the applications conventions\n\n        @method normalize\n        @param {String} fullName\n        @return {string} normalized fullName\n      */\n      normalize: function(fullName) {\n        return this.normalizeCache[fullName] || (\n          this.normalizeCache[fullName] = this.normalizeFullName(fullName)\n        );\n      },\n\n      /**\n        @method makeToString\n\n        @param {any} factory\n        @param {string} fullName\n        @return {function} toString function\n      */\n      makeToString: function(factory, fullName) {\n        return factory.toString();\n      },\n\n      /**\n        Given a fullName return a corresponding instance.\n\n        The default behaviour is for lookup to return a singleton instance.\n        The singleton is scoped to the container, allowing multiple containers\n        to all have their own locally scoped singletons.\n\n        ```javascript\n        var container = new Container();\n        container.register('api:twitter', Twitter);\n\n        var twitter = container.lookup('api:twitter');\n\n        twitter instanceof Twitter; // => true\n\n        // by default the container will return singletons\n        var twitter2 = container.lookup('api:twitter');\n        twitter2 instanceof Twitter; // => true\n\n        twitter === twitter2; //=> true\n        ```\n\n        If singletons are not wanted an optional flag can be provided at lookup.\n\n        ```javascript\n        var container = new Container();\n        container.register('api:twitter', Twitter);\n\n        var twitter = container.lookup('api:twitter', { singleton: false });\n        var twitter2 = container.lookup('api:twitter', { singleton: false });\n\n        twitter === twitter2; //=> false\n        ```\n\n        @method lookup\n        @param {String} fullName\n        @param {Object} options\n        @return {any}\n      */\n      lookup: function(fullName, options) {\n        Ember.assert('fullName must be a proper full name', validateFullName(fullName));\n        return lookup(this, this.normalize(fullName), options);\n      },\n\n      /**\n        Given a fullName return the corresponding factory.\n\n        @method lookupFactory\n        @param {String} fullName\n        @return {any}\n      */\n      lookupFactory: function(fullName) {\n        Ember.assert('fullName must be a proper full name', validateFullName(fullName));\n        return factoryFor(this, this.normalize(fullName));\n      },\n\n      /**\n        Given a fullName check if the container is aware of its factory\n        or singleton instance.\n\n        @method has\n        @param {String} fullName\n        @return {Boolean}\n      */\n      has: function(fullName) {\n        Ember.assert('fullName must be a proper full name', validateFullName(fullName));\n        return has(this, this.normalize(fullName));\n      },\n\n      /**\n        Allow registering options for all factories of a type.\n\n        ```javascript\n        var container = new Container();\n\n        // if all of type `connection` must not be singletons\n        container.optionsForType('connection', { singleton: false });\n\n        container.register('connection:twitter', TwitterConnection);\n        container.register('connection:facebook', FacebookConnection);\n\n        var twitter = container.lookup('connection:twitter');\n        var twitter2 = container.lookup('connection:twitter');\n\n        twitter === twitter2; // => false\n\n        var facebook = container.lookup('connection:facebook');\n        var facebook2 = container.lookup('connection:facebook');\n\n        facebook === facebook2; // => false\n        ```\n\n        @method optionsForType\n        @param {String} type\n        @param {Object} options\n      */\n      optionsForType: function(type, options) {\n        if (this.parent) { illegalChildOperation('optionsForType'); }\n\n        this._typeOptions[type] = options;\n      },\n\n      /**\n        @method options\n        @param {String} type\n        @param {Object} options\n      */\n      options: function(type, options) {\n        this.optionsForType(type, options);\n      },\n\n      /**\n        Used only via `injection`.\n\n        Provides a specialized form of injection, specifically enabling\n        all objects of one type to be injected with a reference to another\n        object.\n\n        For example, provided each object of type `controller` needed a `router`.\n        one would do the following:\n\n        ```javascript\n        var container = new Container();\n\n        container.register('router:main', Router);\n        container.register('controller:user', UserController);\n        container.register('controller:post', PostController);\n\n        container.typeInjection('controller', 'router', 'router:main');\n\n        var user = container.lookup('controller:user');\n        var post = container.lookup('controller:post');\n\n        user.router instanceof Router; //=> true\n        post.router instanceof Router; //=> true\n\n        // both controllers share the same router\n        user.router === post.router; //=> true\n        ```\n\n        @private\n        @method typeInjection\n        @param {String} type\n        @param {String} property\n        @param {String} fullName\n      */\n      typeInjection: function(type, property, fullName) {\n        Ember.assert('fullName must be a proper full name', validateFullName(fullName));\n\n        if (this.parent) { illegalChildOperation('typeInjection'); }\n\n        var fullNameType = fullName.split(':')[0];\n        if (fullNameType === type) {\n          throw new Error('Cannot inject a `' + fullName + '` on other ' + type + '(s). Register the `' + fullName + '` as a different type and perform the typeInjection.');\n        }\n\n        addTypeInjection(this.typeInjections, type, property, fullName);\n      },\n\n      /**\n        Defines injection rules.\n\n        These rules are used to inject dependencies onto objects when they\n        are instantiated.\n\n        Two forms of injections are possible:\n\n        * Injecting one fullName on another fullName\n        * Injecting one fullName on a type\n\n        Example:\n\n        ```javascript\n        var container = new Container();\n\n        container.register('source:main', Source);\n        container.register('model:user', User);\n        container.register('model:post', Post);\n\n        // injecting one fullName on another fullName\n        // eg. each user model gets a post model\n        container.injection('model:user', 'post', 'model:post');\n\n        // injecting one fullName on another type\n        container.injection('model', 'source', 'source:main');\n\n        var user = container.lookup('model:user');\n        var post = container.lookup('model:post');\n\n        user.source instanceof Source; //=> true\n        post.source instanceof Source; //=> true\n\n        user.post instanceof Post; //=> true\n\n        // and both models share the same source\n        user.source === post.source; //=> true\n        ```\n\n        @method injection\n        @param {String} factoryName\n        @param {String} property\n        @param {String} injectionName\n      */\n      injection: function(fullName, property, injectionName) {\n        if (this.parent) { illegalChildOperation('injection'); }\n\n        validateFullName(injectionName);\n        var normalizedInjectionName = this.normalize(injectionName);\n\n        if (fullName.indexOf(':') === -1) {\n          return this.typeInjection(fullName, property, normalizedInjectionName);\n        }\n\n        Ember.assert('fullName must be a proper full name', validateFullName(fullName));\n        var normalizedName = this.normalize(fullName);\n\n        if (this.cache[normalizedName]) {\n          throw new Error(\"Attempted to register an injection for a type that has already been looked up. ('\" + normalizedName + \"', '\" + property + \"', '\" + injectionName + \"')\");\n        }\n        addInjection(this.injections, normalizedName, property, normalizedInjectionName);\n      },\n\n\n      /**\n        Used only via `factoryInjection`.\n\n        Provides a specialized form of injection, specifically enabling\n        all factory of one type to be injected with a reference to another\n        object.\n\n        For example, provided each factory of type `model` needed a `store`.\n        one would do the following:\n\n        ```javascript\n        var container = new Container();\n\n        container.register('store:main', SomeStore);\n\n        container.factoryTypeInjection('model', 'store', 'store:main');\n\n        var store = container.lookup('store:main');\n        var UserFactory = container.lookupFactory('model:user');\n\n        UserFactory.store instanceof SomeStore; //=> true\n        ```\n\n        @private\n        @method factoryTypeInjection\n        @param {String} type\n        @param {String} property\n        @param {String} fullName\n      */\n      factoryTypeInjection: function(type, property, fullName) {\n        if (this.parent) { illegalChildOperation('factoryTypeInjection'); }\n\n        addTypeInjection(this.factoryTypeInjections, type, property, this.normalize(fullName));\n      },\n\n      /**\n        Defines factory injection rules.\n\n        Similar to regular injection rules, but are run against factories, via\n        `Container#lookupFactory`.\n\n        These rules are used to inject objects onto factories when they\n        are looked up.\n\n        Two forms of injections are possible:\n\n      * Injecting one fullName on another fullName\n      * Injecting one fullName on a type\n\n        Example:\n\n        ```javascript\n        var container = new Container();\n\n        container.register('store:main', Store);\n        container.register('store:secondary', OtherStore);\n        container.register('model:user', User);\n        container.register('model:post', Post);\n\n        // injecting one fullName on another type\n        container.factoryInjection('model', 'store', 'store:main');\n\n        // injecting one fullName on another fullName\n        container.factoryInjection('model:post', 'secondaryStore', 'store:secondary');\n\n        var UserFactory = container.lookupFactory('model:user');\n        var PostFactory = container.lookupFactory('model:post');\n        var store = container.lookup('store:main');\n\n        UserFactory.store instanceof Store; //=> true\n        UserFactory.secondaryStore instanceof OtherStore; //=> false\n\n        PostFactory.store instanceof Store; //=> true\n        PostFactory.secondaryStore instanceof OtherStore; //=> true\n\n        // and both models share the same source instance\n        UserFactory.store === PostFactory.store; //=> true\n        ```\n\n        @method factoryInjection\n        @param {String} factoryName\n        @param {String} property\n        @param {String} injectionName\n      */\n      factoryInjection: function(fullName, property, injectionName) {\n        if (this.parent) { illegalChildOperation('injection'); }\n\n        var normalizedName = this.normalize(fullName);\n        var normalizedInjectionName = this.normalize(injectionName);\n\n        validateFullName(injectionName);\n\n        if (fullName.indexOf(':') === -1) {\n          return this.factoryTypeInjection(normalizedName, property, normalizedInjectionName);\n        }\n\n        Ember.assert('fullName must be a proper full name', validateFullName(fullName));\n\n        if (this.factoryCache[normalizedName]) {\n          throw new Error('Attempted to register a factoryInjection for a type that has already ' +\n            'been looked up. (\\'' + normalizedName + '\\', \\'' + property + '\\', \\'' + injectionName + '\\')');\n        }\n\n        addInjection(this.factoryInjections, normalizedName, property, normalizedInjectionName);\n      },\n\n      /**\n        A depth first traversal, destroying the container, its descendant containers and all\n        their managed objects.\n\n        @method destroy\n      */\n      destroy: function() {\n        for (var i = 0, length = this.children.length; i < length; i++) {\n          this.children[i].destroy();\n        }\n\n        this.children = [];\n\n        eachDestroyable(this, function(item) {\n          item.destroy();\n        });\n\n        this.parent = undefined;\n        this.isDestroyed = true;\n      },\n\n      /**\n        @method reset\n      */\n      reset: function() {\n        for (var i = 0, length = this.children.length; i < length; i++) {\n          resetCache(this.children[i]);\n        }\n\n        resetCache(this);\n      }\n    };\n\n    function resolve(container, normalizedName) {\n      var cached = container.resolveCache[normalizedName];\n      if (cached) { return cached; }\n\n      var resolved = container.resolver(normalizedName) || container.registry[normalizedName];\n      container.resolveCache[normalizedName] = resolved;\n\n      return resolved;\n    }\n\n    function has(container, fullName){\n      if (container.cache[fullName]) {\n        return true;\n      }\n\n      return !!container.resolve(fullName);\n    }\n\n    function lookup(container, fullName, options) {\n      options = options || {};\n\n      if (container.cache[fullName] && options.singleton !== false) {\n        return container.cache[fullName];\n      }\n\n      var value = instantiate(container, fullName);\n\n      if (value === undefined) { return; }\n\n      if (isSingleton(container, fullName) && options.singleton !== false) {\n        container.cache[fullName] = value;\n      }\n\n      return value;\n    }\n\n    function illegalChildOperation(operation) {\n      throw new Error(operation + ' is not currently supported on child containers');\n    }\n\n    function isSingleton(container, fullName) {\n      var singleton = option(container, fullName, 'singleton');\n\n      return singleton !== false;\n    }\n\n    function buildInjections(container, injections) {\n      var hash = {};\n\n      if (!injections) { return hash; }\n\n      var injection, injectable;\n\n      for (var i = 0, length = injections.length; i < length; i++) {\n        injection = injections[i];\n        injectable = lookup(container, injection.fullName);\n\n        if (injectable !== undefined) {\n          hash[injection.property] = injectable;\n        } else {\n          throw new Error('Attempting to inject an unknown injection: `' + injection.fullName + '`');\n        }\n      }\n\n      return hash;\n    }\n\n    function option(container, fullName, optionName) {\n      var options = container._options[fullName];\n\n      if (options && options[optionName] !== undefined) {\n        return options[optionName];\n      }\n\n      var type = fullName.split(':')[0];\n      options = container._typeOptions[type];\n\n      if (options) {\n        return options[optionName];\n      }\n    }\n\n    function factoryFor(container, fullName) {\n      var cache = container.factoryCache;\n      if (cache[fullName]) {\n        return cache[fullName];\n      }\n      var factory = container.resolve(fullName);\n      if (factory === undefined) { return; }\n\n      var type = fullName.split(':')[0];\n      if (!factory || typeof factory.extend !== 'function' || (!Ember.MODEL_FACTORY_INJECTIONS && type === 'model')) {\n        // TODO: think about a 'safe' merge style extension\n        // for now just fallback to create time injection\n        cache[fullName] = factory;\n        return factory;\n      } else {\n        var injections = injectionsFor(container, fullName);\n        var factoryInjections = factoryInjectionsFor(container, fullName);\n\n        factoryInjections._toString = container.makeToString(factory, fullName);\n\n        var injectedFactory = factory.extend(injections);\n        injectedFactory.reopenClass(factoryInjections);\n\n        cache[fullName] = injectedFactory;\n\n        return injectedFactory;\n      }\n    }\n\n    function injectionsFor(container, fullName) {\n      var splitName = fullName.split(':');\n      var type = splitName[0];\n      var injections = [];\n\n      injections = injections.concat(container.typeInjections[type] || []);\n      injections = injections.concat(container.injections[fullName] || []);\n\n      injections = buildInjections(container, injections);\n      injections._debugContainerKey = fullName;\n      injections.container = container;\n\n      return injections;\n    }\n\n    function factoryInjectionsFor(container, fullName) {\n      var splitName = fullName.split(':');\n      var type = splitName[0];\n      var factoryInjections = [];\n\n      factoryInjections = factoryInjections.concat(container.factoryTypeInjections[type] || []);\n      factoryInjections = factoryInjections.concat(container.factoryInjections[fullName] || []);\n\n      factoryInjections = buildInjections(container, factoryInjections);\n      factoryInjections._debugContainerKey = fullName;\n\n      return factoryInjections;\n    }\n\n    function instantiate(container, fullName) {\n      var factory = factoryFor(container, fullName);\n\n      if (option(container, fullName, 'instantiate') === false) {\n        return factory;\n      }\n\n      if (factory) {\n        if (typeof factory.create !== 'function') {\n          throw new Error('Failed to create an instance of \\'' + fullName + '\\'. ' +\n            'Most likely an improperly defined class or an invalid module export.');\n        }\n\n        if (typeof factory.extend === 'function') {\n          // assume the factory was extendable and is already injected\n          return factory.create();\n        } else {\n          // assume the factory was extendable\n          // to create time injections\n          // TODO: support new'ing for instantiation and merge injections for pure JS Functions\n          return factory.create(injectionsFor(container, fullName));\n        }\n      }\n    }\n\n    function eachDestroyable(container, callback) {\n      var cache = container.cache;\n      var keys = emberKeys(cache);\n      var key, value;\n\n      for (var i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        value = cache[key];\n\n        if (option(container, key, 'instantiate') !== false) {\n          callback(value);\n        }\n      }\n    }\n\n    function resetCache(container) {\n      eachDestroyable(container, function(value) {\n        value.destroy();\n      });\n\n      container.cache.dict = dictionary(null);\n    }\n\n    function addTypeInjection(rules, type, property, fullName) {\n      var injections = rules[type];\n\n      if (!injections) {\n        injections = [];\n        rules[type] = injections;\n      }\n\n      injections.push({\n        property: property,\n        fullName: fullName\n      });\n    }\n\n    var VALID_FULL_NAME_REGEXP = /^[^:]+.+:[^:]+$/;\n    function validateFullName(fullName) {\n      if (!VALID_FULL_NAME_REGEXP.test(fullName)) {\n        throw new TypeError('Invalid Fullname, expected: `type:name` got: ' + fullName);\n      }\n      return true;\n    }\n\n    function addInjection(rules, factoryName, property, injectionName) {\n      var injections = rules[factoryName] = rules[factoryName] || [];\n      injections.push({\n        property: property,\n        fullName: injectionName\n      });\n    }\n\n    __exports__[\"default\"] = Container;\n  });\nenifed(\"ember-application\",\n  [\"ember-metal/core\",\"ember-runtime/system/lazy_load\",\"ember-application/system/dag\",\"ember-application/system/resolver\",\"ember-application/system/application\",\"ember-application/ext/controller\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var runLoadHooks = __dependency2__.runLoadHooks;\n\n    /**\n    Ember Application\n\n    @module ember\n    @submodule ember-application\n    @requires ember-views, ember-routing\n    */\n\n    var DAG = __dependency3__[\"default\"];\n    var Resolver = __dependency4__.Resolver;\n    var DefaultResolver = __dependency4__[\"default\"];\n    var Application = __dependency5__[\"default\"];\n    // side effect of extending ControllerMixin\n\n    Ember.Application = Application;\n    Ember.DAG = DAG;\n    Ember.Resolver = Resolver;\n    Ember.DefaultResolver = DefaultResolver;\n\n    runLoadHooks('Ember.Application', Application);\n  });\nenifed(\"ember-application/ext/controller\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/error\",\"ember-metal/utils\",\"ember-metal/computed\",\"ember-runtime/mixins/controller\",\"ember-routing/system/controller_for\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-application\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var EmberError = __dependency4__[\"default\"];\n    var inspect = __dependency5__.inspect;\n    var computed = __dependency6__.computed;\n    var ControllerMixin = __dependency7__[\"default\"];\n    var meta = __dependency5__.meta;\n    var controllerFor = __dependency8__[\"default\"];\n\n    function verifyNeedsDependencies(controller, container, needs) {\n      var dependency, i, l;\n      var missing = [];\n\n      for (i=0, l=needs.length; i<l; i++) {\n        dependency = needs[i];\n\n        Ember.assert(inspect(controller) + \"#needs must not specify dependencies with periods in their names (\" + dependency + \")\", dependency.indexOf('.') === -1);\n\n        if (dependency.indexOf(':') === -1) {\n          dependency = \"controller:\" + dependency;\n        }\n\n        // Structure assert to still do verification but not string concat in production\n        if (!container.has(dependency)) {\n          missing.push(dependency);\n        }\n      }\n      if (missing.length) {\n        throw new EmberError(inspect(controller) + \" needs [ \" + missing.join(', ') + \" ] but \" + (missing.length > 1 ? 'they' : 'it') + \" could not be found\");\n      }\n    }\n\n    var defaultControllersComputedProperty = computed(function() {\n      var controller = this;\n\n      return {\n        needs: get(controller, 'needs'),\n        container: get(controller, 'container'),\n        unknownProperty: function(controllerName) {\n          var needs = this.needs;\n          var dependency, i, l;\n\n          for (i=0, l=needs.length; i<l; i++) {\n            dependency = needs[i];\n            if (dependency === controllerName) {\n              return this.container.lookup('controller:' + controllerName);\n            }\n          }\n\n          var errorMessage = inspect(controller) + '#needs does not include `' + controllerName + '`. To access the ' + controllerName + ' controller from ' + inspect(controller) + ', ' + inspect(controller) + ' should have a `needs` property that is an array of the controllers it has access to.';\n          throw new ReferenceError(errorMessage);\n        },\n        setUnknownProperty: function (key, value) {\n          throw new Error(\"You cannot overwrite the value of `controllers.\" + key + \"` of \" + inspect(controller));\n        }\n      };\n    });\n\n    /**\n      @class ControllerMixin\n      @namespace Ember\n    */\n    ControllerMixin.reopen({\n      concatenatedProperties: ['needs'],\n\n      /**\n        An array of other controller objects available inside\n        instances of this controller via the `controllers`\n        property:\n\n        For example, when you define a controller:\n\n        ```javascript\n        App.CommentsController = Ember.ArrayController.extend({\n          needs: ['post']\n        });\n        ```\n\n        The application's single instance of these other\n        controllers are accessible by name through the\n        `controllers` property:\n\n        ```javascript\n        this.get('controllers.post'); // instance of App.PostController\n        ```\n\n        Given that you have a nested controller (nested resource):\n\n        ```javascript\n        App.CommentsNewController = Ember.ObjectController.extend({\n        });\n        ```\n\n        When you define a controller that requires access to a nested one:\n\n        ```javascript\n        App.IndexController = Ember.ObjectController.extend({\n          needs: ['commentsNew']\n        });\n        ```\n\n        You will be able to get access to it:\n\n        ```javascript\n        this.get('controllers.commentsNew'); // instance of App.CommentsNewController\n        ```\n\n        This is only available for singleton controllers.\n\n        @property {Array} needs\n        @default []\n      */\n      needs: [],\n\n      init: function() {\n        var needs = get(this, 'needs');\n        var length = get(needs, 'length');\n\n        if (length > 0) {\n          Ember.assert(' `' + inspect(this) + ' specifies `needs`, but does ' +\n                       \"not have a container. Please ensure this controller was \" +\n                       \"instantiated with a container.\",\n                       this.container || meta(this, false).descs.controllers !== defaultControllersComputedProperty);\n\n          if (this.container) {\n            verifyNeedsDependencies(this, this.container, needs);\n          }\n\n          // if needs then initialize controllers proxy\n          get(this, 'controllers');\n        }\n\n        this._super.apply(this, arguments);\n      },\n\n      /**\n        @method controllerFor\n        @see {Ember.Route#controllerFor}\n        @deprecated Use `needs` instead\n      */\n      controllerFor: function(controllerName) {\n        Ember.deprecate(\"Controller#controllerFor is deprecated, please use Controller#needs instead\");\n        return controllerFor(get(this, 'container'), controllerName);\n      },\n\n      /**\n        Stores the instances of other controllers available from within\n        this controller. Any controller listed by name in the `needs`\n        property will be accessible by name through this property.\n\n        ```javascript\n        App.CommentsController = Ember.ArrayController.extend({\n          needs: ['post'],\n          postTitle: function(){\n            var currentPost = this.get('controllers.post'); // instance of App.PostController\n            return currentPost.get('title');\n          }.property('controllers.post.title')\n        });\n        ```\n\n        @see {Ember.ControllerMixin#needs}\n        @property {Object} controllers\n        @default null\n      */\n      controllers: defaultControllersComputedProperty\n    });\n\n    __exports__[\"default\"] = ControllerMixin;\n  });\nenifed(\"ember-application/system/application\",\n  [\"ember-metal\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-runtime/system/lazy_load\",\"ember-application/system/dag\",\"ember-runtime/system/namespace\",\"ember-runtime/mixins/deferred\",\"ember-application/system/resolver\",\"ember-metal/platform\",\"ember-metal/run_loop\",\"ember-metal/utils\",\"container/container\",\"ember-runtime/controllers/controller\",\"ember-metal/enumerable_utils\",\"ember-runtime/controllers/object_controller\",\"ember-runtime/controllers/array_controller\",\"ember-handlebars/controls/select\",\"ember-views/system/event_dispatcher\",\"ember-views/system/jquery\",\"ember-routing/system/route\",\"ember-routing/system/router\",\"ember-routing/location/hash_location\",\"ember-routing/location/history_location\",\"ember-routing/location/auto_location\",\"ember-routing/location/none_location\",\"ember-routing/system/cache\",\"ember-metal/core\",\"ember-handlebars-compiler\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __dependency16__, __dependency17__, __dependency18__, __dependency19__, __dependency20__, __dependency21__, __dependency22__, __dependency23__, __dependency24__, __dependency25__, __dependency26__, __dependency27__, __dependency28__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-application\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.FEATURES, Ember.deprecate, Ember.assert, Ember.libraries, LOG_VERSION, Namespace, BOOTED\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var runLoadHooks = __dependency4__.runLoadHooks;\n    var DAG = __dependency5__[\"default\"];\n    var Namespace = __dependency6__[\"default\"];\n    var DeferredMixin = __dependency7__[\"default\"];\n    var DefaultResolver = __dependency8__[\"default\"];\n    var create = __dependency9__.create;\n    var run = __dependency10__[\"default\"];\n    var canInvoke = __dependency11__.canInvoke;\n    var Container = __dependency12__[\"default\"];\n    var Controller = __dependency13__[\"default\"];\n    var EnumerableUtils = __dependency14__[\"default\"];\n    var ObjectController = __dependency15__[\"default\"];\n    var ArrayController = __dependency16__[\"default\"];\n    var SelectView = __dependency17__[\"default\"];\n    var EventDispatcher = __dependency18__[\"default\"];\n    //import ContainerDebugAdapter from \"ember-extension-support/container_debug_adapter\";\n    var jQuery = __dependency19__[\"default\"];\n    var Route = __dependency20__[\"default\"];\n    var Router = __dependency21__[\"default\"];\n    var HashLocation = __dependency22__[\"default\"];\n    var HistoryLocation = __dependency23__[\"default\"];\n    var AutoLocation = __dependency24__[\"default\"];\n    var NoneLocation = __dependency25__[\"default\"];\n    var BucketCache = __dependency26__[\"default\"];\n\n    var K = __dependency27__.K;\n    var EmberHandlebars = __dependency28__[\"default\"];\n\n    var ContainerDebugAdapter;\n    function props(obj) {\n      var properties = [];\n\n      for (var key in obj) {\n        properties.push(key);\n      }\n\n      return properties;\n    }\n\n    /**\n      An instance of `Ember.Application` is the starting point for every Ember\n      application. It helps to instantiate, initialize and coordinate the many\n      objects that make up your app.\n\n      Each Ember app has one and only one `Ember.Application` object. In fact, the\n      very first thing you should do in your application is create the instance:\n\n      ```javascript\n      window.App = Ember.Application.create();\n      ```\n\n      Typically, the application object is the only global variable. All other\n      classes in your app should be properties on the `Ember.Application` instance,\n      which highlights its first role: a global namespace.\n\n      For example, if you define a view class, it might look like this:\n\n      ```javascript\n      App.MyView = Ember.View.extend();\n      ```\n\n      By default, calling `Ember.Application.create()` will automatically initialize\n      your application by calling the `Ember.Application.initialize()` method. If\n      you need to delay initialization, you can call your app's `deferReadiness()`\n      method. When you are ready for your app to be initialized, call its\n      `advanceReadiness()` method.\n\n      You can define a `ready` method on the `Ember.Application` instance, which\n      will be run by Ember when the application is initialized.\n\n      Because `Ember.Application` inherits from `Ember.Namespace`, any classes\n      you create will have useful string representations when calling `toString()`.\n      See the `Ember.Namespace` documentation for more information.\n\n      While you can think of your `Ember.Application` as a container that holds the\n      other classes in your application, there are several other responsibilities\n      going on under-the-hood that you may want to understand.\n\n      ### Event Delegation\n\n      Ember uses a technique called _event delegation_. This allows the framework\n      to set up a global, shared event listener instead of requiring each view to\n      do it manually. For example, instead of each view registering its own\n      `mousedown` listener on its associated element, Ember sets up a `mousedown`\n      listener on the `body`.\n\n      If a `mousedown` event occurs, Ember will look at the target of the event and\n      start walking up the DOM node tree, finding corresponding views and invoking\n      their `mouseDown` method as it goes.\n\n      `Ember.Application` has a number of default events that it listens for, as\n      well as a mapping from lowercase events to camel-cased view method names. For\n      example, the `keypress` event causes the `keyPress` method on the view to be\n      called, the `dblclick` event causes `doubleClick` to be called, and so on.\n\n      If there is a bubbling browser event that Ember does not listen for by\n      default, you can specify custom events and their corresponding view method\n      names by setting the application's `customEvents` property:\n\n      ```javascript\n      App = Ember.Application.create({\n        customEvents: {\n          // add support for the paste event\n          paste: \"paste\"\n        }\n      });\n      ```\n\n      By default, the application sets up these event listeners on the document\n      body. However, in cases where you are embedding an Ember application inside\n      an existing page, you may want it to set up the listeners on an element\n      inside the body.\n\n      For example, if only events inside a DOM element with the ID of `ember-app`\n      should be delegated, set your application's `rootElement` property:\n\n      ```javascript\n      window.App = Ember.Application.create({\n        rootElement: '#ember-app'\n      });\n      ```\n\n      The `rootElement` can be either a DOM element or a jQuery-compatible selector\n      string. Note that *views appended to the DOM outside the root element will\n      not receive events.* If you specify a custom root element, make sure you only\n      append views inside it!\n\n      To learn more about the advantages of event delegation and the Ember view\n      layer, and a list of the event listeners that are setup by default, visit the\n      [Ember View Layer guide](http://emberjs.com/guides/understanding-ember/the-view-layer/#toc_event-delegation).\n\n      ### Initializers\n\n      Libraries on top of Ember can add initializers, like so:\n\n      ```javascript\n      Ember.Application.initializer({\n        name: 'api-adapter',\n\n        initialize: function(container, application) {\n          application.register('api-adapter:main', ApiAdapter);\n        }\n      });\n      ```\n\n      Initializers provide an opportunity to access the container, which\n      organizes the different components of an Ember application. Additionally\n      they provide a chance to access the instantiated application. Beyond\n      being used for libraries, initializers are also a great way to organize\n      dependency injection or setup in your own application.\n\n      ### Routing\n\n      In addition to creating your application's router, `Ember.Application` is\n      also responsible for telling the router when to start routing. Transitions\n      between routes can be logged with the `LOG_TRANSITIONS` flag, and more\n      detailed intra-transition logging can be logged with\n      the `LOG_TRANSITIONS_INTERNAL` flag:\n\n      ```javascript\n      window.App = Ember.Application.create({\n        LOG_TRANSITIONS: true, // basic logging of successful transitions\n        LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps\n      });\n      ```\n\n      By default, the router will begin trying to translate the current URL into\n      application state once the browser emits the `DOMContentReady` event. If you\n      need to defer routing, you can call the application's `deferReadiness()`\n      method. Once routing can begin, call the `advanceReadiness()` method.\n\n      If there is any setup required before routing begins, you can implement a\n      `ready()` method on your app that will be invoked immediately before routing\n      begins.\n      ```\n\n      @class Application\n      @namespace Ember\n      @extends Ember.Namespace\n    */\n\n    var Application = Namespace.extend(DeferredMixin, {\n      _suppressDeferredDeprecation: true,\n\n      /**\n        The root DOM element of the Application. This can be specified as an\n        element or a\n        [jQuery-compatible selector string](http://api.jquery.com/category/selectors/).\n\n        This is the element that will be passed to the Application's,\n        `eventDispatcher`, which sets up the listeners for event delegation. Every\n        view in your application should be a child of the element you specify here.\n\n        @property rootElement\n        @type DOMElement\n        @default 'body'\n      */\n      rootElement: 'body',\n\n      /**\n        The `Ember.EventDispatcher` responsible for delegating events to this\n        application's views.\n\n        The event dispatcher is created by the application at initialization time\n        and sets up event listeners on the DOM element described by the\n        application's `rootElement` property.\n\n        See the documentation for `Ember.EventDispatcher` for more information.\n\n        @property eventDispatcher\n        @type Ember.EventDispatcher\n        @default null\n      */\n      eventDispatcher: null,\n\n      /**\n        The DOM events for which the event dispatcher should listen.\n\n        By default, the application's `Ember.EventDispatcher` listens\n        for a set of standard DOM events, such as `mousedown` and\n        `keyup`, and delegates them to your application's `Ember.View`\n        instances.\n\n        If you would like additional bubbling events to be delegated to your\n        views, set your `Ember.Application`'s `customEvents` property\n        to a hash containing the DOM event name as the key and the\n        corresponding view method name as the value. For example:\n\n        ```javascript\n        App = Ember.Application.create({\n          customEvents: {\n            // add support for the paste event\n            paste: \"paste\"\n          }\n        });\n        ```\n\n        @property customEvents\n        @type Object\n        @default null\n      */\n      customEvents: null,\n\n      // Start off the number of deferrals at 1. This will be\n      // decremented by the Application's own `initialize` method.\n      _readinessDeferrals: 1,\n\n      init: function() {\n        if (!this.$) { this.$ = jQuery; }\n        this.__container__ = this.buildContainer();\n\n        this.Router = this.defaultRouter();\n\n        this._super();\n\n        this.scheduleInitialize();\n\n        Ember.libraries.registerCoreLibrary('Handlebars' + (EmberHandlebars.compile ? '' : '-runtime'), EmberHandlebars.VERSION);\n        Ember.libraries.registerCoreLibrary('jQuery', jQuery().jquery);\n\n        if ( Ember.LOG_VERSION ) {\n          Ember.LOG_VERSION = false; // we only need to see this once per Application#init\n\n          var nameLengths = EnumerableUtils.map(Ember.libraries, function(item) {\n            return get(item, \"name.length\");\n          });\n\n          var maxNameLength = Math.max.apply(this, nameLengths);\n\n          Ember.debug('-------------------------------');\n          Ember.libraries.each(function(name, version) {\n            var spaces = new Array(maxNameLength - name.length + 1).join(\" \");\n            Ember.debug([name, spaces, ' : ', version].join(\"\"));\n          });\n          Ember.debug('-------------------------------');\n        }\n      },\n\n      /**\n        Build the container for the current application.\n\n        Also register a default application view in case the application\n        itself does not.\n\n        @private\n        @method buildContainer\n        @return {Ember.Container} the configured container\n      */\n      buildContainer: function() {\n        var container = this.__container__ = Application.buildContainer(this);\n\n        return container;\n      },\n\n      /**\n        If the application has not opted out of routing and has not explicitly\n        defined a router, supply a default router for the application author\n        to configure.\n\n        This allows application developers to do:\n\n        ```javascript\n        var App = Ember.Application.create();\n\n        App.Router.map(function() {\n          this.resource('posts');\n        });\n        ```\n\n        @private\n        @method defaultRouter\n        @return {Ember.Router} the default router\n      */\n\n      defaultRouter: function() {\n        if (this.Router === false) { return; }\n        var container = this.__container__;\n\n        if (this.Router) {\n          container.unregister('router:main');\n          container.register('router:main', this.Router);\n        }\n\n        return container.lookupFactory('router:main');\n      },\n\n      /**\n        Automatically initialize the application once the DOM has\n        become ready.\n\n        The initialization itself is scheduled on the actions queue\n        which ensures that application loading finishes before\n        booting.\n\n        If you are asynchronously loading code, you should call\n        `deferReadiness()` to defer booting, and then call\n        `advanceReadiness()` once all of your code has finished\n        loading.\n\n        @private\n        @method scheduleInitialize\n      */\n      scheduleInitialize: function() {\n        var self = this;\n\n        if (!this.$ || this.$.isReady) {\n          run.schedule('actions', self, '_initialize');\n        } else {\n          this.$().ready(function runInitialize() {\n            run(self, '_initialize');\n          });\n        }\n      },\n\n      /**\n        Use this to defer readiness until some condition is true.\n\n        Example:\n\n        ```javascript\n        App = Ember.Application.create();\n        App.deferReadiness();\n\n        jQuery.getJSON(\"/auth-token\", function(token) {\n          App.token = token;\n          App.advanceReadiness();\n        });\n        ```\n\n        This allows you to perform asynchronous setup logic and defer\n        booting your application until the setup has finished.\n\n        However, if the setup requires a loading UI, it might be better\n        to use the router for this purpose.\n\n        @method deferReadiness\n      */\n      deferReadiness: function() {\n        Ember.assert(\"You must call deferReadiness on an instance of Ember.Application\", this instanceof Application);\n        Ember.assert(\"You cannot defer readiness since the `ready()` hook has already been called.\", this._readinessDeferrals > 0);\n        this._readinessDeferrals++;\n      },\n\n      /**\n        Call `advanceReadiness` after any asynchronous setup logic has completed.\n        Each call to `deferReadiness` must be matched by a call to `advanceReadiness`\n        or the application will never become ready and routing will not begin.\n\n        @method advanceReadiness\n        @see {Ember.Application#deferReadiness}\n      */\n      advanceReadiness: function() {\n        Ember.assert(\"You must call advanceReadiness on an instance of Ember.Application\", this instanceof Application);\n        this._readinessDeferrals--;\n\n        if (this._readinessDeferrals === 0) {\n          run.once(this, this.didBecomeReady);\n        }\n      },\n\n      /**\n        Registers a factory that can be used for dependency injection (with\n        `App.inject`) or for service lookup. Each factory is registered with\n        a full name including two parts: `type:name`.\n\n        A simple example:\n\n        ```javascript\n        var App = Ember.Application.create();\n        App.Orange  = Ember.Object.extend();\n        App.register('fruit:favorite', App.Orange);\n        ```\n\n        Ember will resolve factories from the `App` namespace automatically.\n        For example `App.CarsController` will be discovered and returned if\n        an application requests `controller:cars`.\n\n        An example of registering a controller with a non-standard name:\n\n        ```javascript\n        var App = Ember.Application.create(),\n            Session  = Ember.Controller.extend();\n\n        App.register('controller:session', Session);\n\n        // The Session controller can now be treated like a normal controller,\n        // despite its non-standard name.\n        App.ApplicationController = Ember.Controller.extend({\n          needs: ['session']\n        });\n        ```\n\n        Registered factories are **instantiated** by having `create`\n        called on them. Additionally they are **singletons**, each time\n        they are looked up they return the same instance.\n\n        Some examples modifying that default behavior:\n\n        ```javascript\n        var App = Ember.Application.create();\n\n        App.Person  = Ember.Object.extend();\n        App.Orange  = Ember.Object.extend();\n        App.Email   = Ember.Object.extend();\n        App.session = Ember.Object.create();\n\n        App.register('model:user', App.Person, {singleton: false });\n        App.register('fruit:favorite', App.Orange);\n        App.register('communication:main', App.Email, {singleton: false});\n        App.register('session', App.session, {instantiate: false});\n        ```\n\n        @method register\n        @param  fullName {String} type:name (e.g., 'model:user')\n        @param  factory {Function} (e.g., App.Person)\n        @param  options {Object} (optional) disable instantiation or singleton usage\n      **/\n      register: function() {\n        var container = this.__container__;\n        container.register.apply(container, arguments);\n      },\n\n      /**\n        Define a dependency injection onto a specific factory or all factories\n        of a type.\n\n        When Ember instantiates a controller, view, or other framework component\n        it can attach a dependency to that component. This is often used to\n        provide services to a set of framework components.\n\n        An example of providing a session object to all controllers:\n\n        ```javascript\n        var App = Ember.Application.create(),\n            Session = Ember.Object.extend({ isAuthenticated: false });\n\n        // A factory must be registered before it can be injected\n        App.register('session:main', Session);\n\n        // Inject 'session:main' onto all factories of the type 'controller'\n        // with the name 'session'\n        App.inject('controller', 'session', 'session:main');\n\n        App.IndexController = Ember.Controller.extend({\n          isLoggedIn: Ember.computed.alias('session.isAuthenticated')\n        });\n        ```\n\n        Injections can also be performed on specific factories.\n\n        ```javascript\n        App.inject(<full_name or type>, <property name>, <full_name>)\n        App.inject('route', 'source', 'source:main')\n        App.inject('route:application', 'email', 'model:email')\n        ```\n\n        It is important to note that injections can only be performed on\n        classes that are instantiated by Ember itself. Instantiating a class\n        directly (via `create` or `new`) bypasses the dependency injection\n        system.\n\n        Ember-Data instantiates its models in a unique manner, and consequently\n        injections onto models (or all models) will not work as expected. Injections\n        on models can be enabled by setting `Ember.MODEL_FACTORY_INJECTIONS`\n        to `true`.\n\n        @method inject\n        @param  factoryNameOrType {String}\n        @param  property {String}\n        @param  injectionName {String}\n      **/\n      inject: function() {\n        var container = this.__container__;\n        container.injection.apply(container, arguments);\n      },\n\n      /**\n        Calling initialize manually is not supported.\n\n        Please see Ember.Application#advanceReadiness and\n        Ember.Application#deferReadiness.\n\n        @private\n        @deprecated\n        @method initialize\n       **/\n      initialize: function() {\n        Ember.deprecate('Calling initialize manually is not supported. Please see Ember.Application#advanceReadiness and Ember.Application#deferReadiness');\n      },\n\n      /**\n        Initialize the application. This happens automatically.\n\n        Run any initializers and run the application load hook. These hooks may\n        choose to defer readiness. For example, an authentication hook might want\n        to defer readiness until the auth token has been retrieved.\n\n        @private\n        @method _initialize\n      */\n      _initialize: function() {\n        if (this.isDestroyed) { return; }\n\n        // At this point, the App.Router must already be assigned\n        if (this.Router) {\n          var container = this.__container__;\n          container.unregister('router:main');\n          container.register('router:main', this.Router);\n        }\n\n        this.runInitializers();\n        runLoadHooks('application', this);\n\n        // At this point, any initializers or load hooks that would have wanted\n        // to defer readiness have fired. In general, advancing readiness here\n        // will proceed to didBecomeReady.\n        this.advanceReadiness();\n\n        return this;\n      },\n\n      /**\n        Reset the application. This is typically used only in tests. It cleans up\n        the application in the following order:\n\n        1. Deactivate existing routes\n        2. Destroy all objects in the container\n        3. Create a new application container\n        4. Re-route to the existing url\n\n        Typical Example:\n\n        ```javascript\n\n        var App;\n\n        run(function() {\n          App = Ember.Application.create();\n        });\n\n        module(\"acceptance test\", {\n          setup: function() {\n            App.reset();\n          }\n        });\n\n        test(\"first test\", function() {\n          // App is freshly reset\n        });\n\n        test(\"first test\", function() {\n          // App is again freshly reset\n        });\n        ```\n\n        Advanced Example:\n\n        Occasionally you may want to prevent the app from initializing during\n        setup. This could enable extra configuration, or enable asserting prior\n        to the app becoming ready.\n\n        ```javascript\n\n        var App;\n\n        run(function() {\n          App = Ember.Application.create();\n        });\n\n        module(\"acceptance test\", {\n          setup: function() {\n            run(function() {\n              App.reset();\n              App.deferReadiness();\n            });\n          }\n        });\n\n        test(\"first test\", function() {\n          ok(true, 'something before app is initialized');\n\n          run(function() {\n            App.advanceReadiness();\n          });\n          ok(true, 'something after app is initialized');\n        });\n        ```\n\n        @method reset\n      **/\n      reset: function() {\n        this._readinessDeferrals = 1;\n\n        function handleReset() {\n          var router = this.__container__.lookup('router:main');\n          router.reset();\n\n          run(this.__container__, 'destroy');\n\n          this.buildContainer();\n\n          run.schedule('actions', this, function() {\n            this._initialize();\n          });\n        }\n\n        run.join(this, handleReset);\n      },\n\n      /**\n        @private\n        @method runInitializers\n      */\n      runInitializers: function() {\n        var initializersByName = get(this.constructor, 'initializers');\n        var initializers = props(initializersByName);\n        var container = this.__container__;\n        var graph = new DAG();\n        var namespace = this;\n        var name, initializer;\n\n        for (var i = 0; i < initializers.length; i++) {\n          initializer = initializersByName[initializers[i]];\n          graph.addEdges(initializer.name, initializer.initialize, initializer.before, initializer.after);\n        }\n\n        graph.topsort(function (vertex) {\n          var initializer = vertex.value;\n          Ember.assert(\"No application initializer named '\" + vertex.name + \"'\", initializer);\n          initializer(container, namespace);\n        });\n      },\n\n      /**\n        @private\n        @method didBecomeReady\n      */\n      didBecomeReady: function() {\n        this.setupEventDispatcher();\n        this.ready(); // user hook\n        this.startRouting();\n\n        if (!Ember.testing) {\n          // Eagerly name all classes that are already loaded\n          Ember.Namespace.processAll();\n          Ember.BOOTED = true;\n        }\n\n        this.resolve(this);\n      },\n\n      /**\n        Setup up the event dispatcher to receive events on the\n        application's `rootElement` with any registered\n        `customEvents`.\n\n        @private\n        @method setupEventDispatcher\n      */\n      setupEventDispatcher: function() {\n        var customEvents = get(this, 'customEvents');\n        var rootElement = get(this, 'rootElement');\n        var dispatcher = this.__container__.lookup('event_dispatcher:main');\n\n        set(this, 'eventDispatcher', dispatcher);\n        dispatcher.setup(customEvents, rootElement);\n      },\n\n      /**\n        If the application has a router, use it to route to the current URL, and\n        trigger a new call to `route` whenever the URL changes.\n\n        @private\n        @method startRouting\n        @property router {Ember.Router}\n      */\n      startRouting: function() {\n        var router = this.__container__.lookup('router:main');\n        if (!router) { return; }\n\n        router.startRouting();\n      },\n\n      handleURL: function(url) {\n        var router = this.__container__.lookup('router:main');\n\n        router.handleURL(url);\n      },\n\n      /**\n        Called when the Application has become ready.\n        The call will be delayed until the DOM has become ready.\n\n        @event ready\n      */\n      ready: K,\n\n      /**\n        @deprecated Use 'Resolver' instead\n        Set this to provide an alternate class to `Ember.DefaultResolver`\n\n\n        @property resolver\n      */\n      resolver: null,\n\n      /**\n        Set this to provide an alternate class to `Ember.DefaultResolver`\n\n        @property resolver\n      */\n      Resolver: null,\n\n      willDestroy: function() {\n        Ember.BOOTED = false;\n        // Ensure deactivation of routes before objects are destroyed\n        this.__container__.lookup('router:main').reset();\n\n        this.__container__.destroy();\n      },\n\n      initializer: function(options) {\n        this.constructor.initializer(options);\n      },\n\n      /**\n        @method then\n        @private\n        @deprecated\n      */\n      then: function() {\n        Ember.deprecate('Do not use `.then` on an instance of Ember.Application.  Please use the `.ready` hook instead.');\n\n        this._super.apply(this, arguments);\n      }\n    });\n\n    Application.reopenClass({\n      initializers: create(null),\n\n      /**\n        Initializer receives an object which has the following attributes:\n        `name`, `before`, `after`, `initialize`. The only required attribute is\n        `initialize, all others are optional.\n\n        * `name` allows you to specify under which name the initializer is registered.\n        This must be a unique name, as trying to register two initializers with the\n        same name will result in an error.\n\n        ```javascript\n        Ember.Application.initializer({\n          name: 'namedInitializer',\n          initialize: function(container, application) {\n            Ember.debug(\"Running namedInitializer!\");\n          }\n        });\n        ```\n\n        * `before` and `after` are used to ensure that this initializer is ran prior\n        or after the one identified by the value. This value can be a single string\n        or an array of strings, referencing the `name` of other initializers.\n\n        An example of ordering initializers, we create an initializer named `first`:\n\n        ```javascript\n        Ember.Application.initializer({\n          name: 'first',\n          initialize: function(container, application) {\n            Ember.debug(\"First initializer!\");\n          }\n        });\n\n        // DEBUG: First initializer!\n        ```\n\n        We add another initializer named `second`, specifying that it should run\n        after the initializer named `first`:\n\n        ```javascript\n        Ember.Application.initializer({\n          name: 'second',\n          after: 'first',\n\n          initialize: function(container, application) {\n            Ember.debug(\"Second initializer!\");\n          }\n        });\n\n        // DEBUG: First initializer!\n        // DEBUG: Second initializer!\n        ```\n\n        Afterwards we add a further initializer named `pre`, this time specifying\n        that it should run before the initializer named `first`:\n\n        ```javascript\n        Ember.Application.initializer({\n          name: 'pre',\n          before: 'first',\n\n          initialize: function(container, application) {\n            Ember.debug(\"Pre initializer!\");\n          }\n        });\n\n        // DEBUG: Pre initializer!\n        // DEBUG: First initializer!\n        // DEBUG: Second initializer!\n        ```\n\n        Finally we add an initializer named `post`, specifying it should run after\n        both the `first` and the `second` initializers:\n\n        ```javascript\n        Ember.Application.initializer({\n          name: 'post',\n          after: ['first', 'second'],\n\n          initialize: function(container, application) {\n            Ember.debug(\"Post initializer!\");\n          }\n        });\n\n        // DEBUG: Pre initializer!\n        // DEBUG: First initializer!\n        // DEBUG: Second initializer!\n        // DEBUG: Post initializer!\n        ```\n\n        * `initialize` is a callback function that receives two arguments, `container`\n        and `application` on which you can operate.\n\n        Example of using `container` to preload data into the store:\n\n        ```javascript\n        Ember.Application.initializer({\n          name: \"preload-data\",\n\n          initialize: function(container, application) {\n            var store = container.lookup('store:main');\n            store.pushPayload(preloadedData);\n          }\n        });\n        ```\n\n        Example of using `application` to register an adapter:\n\n        ```javascript\n        Ember.Application.initializer({\n          name: 'api-adapter',\n\n          initialize: function(container, application) {\n            application.register('api-adapter:main', ApiAdapter);\n          }\n        });\n        ```\n\n        @method initializer\n        @param initializer {Object}\n       */\n      initializer: function(initializer) {\n        // If this is the first initializer being added to a subclass, we are going to reopen the class\n        // to make sure we have a new `initializers` object, which extends from the parent class' using\n        // prototypal inheritance. Without this, attempting to add initializers to the subclass would\n        // pollute the parent class as well as other subclasses.\n        if (this.superclass.initializers !== undefined && this.superclass.initializers === this.initializers) {\n          this.reopenClass({\n            initializers: create(this.initializers)\n          });\n        }\n\n        Ember.assert(\"The initializer '\" + initializer.name + \"' has already been registered\", !this.initializers[initializer.name]);\n        Ember.assert(\"An initializer cannot be registered without an initialize function\", canInvoke(initializer, 'initialize'));\n\n        this.initializers[initializer.name] = initializer;\n      },\n\n      /**\n        This creates a container with the default Ember naming conventions.\n\n        It also configures the container:\n\n        * registered views are created every time they are looked up (they are\n          not singletons)\n        * registered templates are not factories; the registered value is\n          returned directly.\n        * the router receives the application as its `namespace` property\n        * all controllers receive the router as their `target` and `controllers`\n          properties\n        * all controllers receive the application as their `namespace` property\n        * the application view receives the application controller as its\n          `controller` property\n        * the application view receives the application template as its\n          `defaultTemplate` property\n\n        @private\n        @method buildContainer\n        @static\n        @param {Ember.Application} namespace the application to build the\n          container for.\n        @return {Ember.Container} the built container\n      */\n      buildContainer: function(namespace) {\n        var container = new Container();\n\n        container.set = set;\n        container.resolver = resolverFor(namespace);\n        container.normalizeFullName = container.resolver.normalize;\n        container.describe = container.resolver.describe;\n        container.makeToString = container.resolver.makeToString;\n\n        container.optionsForType('component', { singleton: false });\n        container.optionsForType('view', { singleton: false });\n        container.optionsForType('template', { instantiate: false });\n        container.optionsForType('helper', { instantiate: false });\n\n        container.register('application:main', namespace, { instantiate: false });\n\n        container.register('controller:basic', Controller, { instantiate: false });\n        container.register('controller:object', ObjectController, { instantiate: false });\n        container.register('controller:array', ArrayController, { instantiate: false });\n\n        container.register('view:select', SelectView);\n\n        container.register('route:basic', Route, { instantiate: false });\n        container.register('event_dispatcher:main', EventDispatcher);\n\n        container.register('router:main',  Router);\n        container.injection('router:main', 'namespace', 'application:main');\n\n        container.register('location:auto', AutoLocation);\n        container.register('location:hash', HashLocation);\n        container.register('location:history', HistoryLocation);\n        container.register('location:none', NoneLocation);\n\n        container.injection('controller', 'target', 'router:main');\n        container.injection('controller', 'namespace', 'application:main');\n\n        container.register('-bucket-cache:main', BucketCache);\n        container.injection('router', '_bucketCache', '-bucket-cache:main');\n        container.injection('route',  '_bucketCache', '-bucket-cache:main');\n        container.injection('controller',  '_bucketCache', '-bucket-cache:main');\n\n        container.injection('route', 'router', 'router:main');\n        container.injection('location', 'rootURL', '-location-setting:root-url');\n\n        // DEBUGGING\n        container.register('resolver-for-debugging:main', container.resolver.__resolver__, { instantiate: false });\n        container.injection('container-debug-adapter:main', 'resolver', 'resolver-for-debugging:main');\n        container.injection('data-adapter:main', 'containerDebugAdapter', 'container-debug-adapter:main');\n        // Custom resolver authors may want to register their own ContainerDebugAdapter with this key\n\n        // ES6TODO: resolve this via import once ember-application package is ES6'ed\n        if (!ContainerDebugAdapter) { ContainerDebugAdapter = requireModule('ember-extension-support/container_debug_adapter')['default']; }\n        container.register('container-debug-adapter:main', ContainerDebugAdapter);\n\n        return container;\n      }\n    });\n\n    /**\n      This function defines the default lookup rules for container lookups:\n\n      * templates are looked up on `Ember.TEMPLATES`\n      * other names are looked up on the application after classifying the name.\n        For example, `controller:post` looks up `App.PostController` by default.\n      * if the default lookup fails, look for registered classes on the container\n\n      This allows the application to register default injections in the container\n      that could be overridden by the normal naming convention.\n\n      @private\n      @method resolverFor\n      @param {Ember.Namespace} namespace the namespace to look for classes\n      @return {*} the resolved value for a given lookup\n    */\n    function resolverFor(namespace) {\n      if (namespace.get('resolver')) {\n        Ember.deprecate('Application.resolver is deprecated in favor of Application.Resolver', false);\n      }\n\n      var ResolverClass = namespace.get('resolver') || namespace.get('Resolver') || DefaultResolver;\n      var resolver = ResolverClass.create({\n        namespace: namespace\n      });\n\n      function resolve(fullName) {\n        return resolver.resolve(fullName);\n      }\n\n      resolve.describe = function(fullName) {\n        return resolver.lookupDescription(fullName);\n      };\n\n      resolve.makeToString = function(factory, fullName) {\n        return resolver.makeToString(factory, fullName);\n      };\n\n      resolve.normalize = function(fullName) {\n        if (resolver.normalize) {\n          return resolver.normalize(fullName);\n        } else {\n          Ember.deprecate('The Resolver should now provide a \\'normalize\\' function', false);\n          return fullName;\n        }\n      };\n\n      resolve.__resolver__ = resolver;\n\n      return resolve;\n    }\n\n    __exports__[\"default\"] = Application;\n  });\nenifed(\"ember-application/system/dag\",\n  [\"ember-metal/error\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EmberError = __dependency1__[\"default\"];\n\n    function visit(vertex, fn, visited, path) {\n      var name = vertex.name;\n      var vertices = vertex.incoming;\n      var names = vertex.incomingNames;\n      var len = names.length;\n      var i;\n\n      if (!visited) {\n        visited = {};\n      }\n      if (!path) {\n        path = [];\n      }\n      if (visited.hasOwnProperty(name)) {\n        return;\n      }\n      path.push(name);\n      visited[name] = true;\n      for (i = 0; i < len; i++) {\n        visit(vertices[names[i]], fn, visited, path);\n      }\n      fn(vertex, path);\n      path.pop();\n    }\n\n\n    /**\n     * DAG stands for Directed acyclic graph.\n     *\n     * It is used to build a graph of dependencies checking that there isn't circular\n     * dependencies. p.e Registering initializers with a certain precedence order.\n     *\n     * @class DAG\n     * @constructor\n     */\n    function DAG() {\n      this.names = [];\n      this.vertices = Object.create(null);\n    }\n\n    /**\n     * DAG Vertex\n     *\n     * @class Vertex\n     * @constructor\n     */\n\n    function Vertex(name) {\n      this.name = name;\n      this.incoming = {};\n      this.incomingNames = [];\n      this.hasOutgoing = false;\n      this.value = null;\n    }\n\n    /**\n     * Adds a vertex entry to the graph unless it is already added.\n     *\n     * @private\n     * @method add\n     * @param {String} name The name of the vertex to add\n     */\n    DAG.prototype.add = function(name) {\n      if (!name) {\n        throw new Error(\"Can't add Vertex without name\");\n      }\n      if (this.vertices[name] !== undefined) {\n        return this.vertices[name];\n      }\n      var vertex = new Vertex(name);\n      this.vertices[name] = vertex;\n      this.names.push(name);\n      return vertex;\n    };\n\n    /**\n     * Adds a vertex to the graph and sets its value.\n     *\n     * @private\n     * @method map\n     * @param {String} name The name of the vertex.\n     * @param         value The value to put in the vertex.\n     */\n    DAG.prototype.map = function(name, value) {\n      this.add(name).value = value;\n    };\n\n    /**\n     * Connects the vertices with the given names, adding them to the graph if\n     * necessary, only if this does not produce is any circular dependency.\n     *\n     * @private\n     * @method addEdge\n     * @param {String} fromName The name the vertex where the edge starts.\n     * @param {String} toName The name the vertex where the edge ends.\n     */\n    DAG.prototype.addEdge = function(fromName, toName) {\n      if (!fromName || !toName || fromName === toName) {\n        return;\n      }\n      var from = this.add(fromName);\n      var to = this.add(toName);\n      if (to.incoming.hasOwnProperty(fromName)) {\n        return;\n      }\n      function checkCycle(vertex, path) {\n        if (vertex.name === toName) {\n          throw new EmberError(\"cycle detected: \" + toName + \" <- \" + path.join(\" <- \"));\n        }\n      }\n      visit(from, checkCycle);\n      from.hasOutgoing = true;\n      to.incoming[fromName] = from;\n      to.incomingNames.push(fromName);\n    };\n\n    /**\n     * Visits all the vertex of the graph calling the given function with each one,\n     * ensuring that the vertices are visited respecting their precedence.\n     *\n     * @method  topsort\n     * @param {Function} fn The function to be invoked on each vertex.\n     */\n    DAG.prototype.topsort = function(fn) {\n      var visited = {};\n      var vertices = this.vertices;\n      var names = this.names;\n      var len = names.length;\n      var i, vertex;\n\n      for (i = 0; i < len; i++) {\n        vertex = vertices[names[i]];\n        if (!vertex.hasOutgoing) {\n          visit(vertex, fn, visited);\n        }\n      }\n    };\n\n    /**\n     * Adds a vertex with the given name and value to the graph and joins it with the\n     * vertices referenced in _before_ and _after_. If there isn't vertices with those\n     * names, they are added too.\n     *\n     * If either _before_ or _after_ are falsy/empty, the added vertex will not have\n     * an incoming/outgoing edge.\n     *\n     * @method addEdges\n     * @param {String} name The name of the vertex to be added.\n     * @param         value The value of that vertex.\n     * @param        before An string or array of strings with the names of the vertices before\n     *                      which this vertex must be visited.\n     * @param         after An string or array of strings with the names of the vertex after\n     *                      which this vertex must be visited.\n     *\n     */\n    DAG.prototype.addEdges = function(name, value, before, after) {\n      var i;\n      this.map(name, value);\n      if (before) {\n        if (typeof before === 'string') {\n          this.addEdge(name, before);\n        } else {\n          for (i = 0; i < before.length; i++) {\n            this.addEdge(name, before[i]);\n          }\n        }\n      }\n      if (after) {\n        if (typeof after === 'string') {\n          this.addEdge(after, name);\n        } else {\n          for (i = 0; i < after.length; i++) {\n            this.addEdge(after[i], name);\n          }\n        }\n      }\n    };\n\n    __exports__[\"default\"] = DAG;\n  });\nenifed(\"ember-application/system/resolver\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/logger\",\"ember-runtime/system/string\",\"ember-runtime/system/object\",\"ember-runtime/system/namespace\",\"ember-handlebars\",\"ember-metal/dictionary\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-application\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.TEMPLATES, Ember.assert\n    var get = __dependency2__.get;\n    var Logger = __dependency3__[\"default\"];\n    var classify = __dependency4__.classify;\n    var capitalize = __dependency4__.capitalize;\n    var decamelize = __dependency4__.decamelize;\n    var EmberObject = __dependency5__[\"default\"];\n    var Namespace = __dependency6__[\"default\"];\n    var EmberHandlebars = __dependency7__[\"default\"];\n\n    var Resolver = EmberObject.extend({\n      /**\n        This will be set to the Application instance when it is\n        created.\n\n        @property namespace\n      */\n      namespace: null,\n      normalize:         Ember.required(Function),\n      resolve:           Ember.required(Function),\n      parseName:         Ember.required(Function),\n      lookupDescription: Ember.required(Function),\n      makeToString:      Ember.required(Function),\n      resolveOther:      Ember.required(Function),\n      _logLookup:        Ember.required(Function)\n    });\n    __exports__.Resolver = Resolver;\n    /**\n      The DefaultResolver defines the default lookup rules to resolve\n      container lookups before consulting the container for registered\n      items:\n\n      * templates are looked up on `Ember.TEMPLATES`\n      * other names are looked up on the application after converting\n        the name. For example, `controller:post` looks up\n        `App.PostController` by default.\n      * there are some nuances (see examples below)\n\n      ### How Resolving Works\n\n      The container calls this object's `resolve` method with the\n      `fullName` argument.\n\n      It first parses the fullName into an object using `parseName`.\n\n      Then it checks for the presence of a type-specific instance\n      method of the form `resolve[Type]` and calls it if it exists.\n      For example if it was resolving 'template:post', it would call\n      the `resolveTemplate` method.\n\n      Its last resort is to call the `resolveOther` method.\n\n      The methods of this object are designed to be easy to override\n      in a subclass. For example, you could enhance how a template\n      is resolved like so:\n\n      ```javascript\n      App = Ember.Application.create({\n        Resolver: Ember.DefaultResolver.extend({\n          resolveTemplate: function(parsedName) {\n            var resolvedTemplate = this._super(parsedName);\n            if (resolvedTemplate) { return resolvedTemplate; }\n            return Ember.TEMPLATES['not_found'];\n          }\n        })\n      });\n      ```\n\n      Some examples of how names are resolved:\n\n      ```\n      'template:post' //=> Ember.TEMPLATES['post']\n      'template:posts/byline' //=> Ember.TEMPLATES['posts/byline']\n      'template:posts.byline' //=> Ember.TEMPLATES['posts/byline']\n      'template:blogPost' //=> Ember.TEMPLATES['blogPost']\n                          //   OR\n                          //   Ember.TEMPLATES['blog_post']\n      'controller:post' //=> App.PostController\n      'controller:posts.index' //=> App.PostsIndexController\n      'controller:blog/post' //=> Blog.PostController\n      'controller:basic' //=> Ember.Controller\n      'route:post' //=> App.PostRoute\n      'route:posts.index' //=> App.PostsIndexRoute\n      'route:blog/post' //=> Blog.PostRoute\n      'route:basic' //=> Ember.Route\n      'view:post' //=> App.PostView\n      'view:posts.index' //=> App.PostsIndexView\n      'view:blog/post' //=> Blog.PostView\n      'view:basic' //=> Ember.View\n      'foo:post' //=> App.PostFoo\n      'model:post' //=> App.Post\n      ```\n\n      @class DefaultResolver\n      @namespace Ember\n      @extends Ember.Object\n    */\n    var dictionary = __dependency8__[\"default\"];\n\n    __exports__[\"default\"] = EmberObject.extend({\n      /**\n        This will be set to the Application instance when it is\n        created.\n\n        @property namespace\n      */\n      namespace: null,\n\n      init: function() {\n        this._parseNameCache = dictionary(null);\n      },\n      normalize: function(fullName) {\n        var split = fullName.split(':', 2);\n        var type = split[0];\n        var name = split[1];\n\n        Ember.assert(\"Tried to normalize a container name without a colon (:) in it. You probably tried to lookup a name that did not contain a type, a colon, and a name. A proper lookup name would be `view:post`.\", split.length === 2);\n\n        if (type !== 'template') {\n          var result = name;\n\n          if (result.indexOf('.') > -1) {\n            result = result.replace(/\\.(.)/g, function(m) {\n              return m.charAt(1).toUpperCase();\n            });\n          }\n\n          if (name.indexOf('_') > -1) {\n            result = result.replace(/_(.)/g, function(m) {\n              return m.charAt(1).toUpperCase();\n            });\n          }\n\n          return type + ':' + result;\n        } else {\n          return fullName;\n        }\n      },\n\n\n      /**\n        This method is called via the container's resolver method.\n        It parses the provided `fullName` and then looks up and\n        returns the appropriate template or class.\n\n        @method resolve\n        @param {String} fullName the lookup string\n        @return {Object} the resolved factory\n      */\n      resolve: function(fullName) {\n        var parsedName = this.parseName(fullName);\n        var resolveMethodName = parsedName.resolveMethodName;\n        var resolved;\n\n        if (!(parsedName.name && parsedName.type)) {\n          throw new TypeError('Invalid fullName: `' + fullName + '`, must be of the form `type:name` ');\n        }\n\n        if (this[resolveMethodName]) {\n          resolved = this[resolveMethodName](parsedName);\n        }\n\n        if (!resolved) {\n          resolved = this.resolveOther(parsedName);\n        }\n\n        if (parsedName.root && parsedName.root.LOG_RESOLVER) {\n          this._logLookup(resolved, parsedName);\n        }\n\n        return resolved;\n      },\n      /**\n        Convert the string name of the form 'type:name' to\n        a Javascript object with the parsed aspects of the name\n        broken out.\n\n        @protected\n        @param {String} fullName the lookup string\n        @method parseName\n      */\n\n      parseName: function(fullName) {\n        return this._parseNameCache[fullName] || (\n          this._parseNameCache[fullName] = this._parseName(fullName)\n        );\n      },\n\n      _parseName: function(fullName) {\n        var nameParts = fullName.split(':');\n        var type = nameParts[0], fullNameWithoutType = nameParts[1];\n        var name = fullNameWithoutType;\n        var namespace = get(this, 'namespace');\n        var root = namespace;\n\n        if (type !== 'template' && name.indexOf('/') !== -1) {\n          var parts = name.split('/');\n          name = parts[parts.length - 1];\n          var namespaceName = capitalize(parts.slice(0, -1).join('.'));\n          root = Namespace.byName(namespaceName);\n\n          Ember.assert('You are looking for a ' + name + ' ' + type + ' in the ' + namespaceName + ' namespace, but the namespace could not be found', root);\n        }\n\n        return {\n          fullName: fullName,\n          type: type,\n          fullNameWithoutType: fullNameWithoutType,\n          name: name,\n          root: root,\n          resolveMethodName: 'resolve' + classify(type)\n        };\n      },\n\n      /**\n        Returns a human-readable description for a fullName. Used by the\n        Application namespace in assertions to describe the\n        precise name of the class that Ember is looking for, rather than\n        container keys.\n\n        @protected\n        @param {String} fullName the lookup string\n        @method lookupDescription\n      */\n      lookupDescription: function(fullName) {\n        var parsedName = this.parseName(fullName);\n\n        if (parsedName.type === 'template') {\n          return 'template at ' + parsedName.fullNameWithoutType.replace(/\\./g, '/');\n        }\n\n        var description = parsedName.root + '.' + classify(parsedName.name);\n\n        if (parsedName.type !== 'model') {\n          description += classify(parsedName.type);\n        }\n\n        return description;\n      },\n\n      makeToString: function(factory, fullName) {\n        return factory.toString();\n      },\n      /**\n        Given a parseName object (output from `parseName`), apply\n        the conventions expected by `Ember.Router`\n\n        @protected\n        @param {Object} parsedName a parseName object with the parsed\n          fullName lookup string\n        @method useRouterNaming\n      */\n      useRouterNaming: function(parsedName) {\n        parsedName.name = parsedName.name.replace(/\\./g, '_');\n        if (parsedName.name === 'basic') {\n          parsedName.name = '';\n        }\n      },\n      /**\n        Look up the template in Ember.TEMPLATES\n\n        @protected\n        @param {Object} parsedName a parseName object with the parsed\n          fullName lookup string\n        @method resolveTemplate\n      */\n      resolveTemplate: function(parsedName) {\n        var templateName = parsedName.fullNameWithoutType.replace(/\\./g, '/');\n\n        if (Ember.TEMPLATES[templateName]) {\n          return Ember.TEMPLATES[templateName];\n        }\n\n        templateName = decamelize(templateName);\n        if (Ember.TEMPLATES[templateName]) {\n          return Ember.TEMPLATES[templateName];\n        }\n      },\n\n      /**\n        Lookup the view using `resolveOther`\n\n        @protected\n        @param {Object} parsedName a parseName object with the parsed\n          fullName lookup string\n        @method resolveView\n      */\n      resolveView: function(parsedName) {\n        this.useRouterNaming(parsedName);\n        return this.resolveOther(parsedName);\n      },\n\n      /**\n        Lookup the controller using `resolveOther`\n\n        @protected\n        @param {Object} parsedName a parseName object with the parsed\n          fullName lookup string\n        @method resolveController\n      */\n      resolveController: function(parsedName) {\n        this.useRouterNaming(parsedName);\n        return this.resolveOther(parsedName);\n      },\n      /**\n        Lookup the route using `resolveOther`\n\n        @protected\n        @param {Object} parsedName a parseName object with the parsed\n          fullName lookup string\n        @method resolveRoute\n      */\n      resolveRoute: function(parsedName) {\n        this.useRouterNaming(parsedName);\n        return this.resolveOther(parsedName);\n      },\n\n      /**\n        Lookup the model on the Application namespace\n\n        @protected\n        @param {Object} parsedName a parseName object with the parsed\n          fullName lookup string\n        @method resolveModel\n      */\n      resolveModel: function(parsedName) {\n        var className = classify(parsedName.name);\n        var factory = get(parsedName.root, className);\n\n         if (factory) { return factory; }\n      },\n      /**\n        Look up the specified object (from parsedName) on the appropriate\n        namespace (usually on the Application)\n\n        @protected\n        @param {Object} parsedName a parseName object with the parsed\n          fullName lookup string\n        @method resolveHelper\n      */\n      resolveHelper: function(parsedName) {\n        return this.resolveOther(parsedName) || EmberHandlebars.helpers[parsedName.fullNameWithoutType];\n      },\n      /**\n        Look up the specified object (from parsedName) on the appropriate\n        namespace (usually on the Application)\n\n        @protected\n        @param {Object} parsedName a parseName object with the parsed\n          fullName lookup string\n        @method resolveOther\n      */\n      resolveOther: function(parsedName) {\n        var className = classify(parsedName.name) + classify(parsedName.type);\n        var factory = get(parsedName.root, className);\n        if (factory) { return factory; }\n      },\n\n      /**\n       @method _logLookup\n       @param {Boolean} found\n       @param {Object} parsedName\n       @private\n      */\n      _logLookup: function(found, parsedName) {\n        var symbol, padding;\n\n        if (found) { symbol = '[✓]'; }\n        else       { symbol = '[ ]'; }\n\n        if (parsedName.fullName.length > 60) {\n          padding = '.';\n        } else {\n          padding = new Array(60 - parsedName.fullName.length).join('.');\n        }\n\n        Logger.info(symbol, parsedName.fullName, padding, this.lookupDescription(parsedName.fullName));\n      }\n    });\n  });\nenifed(\"ember-debug\",\n  [\"ember-metal/core\",\"ember-metal/error\",\"ember-metal/logger\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    /*global __fail__*/\n\n    var Ember = __dependency1__[\"default\"];\n    var EmberError = __dependency2__[\"default\"];\n    var Logger = __dependency3__[\"default\"];\n\n    /**\n    Ember Debug\n\n    @module ember\n    @submodule ember-debug\n    */\n\n    /**\n    @class Ember\n    */\n\n    /**\n      Define an assertion that will throw an exception if the condition is not\n      met. Ember build tools will remove any calls to `Ember.assert()` when\n      doing a production build. Example:\n\n      ```javascript\n      // Test for truthiness\n      Ember.assert('Must pass a valid object', obj);\n\n      // Fail unconditionally\n      Ember.assert('This code path should never be run');\n      ```\n\n      @method assert\n      @param {String} desc A description of the assertion. This will become\n        the text of the Error thrown if the assertion fails.\n      @param {Boolean} test Must be truthy for the assertion to pass. If\n        falsy, an exception will be thrown.\n    */\n    Ember.assert = function(desc, test) {\n      if (!test) {\n        throw new EmberError(\"Assertion Failed: \" + desc);\n      }\n    };\n\n\n    /**\n      Display a warning with the provided message. Ember build tools will\n      remove any calls to `Ember.warn()` when doing a production build.\n\n      @method warn\n      @param {String} message A warning to display.\n      @param {Boolean} test An optional boolean. If falsy, the warning\n        will be displayed.\n    */\n    Ember.warn = function(message, test) {\n      if (!test) {\n        Logger.warn(\"WARNING: \"+message);\n        if ('trace' in Logger) Logger.trace();\n      }\n    };\n\n    /**\n      Display a debug notice. Ember build tools will remove any calls to\n      `Ember.debug()` when doing a production build.\n\n      ```javascript\n      Ember.debug('I\\'m a debug notice!');\n      ```\n\n      @method debug\n      @param {String} message A debug message to display.\n    */\n    Ember.debug = function(message) {\n      Logger.debug(\"DEBUG: \"+message);\n    };\n\n    /**\n      Display a deprecation warning with the provided message and a stack trace\n      (Chrome and Firefox only). Ember build tools will remove any calls to\n      `Ember.deprecate()` when doing a production build.\n\n      @method deprecate\n      @param {String} message A description of the deprecation.\n      @param {Boolean} test An optional boolean. If falsy, the deprecation\n        will be displayed.\n    */\n    Ember.deprecate = function(message, test) {\n      if (test) { return; }\n\n      if (Ember.ENV.RAISE_ON_DEPRECATION) { throw new EmberError(message); }\n\n      var error;\n\n      // When using new Error, we can't do the arguments check for Chrome. Alternatives are welcome\n      try { __fail__.fail(); } catch (e) { error = e; }\n\n      if (Ember.LOG_STACKTRACE_ON_DEPRECATION && error.stack) {\n        var stack;\n        var stackStr = '';\n\n        if (error['arguments']) {\n          // Chrome\n          stack = error.stack.replace(/^\\s+at\\s+/gm, '').\n                              replace(/^([^\\(]+?)([\\n$])/gm, '{anonymous}($1)$2').\n                              replace(/^Object.<anonymous>\\s*\\(([^\\)]+)\\)/gm, '{anonymous}($1)').split('\\n');\n          stack.shift();\n        } else {\n          // Firefox\n          stack = error.stack.replace(/(?:\\n@:0)?\\s+$/m, '').\n                              replace(/^\\(/gm, '{anonymous}(').split('\\n');\n        }\n\n        stackStr = \"\\n    \" + stack.slice(2).join(\"\\n    \");\n        message = message + stackStr;\n      }\n\n      Logger.warn(\"DEPRECATION: \"+message);\n    };\n\n\n\n    /**\n      Alias an old, deprecated method with its new counterpart.\n\n      Display a deprecation warning with the provided message and a stack trace\n      (Chrome and Firefox only) when the assigned method is called.\n\n      Ember build tools will not remove calls to `Ember.deprecateFunc()`, though\n      no warnings will be shown in production.\n\n      ```javascript\n      Ember.oldMethod = Ember.deprecateFunc('Please use the new, updated method', Ember.newMethod);\n      ```\n\n      @method deprecateFunc\n      @param {String} message A description of the deprecation.\n      @param {Function} func The new function called to replace its deprecated counterpart.\n      @return {Function} a new function that wrapped the original function with a deprecation warning\n    */\n    Ember.deprecateFunc = function(message, func) {\n      return function() {\n        Ember.deprecate(message);\n        return func.apply(this, arguments);\n      };\n    };\n\n\n    /**\n      Run a function meant for debugging. Ember build tools will remove any calls to\n      `Ember.runInDebug()` when doing a production build.\n\n      ```javascript\n      Ember.runInDebug(function() {\n        Ember.Handlebars.EachView.reopen({\n          didInsertElement: function() {\n            console.log('I\\'m happy');\n          }\n        });\n      });\n      ```\n\n      @method runInDebug\n      @param {Function} func The function to be executed.\n      @since 1.5.0\n    */\n    Ember.runInDebug = function(func) {\n      func();\n    };\n\n    // Inform the developer about the Ember Inspector if not installed.\n    if (!Ember.testing) {\n      var isFirefox = typeof InstallTrigger !== 'undefined';\n      var isChrome = !!window.chrome && !window.opera;\n\n      if (typeof window !== 'undefined' && (isFirefox || isChrome) && window.addEventListener) {\n        window.addEventListener(\"load\", function() {\n          if (document.documentElement && document.documentElement.dataset && !document.documentElement.dataset.emberExtension) {\n            var downloadURL;\n\n            if(isChrome) {\n              downloadURL = 'https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi';\n            } else if(isFirefox) {\n              downloadURL = 'https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/';\n            }\n\n            Ember.debug('For more advanced debugging, install the Ember Inspector from ' + downloadURL);\n          }\n        }, false);\n      }\n    }\n  });\nenifed(\"ember-extension-support\",\n  [\"ember-metal/core\",\"ember-extension-support/data_adapter\",\"ember-extension-support/container_debug_adapter\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    /**\n    Ember Extension Support\n\n    @module ember\n    @submodule ember-extension-support\n    @requires ember-application\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    var DataAdapter = __dependency2__[\"default\"];\n    var ContainerDebugAdapter = __dependency3__[\"default\"];\n\n    Ember.DataAdapter = DataAdapter;\n    Ember.ContainerDebugAdapter = ContainerDebugAdapter;\n  });\nenifed(\"ember-extension-support/container_debug_adapter\",\n  [\"ember-metal/core\",\"ember-runtime/system/native_array\",\"ember-metal/utils\",\"ember-runtime/system/string\",\"ember-runtime/system/namespace\",\"ember-runtime/system/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var emberA = __dependency2__.A;\n    var typeOf = __dependency3__.typeOf;\n    var dasherize = __dependency4__.dasherize;\n    var classify = __dependency4__.classify;\n    var Namespace = __dependency5__[\"default\"];\n    var EmberObject = __dependency6__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-extension-support\n    */\n\n    /**\n      The `ContainerDebugAdapter` helps the container and resolver interface\n      with tools that debug Ember such as the\n      [Ember Extension](https://github.com/tildeio/ember-extension)\n      for Chrome and Firefox.\n\n      This class can be extended by a custom resolver implementer\n      to override some of the methods with library-specific code.\n\n      The methods likely to be overridden are:\n\n      * `canCatalogEntriesByType`\n      * `catalogEntriesByType`\n\n      The adapter will need to be registered\n      in the application's container as `container-debug-adapter:main`\n\n      Example:\n\n      ```javascript\n      Application.initializer({\n        name: \"containerDebugAdapter\",\n\n        initialize: function(container, application) {\n          application.register('container-debug-adapter:main', require('app/container-debug-adapter'));\n        }\n      });\n      ```\n\n      @class ContainerDebugAdapter\n      @namespace Ember\n      @extends EmberObject\n      @since 1.5.0\n    */\n    __exports__[\"default\"] = EmberObject.extend({\n      /**\n        The container of the application being debugged.\n        This property will be injected\n        on creation.\n\n        @property container\n        @default null\n      */\n      container: null,\n\n      /**\n        The resolver instance of the application\n        being debugged. This property will be injected\n        on creation.\n\n        @property resolver\n        @default null\n      */\n      resolver: null,\n\n      /**\n        Returns true if it is possible to catalog a list of available\n        classes in the resolver for a given type.\n\n        @method canCatalogEntriesByType\n        @param {String} type The type. e.g. \"model\", \"controller\", \"route\"\n        @return {boolean} whether a list is available for this type.\n      */\n      canCatalogEntriesByType: function(type) {\n        if (type === 'model' || type === 'template') return false;\n        return true;\n      },\n\n      /**\n        Returns the available classes a given type.\n\n        @method catalogEntriesByType\n        @param {String} type The type. e.g. \"model\", \"controller\", \"route\"\n        @return {Array} An array of strings.\n      */\n      catalogEntriesByType: function(type) {\n        var namespaces = emberA(Namespace.NAMESPACES), types = emberA(), self = this;\n        var typeSuffixRegex = new RegExp(classify(type) + \"$\");\n\n        namespaces.forEach(function(namespace) {\n          if (namespace !== Ember) {\n            for (var key in namespace) {\n              if (!namespace.hasOwnProperty(key)) { continue; }\n              if (typeSuffixRegex.test(key)) {\n                var klass = namespace[key];\n                if (typeOf(klass) === 'class') {\n                  types.push(dasherize(key.replace(typeSuffixRegex, '')));\n                }\n              }\n            }\n          }\n        });\n        return types;\n      }\n    });\n  });\nenifed(\"ember-extension-support/data_adapter\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/run_loop\",\"ember-runtime/system/string\",\"ember-runtime/system/namespace\",\"ember-runtime/system/object\",\"ember-runtime/system/native_array\",\"ember-application/system/application\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var get = __dependency2__.get;\n    var run = __dependency3__[\"default\"];\n    var dasherize = __dependency4__.dasherize;\n    var Namespace = __dependency5__[\"default\"];\n    var EmberObject = __dependency6__[\"default\"];\n    var emberA = __dependency7__.A;\n    var Application = __dependency8__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-extension-support\n    */\n\n    /**\n      The `DataAdapter` helps a data persistence library\n      interface with tools that debug Ember such\n      as the [Ember Extension](https://github.com/tildeio/ember-extension)\n      for Chrome and Firefox.\n\n      This class will be extended by a persistence library\n      which will override some of the methods with\n      library-specific code.\n\n      The methods likely to be overridden are:\n\n      * `getFilters`\n      * `detect`\n      * `columnsForType`\n      * `getRecords`\n      * `getRecordColumnValues`\n      * `getRecordKeywords`\n      * `getRecordFilterValues`\n      * `getRecordColor`\n      * `observeRecord`\n\n      The adapter will need to be registered\n      in the application's container as `dataAdapter:main`\n\n      Example:\n\n      ```javascript\n      Application.initializer({\n        name: \"data-adapter\",\n\n        initialize: function(container, application) {\n          application.register('data-adapter:main', DS.DataAdapter);\n        }\n      });\n      ```\n\n      @class DataAdapter\n      @namespace Ember\n      @extends EmberObject\n    */\n    __exports__[\"default\"] = EmberObject.extend({\n      init: function() {\n        this._super();\n        this.releaseMethods = emberA();\n      },\n\n      /**\n        The container of the application being debugged.\n        This property will be injected\n        on creation.\n\n        @property container\n        @default null\n        @since 1.3.0\n      */\n      container: null,\n\n\n      /**\n        The container-debug-adapter which is used\n        to list all models.\n\n        @property containerDebugAdapter\n        @default undefined\n        @since 1.5.0\n      **/\n      containerDebugAdapter: undefined,\n\n      /**\n        Number of attributes to send\n        as columns. (Enough to make the record\n        identifiable).\n\n        @private\n        @property attributeLimit\n        @default 3\n        @since 1.3.0\n      */\n      attributeLimit: 3,\n\n      /**\n        Stores all methods that clear observers.\n        These methods will be called on destruction.\n\n        @private\n        @property releaseMethods\n        @since 1.3.0\n      */\n      releaseMethods: emberA(),\n\n      /**\n        Specifies how records can be filtered.\n        Records returned will need to have a `filterValues`\n        property with a key for every name in the returned array.\n\n        @public\n        @method getFilters\n        @return {Array} List of objects defining filters.\n         The object should have a `name` and `desc` property.\n      */\n      getFilters: function() {\n        return emberA();\n      },\n\n      /**\n        Fetch the model types and observe them for changes.\n\n        @public\n        @method watchModelTypes\n\n        @param {Function} typesAdded Callback to call to add types.\n        Takes an array of objects containing wrapped types (returned from `wrapModelType`).\n\n        @param {Function} typesUpdated Callback to call when a type has changed.\n        Takes an array of objects containing wrapped types.\n\n        @return {Function} Method to call to remove all observers\n      */\n      watchModelTypes: function(typesAdded, typesUpdated) {\n        var modelTypes = this.getModelTypes();\n        var self = this;\n        var releaseMethods = emberA();\n        var typesToSend;\n\n        typesToSend = modelTypes.map(function(type) {\n          var klass = type.klass;\n          var wrapped = self.wrapModelType(klass, type.name);\n          releaseMethods.push(self.observeModelType(klass, typesUpdated));\n          return wrapped;\n        });\n\n        typesAdded(typesToSend);\n\n        var release = function() {\n          releaseMethods.forEach(function(fn) { fn(); });\n          self.releaseMethods.removeObject(release);\n        };\n        this.releaseMethods.pushObject(release);\n        return release;\n      },\n\n      _nameToClass: function(type) {\n        if (typeof type === 'string') {\n          type = this.container.lookupFactory('model:' + type);\n        }\n        return type;\n      },\n\n      /**\n        Fetch the records of a given type and observe them for changes.\n\n        @public\n        @method watchRecords\n\n        @param {Function} recordsAdded Callback to call to add records.\n        Takes an array of objects containing wrapped records.\n        The object should have the following properties:\n          columnValues: {Object} key and value of a table cell\n          object: {Object} the actual record object\n\n        @param {Function} recordsUpdated Callback to call when a record has changed.\n        Takes an array of objects containing wrapped records.\n\n        @param {Function} recordsRemoved Callback to call when a record has removed.\n        Takes the following parameters:\n          index: the array index where the records were removed\n          count: the number of records removed\n\n        @return {Function} Method to call to remove all observers\n      */\n      watchRecords: function(type, recordsAdded, recordsUpdated, recordsRemoved) {\n        var self = this, releaseMethods = emberA(), records = this.getRecords(type), release;\n\n        var recordUpdated = function(updatedRecord) {\n          recordsUpdated([updatedRecord]);\n        };\n\n        var recordsToSend = records.map(function(record) {\n          releaseMethods.push(self.observeRecord(record, recordUpdated));\n          return self.wrapRecord(record);\n        });\n\n\n        var contentDidChange = function(array, idx, removedCount, addedCount) {\n          for (var i = idx; i < idx + addedCount; i++) {\n            var record = array.objectAt(i);\n            var wrapped = self.wrapRecord(record);\n            releaseMethods.push(self.observeRecord(record, recordUpdated));\n            recordsAdded([wrapped]);\n          }\n\n          if (removedCount) {\n            recordsRemoved(idx, removedCount);\n          }\n        };\n\n        var observer = { didChange: contentDidChange, willChange: Ember.K };\n        records.addArrayObserver(self, observer);\n\n        release = function() {\n          releaseMethods.forEach(function(fn) { fn(); });\n          records.removeArrayObserver(self, observer);\n          self.releaseMethods.removeObject(release);\n        };\n\n        recordsAdded(recordsToSend);\n\n        this.releaseMethods.pushObject(release);\n        return release;\n      },\n\n      /**\n        Clear all observers before destruction\n        @private\n        @method willDestroy\n      */\n      willDestroy: function() {\n        this._super();\n        this.releaseMethods.forEach(function(fn) {\n          fn();\n        });\n      },\n\n      /**\n        Detect whether a class is a model.\n\n        Test that against the model class\n        of your persistence library\n\n        @private\n        @method detect\n        @param {Class} klass The class to test\n        @return boolean Whether the class is a model class or not\n      */\n      detect: function(klass) {\n        return false;\n      },\n\n      /**\n        Get the columns for a given model type.\n\n        @private\n        @method columnsForType\n        @param {Class} type The model type\n        @return {Array} An array of columns of the following format:\n         name: {String} name of the column\n         desc: {String} Humanized description (what would show in a table column name)\n      */\n      columnsForType: function(type) {\n        return emberA();\n      },\n\n      /**\n        Adds observers to a model type class.\n\n        @private\n        @method observeModelType\n        @param {Class} type The model type class\n        @param {Function} typesUpdated Called when a type is modified.\n        @return {Function} The function to call to remove observers\n      */\n\n      observeModelType: function(type, typesUpdated) {\n        var self = this;\n        var records = this.getRecords(type);\n\n        var onChange = function() {\n          typesUpdated([self.wrapModelType(type)]);\n        };\n        var observer = {\n          didChange: function() {\n            run.scheduleOnce('actions', this, onChange);\n          },\n          willChange: Ember.K\n        };\n\n        records.addArrayObserver(this, observer);\n\n        var release = function() {\n          records.removeArrayObserver(self, observer);\n        };\n\n        return release;\n      },\n\n\n      /**\n        Wraps a given model type and observes changes to it.\n\n        @private\n        @method wrapModelType\n        @param {Class} type A model class\n        @param {String}  Optional name of the class\n        @return {Object} contains the wrapped type and the function to remove observers\n        Format:\n          type: {Object} the wrapped type\n            The wrapped type has the following format:\n              name: {String} name of the type\n              count: {Integer} number of records available\n              columns: {Columns} array of columns to describe the record\n              object: {Class} the actual Model type class\n          release: {Function} The function to remove observers\n      */\n      wrapModelType: function(type, name) {\n        var records = this.getRecords(type);\n        var self = this;\n        var release, typeToSend;\n\n        typeToSend = {\n          name: name || type.toString(),\n          count: get(records, 'length'),\n          columns: this.columnsForType(type),\n          object: type\n        };\n\n\n        return typeToSend;\n      },\n\n\n      /**\n        Fetches all models defined in the application.\n\n        @private\n        @method getModelTypes\n        @return {Array} Array of model types\n      */\n      getModelTypes: function() {\n        var self = this;\n        var containerDebugAdapter = this.get('containerDebugAdapter');\n        var types;\n\n        if (containerDebugAdapter.canCatalogEntriesByType('model')) {\n          types = containerDebugAdapter.catalogEntriesByType('model');\n        } else {\n          types = this._getObjectsOnNamespaces();\n        }\n\n        // New adapters return strings instead of classes\n        types = emberA(types).map(function(name) {\n          return {\n            klass: self._nameToClass(name),\n            name: name\n          };\n        });\n        types = emberA(types).filter(function(type) {\n          return self.detect(type.klass);\n        });\n\n        return emberA(types);\n      },\n\n      /**\n        Loops over all namespaces and all objects\n        attached to them\n\n        @private\n        @method _getObjectsOnNamespaces\n        @return {Array} Array of model type strings\n      */\n      _getObjectsOnNamespaces: function() {\n        var namespaces = emberA(Namespace.NAMESPACES);\n        var types = emberA();\n        var self = this;\n\n        namespaces.forEach(function(namespace) {\n          for (var key in namespace) {\n            if (!namespace.hasOwnProperty(key)) { continue; }\n            // Even though we will filter again in `getModelTypes`,\n            // we should not call `lookupContainer` on non-models\n            // (especially when `Ember.MODEL_FACTORY_INJECTIONS` is `true`)\n            if (!self.detect(namespace[key])) { continue; }\n            var name = dasherize(key);\n            if (!(namespace instanceof Application) && namespace.toString()) {\n              name = namespace + '/' + name;\n            }\n            types.push(name);\n          }\n        });\n        return types;\n      },\n\n      /**\n        Fetches all loaded records for a given type.\n\n        @private\n        @method getRecords\n        @return {Array} An array of records.\n         This array will be observed for changes,\n         so it should update when new records are added/removed.\n      */\n      getRecords: function(type) {\n        return emberA();\n      },\n\n      /**\n        Wraps a record and observers changes to it.\n\n        @private\n        @method wrapRecord\n        @param {Object} record The record instance.\n        @return {Object} The wrapped record. Format:\n        columnValues: {Array}\n        searchKeywords: {Array}\n      */\n      wrapRecord: function(record) {\n        var recordToSend = { object: record };\n        var columnValues = {};\n        var self = this;\n\n        recordToSend.columnValues = this.getRecordColumnValues(record);\n        recordToSend.searchKeywords = this.getRecordKeywords(record);\n        recordToSend.filterValues = this.getRecordFilterValues(record);\n        recordToSend.color = this.getRecordColor(record);\n\n        return recordToSend;\n      },\n\n      /**\n        Gets the values for each column.\n\n        @private\n        @method getRecordColumnValues\n        @return {Object} Keys should match column names defined\n        by the model type.\n      */\n      getRecordColumnValues: function(record) {\n        return {};\n      },\n\n      /**\n        Returns keywords to match when searching records.\n\n        @private\n        @method getRecordKeywords\n        @return {Array} Relevant keywords for search.\n      */\n      getRecordKeywords: function(record) {\n        return emberA();\n      },\n\n      /**\n        Returns the values of filters defined by `getFilters`.\n\n        @private\n        @method getRecordFilterValues\n        @param {Object} record The record instance\n        @return {Object} The filter values\n      */\n      getRecordFilterValues: function(record) {\n        return {};\n      },\n\n      /**\n        Each record can have a color that represents its state.\n\n        @private\n        @method getRecordColor\n        @param {Object} record The record instance\n        @return {String} The record's color\n          Possible options: black, red, blue, green\n      */\n      getRecordColor: function(record) {\n        return null;\n      },\n\n      /**\n        Observes all relevant properties and re-sends the wrapped record\n        when a change occurs.\n\n        @private\n        @method observerRecord\n        @param {Object} record The record instance\n        @param {Function} recordUpdated The callback to call when a record is updated.\n        @return {Function} The function to call to remove all observers.\n      */\n      observeRecord: function(record, recordUpdated) {\n        return function(){};\n      }\n    });\n  });\nenifed(\"ember-extension-support/initializers\",\n  [],\n  function() {\n    \"use strict\";\n\n  });\nenifed(\"ember-handlebars-compiler\",\n  [\"ember-metal/core\",\"exports\"],\n  function(__dependency1__, __exports__) {\n        /* global Handlebars:true */\n\n    // Remove \"use strict\"; from transpiled module (in browser builds only) until\n    // https://bugs.webkit.org/show_bug.cgi?id=138038 is fixed\n    //\n    // REMOVE_USE_STRICT: true\n\n    /**\n    @module ember\n    @submodule ember-handlebars-compiler\n    */\n\n    var Ember = __dependency1__[\"default\"];\n\n    // ES6Todo: you'll need to import debugger once debugger is es6'd.\n    if (typeof Ember.assert === 'undefined')   { Ember.assert = function(){}; }\n    if (typeof Ember.FEATURES === 'undefined') { Ember.FEATURES = { isEnabled: function(){} }; }\n\n    var objectCreate = Object.create || function(parent) {\n      function F() {}\n      F.prototype = parent;\n      return new F();\n    };\n\n    // set up for circular references later\n    var View, Component;\n\n    // ES6Todo: when ember-debug is es6'ed import this.\n    // var emberAssert = Ember.assert;\n    var Handlebars = (Ember.imports && Ember.imports.Handlebars) || (this && this.Handlebars);\n    if (!Handlebars && typeof eriuqer === 'function') {\n      Handlebars = eriuqer('handlebars');\n    }\n\n    Ember.assert(\"Ember Handlebars requires Handlebars version 1.0 or 1.1. Include \" +\n                 \"a SCRIPT tag in the HTML HEAD linking to the Handlebars file \" +\n                 \"before you link to Ember.\", Handlebars);\n\n    Ember.assert(\"Ember Handlebars requires Handlebars version 1.0 or 1.1, \" +\n                 \"COMPILER_REVISION expected: 4, got: \" +  Handlebars.COMPILER_REVISION +\n                 \" - Please note: Builds of master may have other COMPILER_REVISION values.\",\n                 Handlebars.COMPILER_REVISION === 4);\n\n    /**\n      Prepares the Handlebars templating library for use inside Ember's view\n      system.\n\n      The `Ember.Handlebars` object is the standard Handlebars library, extended to\n      use Ember's `get()` method instead of direct property access, which allows\n      computed properties to be used inside templates.\n\n      To create an `Ember.Handlebars` template, call `Ember.Handlebars.compile()`.\n      This will return a function that can be used by `Ember.View` for rendering.\n\n      @class Handlebars\n      @namespace Ember\n    */\n    var EmberHandlebars = Ember.Handlebars = objectCreate(Handlebars);\n\n    /**\n      Register a bound helper or custom view helper.\n\n      ## Simple bound helper example\n\n      ```javascript\n      Ember.Handlebars.helper('capitalize', function(value) {\n        return value.toUpperCase();\n      });\n      ```\n\n      The above bound helper can be used inside of templates as follows:\n\n      ```handlebars\n      {{capitalize name}}\n      ```\n\n      In this case, when the `name` property of the template's context changes,\n      the rendered value of the helper will update to reflect this change.\n\n      For more examples of bound helpers, see documentation for\n      `Ember.Handlebars.registerBoundHelper`.\n\n      ## Custom view helper example\n\n      Assuming a view subclass named `App.CalendarView` were defined, a helper\n      for rendering instances of this view could be registered as follows:\n\n      ```javascript\n      Ember.Handlebars.helper('calendar', App.CalendarView):\n      ```\n\n      The above bound helper can be used inside of templates as follows:\n\n      ```handlebars\n      {{calendar}}\n      ```\n\n      Which is functionally equivalent to:\n\n      ```handlebars\n      {{view 'calendar'}}\n      ```\n\n      Options in the helper will be passed to the view in exactly the same\n      manner as with the `view` helper.\n\n      @method helper\n      @for Ember.Handlebars\n      @param {String} name\n      @param {Function|Ember.View} function or view class constructor\n      @param {String} dependentKeys*\n    */\n    EmberHandlebars.helper = function(name, value) {\n      if (!View) { View = requireModule('ember-views/views/view')['default']; } // ES6TODO: stupid circular dep\n      if (!Component) { Component = requireModule('ember-views/views/component')['default']; } // ES6TODO: stupid circular dep\n\n      Ember.assert(\"You tried to register a component named '\" + name + \"', but component names must include a '-'\", !Component.detect(value) || name.match(/-/));\n\n      if (View.detect(value)) {\n        EmberHandlebars.registerHelper(name, EmberHandlebars.makeViewHelper(value));\n      } else {\n        EmberHandlebars.registerBoundHelper.apply(null, arguments);\n      }\n    };\n\n    /**\n      Returns a helper function that renders the provided ViewClass.\n\n      Used internally by Ember.Handlebars.helper and other methods\n      involving helper/component registration.\n\n      @private\n      @method makeViewHelper\n      @for Ember.Handlebars\n      @param {Function} ViewClass view class constructor\n      @since 1.2.0\n    */\n    EmberHandlebars.makeViewHelper = function(ViewClass) {\n      return function(options) {\n        Ember.assert(\"You can only pass attributes (such as name=value) not bare values to a helper for a View found in '\" + ViewClass.toString() + \"'\", arguments.length < 2);\n        return EmberHandlebars.helpers.view.call(this, ViewClass, options);\n      };\n    };\n\n    /**\n    @class helpers\n    @namespace Ember.Handlebars\n    */\n    EmberHandlebars.helpers = objectCreate(Handlebars.helpers);\n\n    /**\n      Override the the opcode compiler and JavaScript compiler for Handlebars.\n\n      @class Compiler\n      @namespace Ember.Handlebars\n      @private\n      @constructor\n    */\n    EmberHandlebars.Compiler = function() {};\n\n    // Handlebars.Compiler doesn't exist in runtime-only\n    if (Handlebars.Compiler) {\n      EmberHandlebars.Compiler.prototype = objectCreate(Handlebars.Compiler.prototype);\n    }\n\n    EmberHandlebars.Compiler.prototype.compiler = EmberHandlebars.Compiler;\n\n    /**\n      @class JavaScriptCompiler\n      @namespace Ember.Handlebars\n      @private\n      @constructor\n    */\n    EmberHandlebars.JavaScriptCompiler = function() {};\n\n    // Handlebars.JavaScriptCompiler doesn't exist in runtime-only\n    if (Handlebars.JavaScriptCompiler) {\n      EmberHandlebars.JavaScriptCompiler.prototype = objectCreate(Handlebars.JavaScriptCompiler.prototype);\n      EmberHandlebars.JavaScriptCompiler.prototype.compiler = EmberHandlebars.JavaScriptCompiler;\n    }\n\n\n    EmberHandlebars.JavaScriptCompiler.prototype.namespace = \"Ember.Handlebars\";\n\n    EmberHandlebars.JavaScriptCompiler.prototype.initializeBuffer = function() {\n      return \"''\";\n    };\n\n    /**\n      Override the default buffer for Ember Handlebars. By default, Handlebars\n      creates an empty String at the beginning of each invocation and appends to\n      it. Ember's Handlebars overrides this to append to a single shared buffer.\n\n      @private\n      @method appendToBuffer\n      @param string {String}\n    */\n    EmberHandlebars.JavaScriptCompiler.prototype.appendToBuffer = function(string) {\n      return \"data.buffer.push(\"+string+\");\";\n    };\n\n    // Hacks ahead:\n    // Handlebars presently has a bug where the `blockHelperMissing` hook\n    // doesn't get passed the name of the missing helper name, but rather\n    // gets passed the value of that missing helper evaluated on the current\n    // context, which is most likely `undefined` and totally useless.\n    //\n    // So we alter the compiled template function to pass the name of the helper\n    // instead, as expected.\n    //\n    // This can go away once the following is closed:\n    // https://github.com/wycats/handlebars.js/issues/634\n\n    var DOT_LOOKUP_REGEX = /helpers\\.(.*?)\\)/;\n    var BRACKET_STRING_LOOKUP_REGEX = /helpers\\['(.*?)'/;\n    var INVOCATION_SPLITTING_REGEX = /(.*blockHelperMissing\\.call\\(.*)(stack[0-9]+)(,.*)/;\n\n    EmberHandlebars.JavaScriptCompiler.stringifyLastBlockHelperMissingInvocation = function(source) {\n      var helperInvocation = source[source.length - 1];\n      var helperName = (DOT_LOOKUP_REGEX.exec(helperInvocation) || BRACKET_STRING_LOOKUP_REGEX.exec(helperInvocation))[1];\n      var matches = INVOCATION_SPLITTING_REGEX.exec(helperInvocation);\n\n      source[source.length - 1] = matches[1] + \"'\" + helperName + \"'\" + matches[3];\n    };\n\n    var stringifyBlockHelperMissing = EmberHandlebars.JavaScriptCompiler.stringifyLastBlockHelperMissingInvocation;\n\n    var originalBlockValue = EmberHandlebars.JavaScriptCompiler.prototype.blockValue;\n    EmberHandlebars.JavaScriptCompiler.prototype.blockValue = function() {\n      originalBlockValue.apply(this, arguments);\n      stringifyBlockHelperMissing(this.source);\n    };\n\n    var originalAmbiguousBlockValue = EmberHandlebars.JavaScriptCompiler.prototype.ambiguousBlockValue;\n    EmberHandlebars.JavaScriptCompiler.prototype.ambiguousBlockValue = function() {\n      originalAmbiguousBlockValue.apply(this, arguments);\n      stringifyBlockHelperMissing(this.source);\n    };\n\n    /**\n      Rewrite simple mustaches from `{{foo}}` to `{{bind \"foo\"}}`. This means that\n      all simple mustaches in Ember's Handlebars will also set up an observer to\n      keep the DOM up to date when the underlying property changes.\n\n      @private\n      @method mustache\n      @for Ember.Handlebars.Compiler\n      @param mustache\n    */\n    EmberHandlebars.Compiler.prototype.mustache = function(mustache) {\n      if (!(mustache.params.length || mustache.hash)) {\n        var id = new Handlebars.AST.IdNode([{ part: '_triageMustache' }]);\n\n        // Update the mustache node to include a hash value indicating whether the original node\n        // was escaped. This will allow us to properly escape values when the underlying value\n        // changes and we need to re-render the value.\n        if (!mustache.escaped) {\n          mustache.hash = mustache.hash || new Handlebars.AST.HashNode([]);\n          mustache.hash.pairs.push([\"unescaped\", new Handlebars.AST.StringNode(\"true\")]);\n        }\n        mustache = new Handlebars.AST.MustacheNode([id].concat([mustache.id]), mustache.hash, !mustache.escaped);\n      }\n\n      return Handlebars.Compiler.prototype.mustache.call(this, mustache);\n    };\n\n    /**\n      Used for precompilation of Ember Handlebars templates. This will not be used\n      during normal app execution.\n\n      @method precompile\n      @for Ember.Handlebars\n      @static\n      @param {String|Object} value The template to precompile or an Handlebars AST\n      @param {Boolean} asObject optional parameter, defaulting to true, of whether or not the\n                                compiled template should be returned as an Object or a String\n    */\n    EmberHandlebars.precompile = function(value, asObject) {\n      var ast = Handlebars.parse(value);\n\n      var options = {\n        knownHelpers: {\n          action: true,\n          unbound: true,\n          'bind-attr': true,\n          template: true,\n          view: true,\n          _triageMustache: true\n        },\n        data: true,\n        stringParams: true\n      };\n\n      asObject = asObject === undefined ? true : asObject;\n\n      var environment = new EmberHandlebars.Compiler().compile(ast, options);\n      return new EmberHandlebars.JavaScriptCompiler().compile(environment, options, undefined, asObject);\n    };\n\n    // We don't support this for Handlebars runtime-only\n    if (Handlebars.compile) {\n      /**\n        The entry point for Ember Handlebars. This replaces the default\n        `Handlebars.compile` and turns on template-local data and String\n        parameters.\n\n        @method compile\n        @for Ember.Handlebars\n        @static\n        @param {String} string The template to compile\n        @return {Function}\n      */\n      EmberHandlebars.compile = function(string) {\n        var ast = Handlebars.parse(string);\n        var options = { data: true, stringParams: true };\n        var environment = new EmberHandlebars.Compiler().compile(ast, options);\n        var templateSpec = new EmberHandlebars.JavaScriptCompiler().compile(environment, options, undefined, true);\n\n        var template = EmberHandlebars.template(templateSpec);\n        template.isMethod = false; //Make sure we don't wrap templates with ._super\n\n        return template;\n      };\n    }\n\n    __exports__[\"default\"] = EmberHandlebars;\n  });\nenifed(\"ember-handlebars\",\n  [\"ember-handlebars-compiler\",\"ember-metal/core\",\"ember-runtime/system/lazy_load\",\"ember-handlebars/loader\",\"ember-handlebars/ext\",\"ember-handlebars/string\",\"ember-handlebars/helpers/shared\",\"ember-handlebars/helpers/binding\",\"ember-handlebars/helpers/collection\",\"ember-handlebars/helpers/view\",\"ember-handlebars/helpers/unbound\",\"ember-handlebars/helpers/debug\",\"ember-handlebars/helpers/each\",\"ember-handlebars/helpers/template\",\"ember-handlebars/helpers/partial\",\"ember-handlebars/helpers/yield\",\"ember-handlebars/helpers/loc\",\"ember-handlebars/controls/checkbox\",\"ember-handlebars/controls/select\",\"ember-handlebars/controls/text_area\",\"ember-handlebars/controls/text_field\",\"ember-handlebars/controls/text_support\",\"ember-handlebars/controls\",\"ember-handlebars/component_lookup\",\"ember-handlebars/views/handlebars_bound_view\",\"ember-handlebars/views/metamorph_view\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __dependency16__, __dependency17__, __dependency18__, __dependency19__, __dependency20__, __dependency21__, __dependency22__, __dependency23__, __dependency24__, __dependency25__, __dependency26__, __exports__) {\n    \"use strict\";\n    var EmberHandlebars = __dependency1__[\"default\"];\n    var Ember = __dependency2__[\"default\"];\n    // to add to globals\n\n    var runLoadHooks = __dependency3__.runLoadHooks;\n    var bootstrap = __dependency4__[\"default\"];\n\n    var normalizePath = __dependency5__.normalizePath;\n    var template = __dependency5__.template;\n    var makeBoundHelper = __dependency5__.makeBoundHelper;\n    var registerBoundHelper = __dependency5__.registerBoundHelper;\n    var resolveHash = __dependency5__.resolveHash;\n    var resolveParams = __dependency5__.resolveParams;\n    var getEscaped = __dependency5__.getEscaped;\n    var handlebarsGet = __dependency5__.handlebarsGet;\n    var evaluateUnboundHelper = __dependency5__.evaluateUnboundHelper;\n    var helperMissingHelper = __dependency5__.helperMissingHelper;\n    var blockHelperMissingHelper = __dependency5__.blockHelperMissingHelper;\n\n\n    // side effect of extending StringUtils of htmlSafe\n\n    var resolvePaths = __dependency7__[\"default\"];\n    var bind = __dependency8__.bind;\n    var _triageMustacheHelper = __dependency8__._triageMustacheHelper;\n    var resolveHelper = __dependency8__.resolveHelper;\n    var bindHelper = __dependency8__.bindHelper;\n    var boundIfHelper = __dependency8__.boundIfHelper;\n    var unboundIfHelper = __dependency8__.unboundIfHelper;\n    var withHelper = __dependency8__.withHelper;\n    var ifHelper = __dependency8__.ifHelper;\n    var unlessHelper = __dependency8__.unlessHelper;\n    var bindAttrHelper = __dependency8__.bindAttrHelper;\n    var bindAttrHelperDeprecated = __dependency8__.bindAttrHelperDeprecated;\n    var bindClasses = __dependency8__.bindClasses;\n\n    var collectionHelper = __dependency9__[\"default\"];\n    var ViewHelper = __dependency10__.ViewHelper;\n    var viewHelper = __dependency10__.viewHelper;\n    var unboundHelper = __dependency11__[\"default\"];\n    var logHelper = __dependency12__.logHelper;\n    var debuggerHelper = __dependency12__.debuggerHelper;\n    var EachView = __dependency13__.EachView;\n    var GroupedEach = __dependency13__.GroupedEach;\n    var eachHelper = __dependency13__.eachHelper;\n    var templateHelper = __dependency14__[\"default\"];\n    var partialHelper = __dependency15__[\"default\"];\n    var yieldHelper = __dependency16__[\"default\"];\n    var locHelper = __dependency17__[\"default\"];\n\n\n    var Checkbox = __dependency18__[\"default\"];\n    var Select = __dependency19__.Select;\n    var SelectOption = __dependency19__.SelectOption;\n    var SelectOptgroup = __dependency19__.SelectOptgroup;\n    var TextArea = __dependency20__[\"default\"];\n    var TextField = __dependency21__[\"default\"];\n    var TextSupport = __dependency22__[\"default\"];\n    var inputHelper = __dependency23__.inputHelper;\n    var textareaHelper = __dependency23__.textareaHelper;\n\n\n    var ComponentLookup = __dependency24__[\"default\"];\n    var _HandlebarsBoundView = __dependency25__._HandlebarsBoundView;\n    var SimpleHandlebarsView = __dependency25__.SimpleHandlebarsView;\n    var _wrapMap = __dependency26__._wrapMap;\n    var _SimpleMetamorphView = __dependency26__._SimpleMetamorphView;\n    var _MetamorphView = __dependency26__._MetamorphView;\n    var _Metamorph = __dependency26__._Metamorph;\n\n\n    /**\n    Ember Handlebars\n\n    @module ember\n    @submodule ember-handlebars\n    @requires ember-views\n    */\n\n    // Ember.Handlebars.Globals\n    EmberHandlebars.bootstrap = bootstrap;\n    EmberHandlebars.template = template;\n    EmberHandlebars.makeBoundHelper = makeBoundHelper;\n    EmberHandlebars.registerBoundHelper = registerBoundHelper;\n    EmberHandlebars.resolveHash = resolveHash;\n    EmberHandlebars.resolveParams = resolveParams;\n    EmberHandlebars.resolveHelper = resolveHelper;\n    EmberHandlebars.get = handlebarsGet;\n    EmberHandlebars.getEscaped = getEscaped;\n    EmberHandlebars.evaluateUnboundHelper = evaluateUnboundHelper;\n    EmberHandlebars.bind = bind;\n    EmberHandlebars.bindClasses = bindClasses;\n    EmberHandlebars.EachView = EachView;\n    EmberHandlebars.GroupedEach = GroupedEach;\n    EmberHandlebars.resolvePaths = resolvePaths;\n    EmberHandlebars.ViewHelper = ViewHelper;\n    EmberHandlebars.normalizePath = normalizePath;\n\n\n    // Ember Globals\n    Ember.Handlebars = EmberHandlebars;\n    Ember.ComponentLookup = ComponentLookup;\n    Ember._SimpleHandlebarsView = SimpleHandlebarsView;\n    Ember._HandlebarsBoundView = _HandlebarsBoundView;\n    Ember._SimpleMetamorphView = _SimpleMetamorphView;\n    Ember._MetamorphView = _MetamorphView;\n    Ember._Metamorph = _Metamorph;\n    Ember._metamorphWrapMap = _wrapMap;\n    Ember.TextSupport = TextSupport;\n    Ember.Checkbox = Checkbox;\n    Ember.Select = Select;\n    Ember.SelectOption = SelectOption;\n    Ember.SelectOptgroup = SelectOptgroup;\n    Ember.TextArea = TextArea;\n    Ember.TextField = TextField;\n    Ember.TextSupport = TextSupport;\n\n    // register helpers\n    EmberHandlebars.registerHelper('helperMissing', helperMissingHelper);\n    EmberHandlebars.registerHelper('blockHelperMissing', blockHelperMissingHelper);\n    EmberHandlebars.registerHelper('bind', bindHelper);\n    EmberHandlebars.registerHelper('boundIf', boundIfHelper);\n    EmberHandlebars.registerHelper('_triageMustache', _triageMustacheHelper);\n    EmberHandlebars.registerHelper('unboundIf', unboundIfHelper);\n    EmberHandlebars.registerHelper('with', withHelper);\n    EmberHandlebars.registerHelper('if', ifHelper);\n    EmberHandlebars.registerHelper('unless', unlessHelper);\n    EmberHandlebars.registerHelper('bind-attr', bindAttrHelper);\n    EmberHandlebars.registerHelper('bindAttr', bindAttrHelperDeprecated);\n    EmberHandlebars.registerHelper('collection', collectionHelper);\n    EmberHandlebars.registerHelper(\"log\", logHelper);\n    EmberHandlebars.registerHelper(\"debugger\", debuggerHelper);\n    EmberHandlebars.registerHelper(\"each\", eachHelper);\n    EmberHandlebars.registerHelper(\"loc\", locHelper);\n    EmberHandlebars.registerHelper(\"partial\", partialHelper);\n    EmberHandlebars.registerHelper(\"template\", templateHelper);\n    EmberHandlebars.registerHelper(\"yield\", yieldHelper);\n    EmberHandlebars.registerHelper(\"view\", viewHelper);\n    EmberHandlebars.registerHelper(\"unbound\", unboundHelper);\n    EmberHandlebars.registerHelper(\"input\", inputHelper);\n    EmberHandlebars.registerHelper(\"textarea\", textareaHelper);\n\n    // run load hooks\n    runLoadHooks('Ember.Handlebars', EmberHandlebars);\n\n    __exports__[\"default\"] = EmberHandlebars;\n  });\nenifed(\"ember-handlebars/component_lookup\",\n  [\"ember-runtime/system/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EmberObject = __dependency1__[\"default\"];\n\n    var ComponentLookup = EmberObject.extend({\n      lookupFactory: function(name, container) {\n\n        container = container || this.container;\n\n        var fullName = 'component:' + name;\n        var templateFullName = 'template:components/' + name;\n        var templateRegistered = container && container.has(templateFullName);\n\n        if (templateRegistered) {\n          container.injection(fullName, 'layout', templateFullName);\n        }\n\n        var Component = container.lookupFactory(fullName);\n\n        // Only treat as a component if either the component\n        // or a template has been registered.\n        if (templateRegistered || Component) {\n          if (!Component) {\n            container.register(fullName, Ember.Component);\n            Component = container.lookupFactory(fullName);\n          }\n          return Component;\n        }\n      }\n    });\n\n    __exports__[\"default\"] = ComponentLookup;\n  });\nenifed(\"ember-handlebars/controls\",\n  [\"ember-handlebars/controls/checkbox\",\"ember-handlebars/controls/text_field\",\"ember-handlebars/controls/text_area\",\"ember-metal/core\",\"ember-handlebars-compiler\",\"ember-handlebars/ext\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __exports__) {\n    \"use strict\";\n    var Checkbox = __dependency1__[\"default\"];\n    var TextField = __dependency2__[\"default\"];\n    var TextArea = __dependency3__[\"default\"];\n\n    var Ember = __dependency4__[\"default\"];\n    // Ember.assert\n    // var emberAssert = Ember.assert;\n\n    var EmberHandlebars = __dependency5__[\"default\"];\n    var handlebarsGet = __dependency6__.handlebarsGet;\n    var helpers = EmberHandlebars.helpers;\n    /**\n    @module ember\n    @submodule ember-handlebars-compiler\n    */\n\n    function _resolveOption(context, options, key) {\n      if (options.hashTypes[key] === \"ID\") {\n        return handlebarsGet(context, options.hash[key], options);\n      } else {\n        return options.hash[key];\n      }\n    }\n\n    /**\n\n      The `{{input}}` helper inserts an HTML `<input>` tag into the template,\n      with a `type` value of either `text` or `checkbox`. If no `type` is provided,\n      `text` will be the default value applied. The attributes of `{{input}}`\n      match those of the native HTML tag as closely as possible for these two types.\n\n      ## Use as text field\n      An `{{input}}` with no `type` or a `type` of `text` will render an HTML text input.\n      The following HTML attributes can be set via the helper:\n\n     <table>\n      <tr><td>`readonly`</td><td>`required`</td><td>`autofocus`</td></tr>\n      <tr><td>`value`</td><td>`placeholder`</td><td>`disabled`</td></tr>\n      <tr><td>`size`</td><td>`tabindex`</td><td>`maxlength`</td></tr>\n      <tr><td>`name`</td><td>`min`</td><td>`max`</td></tr>\n      <tr><td>`pattern`</td><td>`accept`</td><td>`autocomplete`</td></tr>\n      <tr><td>`autosave`</td><td>`formaction`</td><td>`formenctype`</td></tr>\n      <tr><td>`formmethod`</td><td>`formnovalidate`</td><td>`formtarget`</td></tr>\n      <tr><td>`height`</td><td>`inputmode`</td><td>`multiple`</td></tr>\n      <tr><td>`step`</td><td>`width`</td><td>`form`</td></tr>\n      <tr><td>`selectionDirection`</td><td>`spellcheck`</td><td>&nbsp;</td></tr>\n     </table>\n\n\n      When set to a quoted string, these values will be directly applied to the HTML\n      element. When left unquoted, these values will be bound to a property on the\n      template's current rendering context (most typically a controller instance).\n\n      ## Unbound:\n\n      ```handlebars\n      {{input value=\"http://www.facebook.com\"}}\n      ```\n\n\n      ```html\n      <input type=\"text\" value=\"http://www.facebook.com\"/>\n      ```\n\n      ## Bound:\n\n      ```javascript\n      App.ApplicationController = Ember.Controller.extend({\n        firstName: \"Stanley\",\n        entryNotAllowed: true\n      });\n      ```\n\n\n      ```handlebars\n      {{input type=\"text\" value=firstName disabled=entryNotAllowed size=\"50\"}}\n      ```\n\n\n      ```html\n      <input type=\"text\" value=\"Stanley\" disabled=\"disabled\" size=\"50\"/>\n      ```\n\n      ## Actions\n\n      The helper can send multiple actions based on user events.\n\n      The action property defines the action which is sent when\n      the user presses the return key.\n\n      ```handlebars\n      {{input action=\"submit\"}}\n      ```\n\n      The helper allows some user events to send actions.\n\n    * `enter`\n    * `insert-newline`\n    * `escape-press`\n    * `focus-in`\n    * `focus-out`\n    * `key-press`\n\n\n      For example, if you desire an action to be sent when the input is blurred,\n      you only need to setup the action name to the event name property.\n\n      ```handlebars\n      {{input focus-in=\"alertMessage\"}}\n      ```\n\n      See more about [Text Support Actions](/api/classes/Ember.TextField.html)\n\n      ## Extension\n\n      Internally, `{{input type=\"text\"}}` creates an instance of `Ember.TextField`, passing\n      arguments from the helper to `Ember.TextField`'s `create` method. You can extend the\n      capabilities of text inputs in your applications by reopening this class. For example,\n      if you are building a Bootstrap project where `data-*` attributes are used, you\n      can add one to the `TextField`'s `attributeBindings` property:\n\n\n      ```javascript\n      Ember.TextField.reopen({\n        attributeBindings: ['data-error']\n      });\n      ```\n\n      Keep in mind when writing `Ember.TextField` subclasses that `Ember.TextField`\n      itself extends `Ember.Component`, meaning that it does NOT inherit\n      the `controller` of the parent view.\n\n      See more about [Ember components](/api/classes/Ember.Component.html)\n\n\n      ## Use as checkbox\n\n      An `{{input}}` with a `type` of `checkbox` will render an HTML checkbox input.\n      The following HTML attributes can be set via the helper:\n\n    * `checked`\n    * `disabled`\n    * `tabindex`\n    * `indeterminate`\n    * `name`\n    * `autofocus`\n    * `form`\n\n\n      When set to a quoted string, these values will be directly applied to the HTML\n      element. When left unquoted, these values will be bound to a property on the\n      template's current rendering context (most typically a controller instance).\n\n      ## Unbound:\n\n      ```handlebars\n      {{input type=\"checkbox\" name=\"isAdmin\"}}\n      ```\n\n      ```html\n      <input type=\"checkbox\" name=\"isAdmin\" />\n      ```\n\n      ## Bound:\n\n      ```javascript\n      App.ApplicationController = Ember.Controller.extend({\n        isAdmin: true\n      });\n      ```\n\n\n      ```handlebars\n      {{input type=\"checkbox\" checked=isAdmin }}\n      ```\n\n\n      ```html\n      <input type=\"checkbox\" checked=\"checked\" />\n      ```\n\n      ## Extension\n\n      Internally, `{{input type=\"checkbox\"}}` creates an instance of `Ember.Checkbox`, passing\n      arguments from the helper to `Ember.Checkbox`'s `create` method. You can extend the\n      capablilties of checkbox inputs in your applications by reopening this class. For example,\n      if you wanted to add a css class to all checkboxes in your application:\n\n\n      ```javascript\n      Ember.Checkbox.reopen({\n        classNames: ['my-app-checkbox']\n      });\n      ```\n\n\n      @method input\n      @for Ember.Handlebars.helpers\n      @param {Hash} options\n    */\n    function inputHelper(options) {\n      Ember.assert('You can only pass attributes to the `input` helper, not arguments', arguments.length < 2);\n\n      var hash = options.hash;\n      var types = options.hashTypes;\n      var inputType = _resolveOption(this, options, 'type');\n      var onEvent = hash.on;\n\n      if (inputType === 'checkbox') {\n        delete hash.type;\n        delete types.type;\n\n        Ember.assert(\"{{input type='checkbox'}} does not support setting `value=someBooleanValue`; you must use `checked=someBooleanValue` instead.\", options.hashTypes.value !== 'ID');\n\n        return helpers.view.call(this, Checkbox, options);\n      } else {\n        delete hash.on;\n\n        hash.onEvent = onEvent || 'enter';\n        return helpers.view.call(this, TextField, options);\n      }\n    }\n\n    __exports__.inputHelper = inputHelper;/**\n      `{{textarea}}` inserts a new instance of `<textarea>` tag into the template.\n      The attributes of `{{textarea}}` match those of the native HTML tags as\n      closely as possible.\n\n      The following HTML attributes can be set:\n\n        * `value`\n        * `name`\n        * `rows`\n        * `cols`\n        * `placeholder`\n        * `disabled`\n        * `maxlength`\n        * `tabindex`\n        * `selectionEnd`\n        * `selectionStart`\n        * `selectionDirection`\n        * `wrap`\n        * `readonly`\n        * `autofocus`\n        * `form`\n        * `spellcheck`\n        * `required`\n\n      When set to a quoted string, these value will be directly applied to the HTML\n      element. When left unquoted, these values will be bound to a property on the\n      template's current rendering context (most typically a controller instance).\n\n      Unbound:\n\n      ```handlebars\n      {{textarea value=\"Lots of static text that ISN'T bound\"}}\n      ```\n\n      Would result in the following HTML:\n\n      ```html\n      <textarea class=\"ember-text-area\">\n        Lots of static text that ISN'T bound\n      </textarea>\n      ```\n\n      Bound:\n\n      In the following example, the `writtenWords` property on `App.ApplicationController`\n      will be updated live as the user types 'Lots of text that IS bound' into\n      the text area of their browser's window.\n\n      ```javascript\n      App.ApplicationController = Ember.Controller.extend({\n        writtenWords: \"Lots of text that IS bound\"\n      });\n      ```\n\n      ```handlebars\n      {{textarea value=writtenWords}}\n      ```\n\n       Would result in the following HTML:\n\n      ```html\n      <textarea class=\"ember-text-area\">\n        Lots of text that IS bound\n      </textarea>\n      ```\n\n      If you wanted a one way binding between the text area and a div tag\n      somewhere else on your screen, you could use `Ember.computed.oneWay`:\n\n      ```javascript\n      App.ApplicationController = Ember.Controller.extend({\n        writtenWords: \"Lots of text that IS bound\",\n        outputWrittenWords: Ember.computed.oneWay(\"writtenWords\")\n      });\n      ```\n\n      ```handlebars\n      {{textarea value=writtenWords}}\n\n      <div>\n        {{outputWrittenWords}}\n      </div>\n      ```\n\n      Would result in the following HTML:\n\n      ```html\n      <textarea class=\"ember-text-area\">\n        Lots of text that IS bound\n      </textarea>\n\n      <-- the following div will be updated in real time as you type -->\n\n      <div>\n        Lots of text that IS bound\n      </div>\n      ```\n\n      Finally, this example really shows the power and ease of Ember when two\n      properties are bound to eachother via `Ember.computed.alias`. Type into\n      either text area box and they'll both stay in sync. Note that\n      `Ember.computed.alias` costs more in terms of performance, so only use it when\n      your really binding in both directions:\n\n      ```javascript\n      App.ApplicationController = Ember.Controller.extend({\n        writtenWords: \"Lots of text that IS bound\",\n        twoWayWrittenWords: Ember.computed.alias(\"writtenWords\")\n      });\n      ```\n\n      ```handlebars\n      {{textarea value=writtenWords}}\n      {{textarea value=twoWayWrittenWords}}\n      ```\n\n      ```html\n      <textarea id=\"ember1\" class=\"ember-text-area\">\n        Lots of text that IS bound\n      </textarea>\n\n      <-- both updated in real time -->\n\n      <textarea id=\"ember2\" class=\"ember-text-area\">\n        Lots of text that IS bound\n      </textarea>\n      ```\n\n      ## Actions\n\n      The helper can send multiple actions based on user events.\n\n      The action property defines the action which is send when\n      the user presses the return key.\n\n      ```handlebars\n      {{input action=\"submit\"}}\n      ```\n\n      The helper allows some user events to send actions.\n\n    * `enter`\n    * `insert-newline`\n    * `escape-press`\n    * `focus-in`\n    * `focus-out`\n    * `key-press`\n\n      For example, if you desire an action to be sent when the input is blurred,\n      you only need to setup the action name to the event name property.\n\n      ```handlebars\n      {{textarea focus-in=\"alertMessage\"}}\n      ```\n\n      See more about [Text Support Actions](/api/classes/Ember.TextArea.html)\n\n      ## Extension\n\n      Internally, `{{textarea}}` creates an instance of `Ember.TextArea`, passing\n      arguments from the helper to `Ember.TextArea`'s `create` method. You can\n      extend the capabilities of text areas in your application by reopening this\n      class. For example, if you are building a Bootstrap project where `data-*`\n      attributes are used, you can globally add support for a `data-*` attribute\n      on all `{{textarea}}`s' in your app by reopening `Ember.TextArea` or\n      `Ember.TextSupport` and adding it to the `attributeBindings` concatenated\n      property:\n\n      ```javascript\n      Ember.TextArea.reopen({\n        attributeBindings: ['data-error']\n      });\n      ```\n\n      Keep in mind when writing `Ember.TextArea` subclasses that `Ember.TextArea`\n      itself extends `Ember.Component`, meaning that it does NOT inherit\n      the `controller` of the parent view.\n\n      See more about [Ember components](/api/classes/Ember.Component.html)\n\n      @method textarea\n      @for Ember.Handlebars.helpers\n      @param {Hash} options\n    */\n    function textareaHelper(options) {\n      Ember.assert('You can only pass attributes to the `textarea` helper, not arguments', arguments.length < 2);\n\n      var hash = options.hash;\n      var types = options.hashTypes;\n\n      return helpers.view.call(this, TextArea, options);\n    }\n\n    __exports__.textareaHelper = textareaHelper;\n  });\nenifed(\"ember-handlebars/controls/checkbox\",\n  [\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-views/views/view\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var get = __dependency1__.get;\n    var set = __dependency2__.set;\n    var View = __dependency3__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    /**\n      The internal class used to create text inputs when the `{{input}}`\n      helper is used with `type` of `checkbox`.\n\n      See [handlebars.helpers.input](/api/classes/Ember.Handlebars.helpers.html#method_input)  for usage details.\n\n      ## Direct manipulation of `checked`\n\n      The `checked` attribute of an `Ember.Checkbox` object should always be set\n      through the Ember object or by interacting with its rendered element\n      representation via the mouse, keyboard, or touch. Updating the value of the\n      checkbox via jQuery will result in the checked value of the object and its\n      element losing synchronization.\n\n      ## Layout and LayoutName properties\n\n      Because HTML `input` elements are self closing `layout` and `layoutName`\n      properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\n      layout section for more information.\n\n      @class Checkbox\n      @namespace Ember\n      @extends Ember.View\n    */\n    __exports__[\"default\"] = View.extend({\n      instrumentDisplay: '{{input type=\"checkbox\"}}',\n\n      classNames: ['ember-checkbox'],\n\n      tagName: 'input',\n\n      attributeBindings: [\n        'type',\n        'checked',\n        'indeterminate',\n        'disabled',\n        'tabindex',\n        'name',\n        'autofocus',\n        'required',\n        'form'\n      ],\n\n      type: 'checkbox',\n      checked: false,\n      disabled: false,\n      indeterminate: false,\n\n      init: function() {\n        this._super();\n        this.on('change', this, this._updateElementValue);\n      },\n\n      didInsertElement: function() {\n        this._super();\n        get(this, 'element').indeterminate = !!get(this, 'indeterminate');\n      },\n\n      _updateElementValue: function() {\n        set(this, 'checked', this.$().prop('checked'));\n      }\n    });\n  });\nenifed(\"ember-handlebars/controls/select\",\n  [\"ember-handlebars-compiler\",\"ember-metal/enumerable_utils\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-views/views/view\",\"ember-views/views/collection_view\",\"ember-metal/utils\",\"ember-metal/is_none\",\"ember-metal/computed\",\"ember-runtime/system/native_array\",\"ember-metal/mixin\",\"ember-metal/properties\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    var EmberHandlebars = __dependency1__[\"default\"];\n\n    var forEach = __dependency2__.forEach;\n    var indexOf = __dependency2__.indexOf;\n    var indexesOf = __dependency2__.indexesOf;\n    var replace = __dependency2__.replace;\n\n    var get = __dependency3__.get;\n    var set = __dependency4__.set;\n    var View = __dependency5__[\"default\"];\n    var CollectionView = __dependency6__[\"default\"];\n    var isArray = __dependency7__.isArray;\n    var isNone = __dependency8__[\"default\"];\n    var computed = __dependency9__.computed;\n    var emberA = __dependency10__.A;\n    var observer = __dependency11__.observer;\n    var defineProperty = __dependency12__.defineProperty;\n\n    var precompileTemplate = EmberHandlebars.compile;\n\n    var SelectOption = View.extend({\n      instrumentDisplay: 'Ember.SelectOption',\n\n      tagName: 'option',\n      attributeBindings: ['value', 'selected'],\n\n      defaultTemplate: function(context, options) {\n        options = { data: options.data, hash: {} };\n        EmberHandlebars.helpers.bind.call(context, \"view.label\", options);\n      },\n\n      init: function() {\n        this.labelPathDidChange();\n        this.valuePathDidChange();\n\n        this._super();\n      },\n\n      selected: computed(function() {\n        var content = get(this, 'content');\n        var selection = get(this, 'parentView.selection');\n        if (get(this, 'parentView.multiple')) {\n          return selection && indexOf(selection, content.valueOf()) > -1;\n        } else {\n          // Primitives get passed through bindings as objects... since\n          // `new Number(4) !== 4`, we use `==` below\n          return content == selection; // jshint ignore:line\n        }\n      }).property('content', 'parentView.selection'),\n\n      labelPathDidChange: observer('parentView.optionLabelPath', function() {\n        var labelPath = get(this, 'parentView.optionLabelPath');\n\n        if (!labelPath) { return; }\n\n        defineProperty(this, 'label', computed(function() {\n          return get(this, labelPath);\n        }).property(labelPath));\n      }),\n\n      valuePathDidChange: observer('parentView.optionValuePath', function() {\n        var valuePath = get(this, 'parentView.optionValuePath');\n\n        if (!valuePath) { return; }\n\n        defineProperty(this, 'value', computed(function() {\n          return get(this, valuePath);\n        }).property(valuePath));\n      })\n    });\n\n    var SelectOptgroup = CollectionView.extend({\n      instrumentDisplay: 'Ember.SelectOptgroup',\n\n      tagName: 'optgroup',\n      attributeBindings: ['label'],\n\n      selectionBinding: 'parentView.selection',\n      multipleBinding: 'parentView.multiple',\n      optionLabelPathBinding: 'parentView.optionLabelPath',\n      optionValuePathBinding: 'parentView.optionValuePath',\n\n      itemViewClassBinding: 'parentView.optionView'\n    });\n\n    /**\n      The `Ember.Select` view class renders a\n      [select](https://developer.mozilla.org/en/HTML/Element/select) HTML element,\n      allowing the user to choose from a list of options.\n\n      The text and `value` property of each `<option>` element within the\n      `<select>` element are populated from the objects in the `Element.Select`'s\n      `content` property. The underlying data object of the selected `<option>` is\n      stored in the `Element.Select`'s `value` property.\n\n      ## The Content Property (array of strings)\n\n      The simplest version of an `Ember.Select` takes an array of strings as its\n      `content` property. The string will be used as both the `value` property and\n      the inner text of each `<option>` element inside the rendered `<select>`.\n\n      Example:\n\n      ```javascript\n      App.ApplicationController = Ember.ObjectController.extend({\n        names: [\"Yehuda\", \"Tom\"]\n      });\n      ```\n\n      ```handlebars\n      {{view \"select\" content=names}}\n      ```\n\n      Would result in the following HTML:\n\n      ```html\n      <select class=\"ember-select\">\n        <option value=\"Yehuda\">Yehuda</option>\n        <option value=\"Tom\">Tom</option>\n      </select>\n      ```\n\n      You can control which `<option>` is selected through the `Ember.Select`'s\n      `value` property:\n\n      ```javascript\n      App.ApplicationController = Ember.ObjectController.extend({\n        selectedName: 'Tom',\n        names: [\"Yehuda\", \"Tom\"]\n      });\n      ```\n\n      ```handlebars\n      {{view \"select\" content=names value=selectedName}}\n      ```\n\n      Would result in the following HTML with the `<option>` for 'Tom' selected:\n\n      ```html\n      <select class=\"ember-select\">\n        <option value=\"Yehuda\">Yehuda</option>\n        <option value=\"Tom\" selected=\"selected\">Tom</option>\n      </select>\n      ```\n\n      A user interacting with the rendered `<select>` to choose \"Yehuda\" would\n      update the value of `selectedName` to \"Yehuda\".\n\n      ## The Content Property (array of Objects)\n\n      An `Ember.Select` can also take an array of JavaScript or Ember objects as\n      its `content` property.\n\n      When using objects you need to tell the `Ember.Select` which property should\n      be accessed on each object to supply the `value` attribute of the `<option>`\n      and which property should be used to supply the element text.\n\n      The `optionValuePath` option is used to specify the path on each object to\n      the desired property for the `value` attribute. The `optionLabelPath`\n      specifies the path on each object to the desired property for the\n      element's text. Both paths must reference each object itself as `content`:\n\n      ```javascript\n      App.ApplicationController = Ember.ObjectController.extend({\n        programmers: [\n          {firstName: \"Yehuda\", id: 1},\n          {firstName: \"Tom\",    id: 2}\n        ]\n      });\n      ```\n\n      ```handlebars\n      {{view \"select\"\n             content=programmers\n             optionValuePath=\"content.id\"\n             optionLabelPath=\"content.firstName\"}}\n      ```\n\n      Would result in the following HTML:\n\n      ```html\n      <select class=\"ember-select\">\n        <option value=\"1\">Yehuda</option>\n        <option value=\"2\">Tom</option>\n      </select>\n      ```\n\n      The `value` attribute of the selected `<option>` within an `Ember.Select`\n      can be bound to a property on another object:\n\n      ```javascript\n      App.ApplicationController = Ember.ObjectController.extend({\n        programmers: [\n          {firstName: \"Yehuda\", id: 1},\n          {firstName: \"Tom\",    id: 2}\n        ],\n        currentProgrammer: {\n          id: 2\n        }\n      });\n      ```\n\n      ```handlebars\n      {{view \"select\"\n             content=programmers\n             optionValuePath=\"content.id\"\n             optionLabelPath=\"content.firstName\"\n             value=currentProgrammer.id}}\n      ```\n\n      Would result in the following HTML with a selected option:\n\n      ```html\n      <select class=\"ember-select\">\n        <option value=\"1\">Yehuda</option>\n        <option value=\"2\" selected=\"selected\">Tom</option>\n      </select>\n      ```\n\n      Interacting with the rendered element by selecting the first option\n      ('Yehuda') will update the `id` of `currentProgrammer`\n      to match the `value` property of the newly selected `<option>`.\n\n      Alternatively, you can control selection through the underlying objects\n      used to render each object by binding the `selection` option. When the selected\n      `<option>` is changed, the property path provided to `selection`\n      will be updated to match the content object of the rendered `<option>`\n      element:\n\n      ```javascript\n\n      var yehuda = {firstName: \"Yehuda\", id: 1, bff4eva: 'tom'}\n      var tom = {firstName: \"Tom\", id: 2, bff4eva: 'yehuda'};\n\n      App.ApplicationController = Ember.ObjectController.extend({\n        selectedPerson: tom,\n        programmers: [ yehuda, tom ]\n      });\n      ```\n\n      ```handlebars\n      {{view \"select\"\n             content=programmers\n             optionValuePath=\"content.id\"\n             optionLabelPath=\"content.firstName\"\n             selection=selectedPerson}}\n      ```\n\n      Would result in the following HTML with a selected option:\n\n      ```html\n      <select class=\"ember-select\">\n        <option value=\"1\">Yehuda</option>\n        <option value=\"2\" selected=\"selected\">Tom</option>\n      </select>\n      ```\n\n      Interacting with the rendered element by selecting the first option\n      ('Yehuda') will update the `selectedPerson` to match the object of\n      the newly selected `<option>`. In this case it is the first object\n      in the `programmers`\n\n      ## Supplying a Prompt\n\n      A `null` value for the `Ember.Select`'s `value` or `selection` property\n      results in there being no `<option>` with a `selected` attribute:\n\n      ```javascript\n      App.ApplicationController = Ember.ObjectController.extend({\n        selectedProgrammer: null,\n        programmers: [\"Yehuda\", \"Tom\"]\n      });\n      ```\n\n      ``` handlebars\n      {{view \"select\"\n             content=programmers\n             value=selectedProgrammer\n      }}\n      ```\n\n      Would result in the following HTML:\n\n      ```html\n      <select class=\"ember-select\">\n        <option value=\"Yehuda\">Yehuda</option>\n        <option value=\"Tom\">Tom</option>\n      </select>\n      ```\n\n      Although `selectedProgrammer` is `null` and no `<option>`\n      has a `selected` attribute the rendered HTML will display the\n      first item as though it were selected. You can supply a string\n      value for the `Ember.Select` to display when there is no selection\n      with the `prompt` option:\n\n      ```javascript\n      App.ApplicationController = Ember.ObjectController.extend({\n        selectedProgrammer: null,\n        programmers: [ \"Yehuda\", \"Tom\" ]\n      });\n      ```\n\n      ```handlebars\n      {{view \"select\"\n             content=programmers\n             value=selectedProgrammer\n             prompt=\"Please select a name\"\n      }}\n      ```\n\n      Would result in the following HTML:\n\n      ```html\n      <select class=\"ember-select\">\n        <option>Please select a name</option>\n        <option value=\"Yehuda\">Yehuda</option>\n        <option value=\"Tom\">Tom</option>\n      </select>\n      ```\n\n      @class Select\n      @namespace Ember\n      @extends Ember.View\n    */\n    var Select = View.extend({\n      instrumentDisplay: 'Ember.Select',\n\n      tagName: 'select',\n      classNames: ['ember-select'],\n      defaultTemplate: Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = '', stack1;\n      data.buffer.push(\"<option value=\\\"\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"view.prompt\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</option>\");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var stack1;\n      stack1 = helpers.each.call(depth0, \"view.groupedContent\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(''); }\n      }\n    function program4(depth0,data) {\n      \n      \n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"view.groupView\", {hash:{\n        'content': (\"content\"),\n        'label': (\"label\")\n      },hashTypes:{'content': \"ID\",'label': \"ID\"},hashContexts:{'content': depth0,'label': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      }\n\n    function program6(depth0,data) {\n      \n      var stack1;\n      stack1 = helpers.each.call(depth0, \"view.content\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(''); }\n      }\n    function program7(depth0,data) {\n      \n      \n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"view.optionView\", {hash:{\n        'content': (\"\")\n      },hashTypes:{'content': \"ID\"},hashContexts:{'content': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      }\n\n      stack1 = helpers['if'].call(depth0, \"view.prompt\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      stack1 = helpers['if'].call(depth0, \"view.optionGroupPath\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(6, program6, data),fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      \n    }),\n      attributeBindings: ['multiple', 'disabled', 'tabindex', 'name', 'required', 'autofocus',\n                          'form', 'size'],\n\n      /**\n        The `multiple` attribute of the select element. Indicates whether multiple\n        options can be selected.\n\n        @property multiple\n        @type Boolean\n        @default false\n      */\n      multiple: false,\n\n      /**\n        The `disabled` attribute of the select element. Indicates whether\n        the element is disabled from interactions.\n\n        @property disabled\n        @type Boolean\n        @default false\n      */\n      disabled: false,\n\n      /**\n        The `required` attribute of the select element. Indicates whether\n        a selected option is required for form validation.\n\n        @property required\n        @type Boolean\n        @default false\n        @since 1.5.0\n      */\n      required: false,\n\n      /**\n        The list of options.\n\n        If `optionLabelPath` and `optionValuePath` are not overridden, this should\n        be a list of strings, which will serve simultaneously as labels and values.\n\n        Otherwise, this should be a list of objects. For instance:\n\n        ```javascript\n        var App = Ember.Application.create();\n        var App.MySelect = Ember.Select.extend({\n          content: Ember.A([\n              { id: 1, firstName: 'Yehuda' },\n              { id: 2, firstName: 'Tom' }\n            ]),\n          optionLabelPath: 'content.firstName',\n          optionValuePath: 'content.id'\n        });\n        ```\n\n        @property content\n        @type Array\n        @default null\n      */\n      content: null,\n\n      /**\n        When `multiple` is `false`, the element of `content` that is currently\n        selected, if any.\n\n        When `multiple` is `true`, an array of such elements.\n\n        @property selection\n        @type Object or Array\n        @default null\n      */\n      selection: null,\n\n      /**\n        In single selection mode (when `multiple` is `false`), value can be used to\n        get the current selection's value or set the selection by it's value.\n\n        It is not currently supported in multiple selection mode.\n\n        @property value\n        @type String\n        @default null\n      */\n      value: computed(function(key, value) {\n        if (arguments.length === 2) { return value; }\n        var valuePath = get(this, 'optionValuePath').replace(/^content\\.?/, '');\n        return valuePath ? get(this, 'selection.' + valuePath) : get(this, 'selection');\n      }).property('selection'),\n\n      /**\n        If given, a top-most dummy option will be rendered to serve as a user\n        prompt.\n\n        @property prompt\n        @type String\n        @default null\n      */\n      prompt: null,\n\n      /**\n        The path of the option labels. See [content](/api/classes/Ember.Select.html#property_content).\n\n        @property optionLabelPath\n        @type String\n        @default 'content'\n      */\n      optionLabelPath: 'content',\n\n      /**\n        The path of the option values. See [content](/api/classes/Ember.Select.html#property_content).\n\n        @property optionValuePath\n        @type String\n        @default 'content'\n      */\n      optionValuePath: 'content',\n\n      /**\n        The path of the option group.\n        When this property is used, `content` should be sorted by `optionGroupPath`.\n\n        @property optionGroupPath\n        @type String\n        @default null\n      */\n      optionGroupPath: null,\n\n      /**\n        The view class for optgroup.\n\n        @property groupView\n        @type Ember.View\n        @default Ember.SelectOptgroup\n      */\n      groupView: SelectOptgroup,\n\n      groupedContent: computed(function() {\n        var groupPath = get(this, 'optionGroupPath');\n        var groupedContent = emberA();\n        var content = get(this, 'content') || [];\n\n        forEach(content, function(item) {\n          var label = get(item, groupPath);\n\n          if (get(groupedContent, 'lastObject.label') !== label) {\n            groupedContent.pushObject({\n              label: label,\n              content: emberA()\n            });\n          }\n\n          get(groupedContent, 'lastObject.content').push(item);\n        });\n\n        return groupedContent;\n      }).property('optionGroupPath', 'content.@each'),\n\n      /**\n        The view class for option.\n\n        @property optionView\n        @type Ember.View\n        @default Ember.SelectOption\n      */\n      optionView: SelectOption,\n\n      _change: function() {\n        if (get(this, 'multiple')) {\n          this._changeMultiple();\n        } else {\n          this._changeSingle();\n        }\n      },\n\n      selectionDidChange: observer('selection.@each', function() {\n        var selection = get(this, 'selection');\n        if (get(this, 'multiple')) {\n          if (!isArray(selection)) {\n            set(this, 'selection', emberA([selection]));\n            return;\n          }\n          this._selectionDidChangeMultiple();\n        } else {\n          this._selectionDidChangeSingle();\n        }\n      }),\n\n      valueDidChange: observer('value', function() {\n        var content = get(this, 'content');\n        var value = get(this, 'value');\n        var valuePath = get(this, 'optionValuePath').replace(/^content\\.?/, '');\n        var selectedValue = (valuePath ? get(this, 'selection.' + valuePath) : get(this, 'selection'));\n        var selection;\n\n        if (value !== selectedValue) {\n          selection = content ? content.find(function(obj) {\n            return value === (valuePath ? get(obj, valuePath) : obj);\n          }) : null;\n\n          this.set('selection', selection);\n        }\n      }),\n\n\n      _triggerChange: function() {\n        var selection = get(this, 'selection');\n        var value = get(this, 'value');\n\n        if (!isNone(selection)) { this.selectionDidChange(); }\n        if (!isNone(value)) { this.valueDidChange(); }\n\n        this._change();\n      },\n\n      _changeSingle: function() {\n        var selectedIndex = this.$()[0].selectedIndex;\n        var content = get(this, 'content');\n        var prompt = get(this, 'prompt');\n\n        if (!content || !get(content, 'length')) { return; }\n        if (prompt && selectedIndex === 0) { set(this, 'selection', null); return; }\n\n        if (prompt) { selectedIndex -= 1; }\n        set(this, 'selection', content.objectAt(selectedIndex));\n      },\n\n\n      _changeMultiple: function() {\n        var options = this.$('option:selected');\n        var prompt = get(this, 'prompt');\n        var offset = prompt ? 1 : 0;\n        var content = get(this, 'content');\n        var selection = get(this, 'selection');\n\n        if (!content) { return; }\n        if (options) {\n          var selectedIndexes = options.map(function() {\n            return this.index - offset;\n          }).toArray();\n          var newSelection = content.objectsAt(selectedIndexes);\n\n          if (isArray(selection)) {\n            replace(selection, 0, get(selection, 'length'), newSelection);\n          } else {\n            set(this, 'selection', newSelection);\n          }\n        }\n      },\n\n      _selectionDidChangeSingle: function() {\n        var el = this.get('element');\n        if (!el) { return; }\n\n        var content = get(this, 'content');\n        var selection = get(this, 'selection');\n        var selectionIndex = content ? indexOf(content, selection) : -1;\n        var prompt = get(this, 'prompt');\n\n        if (prompt) { selectionIndex += 1; }\n        if (el) { el.selectedIndex = selectionIndex; }\n      },\n\n      _selectionDidChangeMultiple: function() {\n        var content = get(this, 'content');\n        var selection = get(this, 'selection');\n        var selectedIndexes = content ? indexesOf(content, selection) : [-1];\n        var prompt = get(this, 'prompt');\n        var offset = prompt ? 1 : 0;\n        var options = this.$('option');\n        var adjusted;\n\n        if (options) {\n          options.each(function() {\n            adjusted = this.index > -1 ? this.index - offset : -1;\n            this.selected = indexOf(selectedIndexes, adjusted) > -1;\n          });\n        }\n      },\n\n      init: function() {\n        this._super();\n        this.on(\"didInsertElement\", this, this._triggerChange);\n        this.on(\"change\", this, this._change);\n      }\n    });\n\n    __exports__[\"default\"] = Select;\n    __exports__.Select = Select;\n    __exports__.SelectOption = SelectOption;\n    __exports__.SelectOptgroup = SelectOptgroup;\n  });\nenifed(\"ember-handlebars/controls/text_area\",\n  [\"ember-metal/property_get\",\"ember-views/views/component\",\"ember-handlebars/controls/text_support\",\"ember-metal/mixin\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n    var get = __dependency1__.get;\n    var Component = __dependency2__[\"default\"];\n    var TextSupport = __dependency3__[\"default\"];\n    var observer = __dependency4__.observer;\n\n    /**\n      The internal class used to create textarea element when the `{{textarea}}`\n      helper is used.\n\n      See [handlebars.helpers.textarea](/api/classes/Ember.Handlebars.helpers.html#method_textarea)  for usage details.\n\n      ## Layout and LayoutName properties\n\n      Because HTML `textarea` elements do not contain inner HTML the `layout` and\n      `layoutName` properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\n      layout section for more information.\n\n      @class TextArea\n      @namespace Ember\n      @extends Ember.Component\n      @uses Ember.TextSupport\n    */\n    __exports__[\"default\"] = Component.extend(TextSupport, {\n      instrumentDisplay: '{{textarea}}',\n\n      classNames: ['ember-text-area'],\n\n      tagName: \"textarea\",\n      attributeBindings: ['rows', 'cols', 'name', 'selectionEnd', 'selectionStart', 'wrap', 'lang', 'dir'],\n      rows: null,\n      cols: null,\n\n      _updateElementValue: observer('value', function() {\n        // We do this check so cursor position doesn't get affected in IE\n        var value = get(this, 'value');\n        var $el = this.$();\n        if ($el && value !== $el.val()) {\n          $el.val(value);\n        }\n      }),\n\n      init: function() {\n        this._super();\n        this.on(\"didInsertElement\", this, this._updateElementValue);\n      }\n    });\n  });\nenifed(\"ember-handlebars/controls/text_field\",\n  [\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-views/views/component\",\"ember-handlebars/controls/text_support\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    var get = __dependency1__.get;\n    var set = __dependency2__.set;\n    var Component = __dependency3__[\"default\"];\n    var TextSupport = __dependency4__[\"default\"];\n\n    /**\n\n      The internal class used to create text inputs when the `{{input}}`\n      helper is used with `type` of `text`.\n\n      See [Handlebars.helpers.input](/api/classes/Ember.Handlebars.helpers.html#method_input)  for usage details.\n\n      ## Layout and LayoutName properties\n\n      Because HTML `input` elements are self closing `layout` and `layoutName`\n      properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\n      layout section for more information.\n\n      @class TextField\n      @namespace Ember\n      @extends Ember.Component\n      @uses Ember.TextSupport\n    */\n    __exports__[\"default\"] = Component.extend(TextSupport, {\n      instrumentDisplay: '{{input type=\"text\"}}',\n\n      classNames: ['ember-text-field'],\n      tagName: \"input\",\n      attributeBindings: ['type', 'value', 'size', 'pattern', 'name', 'min', 'max',\n                          'accept', 'autocomplete', 'autosave', 'formaction',\n                          'formenctype', 'formmethod', 'formnovalidate', 'formtarget',\n                          'height', 'inputmode', 'list', 'multiple', 'step', 'lang', 'dir',\n                          'width'],\n\n      /**\n        The `value` attribute of the input element. As the user inputs text, this\n        property is updated live.\n\n        @property value\n        @type String\n        @default \"\"\n      */\n      value: \"\",\n\n      /**\n        The `type` attribute of the input element.\n\n        @property type\n        @type String\n        @default \"text\"\n      */\n      type: \"text\",\n\n      /**\n        The `size` of the text field in characters.\n\n        @property size\n        @type String\n        @default null\n      */\n      size: null,\n\n      /**\n        The `pattern` attribute of input element.\n\n        @property pattern\n        @type String\n        @default null\n      */\n      pattern: null,\n\n      /**\n        The `min` attribute of input element used with `type=\"number\"` or `type=\"range\"`.\n\n        @property min\n        @type String\n        @default null\n        @since 1.4.0\n      */\n      min: null,\n\n      /**\n        The `max` attribute of input element used with `type=\"number\"` or `type=\"range\"`.\n\n        @property max\n        @type String\n        @default null\n        @since 1.4.0\n      */\n      max: null\n    });\n  });\nenifed(\"ember-handlebars/controls/text_support\",\n  [\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/mixin\",\"ember-runtime/mixins/target_action_support\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    var get = __dependency1__.get;\n    var set = __dependency2__.set;\n    var Mixin = __dependency3__.Mixin;\n    var TargetActionSupport = __dependency4__[\"default\"];\n\n    /**\n      Shared mixin used by `Ember.TextField` and `Ember.TextArea`.\n\n      @class TextSupport\n      @namespace Ember\n      @uses Ember.TargetActionSupport\n      @extends Ember.Mixin\n      @private\n    */\n    var TextSupport = Mixin.create(TargetActionSupport, {\n      value: \"\",\n\n      attributeBindings: ['placeholder', 'disabled', 'maxlength', 'tabindex', 'readonly',\n                          'autofocus', 'form', 'selectionDirection', 'spellcheck', 'required',\n                          'title', 'autocapitalize', 'autocorrect'],\n      placeholder: null,\n      disabled: false,\n      maxlength: null,\n\n      init: function() {\n        this._super();\n        this.on(\"focusOut\", this, this._elementValueDidChange);\n        this.on(\"change\", this, this._elementValueDidChange);\n        this.on(\"paste\", this, this._elementValueDidChange);\n        this.on(\"cut\", this, this._elementValueDidChange);\n        this.on(\"input\", this, this._elementValueDidChange);\n        this.on(\"keyUp\", this, this.interpretKeyEvents);\n      },\n\n      /**\n        The action to be sent when the user presses the return key.\n\n        This is similar to the `{{action}}` helper, but is fired when\n        the user presses the return key when editing a text field, and sends\n        the value of the field as the context.\n\n        @property action\n        @type String\n        @default null\n      */\n      action: null,\n\n      /**\n        The event that should send the action.\n\n        Options are:\n\n        * `enter`: the user pressed enter\n        * `keyPress`: the user pressed a key\n\n        @property onEvent\n        @type String\n        @default enter\n      */\n      onEvent: 'enter',\n\n      /**\n        Whether the `keyUp` event that triggers an `action` to be sent continues\n        propagating to other views.\n\n        By default, when the user presses the return key on their keyboard and\n        the text field has an `action` set, the action will be sent to the view's\n        controller and the key event will stop propagating.\n\n        If you would like parent views to receive the `keyUp` event even after an\n        action has been dispatched, set `bubbles` to true.\n\n        @property bubbles\n        @type Boolean\n        @default false\n      */\n      bubbles: false,\n\n      interpretKeyEvents: function(event) {\n        var map = TextSupport.KEY_EVENTS;\n        var method = map[event.keyCode];\n\n        this._elementValueDidChange();\n        if (method) { return this[method](event); }\n      },\n\n      _elementValueDidChange: function() {\n        set(this, 'value', this.$().val());\n      },\n\n      /**\n        Called when the user inserts a new line.\n\n        Called by the `Ember.TextSupport` mixin on keyUp if keycode matches 13.\n        Uses sendAction to send the `enter` action.\n\n        @method insertNewline\n        @param {Event} event\n      */\n      insertNewline: function(event) {\n        sendAction('enter', this, event);\n        sendAction('insert-newline', this, event);\n      },\n\n      /**\n        Called when the user hits escape.\n\n        Called by the `Ember.TextSupport` mixin on keyUp if keycode matches 27.\n        Uses sendAction to send the `escape-press` action.\n\n        @method cancel\n        @param {Event} event\n      */\n      cancel: function(event) {\n        sendAction('escape-press', this, event);\n      },\n\n      /**\n        Called when the text area is focused.\n\n        Uses sendAction to send the `focus-in` action.\n\n        @method focusIn\n        @param {Event} event\n      */\n      focusIn: function(event) {\n        sendAction('focus-in', this, event);\n      },\n\n      /**\n        Called when the text area is blurred.\n\n        Uses sendAction to send the `focus-out` action.\n\n        @method focusOut\n        @param {Event} event\n      */\n      focusOut: function(event) {\n        sendAction('focus-out', this, event);\n      },\n\n      /**\n        Called when the user presses a key. Enabled by setting\n        the `onEvent` property to `keyPress`.\n\n        Uses sendAction to send the `key-press` action.\n\n        @method keyPress\n        @param {Event} event\n      */\n      keyPress: function(event) {\n        sendAction('key-press', this, event);\n      }\n\n    });\n\n    TextSupport.KEY_EVENTS = {\n      13: 'insertNewline',\n      27: 'cancel'\n    };\n\n    // In principle, this shouldn't be necessary, but the legacy\n    // sendAction semantics for TextField are different from\n    // the component semantics so this method normalizes them.\n    function sendAction(eventName, view, event) {\n      var action = get(view, eventName);\n      var on = get(view, 'onEvent');\n      var value = get(view, 'value');\n\n      // back-compat support for keyPress as an event name even though\n      // it's also a method name that consumes the event (and therefore\n      // incompatible with sendAction semantics).\n      if (on === eventName || (on === 'keyPress' && eventName === 'key-press')) {\n        view.sendAction('action', value);\n      }\n\n      view.sendAction(eventName, value);\n\n      if (action || on === eventName) {\n        if(!get(view, 'bubbles')) {\n          event.stopPropagation();\n        }\n      }\n    }\n\n    __exports__[\"default\"] = TextSupport;\n  });\nenifed(\"ember-handlebars/ext\",\n  [\"ember-metal/core\",\"ember-runtime/system/string\",\"ember-handlebars-compiler\",\"ember-metal/property_get\",\"ember-metal/error\",\"ember-metal/mixin\",\"ember-views/views/view\",\"ember-handlebars/views/metamorph_view\",\"ember-metal/path_cache\",\"ember-metal/is_empty\",\"ember-metal/cache\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.FEATURES, Ember.assert, Ember.Handlebars, Ember.lookup\n    // var emberAssert = Ember.assert;\n\n    var fmt = __dependency2__.fmt;\n\n    var EmberHandlebars = __dependency3__[\"default\"];\n    var helpers = EmberHandlebars.helpers;\n\n    var get = __dependency4__.get;\n    var EmberError = __dependency5__[\"default\"];\n    var IS_BINDING = __dependency6__.IS_BINDING;\n\n    var View = __dependency7__[\"default\"];\n    var _Metamorph = __dependency8__._Metamorph;\n    var detectIsGlobal = __dependency9__.isGlobal;\n\n    // late bound via requireModule because of circular dependencies.\n    var resolveHelper, SimpleHandlebarsView;\n\n    var isEmpty = __dependency10__[\"default\"];\n\n    var slice = [].slice;\n    var originalTemplate = EmberHandlebars.template;\n\n    /**\n      If a path starts with a reserved keyword, returns the root\n      that should be used.\n\n      @private\n      @method normalizePath\n      @for Ember\n      @param root {Object}\n      @param path {String}\n      @param data {Hash}\n    */\n\n    var Cache = __dependency11__[\"default\"];\n\n    var FIRST_SEGMENT_CACHE = new Cache(1000, function(path){\n      return path.split('.', 1)[0];\n    });\n\n    function normalizePath(root, path, data) {\n      var keywords = (data && data.keywords) || {};\n      var keyword, isKeyword;\n\n      // Get the first segment of the path. For example, if the\n      // path is \"foo.bar.baz\", returns \"foo\".\n      keyword = FIRST_SEGMENT_CACHE.get(path);\n\n      // Test to see if the first path is a keyword that has been\n      // passed along in the view's data hash. If so, we will treat\n      // that object as the new root.\n      if (keywords.hasOwnProperty(keyword)) {\n        // Look up the value in the template's data hash.\n        root = keywords[keyword];\n        isKeyword = true;\n\n        // Handle cases where the entire path is the reserved\n        // word. In that case, return the object itself.\n        if (path === keyword) {\n          path = '';\n        } else {\n          // Strip the keyword from the path and look up\n          // the remainder from the newly found root.\n          path = path.substr(keyword.length+1);\n        }\n      }\n\n      return {\n        root: root,\n        path: path,\n        isKeyword: isKeyword\n      };\n    }\n\n\n    /**\n      Lookup both on root and on window. If the path starts with\n      a keyword, the corresponding object will be looked up in the\n      template's data hash and used to resolve the path.\n\n      @method get\n      @for Ember.Handlebars\n      @param {Object} root The object to look up the property on\n      @param {String} path The path to be lookedup\n      @param {Object} options The template's option hash\n    */\n    function handlebarsGet(root, path, options) {\n      var data = options && options.data;\n      var normalizedPath = normalizePath(root, path, data);\n      var value;\n\n      // In cases where the path begins with a keyword, change the\n      // root to the value represented by that keyword, and ensure\n      // the path is relative to it.\n      root = normalizedPath.root;\n      path = normalizedPath.path;\n\n      // Ember.get with a null root and GlobalPath will fall back to\n      // Ember.lookup, which is no longer allowed in templates.\n      //\n      // But when outputting a primitive, root will be the primitive\n      // and path a blank string. These primitives should pass through\n      // to `get`.\n      if (root || path === '') {\n        value = get(root, path);\n      }\n\n      if (detectIsGlobal(path)) {\n        if (value === undefined && root !== Ember.lookup) {\n          root = Ember.lookup;\n          value = get(root, path);\n        }\n        if (root === Ember.lookup || root === null) {\n          Ember.deprecate(\"Global lookup of \"+path+\" from a Handlebars template is deprecated.\");\n        }\n      }\n\n      return value;\n    }\n\n    function lookupViewInContainer(container, path) {\n      Ember.assert(\"View requires a container to resolve views not passed in through the context\", !!container);\n      return container.lookupFactory('view:'+path);\n    }\n\n    function lookupViewByClassName(path) {\n      var viewClass;\n      if (detectIsGlobal(path)) {\n        viewClass = get(path);\n        Ember.deprecate('Resolved the view \"'+path+'\" on the global context. Pass a view name to be looked up on the container instead, such as {{view \"select\"}}. http://emberjs.com/guides/deprecations#toc_global-lookup-of-views-since-1-8', !viewClass);\n        return viewClass;\n      }\n    }\n\n    /**\n      handlebarsGetView resolves a view based on strings passed into a template.\n      For example:\n\n      ```handlebars\n      {{view \"some-view\"}}\n      {{view view.someView}}\n      {{view App.SomeView}} {{! deprecated }}\n      ```\n\n      A value is first checked to be a string- non-strings are presumed to be\n      an object and returned. This handles the \"access a view on a context\"\n      case (line 2 in the above examples).\n\n      Next a string is normalized, then called on the context with `get`. If\n      there is still no value, a GlobalPath will be fetched from the global\n      context (raising a deprecation) and a localPath will be passed to the\n      container to be looked up.\n\n      @private\n      @for Ember.Handlebars\n      @param {Object} context The context of the template being rendered\n      @param {String} path The path to be lookedup\n      @param {Object} container The container\n      @param {Object} options The options from the template\n    */\n    function handlebarsGetView(context, path, container, options) {\n      var viewClass;\n      var data;\n      var pathType;\n      if (options) {\n        data      = options.data;\n        pathType  = options.types && options.types[0];\n      }\n\n      if ('string' === typeof path) {\n        if('STRING' === pathType && container) {\n          viewClass = lookupViewInContainer(container, path);\n          Ember.deprecate('Quoted view names must refer to a view in the container.', viewClass);\n\n        }\n\n        if(!viewClass) {\n          viewClass = lookupViewByClassName(path);\n        }\n\n        if(!viewClass) {\n          if (data) {\n            var normalizedPath = normalizePath(context, path, data);\n            context = normalizedPath.root;\n            path = normalizedPath.path;\n          }\n\n          // Only lookup view class on context if there is a context. If not,\n          // the global lookup path on get may kick in.\n          viewClass = context && get(context, path);\n\n          if(!viewClass) {\n            // try the container once more with the normalized path\n            viewClass = lookupViewInContainer(container, path);\n          }\n        }\n      } else {\n        viewClass = path;\n      }\n\n      // Sometimes a view's value is yet another path\n      if ('string' === typeof viewClass && data && data.view) {\n        viewClass = handlebarsGetView(data.view, viewClass, container, {\n          data: data,\n          types: ['ID']\n        });\n      }\n\n      Ember.assert(\n        fmt(path+\" must be a subclass or an instance of Ember.View, not %@\", [viewClass]),\n        View.detect(viewClass) || View.detectInstance(viewClass)\n      );\n\n      return viewClass;\n    }\n\n    /**\n      This method uses `Ember.Handlebars.get` to lookup a value, then ensures\n      that the value is escaped properly.\n\n      If `unescaped` is a truthy value then the escaping will not be performed.\n\n      @method getEscaped\n      @for Ember.Handlebars\n      @param {Object} root The object to look up the property on\n      @param {String} path The path to be lookedup\n      @param {Object} options The template's option hash\n      @since 1.4.0\n    */\n    function getEscaped(root, path, options) {\n      var result = handlebarsGet(root, path, options);\n\n      if (result === null || result === undefined) {\n        result = \"\";\n      } else if (!(result instanceof Handlebars.SafeString)) {\n        result = String(result);\n      }\n      if (!options.hash.unescaped){\n        result = Handlebars.Utils.escapeExpression(result);\n      }\n\n      return result;\n    }\n\n    __exports__.getEscaped = getEscaped;function resolveParams(context, params, options) {\n      var resolvedParams = [], types = options.types, param, type;\n\n      for (var i=0, l=params.length; i<l; i++) {\n        param = params[i];\n        type = types[i];\n\n        if (type === 'ID') {\n          resolvedParams.push(handlebarsGet(context, param, options));\n        } else {\n          resolvedParams.push(param);\n        }\n      }\n\n      return resolvedParams;\n    }\n\n    __exports__.resolveParams = resolveParams;function resolveHash(context, hash, options) {\n      var resolvedHash = {}, types = options.hashTypes, type;\n\n      for (var key in hash) {\n        if (!hash.hasOwnProperty(key)) { continue; }\n\n        type = types[key];\n\n        if (type === 'ID') {\n          resolvedHash[key] = handlebarsGet(context, hash[key], options);\n        } else {\n          resolvedHash[key] = hash[key];\n        }\n      }\n\n      return resolvedHash;\n    }\n\n    __exports__.resolveHash = resolveHash;/**\n      Registers a helper in Handlebars that will be called if no property with the\n      given name can be found on the current context object, and no helper with\n      that name is registered.\n\n      This throws an exception with a more helpful error message so the user can\n      track down where the problem is happening.\n\n      @private\n      @method helperMissing\n      @for Ember.Handlebars.helpers\n      @param {String} path\n      @param {Hash} options\n    */\n    function helperMissingHelper(path) {\n      if (!resolveHelper) { resolveHelper = requireModule('ember-handlebars/helpers/binding')['resolveHelper']; } // ES6TODO: stupid circular dep\n\n      var error, view = \"\";\n\n      var options = arguments[arguments.length - 1];\n\n      var helper = resolveHelper(options.data.view.container, path);\n\n      if (helper) {\n        return helper.apply(this, slice.call(arguments, 1));\n      }\n\n      error = \"%@ Handlebars error: Could not find property '%@' on object %@.\";\n      if (options.data) {\n        view = options.data.view;\n      }\n      throw new EmberError(fmt(error, [view, path, this]));\n    }\n\n    __exports__.helperMissingHelper = helperMissingHelper;/**\n      Registers a helper in Handlebars that will be called if no property with the\n      given name can be found on the current context object, and no helper with\n      that name is registered.\n\n      This throws an exception with a more helpful error message so the user can\n      track down where the problem is happening.\n\n      @private\n      @method helperMissing\n      @for Ember.Handlebars.helpers\n      @param {String} path\n      @param {Hash} options\n    */\n    function blockHelperMissingHelper(path) {\n      if (!resolveHelper) { resolveHelper = requireModule('ember-handlebars/helpers/binding')['resolveHelper']; } // ES6TODO: stupid circular dep\n\n      var options = arguments[arguments.length - 1];\n\n      Ember.assert(\"`blockHelperMissing` was invoked without a helper name, which \" +\n                   \"is most likely due to a mismatch between the version of \" +\n                   \"Ember.js you're running now and the one used to precompile your \" +\n                   \"templates. Please make sure the version of \" +\n                   \"`ember-handlebars-compiler` you're using is up to date.\", path);\n\n      var helper = resolveHelper(options.data.view.container, path);\n\n      if (helper) {\n        return helper.apply(this, slice.call(arguments, 1));\n      } else {\n        return helpers.helperMissing.call(this, path);\n      }\n    }\n\n    __exports__.blockHelperMissingHelper = blockHelperMissingHelper;/**\n      Register a bound handlebars helper. Bound helpers behave similarly to regular\n      handlebars helpers, with the added ability to re-render when the underlying data\n      changes.\n\n      ## Simple example\n\n      ```javascript\n      Ember.Handlebars.registerBoundHelper('capitalize', function(value) {\n        return Ember.String.capitalize(value);\n      });\n      ```\n\n      The above bound helper can be used inside of templates as follows:\n\n      ```handlebars\n      {{capitalize name}}\n      ```\n\n      In this case, when the `name` property of the template's context changes,\n      the rendered value of the helper will update to reflect this change.\n\n      ## Example with options\n\n      Like normal handlebars helpers, bound helpers have access to the options\n      passed into the helper call.\n\n      ```javascript\n      Ember.Handlebars.registerBoundHelper('repeat', function(value, options) {\n        var count = options.hash.count;\n        var a = [];\n        while(a.length < count) {\n            a.push(value);\n        }\n        return a.join('');\n      });\n      ```\n\n      This helper could be used in a template as follows:\n\n      ```handlebars\n      {{repeat text count=3}}\n      ```\n\n      ## Example with bound options\n\n      Bound hash options are also supported. Example:\n\n      ```handlebars\n      {{repeat text count=numRepeats}}\n      ```\n\n      In this example, count will be bound to the value of\n      the `numRepeats` property on the context. If that property\n      changes, the helper will be re-rendered.\n\n      ## Example with extra dependencies\n\n      The `Ember.Handlebars.registerBoundHelper` method takes a variable length\n      third parameter which indicates extra dependencies on the passed in value.\n      This allows the handlebars helper to update when these dependencies change.\n\n      ```javascript\n      Ember.Handlebars.registerBoundHelper('capitalizeName', function(value) {\n        return value.get('name').toUpperCase();\n      }, 'name');\n      ```\n\n      ## Example with multiple bound properties\n\n      `Ember.Handlebars.registerBoundHelper` supports binding to\n      multiple properties, e.g.:\n\n      ```javascript\n      Ember.Handlebars.registerBoundHelper('concatenate', function() {\n        var values = Array.prototype.slice.call(arguments, 0, -1);\n        return values.join('||');\n      });\n      ```\n\n      Which allows for template syntax such as `{{concatenate prop1 prop2}}` or\n      `{{concatenate prop1 prop2 prop3}}`. If any of the properties change,\n      the helper will re-render.  Note that dependency keys cannot be\n      using in conjunction with multi-property helpers, since it is ambiguous\n      which property the dependent keys would belong to.\n\n      ## Use with unbound helper\n\n      The `{{unbound}}` helper can be used with bound helper invocations\n      to render them in their unbound form, e.g.\n\n      ```handlebars\n      {{unbound capitalize name}}\n      ```\n\n      In this example, if the name property changes, the helper\n      will not re-render.\n\n      ## Use with blocks not supported\n\n      Bound helpers do not support use with Handlebars blocks or\n      the addition of child views of any kind.\n\n      @method registerBoundHelper\n      @for Ember.Handlebars\n      @param {String} name\n      @param {Function} function\n      @param {String} dependentKeys*\n    */\n    function registerBoundHelper(name, fn) {\n      var boundHelperArgs = slice.call(arguments, 1);\n      var boundFn = makeBoundHelper.apply(this, boundHelperArgs);\n      EmberHandlebars.registerHelper(name, boundFn);\n    }\n\n    __exports__.registerBoundHelper = registerBoundHelper;/**\n      A helper function used by `registerBoundHelper`. Takes the\n      provided Handlebars helper function fn and returns it in wrapped\n      bound helper form.\n\n      The main use case for using this outside of `registerBoundHelper`\n      is for registering helpers on the container:\n\n      ```js\n      var boundHelperFn = Ember.Handlebars.makeBoundHelper(function(word) {\n        return word.toUpperCase();\n      });\n\n      container.register('helper:my-bound-helper', boundHelperFn);\n      ```\n\n      In the above example, if the helper function hadn't been wrapped in\n      `makeBoundHelper`, the registered helper would be unbound.\n\n      @method makeBoundHelper\n      @for Ember.Handlebars\n      @param {Function} function\n      @param {String} dependentKeys*\n      @since 1.2.0\n    */\n    function makeBoundHelper(fn) {\n      if (!SimpleHandlebarsView) { SimpleHandlebarsView = requireModule('ember-handlebars/views/handlebars_bound_view')['SimpleHandlebarsView']; } // ES6TODO: stupid circular dep\n\n      var dependentKeys = slice.call(arguments, 1);\n\n      function helper() {\n        var properties = slice.call(arguments, 0, -1);\n        var numProperties = properties.length;\n        var options = arguments[arguments.length - 1];\n        var normalizedProperties = [];\n        var data = options.data;\n        var types = data.isUnbound ? slice.call(options.types, 1) : options.types;\n        var hash = options.hash;\n        var hashTypes = options.hashTypes;\n        var view = data.view;\n        var contexts = options.contexts;\n        var currentContext = (contexts && contexts.length) ? contexts[0] : this;\n        var prefixPathForDependentKeys = '';\n        var loc, len, hashOption;\n        var boundOption, property;\n        var normalizedValue = SimpleHandlebarsView.prototype.normalizedValue;\n\n        Ember.assert(\"registerBoundHelper-generated helpers do not support use with Handlebars blocks.\", !options.fn);\n\n        // Detect bound options (e.g. countBinding=\"otherCount\")\n        var boundOptions = hash.boundOptions = {};\n        for (hashOption in hash) {\n          if (IS_BINDING.test(hashOption)) {\n            // Lop off 'Binding' suffix.\n            boundOptions[hashOption.slice(0, -7)] = hash[hashOption];\n          } else if (hashTypes[hashOption] === 'ID') {\n            boundOptions[hashOption] = hash[hashOption];\n          }\n        }\n\n        // Expose property names on data.properties object.\n        var watchedProperties = [];\n        data.properties = [];\n        for (loc = 0; loc < numProperties; ++loc) {\n          data.properties.push(properties[loc]);\n          if (types[loc] === 'ID') {\n            var normalizedProp = normalizePath(currentContext, properties[loc], data);\n            normalizedProperties.push(normalizedProp);\n            watchedProperties.push(normalizedProp);\n          } else {\n            if (data.isUnbound) {\n              normalizedProperties.push({path: properties[loc]});\n            }else {\n              normalizedProperties.push(null);\n            }\n          }\n        }\n\n        // Handle case when helper invocation is preceded by `unbound`, e.g.\n        // {{unbound myHelper foo}}\n        if (data.isUnbound) {\n          return evaluateUnboundHelper(this, fn, normalizedProperties, options);\n        }\n\n        var bindView = new SimpleHandlebarsView(null, null, !options.hash.unescaped, options.data);\n\n        // Override SimpleHandlebarsView's method for generating the view's content.\n        bindView.normalizedValue = function() {\n          var args = [];\n          var boundOption;\n\n          // Copy over bound hash options.\n          for (boundOption in boundOptions) {\n            if (!boundOptions.hasOwnProperty(boundOption)) { continue; }\n            property = normalizePath(currentContext, boundOptions[boundOption], data);\n            bindView.path = property.path;\n            bindView.pathRoot = property.root;\n            hash[boundOption] = normalizedValue.call(bindView);\n          }\n\n          for (loc = 0; loc < numProperties; ++loc) {\n            property = normalizedProperties[loc];\n            if (property) {\n              bindView.path = property.path;\n              bindView.pathRoot = property.root;\n              args.push(normalizedValue.call(bindView));\n            } else {\n              args.push(properties[loc]);\n            }\n          }\n          args.push(options);\n\n          // Run the supplied helper function.\n          return fn.apply(currentContext, args);\n        };\n\n        view.appendChild(bindView);\n\n        // Assemble list of watched properties that'll re-render this helper.\n        for (boundOption in boundOptions) {\n          if (boundOptions.hasOwnProperty(boundOption)) {\n            watchedProperties.push(normalizePath(currentContext, boundOptions[boundOption], data));\n          }\n        }\n\n        // Observe each property.\n        for (loc = 0, len = watchedProperties.length; loc < len; ++loc) {\n          property = watchedProperties[loc];\n          view.registerObserver(property.root, property.path, bindView, bindView.rerender);\n        }\n\n        if (types[0] !== 'ID' || normalizedProperties.length === 0) {\n          return;\n        }\n\n        // Add dependent key observers to the first param\n        var normalized = normalizedProperties[0];\n        var pathRoot = normalized.root;\n        var path = normalized.path;\n\n        if(!isEmpty(path)) {\n          prefixPathForDependentKeys = path + '.';\n        }\n        for (var i=0, l=dependentKeys.length; i<l; i++) {\n          view.registerObserver(pathRoot, prefixPathForDependentKeys + dependentKeys[i], bindView, bindView.rerender);\n        }\n      }\n\n      helper._rawFunction = fn;\n      return helper;\n    }\n\n    /**\n      Renders the unbound form of an otherwise bound helper function.\n\n      @private\n      @method evaluateUnboundHelper\n      @param {Function} fn\n      @param {Object} context\n      @param {Array} normalizedProperties\n      @param {String} options\n    */\n    function evaluateUnboundHelper(context, fn, normalizedProperties, options) {\n      var args = [];\n      var hash = options.hash;\n      var boundOptions = hash.boundOptions;\n      var types = slice.call(options.types, 1);\n      var loc, len, property, propertyType, boundOption;\n\n      for (boundOption in boundOptions) {\n        if (!boundOptions.hasOwnProperty(boundOption)) { continue; }\n        hash[boundOption] = handlebarsGet(context, boundOptions[boundOption], options);\n      }\n\n      for (loc = 0, len = normalizedProperties.length; loc < len; ++loc) {\n        property = normalizedProperties[loc];\n        propertyType = types[loc];\n        if (propertyType === \"ID\") {\n          args.push(handlebarsGet(property.root, property.path, options));\n        } else {\n          args.push(property.path);\n        }\n      }\n      args.push(options);\n      return fn.apply(context, args);\n    }\n\n    /**\n      Overrides Handlebars.template so that we can distinguish\n      user-created, top-level templates from inner contexts.\n\n      @private\n      @method template\n      @for Ember.Handlebars\n      @param {String} spec\n    */\n    function template(spec) {\n      var t = originalTemplate(spec);\n      t.isTop = true;\n      return t;\n    }\n\n    __exports__.template = template;__exports__.normalizePath = normalizePath;\n    __exports__.makeBoundHelper = makeBoundHelper;\n    __exports__.handlebarsGet = handlebarsGet;\n    __exports__.handlebarsGetView = handlebarsGetView;\n    __exports__.evaluateUnboundHelper = evaluateUnboundHelper;\n  });\nenifed(\"ember-handlebars/helpers/binding\",\n  [\"ember-metal/core\",\"ember-handlebars-compiler\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-runtime/system/string\",\"ember-metal/platform\",\"ember-metal/is_none\",\"ember-metal/enumerable_utils\",\"ember-metal/array\",\"ember-views/views/view\",\"ember-metal/run_loop\",\"ember-metal/observer\",\"ember-metal/binding\",\"ember-views/system/jquery\",\"ember-handlebars/ext\",\"ember-metal/keys\",\"ember-metal/cache\",\"ember-handlebars/views/handlebars_bound_view\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __dependency16__, __dependency17__, __dependency18__, __dependency19__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert, Ember.warn, uuid\n    // var emberAssert = Ember.assert, Ember.warn = Ember.warn;\n\n    var EmberHandlebars = __dependency2__[\"default\"];\n    var get = __dependency3__.get;\n    var set = __dependency4__.set;\n    var apply = __dependency5__.apply;\n    var uuid = __dependency5__.uuid;\n    var fmt = __dependency6__.fmt;\n    var o_create = __dependency7__.create;\n    var isNone = __dependency8__[\"default\"];\n    var EnumerableUtils = __dependency9__[\"default\"];\n    var forEach = __dependency10__.forEach;\n    var View = __dependency11__[\"default\"];\n    var run = __dependency12__[\"default\"];\n    var removeObserver = __dependency13__.removeObserver;\n    var isGlobalPath = __dependency14__.isGlobalPath;\n    var emberBind = __dependency14__.bind;\n    var jQuery = __dependency15__[\"default\"];\n    var isArray = __dependency5__.isArray;\n    var handlebarsGetEscaped = __dependency16__.getEscaped;\n    var keys = __dependency17__[\"default\"];\n    var Cache = __dependency18__[\"default\"];\n\n    var _HandlebarsBoundView = __dependency19__._HandlebarsBoundView;\n    var SimpleHandlebarsView = __dependency19__.SimpleHandlebarsView;\n\n    var normalizePath = __dependency16__.normalizePath;\n    var handlebarsGet = __dependency16__.handlebarsGet;\n    var getEscaped = __dependency16__.getEscaped;\n\n    var guidFor = __dependency5__.guidFor;\n    var typeOf = __dependency5__.typeOf;\n\n    var helpers = EmberHandlebars.helpers;\n    var SafeString = EmberHandlebars.SafeString;\n\n    function exists(value) {\n      return !isNone(value);\n    }\n\n    var WithView = _HandlebarsBoundView.extend({\n      init: function() {\n        var controller;\n\n        apply(this, this._super, arguments);\n\n        var keywords        = this.templateData.keywords;\n        var keywordName     = this.templateHash.keywordName;\n        var keywordPath     = this.templateHash.keywordPath;\n        var controllerName  = this.templateHash.controller;\n        var preserveContext = this.preserveContext;\n\n        if (controllerName) {\n          var previousContext = this.previousContext;\n          controller = this.container.lookupFactory('controller:'+controllerName).create({\n            parentController: previousContext,\n            target: previousContext\n          });\n\n          this._generatedController = controller;\n\n          if (!preserveContext) {\n            this.set('controller', controller);\n\n            this.valueNormalizerFunc = function(result) {\n                controller.set('model', result);\n                return controller;\n            };\n          } else {\n            var controllerPath = jQuery.expando + guidFor(controller);\n            keywords[controllerPath] = controller;\n            emberBind(keywords, controllerPath + '.model', keywordPath);\n            keywordPath = controllerPath;\n          }\n        }\n\n        if (preserveContext) {\n          emberBind(keywords, keywordName, keywordPath);\n        }\n\n      },\n      willDestroy: function() {\n        this._super();\n\n        if (this._generatedController) {\n          this._generatedController.destroy();\n        }\n      }\n    });\n\n    // Binds a property into the DOM. This will create a hook in DOM that the\n    // KVO system will look for and update if the property changes.\n    function bind(property, options, preserveContext, shouldDisplay, valueNormalizer, childProperties) {\n      var data = options.data;\n      var fn = options.fn;\n      var inverse = options.inverse;\n      var view = data.view;\n      var normalized, observer, i;\n\n      // we relied on the behavior of calling without\n      // context to mean this === window, but when running\n      // \"use strict\", it's possible for this to === undefined;\n      var currentContext = this || window;\n\n      normalized = normalizePath(currentContext, property, data);\n\n      if (data.insideGroup) {\n        observer = function() {\n          while (view._contextView) {\n            view = view._contextView;\n          }\n          run.once(view, 'rerender');\n        };\n\n        var template, context;\n        var result = handlebarsGet(currentContext, property, options);\n\n        result = valueNormalizer ? valueNormalizer(result) : result;\n\n        context = preserveContext ? currentContext : result;\n        if (shouldDisplay(result)) {\n          template = fn;\n        } else if (inverse) {\n          template = inverse;\n        }\n\n        template(context, { data: options.data });\n      } else {\n        var viewClass = _HandlebarsBoundView;\n        var viewOptions = {\n          preserveContext: preserveContext,\n          shouldDisplayFunc: shouldDisplay,\n          valueNormalizerFunc: valueNormalizer,\n          displayTemplate: fn,\n          inverseTemplate: inverse,\n          path: property,\n          pathRoot: currentContext,\n          previousContext: currentContext,\n          isEscaped: !options.hash.unescaped,\n          templateData: options.data,\n          templateHash: options.hash,\n          helperName: options.helperName\n        };\n\n        if (options.isWithHelper) {\n          viewClass = WithView;\n        }\n\n        // Create the view that will wrap the output of this template/property\n        // and add it to the nearest view's childViews array.\n        // See the documentation of Ember._HandlebarsBoundView for more.\n        var bindView = view.createChildView(viewClass, viewOptions);\n\n        view.appendChild(bindView);\n\n        observer = function() {\n          run.scheduleOnce('render', bindView, 'rerenderIfNeeded');\n        };\n      }\n\n      // Observes the given property on the context and\n      // tells the Ember._HandlebarsBoundView to re-render. If property\n      // is an empty string, we are printing the current context\n      // object ({{this}}) so updating it is not our responsibility.\n      if (typeof this === 'object' && normalized.path !== '') {\n        view.registerObserver(normalized.root, normalized.path, observer);\n        if (childProperties) {\n          for (i=0; i<childProperties.length; i++) {\n            view.registerObserver(normalized.root, normalized.path+'.'+childProperties[i], observer);\n          }\n        }\n      }\n    }\n\n    function simpleBind(currentContext, property, options) {\n      var data = options.data;\n      var view = data.view;\n      var normalized, observer, pathRoot, output;\n\n      normalized = normalizePath(currentContext, property, data);\n      pathRoot = normalized.root;\n\n      // Set up observers for observable objects\n      if (pathRoot && ('object' === typeof pathRoot)) {\n        if (data.insideGroup) {\n          observer = function() {\n            while (view._contextView) {\n              view = view._contextView;\n            }\n            run.once(view, 'rerender');\n          };\n\n          output = handlebarsGetEscaped(currentContext, property, options);\n\n          data.buffer.push(output);\n        } else {\n          var bindView = new SimpleHandlebarsView(\n            property, currentContext, !options.hash.unescaped, options.data\n          );\n\n          bindView._parentView = view;\n          view.appendChild(bindView);\n\n          observer = function() {\n            run.scheduleOnce('render', bindView, 'rerender');\n          };\n        }\n\n        // Observes the given property on the context and\n        // tells the Ember._HandlebarsBoundView to re-render. If property\n        // is an empty string, we are printing the current context\n        // object ({{this}}) so updating it is not our responsibility.\n        if (normalized.path !== '') {\n          view.registerObserver(normalized.root, normalized.path, observer);\n        }\n      } else {\n        // The object is not observable, so just render it out and\n        // be done with it.\n        output = handlebarsGetEscaped(currentContext, property, options);\n        data.buffer.push(output);\n      }\n    }\n\n    function shouldDisplayIfHelperContent(result) {\n      var truthy = result && get(result, 'isTruthy');\n      if (typeof truthy === 'boolean') { return truthy; }\n\n      if (isArray(result)) {\n        return get(result, 'length') !== 0;\n      } else {\n        return !!result;\n      }\n    }\n\n    /**\n      '_triageMustache' is used internally select between a binding, helper, or component for\n      the given context. Until this point, it would be hard to determine if the\n      mustache is a property reference or a regular helper reference. This triage\n      helper resolves that.\n\n      This would not be typically invoked by directly.\n\n      @private\n      @method _triageMustache\n      @for Ember.Handlebars.helpers\n      @param {String} property Property/helperID to triage\n      @param {Object} options hash of template/rendering options\n      @return {String} HTML string\n    */\n    function _triageMustacheHelper(property, options) {\n      Ember.assert(\"You cannot pass more than one argument to the _triageMustache helper\", arguments.length <= 2);\n\n      var helper = EmberHandlebars.resolveHelper(options.data.view.container, property);\n      if (helper) {\n        return helper.call(this, options);\n      }\n\n      return helpers.bind.call(this, property, options);\n    }\n\n    var ISNT_HELPER_CACHE = new Cache(1000, function(key) {\n      return key.indexOf('-') === -1;\n    });\n    __exports__.ISNT_HELPER_CACHE = ISNT_HELPER_CACHE;\n    /**\n      Used to lookup/resolve handlebars helpers. The lookup order is:\n\n      * Look for a registered helper\n      * If a dash exists in the name:\n        * Look for a helper registed in the container\n        * Use Ember.ComponentLookup to find an Ember.Component that resolves\n          to the given name\n\n      @private\n      @method resolveHelper\n      @param {Container} container\n      @param {String} name the name of the helper to lookup\n      @return {Handlebars Helper}\n    */\n    function resolveHelper(container, name) {\n      if (helpers[name]) {\n        return helpers[name];\n      }\n\n      if (!container || ISNT_HELPER_CACHE.get(name)) {\n        return;\n      }\n\n      var helper = container.lookup('helper:' + name);\n      if (!helper) {\n        var componentLookup = container.lookup('component-lookup:main');\n        Ember.assert(\"Could not find 'component-lookup:main' on the provided container, which is necessary for performing component lookups\", componentLookup);\n\n        var Component = componentLookup.lookupFactory(name, container);\n        if (Component) {\n          helper = EmberHandlebars.makeViewHelper(Component);\n          container.register('helper:' + name, helper);\n        }\n      }\n      return helper;\n    }\n\n\n    /**\n      `bind` can be used to display a value, then update that value if it\n      changes. For example, if you wanted to print the `title` property of\n      `content`:\n\n      ```handlebars\n      {{bind \"content.title\"}}\n      ```\n\n      This will return the `title` property as a string, then create a new observer\n      at the specified path. If it changes, it will update the value in DOM. Note\n      that if you need to support IE7 and IE8 you must modify the model objects\n      properties using `Ember.get()` and `Ember.set()` for this to work as it\n      relies on Ember's KVO system. For all other browsers this will be handled for\n      you automatically.\n\n      @private\n      @method bind\n      @for Ember.Handlebars.helpers\n      @param {String} property Property to bind\n      @param {Function} fn Context to provide for rendering\n      @return {String} HTML string\n    */\n    function bindHelper(property, options) {\n      Ember.assert(\"You cannot pass more than one argument to the bind helper\", arguments.length <= 2);\n\n      var context = (options.contexts && options.contexts.length) ? options.contexts[0] : this;\n\n      if (!options.fn) {\n        return simpleBind(context, property, options);\n      }\n\n      options.helperName = 'bind';\n\n      return bind.call(context, property, options, false, exists);\n    }\n\n    /**\n      Use the `boundIf` helper to create a conditional that re-evaluates\n      whenever the truthiness of the bound value changes.\n\n      ```handlebars\n      {{#boundIf \"content.shouldDisplayTitle\"}}\n        {{content.title}}\n      {{/boundIf}}\n      ```\n\n      @private\n      @method boundIf\n      @for Ember.Handlebars.helpers\n      @param {String} property Property to bind\n      @param {Function} fn Context to provide for rendering\n      @return {String} HTML string\n    */\n    function boundIfHelper(property, fn) {\n      var context = (fn.contexts && fn.contexts.length) ? fn.contexts[0] : this;\n\n      fn.helperName = fn.helperName || 'boundIf';\n\n      return bind.call(context, property, fn, true, shouldDisplayIfHelperContent, shouldDisplayIfHelperContent, ['isTruthy', 'length']);\n    }\n\n    /**\n      @private\n\n      Use the `unboundIf` helper to create a conditional that evaluates once.\n\n      ```handlebars\n      {{#unboundIf \"content.shouldDisplayTitle\"}}\n        {{content.title}}\n      {{/unboundIf}}\n      ```\n\n      @method unboundIf\n      @for Ember.Handlebars.helpers\n      @param {String} property Property to bind\n      @param {Function} fn Context to provide for rendering\n      @return {String} HTML string\n      @since 1.4.0\n    */\n    function unboundIfHelper(property, fn) {\n      var context = (fn.contexts && fn.contexts.length) ? fn.contexts[0] : this;\n      var data = fn.data;\n      var template = fn.fn;\n      var inverse = fn.inverse;\n      var normalized, propertyValue, result;\n\n      normalized = normalizePath(context, property, data);\n      propertyValue = handlebarsGet(context, property, fn);\n\n      if (!shouldDisplayIfHelperContent(propertyValue)) {\n        template = inverse;\n      }\n\n      template(context, { data: data });\n    }\n\n    /**\n      Use the `{{with}}` helper when you want to scope context. Take the following code as an example:\n\n      ```handlebars\n      <h5>{{user.name}}</h5>\n\n      <div class=\"role\">\n        <h6>{{user.role.label}}</h6>\n        <span class=\"role-id\">{{user.role.id}}</span>\n\n        <p class=\"role-desc\">{{user.role.description}}</p>\n      </div>\n      ```\n\n      `{{with}}` can be our best friend in these cases,\n      instead of writing `user.role.*` over and over, we use `{{#with user.role}}`.\n      Now the context within the `{{#with}} .. {{/with}}` block is `user.role` so you can do the following:\n\n      ```handlebars\n      <h5>{{user.name}}</h5>\n\n      <div class=\"role\">\n        {{#with user.role}}\n          <h6>{{label}}</h6>\n          <span class=\"role-id\">{{id}}</span>\n\n          <p class=\"role-desc\">{{description}}</p>\n        {{/with}}\n      </div>\n      ```\n\n      ### `as` operator\n\n      This operator aliases the scope to a new name. It's helpful for semantic clarity and to retain\n      default scope or to reference from another `{{with}}` block.\n\n      ```handlebars\n      // posts might not be\n      {{#with user.posts as blogPosts}}\n        <div class=\"notice\">\n          There are {{blogPosts.length}} blog posts written by {{user.name}}.\n        </div>\n\n        {{#each post in blogPosts}}\n          <li>{{post.title}}</li>\n        {{/each}}\n      {{/with}}\n      ```\n\n      Without the `as` operator, it would be impossible to reference `user.name` in the example above.\n\n      NOTE: The alias should not reuse a name from the bound property path.\n      For example: `{{#with foo.bar as foo}}` is not supported because it attempts to alias using\n      the first part of the property path, `foo`. Instead, use `{{#with foo.bar as baz}}`.\n\n      ### `controller` option\n\n      Adding `controller='something'` instructs the `{{with}}` helper to create and use an instance of\n      the specified controller with the new context as its content.\n\n      This is very similar to using an `itemController` option with the `{{each}}` helper.\n\n      ```handlebars\n      {{#with users.posts controller='userBlogPosts'}}\n        {{!- The current context is wrapped in our controller instance }}\n      {{/with}}\n      ```\n\n      In the above example, the template provided to the `{{with}}` block is now wrapped in the\n      `userBlogPost` controller, which provides a very elegant way to decorate the context with custom\n      functions/properties.\n\n      @method with\n      @for Ember.Handlebars.helpers\n      @param {Function} context\n      @param {Hash} options\n      @return {String} HTML string\n    */\n    function withHelper(context, options) {\n      var bindContext, preserveContext, controller;\n      var helperName = 'with';\n\n      if (arguments.length === 4) {\n        var keywordName, path, rootPath, normalized, contextPath;\n\n        Ember.assert(\"If you pass more than one argument to the with helper, it must be in the form #with foo as bar\", arguments[1] === \"as\");\n        options = arguments[3];\n        keywordName = arguments[2];\n        path = arguments[0];\n\n        if (path) {\n          helperName += ' ' + path + ' as ' + keywordName;\n        }\n\n        Ember.assert(\"You must pass a block to the with helper\", options.fn && options.fn !== Handlebars.VM.noop);\n\n        var localizedOptions = o_create(options);\n        localizedOptions.data = o_create(options.data);\n        localizedOptions.data.keywords = o_create(options.data.keywords || {});\n\n        if (isGlobalPath(path)) {\n          contextPath = path;\n        } else {\n          normalized = normalizePath(this, path, options.data);\n          path = normalized.path;\n          rootPath = normalized.root;\n\n          // This is a workaround for the fact that you cannot bind separate objects\n          // together. When we implement that functionality, we should use it here.\n          var contextKey = jQuery.expando + guidFor(rootPath);\n          localizedOptions.data.keywords[contextKey] = rootPath;\n          // if the path is '' (\"this\"), just bind directly to the current context\n          contextPath = path ? contextKey + '.' + path : contextKey;\n        }\n\n        localizedOptions.hash.keywordName = keywordName;\n        localizedOptions.hash.keywordPath = contextPath;\n\n        bindContext = this;\n        context = contextPath;\n        options = localizedOptions;\n        preserveContext = true;\n      } else {\n        Ember.assert(\"You must pass exactly one argument to the with helper\", arguments.length === 2);\n        Ember.assert(\"You must pass a block to the with helper\", options.fn && options.fn !== Handlebars.VM.noop);\n\n        helperName += ' ' + context;\n        bindContext = options.contexts[0];\n        preserveContext = false;\n      }\n\n      options.helperName = helperName;\n      options.isWithHelper = true;\n\n      return bind.call(bindContext, context, options, preserveContext, exists);\n    }\n    /**\n      See [boundIf](/api/classes/Ember.Handlebars.helpers.html#method_boundIf)\n      and [unboundIf](/api/classes/Ember.Handlebars.helpers.html#method_unboundIf)\n\n      @method if\n      @for Ember.Handlebars.helpers\n      @param {Function} context\n      @param {Hash} options\n      @return {String} HTML string\n    */\n    function ifHelper(context, options) {\n      Ember.assert(\"You must pass exactly one argument to the if helper\", arguments.length === 2);\n      Ember.assert(\"You must pass a block to the if helper\", options.fn && options.fn !== Handlebars.VM.noop);\n\n      options.helperName = options.helperName || ('if ' + context);\n\n      if (options.data.isUnbound) {\n        return helpers.unboundIf.call(options.contexts[0], context, options);\n      } else {\n        return helpers.boundIf.call(options.contexts[0], context, options);\n      }\n    }\n\n    /**\n      @method unless\n      @for Ember.Handlebars.helpers\n      @param {Function} context\n      @param {Hash} options\n      @return {String} HTML string\n    */\n    function unlessHelper(context, options) {\n      Ember.assert(\"You must pass exactly one argument to the unless helper\", arguments.length === 2);\n      Ember.assert(\"You must pass a block to the unless helper\", options.fn && options.fn !== Handlebars.VM.noop);\n\n      var fn = options.fn;\n      var inverse = options.inverse;\n      var helperName = 'unless';\n\n      if (context) {\n        helperName += ' ' + context;\n      }\n\n      options.fn = inverse;\n      options.inverse = fn;\n\n      options.helperName = options.helperName || helperName;\n\n      if (options.data.isUnbound) {\n        return helpers.unboundIf.call(options.contexts[0], context, options);\n      } else {\n        return helpers.boundIf.call(options.contexts[0], context, options);\n      }\n    }\n\n    /**\n      `bind-attr` allows you to create a binding between DOM element attributes and\n      Ember objects. For example:\n\n      ```handlebars\n      <img {{bind-attr src=\"imageUrl\" alt=\"imageTitle\"}}>\n      ```\n\n      The above handlebars template will fill the `<img>`'s `src` attribute with\n      the value of the property referenced with `\"imageUrl\"` and its `alt`\n      attribute with the value of the property referenced with `\"imageTitle\"`.\n\n      If the rendering context of this template is the following object:\n\n      ```javascript\n      {\n        imageUrl: 'http://lolcats.info/haz-a-funny',\n        imageTitle: 'A humorous image of a cat'\n      }\n      ```\n\n      The resulting HTML output will be:\n\n      ```html\n      <img src=\"http://lolcats.info/haz-a-funny\" alt=\"A humorous image of a cat\">\n      ```\n\n      `bind-attr` cannot redeclare existing DOM element attributes. The use of `src`\n      in the following `bind-attr` example will be ignored and the hard coded value\n      of `src=\"/failwhale.gif\"` will take precedence:\n\n      ```handlebars\n      <img src=\"/failwhale.gif\" {{bind-attr src=\"imageUrl\" alt=\"imageTitle\"}}>\n      ```\n\n      ### `bind-attr` and the `class` attribute\n\n      `bind-attr` supports a special syntax for handling a number of cases unique\n      to the `class` DOM element attribute. The `class` attribute combines\n      multiple discrete values into a single attribute as a space-delimited\n      list of strings. Each string can be:\n\n      * a string return value of an object's property.\n      * a boolean return value of an object's property\n      * a hard-coded value\n\n      A string return value works identically to other uses of `bind-attr`. The\n      return value of the property will become the value of the attribute. For\n      example, the following view and template:\n\n      ```javascript\n        AView = View.extend({\n          someProperty: function() {\n            return \"aValue\";\n          }.property()\n        })\n      ```\n\n      ```handlebars\n      <img {{bind-attr class=\"view.someProperty}}>\n      ```\n\n      Result in the following rendered output:\n\n      ```html\n      <img class=\"aValue\">\n      ```\n\n      A boolean return value will insert a specified class name if the property\n      returns `true` and remove the class name if the property returns `false`.\n\n      A class name is provided via the syntax\n      `somePropertyName:class-name-if-true`.\n\n      ```javascript\n      AView = View.extend({\n        someBool: true\n      })\n      ```\n\n      ```handlebars\n      <img {{bind-attr class=\"view.someBool:class-name-if-true\"}}>\n      ```\n\n      Result in the following rendered output:\n\n      ```html\n      <img class=\"class-name-if-true\">\n      ```\n\n      An additional section of the binding can be provided if you want to\n      replace the existing class instead of removing it when the boolean\n      value changes:\n\n      ```handlebars\n      <img {{bind-attr class=\"view.someBool:class-name-if-true:class-name-if-false\"}}>\n      ```\n\n      A hard-coded value can be used by prepending `:` to the desired\n      class name: `:class-name-to-always-apply`.\n\n      ```handlebars\n      <img {{bind-attr class=\":class-name-to-always-apply\"}}>\n      ```\n\n      Results in the following rendered output:\n\n      ```html\n      <img class=\"class-name-to-always-apply\">\n      ```\n\n      All three strategies - string return value, boolean return value, and\n      hard-coded value – can be combined in a single declaration:\n\n      ```handlebars\n      <img {{bind-attr class=\":class-name-to-always-apply view.someBool:class-name-if-true view.someProperty\"}}>\n      ```\n\n      @method bind-attr\n      @for Ember.Handlebars.helpers\n      @param {Hash} options\n      @return {String} HTML string\n    */\n    function bindAttrHelper(options) {\n      var attrs = options.hash;\n\n      Ember.assert(\"You must specify at least one hash argument to bind-attr\", !!keys(attrs).length);\n\n      var view = options.data.view;\n      var ret = [];\n\n      // we relied on the behavior of calling without\n      // context to mean this === window, but when running\n      // \"use strict\", it's possible for this to === undefined;\n      var ctx = this || window;\n\n      // Generate a unique id for this element. This will be added as a\n      // data attribute to the element so it can be looked up when\n      // the bound property changes.\n      var dataId = uuid();\n\n      // Handle classes differently, as we can bind multiple classes\n      var classBindings = attrs['class'];\n      if (classBindings != null) {\n        var classResults = bindClasses(ctx, classBindings, view, dataId, options);\n\n        ret.push('class=\"' + Handlebars.Utils.escapeExpression(classResults.join(' ')) + '\"');\n        delete attrs['class'];\n      }\n\n      var attrKeys = keys(attrs);\n\n      // For each attribute passed, create an observer and emit the\n      // current value of the property as an attribute.\n      forEach.call(attrKeys, function(attr) {\n        var path = attrs[attr];\n        var normalized;\n\n        Ember.assert(fmt(\"You must provide an expression as the value of bound attribute. You specified: %@=%@\", [attr, path]), typeof path === 'string');\n\n        normalized = normalizePath(ctx, path, options.data);\n\n        var value = (path === 'this') ? normalized.root : handlebarsGet(ctx, path, options);\n        var type = typeOf(value);\n\n        Ember.assert(fmt(\"Attributes must be numbers, strings or booleans, not %@\", [value]), value === null || value === undefined || type === 'number' || type === 'string' || type === 'boolean');\n\n        var observer;\n\n        observer = function observer() {\n          var result = handlebarsGet(ctx, path, options);\n\n          Ember.assert(fmt(\"Attributes must be numbers, strings or booleans, not %@\", [result]),\n                       result === null || result === undefined || typeof result === 'number' ||\n                         typeof result === 'string' || typeof result === 'boolean');\n\n          var elem = view.$(\"[data-bindattr-\" + dataId + \"='\" + dataId + \"']\");\n\n          // If we aren't able to find the element, it means the element\n          // to which we were bound has been removed from the view.\n          // In that case, we can assume the template has been re-rendered\n          // and we need to clean up the observer.\n          if (!elem || elem.length === 0) {\n            removeObserver(normalized.root, normalized.path, observer);\n            return;\n          }\n\n          View.applyAttributeBindings(elem, attr, result);\n        };\n\n        // Add an observer to the view for when the property changes.\n        // When the observer fires, find the element using the\n        // unique data id and update the attribute to the new value.\n        // Note: don't add observer when path is 'this' or path\n        // is whole keyword e.g. {{#each x in list}} ... {{bind-attr attr=\"x\"}}\n        if (path !== 'this' && !(normalized.isKeyword && normalized.path === '' )) {\n          view.registerObserver(normalized.root, normalized.path, observer);\n        }\n\n        // if this changes, also change the logic in ember-views/lib/views/view.js\n        if ((type === 'string' || (type === 'number' && !isNaN(value)))) {\n          ret.push(attr + '=\"' + Handlebars.Utils.escapeExpression(value) + '\"');\n        } else if (value && type === 'boolean') {\n          // The developer controls the attr name, so it should always be safe\n          ret.push(attr + '=\"' + attr + '\"');\n        }\n      }, this);\n\n      // Add the unique identifier\n      // NOTE: We use all lower-case since Firefox has problems with mixed case in SVG\n      ret.push('data-bindattr-' + dataId + '=\"' + dataId + '\"');\n      return new SafeString(ret.join(' '));\n    }\n\n    /**\n      See `bind-attr`\n\n      @method bindAttr\n      @for Ember.Handlebars.helpers\n      @deprecated\n      @param {Function} context\n      @param {Hash} options\n      @return {String} HTML string\n    */\n    function bindAttrHelperDeprecated() {\n      Ember.warn(\"The 'bindAttr' view helper is deprecated in favor of 'bind-attr'\");\n      return helpers['bind-attr'].apply(this, arguments);\n    }\n\n    /**\n      Helper that, given a space-separated string of property paths and a context,\n      returns an array of class names. Calling this method also has the side\n      effect of setting up observers at those property paths, such that if they\n      change, the correct class name will be reapplied to the DOM element.\n\n      For example, if you pass the string \"fooBar\", it will first look up the\n      \"fooBar\" value of the context. If that value is true, it will add the\n      \"foo-bar\" class to the current element (i.e., the dasherized form of\n      \"fooBar\"). If the value is a string, it will add that string as the class.\n      Otherwise, it will not add any new class name.\n\n      @private\n      @method bindClasses\n      @for Ember.Handlebars\n      @param {Ember.Object} context The context from which to lookup properties\n      @param {String} classBindings A string, space-separated, of class bindings\n        to use\n      @param {View} view The view in which observers should look for the\n        element to update\n      @param {Srting} bindAttrId Optional bindAttr id used to lookup elements\n      @return {Array} An array of class names to add\n    */\n    function bindClasses(context, classBindings, view, bindAttrId, options) {\n      var ret = [];\n      var newClass, value, elem;\n\n      // Helper method to retrieve the property from the context and\n      // determine which class string to return, based on whether it is\n      // a Boolean or not.\n      var classStringForPath = function(root, parsedPath, options) {\n        var val;\n        var path = parsedPath.path;\n\n        if (path === 'this') {\n          val = root;\n        } else if (path === '') {\n          val = true;\n        } else {\n          val = handlebarsGet(root, path, options);\n        }\n\n        return View._classStringForValue(path, val, parsedPath.className, parsedPath.falsyClassName);\n      };\n\n      // For each property passed, loop through and setup\n      // an observer.\n      forEach.call(classBindings.split(' '), function(binding) {\n\n        // Variable in which the old class value is saved. The observer function\n        // closes over this variable, so it knows which string to remove when\n        // the property changes.\n        var oldClass;\n        var observer;\n        var parsedPath = View._parsePropertyPath(binding);\n        var path = parsedPath.path;\n        var pathRoot = context;\n        var normalized;\n\n        if (path !== '' && path !== 'this') {\n          normalized = normalizePath(context, path, options.data);\n\n          pathRoot = normalized.root;\n          path = normalized.path;\n        }\n\n        // Set up an observer on the context. If the property changes, toggle the\n        // class name.\n        observer = function() {\n          // Get the current value of the property\n          newClass = classStringForPath(context, parsedPath, options);\n          elem = bindAttrId ? view.$(\"[data-bindattr-\" + bindAttrId + \"='\" + bindAttrId + \"']\") : view.$();\n\n          // If we can't find the element anymore, a parent template has been\n          // re-rendered and we've been nuked. Remove the observer.\n          if (!elem || elem.length === 0) {\n            removeObserver(pathRoot, path, observer);\n          } else {\n            // If we had previously added a class to the element, remove it.\n            if (oldClass) {\n              elem.removeClass(oldClass);\n            }\n\n            // If necessary, add a new class. Make sure we keep track of it so\n            // it can be removed in the future.\n            if (newClass) {\n              elem.addClass(newClass);\n              oldClass = newClass;\n            } else {\n              oldClass = null;\n            }\n          }\n        };\n\n        if (path !== '' && path !== 'this') {\n          view.registerObserver(pathRoot, path, observer);\n        }\n\n        // We've already setup the observer; now we just need to figure out the\n        // correct behavior right now on the first pass through.\n        value = classStringForPath(context, parsedPath, options);\n\n        if (value) {\n          ret.push(value);\n\n          // Make sure we save the current value so that it can be removed if the\n          // observer fires.\n          oldClass = value;\n        }\n      });\n\n      return ret;\n    }\n\n    __exports__.bind = bind;\n    __exports__._triageMustacheHelper = _triageMustacheHelper;\n    __exports__.resolveHelper = resolveHelper;\n    __exports__.bindHelper = bindHelper;\n    __exports__.boundIfHelper = boundIfHelper;\n    __exports__.unboundIfHelper = unboundIfHelper;\n    __exports__.withHelper = withHelper;\n    __exports__.ifHelper = ifHelper;\n    __exports__.unlessHelper = unlessHelper;\n    __exports__.bindAttrHelper = bindAttrHelper;\n    __exports__.bindAttrHelperDeprecated = bindAttrHelperDeprecated;\n    __exports__.bindClasses = bindClasses;\n  });\nenifed(\"ember-handlebars/helpers/collection\",\n  [\"ember-metal/core\",\"ember-metal/utils\",\"ember-handlebars-compiler\",\"ember-runtime/system/string\",\"ember-metal/property_get\",\"ember-handlebars/ext\",\"ember-handlebars/helpers/view\",\"ember-metal/computed\",\"ember-views/views/collection_view\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert, Ember.deprecate\n    var inspect = __dependency2__.inspect;\n\n    // var emberAssert = Ember.assert;\n        // emberDeprecate = Ember.deprecate;\n\n    var EmberHandlebars = __dependency3__[\"default\"];\n    var helpers = EmberHandlebars.helpers;\n\n    var fmt = __dependency4__.fmt;\n    var get = __dependency5__.get;\n    var handlebarsGet = __dependency6__.handlebarsGet;\n    var handlebarsGetView = __dependency6__.handlebarsGetView;\n    var ViewHelper = __dependency7__.ViewHelper;\n    var computed = __dependency8__.computed;\n    var CollectionView = __dependency9__[\"default\"];\n\n    var alias = computed.alias;\n    /**\n      `{{collection}}` is a `Ember.Handlebars` helper for adding instances of\n      `Ember.CollectionView` to a template. See [Ember.CollectionView](/api/classes/Ember.CollectionView.html)\n       for additional information on how a `CollectionView` functions.\n\n      `{{collection}}`'s primary use is as a block helper with a `contentBinding`\n      option pointing towards an `Ember.Array`-compatible object. An `Ember.View`\n      instance will be created for each item in its `content` property. Each view\n      will have its own `content` property set to the appropriate item in the\n      collection.\n\n      The provided block will be applied as the template for each item's view.\n\n      Given an empty `<body>` the following template:\n\n      ```handlebars\n      {{! application.hbs }}\n      {{#collection content=model}}\n        Hi {{view.content.name}}\n      {{/collection}}\n      ```\n\n      And the following application code\n\n      ```javascript\n      App = Ember.Application.create();\n      App.ApplicationRoute = Ember.Route.extend({\n        model: function(){\n          return [{name: 'Yehuda'},{name: 'Tom'},{name: 'Peter'}];\n        }\n      });\n      ```\n\n      The following HTML will result:\n\n      ```html\n      <div class=\"ember-view\">\n        <div class=\"ember-view\">Hi Yehuda</div>\n        <div class=\"ember-view\">Hi Tom</div>\n        <div class=\"ember-view\">Hi Peter</div>\n      </div>\n      ```\n\n      ### Non-block version of collection\n\n      If you provide an `itemViewClass` option that has its own `template` you may\n      omit the block.\n\n      The following template:\n\n      ```handlebars\n      {{! application.hbs }}\n      {{collection content=model itemViewClass=\"an-item\"}}\n      ```\n\n      And application code\n\n      ```javascript\n      App = Ember.Application.create();\n      App.ApplicationRoute = Ember.Route.extend({\n        model: function(){\n          return [{name: 'Yehuda'},{name: 'Tom'},{name: 'Peter'}];\n        }\n      });\n\n      App.AnItemView = Ember.View.extend({\n        template: Ember.Handlebars.compile(\"Greetings {{view.content.name}}\")\n      });\n      ```\n\n      Will result in the HTML structure below\n\n      ```html\n      <div class=\"ember-view\">\n        <div class=\"ember-view\">Greetings Yehuda</div>\n        <div class=\"ember-view\">Greetings Tom</div>\n        <div class=\"ember-view\">Greetings Peter</div>\n      </div>\n      ```\n\n      ### Specifying a CollectionView subclass\n\n      By default the `{{collection}}` helper will create an instance of\n      `Ember.CollectionView`. You can supply a `Ember.CollectionView` subclass to\n      the helper by passing it as the first argument:\n\n      ```handlebars\n      {{#collection \"my-custom-collection\" content=model}}\n        Hi {{view.content.name}}\n      {{/collection}}\n      ```\n\n      This example would look for the class `App.MyCustomCollection`.\n\n      ### Forwarded `item.*`-named Options\n\n      As with the `{{view}}`, helper options passed to the `{{collection}}` will be\n      set on the resulting `Ember.CollectionView` as properties. Additionally,\n      options prefixed with `item` will be applied to the views rendered for each\n      item (note the camelcasing):\n\n      ```handlebars\n      {{#collection content=model\n                    itemTagName=\"p\"\n                    itemClassNames=\"greeting\"}}\n        Howdy {{view.content.name}}\n      {{/collection}}\n      ```\n\n      Will result in the following HTML structure:\n\n      ```html\n      <div class=\"ember-view\">\n        <p class=\"ember-view greeting\">Howdy Yehuda</p>\n        <p class=\"ember-view greeting\">Howdy Tom</p>\n        <p class=\"ember-view greeting\">Howdy Peter</p>\n      </div>\n      ```\n\n      @method collection\n      @for Ember.Handlebars.helpers\n      @param {String} path\n      @param {Hash} options\n      @return {String} HTML string\n      @deprecated Use `{{each}}` helper instead.\n    */\n    function collectionHelper(path, options) {\n      Ember.deprecate(\"Using the {{collection}} helper without specifying a class has been deprecated as the {{each}} helper now supports the same functionality.\", path !== 'collection');\n\n      // If no path is provided, treat path param as options.\n      if (path && path.data && path.data.isRenderData) {\n        options = path;\n        path = undefined;\n        Ember.assert(\"You cannot pass more than one argument to the collection helper\", arguments.length === 1);\n      } else {\n        Ember.assert(\"You cannot pass more than one argument to the collection helper\", arguments.length === 2);\n      }\n\n      var fn        = options.fn,\n          data      = options.data,\n          inverse   = options.inverse,\n          view      = options.data.view,\n          // This should be deterministic, and should probably come from a\n          // parent view and not the controller.\n          container = (view.controller && view.controller.container ? view.controller.container : view.container);\n\n      // If passed a path string, convert that into an object.\n      // Otherwise, just default to the standard class.\n      var collectionClass;\n      if (path) {\n        collectionClass = handlebarsGetView(this, path, container, options);\n        Ember.assert(fmt(\"%@ #collection: Could not find collection class %@\", [data.view, path]), !!collectionClass);\n      }\n      else {\n        collectionClass = CollectionView;\n      }\n\n      var hash = options.hash;\n      var itemHash = {};\n      var match;\n\n      // Extract item view class if provided else default to the standard class\n      var collectionPrototype = collectionClass.proto();\n      var itemViewClass;\n\n      if (hash.itemView) {\n        itemViewClass = handlebarsGetView(this, hash.itemView, container, options);\n      } else if (hash.itemViewClass) {\n        itemViewClass = handlebarsGetView(collectionPrototype, hash.itemViewClass, container, options);\n      } else {\n        itemViewClass = handlebarsGetView(collectionPrototype, collectionPrototype.itemViewClass, container, options);\n      }\n\n      Ember.assert(fmt(\"%@ #collection: Could not find itemViewClass %@\", [data.view, itemViewClass]), !!itemViewClass);\n\n      delete hash.itemViewClass;\n      delete hash.itemView;\n\n      // Go through options passed to the {{collection}} helper and extract options\n      // that configure item views instead of the collection itself.\n      for (var prop in hash) {\n        if (hash.hasOwnProperty(prop)) {\n          match = prop.match(/^item(.)(.*)$/);\n\n          if (match && prop !== 'itemController') {\n            // Convert itemShouldFoo -> shouldFoo\n            itemHash[match[1].toLowerCase() + match[2]] = hash[prop];\n            // Delete from hash as this will end up getting passed to the\n            // {{view}} helper method.\n            delete hash[prop];\n          }\n        }\n      }\n\n      if (fn) {\n        itemHash.template = fn;\n        delete options.fn;\n      }\n\n      var emptyViewClass;\n      if (inverse && inverse !== EmberHandlebars.VM.noop) {\n        emptyViewClass = get(collectionPrototype, 'emptyViewClass');\n        emptyViewClass = emptyViewClass.extend({\n              template: inverse,\n              tagName: itemHash.tagName\n        });\n      } else if (hash.emptyViewClass) {\n        emptyViewClass = handlebarsGetView(this, hash.emptyViewClass, container, options);\n      }\n      if (emptyViewClass) { hash.emptyView = emptyViewClass; }\n\n      if (hash.keyword) {\n        itemHash._context = this;\n      } else {\n        itemHash._context = alias('content');\n      }\n\n      var viewOptions = ViewHelper.propertiesFromHTMLOptions({ data: data, hash: itemHash }, this);\n      hash.itemViewClass = itemViewClass.extend(viewOptions);\n\n      options.helperName = options.helperName || 'collection';\n\n      return helpers.view.call(this, collectionClass, options);\n    }\n\n    __exports__[\"default\"] = collectionHelper;\n  });\nenifed(\"ember-handlebars/helpers/debug\",\n  [\"ember-metal/core\",\"ember-metal/utils\",\"ember-metal/logger\",\"ember-metal/property_get\",\"ember-handlebars/ext\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    /*jshint debug:true*/\n\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n    var Ember = __dependency1__[\"default\"];\n    // Ember.FEATURES,\n    var inspect = __dependency2__.inspect;\n    var Logger = __dependency3__[\"default\"];\n\n    var get = __dependency4__.get;\n    var normalizePath = __dependency5__.normalizePath;\n    var handlebarsGet = __dependency5__.handlebarsGet;\n\n    var a_slice = [].slice;\n\n    /**\n      `log` allows you to output the value of variables in the current rendering\n      context. `log` also accepts primitive types such as strings or numbers.\n\n      ```handlebars\n      {{log \"myVariable:\" myVariable }}\n      ```\n\n      @method log\n      @for Ember.Handlebars.helpers\n      @param {String} property\n    */\n    function logHelper() {\n      var params = a_slice.call(arguments, 0, -1);\n      var options = arguments[arguments.length - 1];\n      var logger = Logger.log;\n      var values = [];\n      var allowPrimitives = true;\n\n      for (var i = 0; i < params.length; i++) {\n        var type = options.types[i];\n\n        if (type === 'ID' || !allowPrimitives) {\n          var context = (options.contexts && options.contexts[i]) || this;\n          var normalized = normalizePath(context, params[i], options.data);\n\n          if (normalized.path === 'this') {\n            values.push(normalized.root);\n          } else {\n            values.push(handlebarsGet(normalized.root, normalized.path, options));\n          }\n        } else {\n          values.push(params[i]);\n        }\n      }\n\n      logger.apply(logger, values);\n    }\n\n    /**\n      Execute the `debugger` statement in the current context.\n\n      ```handlebars\n      {{debugger}}\n      ```\n\n      Before invoking the `debugger` statement, there\n      are a few helpful variables defined in the\n      body of this helper that you can inspect while\n      debugging that describe how and where this\n      helper was invoked:\n\n      - templateContext: this is most likely a controller\n        from which this template looks up / displays properties\n      - typeOfTemplateContext: a string description of\n        what the templateContext is\n\n      For example, if you're wondering why a value `{{foo}}`\n      isn't rendering as expected within a template, you\n      could place a `{{debugger}}` statement, and when\n      the `debugger;` breakpoint is hit, you can inspect\n      `templateContext`, determine if it's the object you\n      expect, and/or evaluate expressions in the console\n      to perform property lookups on the `templateContext`:\n\n      ```\n        > templateContext.get('foo') // -> \"<value of {{foo}}>\"\n      ```\n\n      @method debugger\n      @for Ember.Handlebars.helpers\n      @param {String} property\n    */\n    function debuggerHelper(options) {\n\n      // These are helpful values you can inspect while debugging.\n      var templateContext = this;\n      var typeOfTemplateContext = inspect(templateContext);\n      Ember.Logger.info('Use `this` to access the context of the calling template.');\n\n      debugger;\n    }\n\n    __exports__.logHelper = logHelper;\n    __exports__.debuggerHelper = debuggerHelper;\n  });\nenifed(\"ember-handlebars/helpers/each\",\n  [\"ember-metal/core\",\"ember-handlebars-compiler\",\"ember-runtime/system/string\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-views/views/collection_view\",\"ember-metal/binding\",\"ember-runtime/mixins/controller\",\"ember-runtime/controllers/array_controller\",\"ember-runtime/mixins/array\",\"ember-runtime/copy\",\"ember-metal/run_loop\",\"ember-metal/events\",\"ember-handlebars/ext\",\"ember-metal/computed\",\"ember-metal/observer\",\"ember-handlebars/views/metamorph_view\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __dependency16__, __dependency17__, __exports__) {\n    \"use strict\";\n\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert;, Ember.K\n    var K = Ember.K;\n\n    var EmberHandlebars = __dependency2__[\"default\"];\n    var helpers = EmberHandlebars.helpers;\n\n    var fmt = __dependency3__.fmt;\n    var get = __dependency4__.get;\n    var set = __dependency5__.set;\n    var CollectionView = __dependency6__[\"default\"];\n    var Binding = __dependency7__.Binding;\n    var ControllerMixin = __dependency8__[\"default\"];\n    var ArrayController = __dependency9__[\"default\"];\n    var EmberArray = __dependency10__[\"default\"];\n    var copy = __dependency11__[\"default\"];\n    var run = __dependency12__[\"default\"];\n    var on = __dependency13__.on;\n    var handlebarsGet = __dependency14__.handlebarsGet;\n    var computed = __dependency15__.computed;\n\n    var addObserver = __dependency16__.addObserver;\n    var removeObserver = __dependency16__.removeObserver;\n    var addBeforeObserver = __dependency16__.addBeforeObserver;\n    var removeBeforeObserver = __dependency16__.removeBeforeObserver;\n\n    var _Metamorph = __dependency17__._Metamorph;\n    var _MetamorphView = __dependency17__._MetamorphView;\n\n    var EachView = CollectionView.extend(_Metamorph, {\n\n      init: function() {\n        var itemController = get(this, 'itemController');\n        var binding;\n\n        if (itemController) {\n          var controller = get(this, 'controller.container').lookupFactory('controller:array').create({\n            _isVirtual: true,\n            parentController: get(this, 'controller'),\n            itemController: itemController,\n            target: get(this, 'controller'),\n            _eachView: this\n          });\n\n          this.disableContentObservers(function() {\n            set(this, 'content', controller);\n            binding = new Binding('content', '_eachView.dataSource').oneWay();\n            binding.connect(controller);\n          });\n\n          set(this, '_arrayController', controller);\n        } else {\n          this.disableContentObservers(function() {\n            binding = new Binding('content', 'dataSource').oneWay();\n            binding.connect(this);\n          });\n        }\n\n        return this._super();\n      },\n\n      _assertArrayLike: function(content) {\n        Ember.assert(fmt(\"The value that #each loops over must be an Array. You \" +\n                         \"passed %@, but it should have been an ArrayController\",\n                         [content.constructor]),\n                         !ControllerMixin.detect(content) ||\n                           (content && content.isGenerated) ||\n                           content instanceof ArrayController);\n        Ember.assert(fmt(\"The value that #each loops over must be an Array. You passed %@\", [(ControllerMixin.detect(content) && content.get('model') !== undefined) ? fmt(\"'%@' (wrapped in %@)\", [content.get('model'), content]) : content]), EmberArray.detect(content));\n      },\n\n      disableContentObservers: function(callback) {\n        removeBeforeObserver(this, 'content', null, '_contentWillChange');\n        removeObserver(this, 'content', null, '_contentDidChange');\n\n        callback.call(this);\n\n        addBeforeObserver(this, 'content', null, '_contentWillChange');\n        addObserver(this, 'content', null, '_contentDidChange');\n      },\n\n      itemViewClass: _MetamorphView,\n      emptyViewClass: _MetamorphView,\n\n      createChildView: function(view, attrs) {\n        view = this._super(view, attrs);\n\n        // At the moment, if a container view subclass wants\n        // to insert keywords, it is responsible for cloning\n        // the keywords hash. This will be fixed momentarily.\n        var keyword = get(this, 'keyword');\n        var content = get(view, 'content');\n\n        if (keyword) {\n          var data = get(view, 'templateData');\n\n          data = copy(data);\n          data.keywords = view.cloneKeywords();\n          set(view, 'templateData', data);\n\n          // In this case, we do not bind, because the `content` of\n          // a #each item cannot change.\n          data.keywords[keyword] = content;\n        }\n\n        // If {{#each}} is looping over an array of controllers,\n        // point each child view at their respective controller.\n        if (content && content.isController) {\n          set(view, 'controller', content);\n        }\n\n        return view;\n      },\n\n      destroy: function() {\n        if (!this._super()) { return; }\n\n        var arrayController = get(this, '_arrayController');\n\n        if (arrayController) {\n          arrayController.destroy();\n        }\n\n        return this;\n      }\n    });\n\n    var GroupedEach = EmberHandlebars.GroupedEach = function(context, path, options) {\n      var self = this;\n      var normalized = EmberHandlebars.normalizePath(context, path, options.data);\n\n      this.context = context;\n      this.path = path;\n      this.options = options;\n      this.template = options.fn;\n      this.containingView = options.data.view;\n      this.normalizedRoot = normalized.root;\n      this.normalizedPath = normalized.path;\n      this.content = this.lookupContent();\n\n      this.addContentObservers();\n      this.addArrayObservers();\n\n      this.containingView.on('willClearRender', function() {\n        self.destroy();\n      });\n    };\n\n    GroupedEach.prototype = {\n      contentWillChange: function() {\n        this.removeArrayObservers();\n      },\n\n      contentDidChange: function() {\n        this.content = this.lookupContent();\n        this.addArrayObservers();\n        this.rerenderContainingView();\n      },\n\n      contentArrayWillChange: K,\n\n      contentArrayDidChange: function() {\n        this.rerenderContainingView();\n      },\n\n      lookupContent: function() {\n        return handlebarsGet(this.normalizedRoot, this.normalizedPath, this.options);\n      },\n\n      addArrayObservers: function() {\n        if (!this.content) { return; }\n\n        this.content.addArrayObserver(this, {\n          willChange: 'contentArrayWillChange',\n          didChange: 'contentArrayDidChange'\n        });\n      },\n\n      removeArrayObservers: function() {\n        if (!this.content) { return; }\n\n        this.content.removeArrayObserver(this, {\n          willChange: 'contentArrayWillChange',\n          didChange: 'contentArrayDidChange'\n        });\n      },\n\n      addContentObservers: function() {\n        addBeforeObserver(this.normalizedRoot, this.normalizedPath, this, this.contentWillChange);\n        addObserver(this.normalizedRoot, this.normalizedPath, this, this.contentDidChange);\n      },\n\n      removeContentObservers: function() {\n        removeBeforeObserver(this.normalizedRoot, this.normalizedPath, this.contentWillChange);\n        removeObserver(this.normalizedRoot, this.normalizedPath, this.contentDidChange);\n      },\n\n      render: function() {\n        if (!this.content) { return; }\n\n        var content = this.content;\n        var contentLength = get(content, 'length');\n        var options = this.options;\n        var data = options.data;\n        var template = this.template;\n\n        data.insideEach = true;\n        for (var i = 0; i < contentLength; i++) {\n          var context = content.objectAt(i);\n          options.data.keywords[options.hash.keyword] = context;\n          template(context, { data: data });\n        }\n      },\n\n      rerenderContainingView: function() {\n        var self = this;\n        run.scheduleOnce('render', this, function() {\n          // It's possible it's been destroyed after we enqueued a re-render call.\n          if (!self.destroyed) {\n            self.containingView.rerender();\n          }\n        });\n      },\n\n      destroy: function() {\n        this.removeContentObservers();\n        if (this.content) {\n          this.removeArrayObservers();\n        }\n        this.destroyed = true;\n      }\n    };\n\n    /**\n      The `{{#each}}` helper loops over elements in a collection. It is an extension\n      of the base Handlebars `{{#each}}` helper.\n\n      The default behavior of `{{#each}}` is to yield its inner block once for every\n      item in an array. Each yield will provide the item as the context of the block.\n\n      ```javascript\n      var developers = [{name: 'Yehuda'},{name: 'Tom'}, {name: 'Paul'}];\n      ```\n\n      ```handlebars\n      {{#each developers}}\n        {{name}}\n        {{! `this` is each developer }}\n      {{/each}}\n      ```\n\n      `{{#each}}` supports an alternative syntax with element naming. This preserves\n      context of the yielded block:\n\n      ```handlebars\n      {{#each person in developers}}\n        {{person.name}}\n        {{! `this` is whatever it was outside the #each }}\n      {{/each}}\n      ```\n\n      The same rules apply to arrays of primitives, but the items may need to be\n      references with `{{this}}`.\n\n      ```javascript\n      var developerNames = ['Yehuda', 'Tom', 'Paul']\n      ```\n\n      ```handlebars\n      {{#each developerNames}}\n        {{this}}\n      {{/each}}\n      ```\n\n      ### {{else}} condition\n\n      `{{#each}}` can have a matching `{{else}}`. The contents of this block will render\n      if the collection is empty.\n\n      ```\n      {{#each person in developers}}\n        {{person.name}}\n      {{else}}\n        <p>Sorry, nobody is available for this task.</p>\n      {{/each}}\n      ```\n\n      ### Specifying an alternative view for each item\n\n      `itemViewClass` can control which view will be used during the render of each\n      item's template.\n\n      The following template:\n\n      ```handlebars\n      <ul>\n      {{#each developers itemViewClass=\"person\"}}\n        {{name}}\n      {{/each}}\n      </ul>\n      ```\n\n      Will use the following view for each item\n\n      ```javascript\n      App.PersonView = Ember.View.extend({\n        tagName: 'li'\n      });\n      ```\n\n      Resulting in HTML output that looks like the following:\n\n      ```html\n      <ul>\n        <li class=\"ember-view\">Yehuda</li>\n        <li class=\"ember-view\">Tom</li>\n        <li class=\"ember-view\">Paul</li>\n      </ul>\n      ```\n\n      `itemViewClass` also enables a non-block form of `{{each}}`. The view\n      must {{#crossLink \"Ember.View/toc_templates\"}}provide its own template{{/crossLink}},\n      and then the block should be dropped. An example that outputs the same HTML\n      as the previous one:\n\n      ```javascript\n      App.PersonView = Ember.View.extend({\n        tagName: 'li',\n        template: '{{name}}'\n      });\n      ```\n\n      ```handlebars\n      <ul>\n        {{each developers itemViewClass=\"person\"}}\n      </ul>\n      ```\n\n      ### Specifying an alternative view for no items (else)\n\n      The `emptyViewClass` option provides the same flexibility to the `{{else}}`\n      case of the each helper.\n\n      ```javascript\n      App.NoPeopleView = Ember.View.extend({\n        tagName: 'li',\n        template: 'No person is available, sorry'\n      });\n      ```\n\n      ```handlebars\n      <ul>\n      {{#each developers emptyViewClass=\"no-people\"}}\n        <li>{{name}}</li>\n      {{/each}}\n      </ul>\n      ```\n\n      ### Wrapping each item in a controller\n\n      Controllers in Ember manage state and decorate data. In many cases,\n      providing a controller for each item in a list can be useful.\n      Specifically, an {{#crossLink \"Ember.ObjectController\"}}Ember.ObjectController{{/crossLink}}\n      should probably be used. Item controllers are passed the item they\n      will present as a `model` property, and an object controller will\n      proxy property lookups to `model` for us.\n\n      This allows state and decoration to be added to the controller\n      while any other property lookups are delegated to the model. An example:\n\n      ```javascript\n      App.RecruitController = Ember.ObjectController.extend({\n        isAvailableForHire: function() {\n          return !this.get('isEmployed') && this.get('isSeekingWork');\n        }.property('isEmployed', 'isSeekingWork')\n      })\n      ```\n\n      ```handlebars\n      {{#each person in developers itemController=\"recruit\"}}\n        {{person.name}} {{#if person.isAvailableForHire}}Hire me!{{/if}}\n      {{/each}}\n      ```\n\n      ### (Experimental) Grouped Each\n\n      If a list's membership often changes, but properties of items in that\n      group rarely change, a significant improvement in template rendering\n      time can be achieved by using the experimental [group helper](https://github.com/emberjs/group-helper).\n\n      ```handlebars\n      {{#group}}\n        {{#each people}}\n          {{firstName}} {{lastName}}\n        {{/each}}\n      {{/group}}\n      ```\n\n      When the membership of `people` changes, or when any property changes, the entire\n      `{{#group}}` block will be re-rendered.\n\n      An `{{#each}}` inside the `{{#group}}` helper can opt-out of the special group\n      behavior by passing the `groupedRows` option. For example:\n\n      ```handlebars\n      {{#group}}\n        {{#each dealers}}\n          {{! uses group's special behavior }}\n          {{firstName}} {{lastName}}\n        {{/each}}\n\n        {{#each car in cars groupedRows=true}}\n          {{! does not use group's special behavior }}\n          {{car.make}} {{car.model}} {{car.color}}\n        {{/each}}\n      {{/group}}\n      ```\n\n      Any change to the `dealers` collection will cause the entire group to be re-rendered.\n      Changes to the `cars` collection will be re-rendered individually, as they are with\n      normal `{{#each}}` usage.\n\n      `{{#group}}` is implemented with an `itemViewClass`, so specifying an `itemViewClass`\n      on an `{{#each}}` will also disable the special re-rendering behavior.\n\n      @method each\n      @for Ember.Handlebars.helpers\n      @param [name] {String} name for item (used with `in`)\n      @param [path] {String} path\n      @param [options] {Object} Handlebars key/value pairs of options\n      @param [options.itemViewClass] {String} a path to a view class used for each item\n      @param [options.emptyViewClass] {String} a path to a view class used for each item\n      @param [options.itemController] {String} name of a controller to be created for each item\n      @param [options.groupedRows] {boolean} enable normal item-by-item rendering when inside a `#group` helper\n    */\n    function eachHelper(path, options) {\n      var ctx;\n      var helperName = 'each';\n\n      if (arguments.length === 4) {\n        Ember.assert(\"If you pass more than one argument to the each helper, it must be in the form #each foo in bar\", arguments[1] === \"in\");\n\n        var keywordName = arguments[0];\n\n\n        options = arguments[3];\n        path = arguments[2];\n\n        helperName += ' ' + keywordName + ' in ' + path;\n\n        if (path === '') { path = \"this\"; }\n\n        options.hash.keyword = keywordName;\n\n      } else if (arguments.length === 1) {\n        options = path;\n        path = 'this';\n      } else {\n        helperName += ' ' + path;\n      }\n\n      options.hash.dataSourceBinding = path;\n      // Set up emptyView as a metamorph with no tag\n      //options.hash.emptyViewClass = Ember._MetamorphView;\n\n      // can't rely on this default behavior when use strict\n      ctx = this || window;\n\n      options.helperName = options.helperName || helperName;\n\n      if (options.data.insideGroup && !options.hash.groupedRows && !options.hash.itemViewClass) {\n        new GroupedEach(ctx, path, options).render();\n      } else {\n        return helpers.collection.call(ctx, EmberHandlebars.EachView, options);\n      }\n    }\n\n    __exports__.EachView = EachView;\n    __exports__.GroupedEach = GroupedEach;\n    __exports__.eachHelper = eachHelper;\n  });\nenifed(\"ember-handlebars/helpers/loc\",\n  [\"ember-runtime/system/string\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var loc = __dependency1__.loc;\n\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    /**\n      Calls [Ember.String.loc](/api/classes/Ember.String.html#method_loc) with the\n      provided string.\n\n      This is a convenient way to localize text within a template:\n\n      ```javascript\n      Ember.STRINGS = {\n        '_welcome_': 'Bonjour'\n      };\n      ```\n\n      ```handlebars\n      <div class='message'>\n        {{loc '_welcome_'}}\n      </div>\n      ```\n\n      ```html\n      <div class='message'>\n        Bonjour\n      </div>\n      ```\n\n      See [Ember.String.loc](/api/classes/Ember.String.html#method_loc) for how to\n      set up localized string references.\n\n      @method loc\n      @for Ember.Handlebars.helpers\n      @param {String} str The string to format\n      @see {Ember.String#loc}\n    */\n    __exports__[\"default\"] = loc;\n  });\nenifed(\"ember-handlebars/helpers/partial\",\n  [\"ember-metal/core\",\"ember-metal/is_none\",\"ember-handlebars/ext\",\"ember-handlebars/helpers/binding\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert\n    // var emberAssert = Ember.assert;\n\n    var isNone = __dependency2__.isNone;\n    var handlebarsGet = __dependency3__.handlebarsGet;\n    var bind = __dependency4__.bind;\n\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    /**\n      The `partial` helper renders another template without\n      changing the template context:\n\n      ```handlebars\n      {{foo}}\n      {{partial \"nav\"}}\n      ```\n\n      The above example template will render a template named\n      \"_nav\", which has the same context as the parent template\n      it's rendered into, so if the \"_nav\" template also referenced\n      `{{foo}}`, it would print the same thing as the `{{foo}}`\n      in the above example.\n\n      If a \"_nav\" template isn't found, the `partial` helper will\n      fall back to a template named \"nav\".\n\n      ## Bound template names\n\n      The parameter supplied to `partial` can also be a path\n      to a property containing a template name, e.g.:\n\n      ```handlebars\n      {{partial someTemplateName}}\n      ```\n\n      The above example will look up the value of `someTemplateName`\n      on the template context (e.g. a controller) and use that\n      value as the name of the template to render. If the resolved\n      value is falsy, nothing will be rendered. If `someTemplateName`\n      changes, the partial will be re-rendered using the new template\n      name.\n\n      ## Setting the partial's context with `with`\n\n      The `partial` helper can be used in conjunction with the `with`\n      helper to set a context that will be used by the partial:\n\n      ```handlebars\n      {{#with currentUser}}\n        {{partial \"user_info\"}}\n      {{/with}}\n      ```\n\n      @method partial\n      @for Ember.Handlebars.helpers\n      @param {String} partialName the name of the template to render minus the leading underscore\n    */\n\n    __exports__[\"default\"] = function partialHelper(name, options) {\n\n      var context = (options.contexts && options.contexts.length) ? options.contexts[0] : this;\n\n      options.helperName = options.helperName || 'partial';\n\n      if (options.types[0] === \"ID\") {\n        // Helper was passed a property path; we need to\n        // create a binding that will re-render whenever\n        // this property changes.\n        options.fn = function(context, fnOptions) {\n          var partialName = handlebarsGet(context, name, fnOptions);\n          renderPartial(context, partialName, fnOptions);\n        };\n\n        return bind.call(context, name, options, true, exists);\n      } else {\n        // Render the partial right into parent template.\n        renderPartial(context, name, options);\n      }\n    }\n\n    function exists(value) {\n      return !isNone(value);\n    }\n\n    function renderPartial(context, name, options) {\n      var nameParts = name.split(\"/\");\n      var lastPart = nameParts[nameParts.length - 1];\n\n      nameParts[nameParts.length - 1] = \"_\" + lastPart;\n\n      var view = options.data.view;\n      var underscoredName = nameParts.join(\"/\");\n      var template = view.templateForName(underscoredName);\n      var deprecatedTemplate = !template && view.templateForName(name);\n\n      Ember.assert(\"Unable to find partial with name '\"+name+\"'.\", template || deprecatedTemplate);\n\n      template = template || deprecatedTemplate;\n\n      template(context, { data: options.data });\n    }\n  });\nenifed(\"ember-handlebars/helpers/shared\",\n  [\"ember-handlebars/ext\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var handlebarsGet = __dependency1__.handlebarsGet;\n\n    __exports__[\"default\"] = function resolvePaths(options) {\n      var ret = [];\n      var contexts = options.contexts;\n      var roots = options.roots;\n      var data = options.data;\n\n      for (var i=0, l=contexts.length; i<l; i++) {\n        ret.push(handlebarsGet(roots[i], contexts[i], { data: data }));\n      }\n\n      return ret;\n    }\n  });\nenifed(\"ember-handlebars/helpers/template\",\n  [\"ember-metal/core\",\"ember-handlebars-compiler\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.deprecate;\n\n    var EmberHandlebars = __dependency2__[\"default\"];\n    var helpers = EmberHandlebars.helpers;\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    /**\n      @deprecated\n      @method template\n      @for Ember.Handlebars.helpers\n      @param {String} templateName the template to render\n    */\n    __exports__[\"default\"] = function templateHelper(name, options) {\n      Ember.deprecate(\"The `template` helper has been deprecated in favor of the `partial` helper. Please use `partial` instead, which will work the same way.\");\n\n      options.helperName = options.helperName || 'template';\n\n      return helpers.partial.apply(this, arguments);\n    }\n  });\nenifed(\"ember-handlebars/helpers/unbound\",\n  [\"ember-handlebars-compiler\",\"ember-handlebars/helpers/binding\",\"ember-handlebars/ext\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    /*globals Handlebars */\n\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    var EmberHandlebars = __dependency1__[\"default\"];\n    var helpers = EmberHandlebars.helpers;\n\n    var resolveHelper = __dependency2__.resolveHelper;\n    var handlebarsGet = __dependency3__.handlebarsGet;\n\n    var slice = [].slice;\n\n    /**\n      `unbound` allows you to output a property without binding. *Important:* The\n      output will not be updated if the property changes. Use with caution.\n\n      ```handlebars\n      <div>{{unbound somePropertyThatDoesntChange}}</div>\n      ```\n\n      `unbound` can also be used in conjunction with a bound helper to\n      render it in its unbound form:\n\n      ```handlebars\n      <div>{{unbound helperName somePropertyThatDoesntChange}}</div>\n      ```\n\n      @method unbound\n      @for Ember.Handlebars.helpers\n      @param {String} property\n      @return {String} HTML string\n    */\n    __exports__[\"default\"] = function unboundHelper(property, fn) {\n      var options = arguments[arguments.length - 1];\n      var container = options.data.view.container;\n      var helper, context, out, ctx;\n\n      ctx = this;\n      if (arguments.length > 2) {\n        // Unbound helper call.\n        options.data.isUnbound = true;\n        helper = resolveHelper(container, property) || helpers.helperMissing;\n        out = helper.apply(ctx, slice.call(arguments, 1));\n        delete options.data.isUnbound;\n        return out;\n      }\n\n      context = (fn.contexts && fn.contexts.length) ? fn.contexts[0] : ctx;\n      return handlebarsGet(context, property, fn);\n    }\n  });\nenifed(\"ember-handlebars/helpers/view\",\n  [\"ember-metal/core\",\"ember-runtime/system/object\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/mixin\",\"ember-views/system/jquery\",\"ember-views/views/view\",\"ember-metal/binding\",\"ember-metal/keys\",\"ember-handlebars/ext\",\"ember-runtime/system/string\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __exports__) {\n    \"use strict\";\n    /*globals Handlebars */\n\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.warn, Ember.assert\n    // var emberWarn = Ember.warn, emberAssert = Ember.assert;\n\n    var EmberObject = __dependency2__[\"default\"];\n    var get = __dependency3__.get;\n    var set = __dependency4__.set;\n    var IS_BINDING = __dependency5__.IS_BINDING;\n    var jQuery = __dependency6__[\"default\"];\n    var View = __dependency7__[\"default\"];\n    var isGlobalPath = __dependency8__.isGlobalPath;\n    var keys = __dependency9__[\"default\"];\n    var normalizePath = __dependency10__.normalizePath;\n    var handlebarsGet = __dependency10__.handlebarsGet;\n    var handlebarsGetView = __dependency10__.handlebarsGetView;\n    var EmberString = __dependency11__[\"default\"];\n\n\n    var LOWERCASE_A_Z = /^[a-z]/;\n    var VIEW_PREFIX = /^view\\./;\n\n    function makeBindings(thisContext, options) {\n      var hash = options.hash;\n      var hashType = options.hashTypes;\n\n      for (var prop in hash) {\n        if (hashType[prop] === 'ID') {\n\n          var value = hash[prop];\n\n          if (IS_BINDING.test(prop)) {\n            Ember.warn(\"You're attempting to render a view by passing \" + prop + \"=\" + value + \" to a view helper, but this syntax is ambiguous. You should either surround \" + value + \" in quotes or remove `Binding` from \" + prop + \".\");\n          } else {\n            hash[prop + 'Binding'] = value;\n            hashType[prop + 'Binding'] = 'STRING';\n            delete hash[prop];\n            delete hashType[prop];\n          }\n        }\n      }\n\n      if (hash.hasOwnProperty('idBinding')) {\n        // id can't be bound, so just perform one-time lookup.\n        hash.id = handlebarsGet(thisContext, hash.idBinding, options);\n        hashType.id = 'STRING';\n        delete hash.idBinding;\n        delete hashType.idBinding;\n      }\n    }\n\n    var ViewHelper = EmberObject.create({\n      propertiesFromHTMLOptions: function(options) {\n        var hash    = options.hash;\n        var data    = options.data;\n        var classes = hash['class'];\n\n        var extensions = {\n          helperName: options.helperName || ''\n        };\n\n        if (hash.id) {\n          extensions.elementId = hash.id;\n        }\n\n        if (hash.tag) {\n          extensions.tagName = hash.tag;\n        }\n\n        if (classes) {\n          classes = classes.split(' ');\n          extensions.classNames = classes;\n        }\n\n        if (hash.classBinding) {\n          extensions.classNameBindings = hash.classBinding.split(' ');\n        }\n\n        if (hash.classNameBindings) {\n          if (extensions.classNameBindings === undefined) {\n            extensions.classNameBindings = [];\n          }\n          extensions.classNameBindings = extensions.classNameBindings.concat(hash.classNameBindings.split(' '));\n        }\n\n        if (hash.attributeBindings) {\n          Ember.assert(\"Setting 'attributeBindings' via Handlebars is not allowed. Please subclass Ember.View and set it there instead.\");\n          extensions.attributeBindings = null;\n        }\n\n        // Set the proper context for all bindings passed to the helper. This applies to regular attribute bindings\n        // as well as class name bindings. If the bindings are local, make them relative to the current context\n        // instead of the view.\n        var path;\n        var hashKeys = keys(hash);\n\n        for (var i = 0, l = hashKeys.length; i < l; i++) {\n          var prop      = hashKeys[i];\n          var isBinding = IS_BINDING.test(prop);\n\n          if (prop !== 'classNameBindings') {\n            extensions[prop] = hash[prop];\n          }\n\n          // Test if the property ends in \"Binding\"\n          if (isBinding && typeof extensions[prop] === 'string') {\n            path = this.contextualizeBindingPath(hash[prop], data);\n            if (path) {\n              extensions[prop] = path;\n            }\n          }\n        }\n\n        if (extensions.classNameBindings) {\n          // Evaluate the context of class name bindings:\n          for (var j = 0, k = extensions.classNameBindings.length; j < k; j++) {\n            var full = extensions.classNameBindings[j];\n\n            if (typeof full === 'string') {\n              // Contextualize the path of classNameBinding so this:\n              //\n              //     classNameBinding=\"isGreen:green\"\n              //\n              // is converted to this:\n              //\n              //     classNameBinding=\"_parentView.context.isGreen:green\"\n              var parsedPath = View._parsePropertyPath(full);\n              if (parsedPath.path !== '') {\n                path = this.contextualizeBindingPath(parsedPath.path, data);\n                if (path) {\n                  extensions.classNameBindings[j] = path + parsedPath.classNames;\n                }\n              }\n            }\n          }\n        }\n\n        return extensions;\n      },\n\n      // Transform bindings from the current context to a context that can be evaluated within the view.\n      // Returns null if the path shouldn't be changed.\n      //\n      // TODO: consider the addition of a prefix that would allow this method to return `path`.\n      contextualizeBindingPath: function(path, data) {\n        var normalized = normalizePath(null, path, data);\n        if (normalized.isKeyword) {\n          return 'templateData.keywords.' + path;\n        } else if (isGlobalPath(path)) {\n          return null;\n        } else if (path === 'this' || path === '') {\n          return '_parentView.context';\n        } else {\n          return '_parentView.context.' + path;\n        }\n      },\n\n      helper: function(thisContext, path, options) {\n        var data = options.data;\n        var fn   = options.fn;\n        var newView;\n        var newViewProto;\n\n        makeBindings(thisContext, options);\n\n        var container = this.container || (data && data.view && data.view.container);\n        newView = handlebarsGetView(thisContext, path, container, options);\n\n        if (View.detectInstance(newView)) {\n          newViewProto = newView;\n        } else {\n          newViewProto = newView.proto();\n        }\n\n        var viewOptions = this.propertiesFromHTMLOptions(options, thisContext);\n        var currentView = data.view;\n        viewOptions.templateData = data;\n\n        if (fn) {\n          Ember.assert(\"You cannot provide a template block if you also specified a templateName\", !get(viewOptions, 'templateName') && !get(newViewProto, 'templateName'));\n          viewOptions.template = fn;\n        }\n\n        // We only want to override the `_context` computed property if there is\n        // no specified controller. See View#_context for more information.\n        if (!newViewProto.controller && !newViewProto.controllerBinding && !viewOptions.controller && !viewOptions.controllerBinding) {\n          viewOptions._context = thisContext;\n        }\n\n        currentView.appendChild(newView, viewOptions);\n      },\n\n      instanceHelper: function(thisContext, newView, options) {\n        var data = options.data;\n        var fn   = options.fn;\n\n        makeBindings(thisContext, options);\n\n        Ember.assert(\n          'Only a instance of a view may be passed to the ViewHelper.instanceHelper',\n          View.detectInstance(newView)\n        );\n\n        var viewOptions = this.propertiesFromHTMLOptions(options, thisContext);\n        var currentView = data.view;\n        viewOptions.templateData = data;\n\n        if (fn) {\n          Ember.assert(\"You cannot provide a template block if you also specified a templateName\", !get(viewOptions, 'templateName') && !get(newView, 'templateName'));\n          viewOptions.template = fn;\n        }\n\n        // We only want to override the `_context` computed property if there is\n        // no specified controller. See View#_context for more information.\n        if (!newView.controller && !newView.controllerBinding && !viewOptions.controller && !viewOptions.controllerBinding) {\n          viewOptions._context = thisContext;\n        }\n\n        currentView.appendChild(newView, viewOptions);\n      }\n    });\n    __exports__.ViewHelper = ViewHelper;\n    /**\n      `{{view}}` inserts a new instance of an `Ember.View` into a template passing its\n      options to the `Ember.View`'s `create` method and using the supplied block as\n      the view's own template.\n\n      An empty `<body>` and the following template:\n\n      ```handlebars\n      A span:\n      {{#view tagName=\"span\"}}\n        hello.\n      {{/view}}\n      ```\n\n      Will result in HTML structure:\n\n      ```html\n      <body>\n        <!-- Note: the handlebars template script\n             also results in a rendered Ember.View\n             which is the outer <div> here -->\n\n        <div class=\"ember-view\">\n          A span:\n          <span id=\"ember1\" class=\"ember-view\">\n            Hello.\n          </span>\n        </div>\n      </body>\n      ```\n\n      ### `parentView` setting\n\n      The `parentView` property of the new `Ember.View` instance created through\n      `{{view}}` will be set to the `Ember.View` instance of the template where\n      `{{view}}` was called.\n\n      ```javascript\n      aView = Ember.View.create({\n        template: Ember.Handlebars.compile(\"{{#view}} my parent: {{parentView.elementId}} {{/view}}\")\n      });\n\n      aView.appendTo('body');\n      ```\n\n      Will result in HTML structure:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view\">\n        <div id=\"ember2\" class=\"ember-view\">\n          my parent: ember1\n        </div>\n      </div>\n      ```\n\n      ### Setting CSS id and class attributes\n\n      The HTML `id` attribute can be set on the `{{view}}`'s resulting element with\n      the `id` option. This option will _not_ be passed to `Ember.View.create`.\n\n      ```handlebars\n      {{#view tagName=\"span\" id=\"a-custom-id\"}}\n        hello.\n      {{/view}}\n      ```\n\n      Results in the following HTML structure:\n\n      ```html\n      <div class=\"ember-view\">\n        <span id=\"a-custom-id\" class=\"ember-view\">\n          hello.\n        </span>\n      </div>\n      ```\n\n      The HTML `class` attribute can be set on the `{{view}}`'s resulting element\n      with the `class` or `classNameBindings` options. The `class` option will\n      directly set the CSS `class` attribute and will not be passed to\n      `Ember.View.create`. `classNameBindings` will be passed to `create` and use\n      `Ember.View`'s class name binding functionality:\n\n      ```handlebars\n      {{#view tagName=\"span\" class=\"a-custom-class\"}}\n        hello.\n      {{/view}}\n      ```\n\n      Results in the following HTML structure:\n\n      ```html\n      <div class=\"ember-view\">\n        <span id=\"ember2\" class=\"ember-view a-custom-class\">\n          hello.\n        </span>\n      </div>\n      ```\n\n      ### Supplying a different view class\n\n      `{{view}}` can take an optional first argument before its supplied options to\n      specify a path to a custom view class.\n\n      ```handlebars\n      {{#view \"custom\"}}{{! will look up App.CustomView }}\n        hello.\n      {{/view}}\n      ```\n\n      The first argument can also be a relative path accessible from the current\n      context.\n\n      ```javascript\n      MyApp = Ember.Application.create({});\n      MyApp.OuterView = Ember.View.extend({\n        innerViewClass: Ember.View.extend({\n          classNames: ['a-custom-view-class-as-property']\n        }),\n        template: Ember.Handlebars.compile('{{#view view.innerViewClass}} hi {{/view}}')\n      });\n\n      MyApp.OuterView.create().appendTo('body');\n      ```\n\n      Will result in the following HTML:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view\">\n        <div id=\"ember2\" class=\"ember-view a-custom-view-class-as-property\">\n          hi\n        </div>\n      </div>\n      ```\n\n      ### Blockless use\n\n      If you supply a custom `Ember.View` subclass that specifies its own template\n      or provide a `templateName` option to `{{view}}` it can be used without\n      supplying a block. Attempts to use both a `templateName` option and supply a\n      block will throw an error.\n\n      ```javascript\n      var App = Ember.Application.create();\n      App.WithTemplateDefinedView = Ember.View.extend({\n        templateName: 'defined-template'\n      });\n      ```\n\n      ```handlebars\n      {{! application.hbs }}\n      {{view 'with-template-defined'}}\n      ```\n\n      ```handlebars\n      {{! defined-template.hbs }}\n      Some content for the defined template view.\n      ```\n\n      ### `viewName` property\n\n      You can supply a `viewName` option to `{{view}}`. The `Ember.View` instance\n      will be referenced as a property of its parent view by this name.\n\n      ```javascript\n      aView = Ember.View.create({\n        template: Ember.Handlebars.compile('{{#view viewName=\"aChildByName\"}} hi {{/view}}')\n      });\n\n      aView.appendTo('body');\n      aView.get('aChildByName') // the instance of Ember.View created by {{view}} helper\n      ```\n\n      @method view\n      @for Ember.Handlebars.helpers\n      @param {String} path\n      @param {Hash} options\n      @return {String} HTML string\n    */\n    function viewHelper(path, options) {\n      Ember.assert(\"The view helper only takes a single argument\", arguments.length <= 2);\n\n      // If no path is provided, treat path param as options\n      // and get an instance of the registered `view:toplevel`\n      if (path && path.data && path.data.isRenderData) {\n        options = path;\n        if (options.data && options.data.view && options.data.view.container) {\n          path = options.data.view.container.lookupFactory('view:toplevel');\n        } else {\n          path = View;\n        }\n      }\n\n      options.helperName = options.helperName || 'view';\n\n      return ViewHelper.helper(this, path, options);\n    }\n\n    __exports__.viewHelper = viewHelper;\n  });\nenifed(\"ember-handlebars/helpers/yield\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // var emberAssert = Ember.assert;\n\n    var get = __dependency2__.get;\n\n    /**\n      `{{yield}}` denotes an area of a template that will be rendered inside\n      of another template. It has two main uses:\n\n      ### Use with `layout`\n      When used in a Handlebars template that is assigned to an `Ember.View`\n      instance's `layout` property Ember will render the layout template first,\n      inserting the view's own rendered output at the `{{yield}}` location.\n\n      An empty `<body>` and the following application code:\n\n      ```javascript\n      AView = Ember.View.extend({\n        classNames: ['a-view-with-layout'],\n        layout: Ember.Handlebars.compile('<div class=\"wrapper\">{{yield}}</div>'),\n        template: Ember.Handlebars.compile('<span>I am wrapped</span>')\n      });\n\n      aView = AView.create();\n      aView.appendTo('body');\n      ```\n\n      Will result in the following HTML output:\n\n      ```html\n      <body>\n        <div class='ember-view a-view-with-layout'>\n          <div class=\"wrapper\">\n            <span>I am wrapped</span>\n          </div>\n        </div>\n      </body>\n      ```\n\n      The `yield` helper cannot be used outside of a template assigned to an\n      `Ember.View`'s `layout` property and will throw an error if attempted.\n\n      ```javascript\n      BView = Ember.View.extend({\n        classNames: ['a-view-with-layout'],\n        template: Ember.Handlebars.compile('{{yield}}')\n      });\n\n      bView = BView.create();\n      bView.appendTo('body');\n\n      // throws\n      // Uncaught Error: assertion failed:\n      // You called yield in a template that was not a layout\n      ```\n\n      ### Use with Ember.Component\n      When designing components `{{yield}}` is used to denote where, inside the component's\n      template, an optional block passed to the component should render:\n\n      ```handlebars\n      <!-- application.hbs -->\n      {{#labeled-textfield value=someProperty}}\n        First name:\n      {{/labeled-textfield}}\n      ```\n\n      ```handlebars\n      <!-- components/labeled-textfield.hbs -->\n      <label>\n        {{yield}} {{input value=value}}\n      </label>\n      ```\n\n      Result:\n\n      ```html\n      <label>\n        First name: <input type=\"text\" />\n      </label>\n      ```\n\n      @method yield\n      @for Ember.Handlebars.helpers\n      @param {Hash} options\n      @return {String} HTML string\n    */\n    __exports__[\"default\"] = function yieldHelper(options) {\n      var view = options.data.view;\n\n      while (view && !get(view, 'layout')) {\n        if (view._contextView) {\n          view = view._contextView;\n        } else {\n          view = get(view, '_parentView');\n        }\n      }\n\n      Ember.assert(\"You called yield in a template that was not a layout\", !!view);\n\n      view._yield(this, options);\n    }\n  });\nenifed(\"ember-handlebars/loader\",\n  [\"ember-handlebars/component_lookup\",\"ember-views/system/jquery\",\"ember-metal/error\",\"ember-runtime/system/lazy_load\",\"ember-handlebars-compiler\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    /*globals Handlebars */\n\n    var ComponentLookup = __dependency1__[\"default\"];\n    var jQuery = __dependency2__[\"default\"];\n    var EmberError = __dependency3__[\"default\"];\n    var onLoad = __dependency4__.onLoad;\n\n    var EmberHandlebars = __dependency5__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    /**\n      Find templates stored in the head tag as script tags and make them available\n      to `Ember.CoreView` in the global `Ember.TEMPLATES` object. This will be run\n      as as jQuery DOM-ready callback.\n\n      Script tags with `text/x-handlebars` will be compiled\n      with Ember's Handlebars and are suitable for use as a view's template.\n      Those with type `text/x-raw-handlebars` will be compiled with regular\n      Handlebars and are suitable for use in views' computed properties.\n\n      @private\n      @method bootstrap\n      @for Ember.Handlebars\n      @static\n      @param ctx\n    */\n    function bootstrap(ctx) {\n      var selectors = 'script[type=\"text/x-handlebars\"], script[type=\"text/x-raw-handlebars\"]';\n\n      jQuery(selectors, ctx)\n        .each(function() {\n        // Get a reference to the script tag\n        var script = jQuery(this);\n\n        var compile = (script.attr('type') === 'text/x-raw-handlebars') ?\n                      jQuery.proxy(Handlebars.compile, Handlebars) :\n                      jQuery.proxy(EmberHandlebars.compile, EmberHandlebars);\n        // Get the name of the script, used by Ember.View's templateName property.\n        // First look for data-template-name attribute, then fall back to its\n        // id if no name is found.\n        var templateName = script.attr('data-template-name') || script.attr('id') || 'application';\n        var template = compile(script.html());\n\n        // Check if template of same name already exists\n        if (Ember.TEMPLATES[templateName] !== undefined) {\n          throw new EmberError('Template named \"' + templateName  + '\" already exists.');\n        }\n\n        // For templates which have a name, we save them and then remove them from the DOM\n        Ember.TEMPLATES[templateName] = template;\n\n        // Remove script tag from DOM\n        script.remove();\n      });\n    }\n\n    function _bootstrap() {\n      bootstrap( jQuery(document) );\n    }\n\n    function registerComponentLookup(container) {\n      container.register('component-lookup:main', ComponentLookup);\n    }\n\n    /*\n      We tie this to application.load to ensure that we've at least\n      attempted to bootstrap at the point that the application is loaded.\n\n      We also tie this to document ready since we're guaranteed that all\n      the inline templates are present at this point.\n\n      There's no harm to running this twice, since we remove the templates\n      from the DOM after processing.\n    */\n\n    onLoad('Ember.Application', function(Application) {\n      Application.initializer({\n        name: 'domTemplates',\n        initialize: _bootstrap\n      });\n\n      Application.initializer({\n        name: 'registerComponentLookup',\n        after: 'domTemplates',\n        initialize: registerComponentLookup\n      });\n    });\n\n    __exports__[\"default\"] = bootstrap;\n  });\nenifed(\"ember-handlebars/string\",\n  [\"ember-runtime/system/string\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    // required so we can extend this object.\n    var EmberStringUtils = __dependency1__[\"default\"];\n\n    /**\n      Mark a string as safe for unescaped output with Handlebars. If you\n      return HTML from a Handlebars helper, use this function to\n      ensure Handlebars does not escape the HTML.\n\n      ```javascript\n      Ember.String.htmlSafe('<div>someString</div>')\n      ```\n\n      @method htmlSafe\n      @for Ember.String\n      @static\n      @return {Handlebars.SafeString} a string that will not be html escaped by Handlebars\n    */\n    function htmlSafe(str) {\n      if (typeof str !== 'string') {\n        str = ''+str;\n      }\n      return new Handlebars.SafeString(str);\n    }\n\n    EmberStringUtils.htmlSafe = htmlSafe;\n    if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.String) {\n\n      /**\n        Mark a string as being safe for unescaped output with Handlebars.\n\n        ```javascript\n        '<div>someString</div>'.htmlSafe()\n        ```\n\n        See [Ember.String.htmlSafe](/api/classes/Ember.String.html#method_htmlSafe).\n\n        @method htmlSafe\n        @for String\n        @return {Handlebars.SafeString} a string that will not be html escaped by Handlebars\n      */\n      String.prototype.htmlSafe = function() {\n        return htmlSafe(this);\n      };\n    }\n\n    __exports__[\"default\"] = htmlSafe;\n  });\nenifed(\"ember-handlebars/views/handlebars_bound_view\",\n  [\"ember-handlebars-compiler\",\"ember-metal/core\",\"ember-metal/error\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/merge\",\"ember-metal/run_loop\",\"ember-views/views/view\",\"ember-handlebars/string\",\"ember-views/views/states\",\"ember-handlebars/views/metamorph_view\",\"ember-handlebars/ext\",\"ember-metal/utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __exports__) {\n    \"use strict\";\n    /*globals Handlebars, Metamorph:true */\n    /*jshint newcap:false*/\n\n\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    var EmberHandlebars = __dependency1__[\"default\"];\n    // EmberHandlebars.SafeString;\n    var SafeString = EmberHandlebars.SafeString;\n\n    var Ember = __dependency2__[\"default\"];\n    // Ember.K\n    var K = Ember.K;\n\n    var EmberError = __dependency3__[\"default\"];\n    var get = __dependency4__.get;\n    var set = __dependency5__.set;\n    var merge = __dependency6__[\"default\"];\n    var run = __dependency7__[\"default\"];\n    var View = __dependency8__[\"default\"];\n    var htmlSafe = __dependency9__[\"default\"];\n    var cloneStates = __dependency10__.cloneStates;\n    var states = __dependency10__.states;\n    var viewStates = states;\n\n    var _MetamorphView = __dependency11__[\"default\"];\n    var handlebarsGet = __dependency12__.handlebarsGet;\n    var uuid = __dependency13__.uuid;\n\n    function SimpleHandlebarsView(path, pathRoot, isEscaped, templateData) {\n      this.path = path;\n      this.pathRoot = pathRoot;\n      this.isEscaped = isEscaped;\n      this.templateData = templateData;\n      this[Ember.GUID_KEY] = uuid();\n      this._lastNormalizedValue = undefined;\n      this.state = 'preRender';\n      this.updateId = null;\n      this._parentView = null;\n      this.buffer = null;\n      this._morph = null;\n    }\n\n    SimpleHandlebarsView.prototype = {\n      isVirtual: true,\n      isView: true,\n\n      destroy: function () {\n        if (this.updateId) {\n          run.cancel(this.updateId);\n          this.updateId = null;\n        }\n        if (this._parentView) {\n          this._parentView.removeChild(this);\n        }\n        this.morph = null;\n        this.state = 'destroyed';\n      },\n\n      propertyWillChange: K,\n\n      propertyDidChange: K,\n\n      normalizedValue: function() {\n        var path = this.path;\n        var pathRoot = this.pathRoot;\n        var escape = this.isEscaped;\n        var result, templateData;\n\n        // Use the pathRoot as the result if no path is provided. This\n        // happens if the path is `this`, which gets normalized into\n        // a `pathRoot` of the current Handlebars context and a path\n        // of `''`.\n        if (path === '') {\n          result = pathRoot;\n        } else {\n          templateData = this.templateData;\n          result = handlebarsGet(pathRoot, path, { data: templateData });\n        }\n\n        if (!escape && !(result instanceof SafeString)) {\n          result = htmlSafe(result);\n        }\n\n        return result;\n      },\n\n      render: function(buffer) {\n        var value = this.normalizedValue();\n        this._lastNormalizedValue = value;\n        buffer._element = value;\n      },\n\n      rerender: function() {\n        switch(this.state) {\n          case 'preRender':\n          case 'destroyed':\n            break;\n          case 'inBuffer':\n            throw new EmberError(\"Something you did tried to replace an {{expression}} before it was inserted into the DOM.\");\n          case 'hasElement':\n          case 'inDOM':\n            this.updateId = run.scheduleOnce('render', this, 'update');\n            break;\n        }\n        return this;\n      },\n\n      update: function () {\n        this.updateId = null;\n        var value = this.normalizedValue();\n        // doesn't diff SafeString instances\n        if (value !== this._lastNormalizedValue) {\n          this._lastNormalizedValue = value;\n          this._morph.update(value);\n        }\n      },\n\n      _transitionTo: function(state) {\n        this.state = state;\n      }\n    };\n\n    states = cloneStates(viewStates);\n\n    merge(states._default, {\n      rerenderIfNeeded: K\n    });\n\n    merge(states.inDOM, {\n      rerenderIfNeeded: function(view) {\n        if (view.normalizedValue() !== view._lastNormalizedValue) {\n          view.rerender();\n        }\n      }\n    });\n\n    /**\n      `Ember._HandlebarsBoundView` is a private view created by the Handlebars\n      `{{bind}}` helpers that is used to keep track of bound properties.\n\n      Every time a property is bound using a `{{mustache}}`, an anonymous subclass\n      of `Ember._HandlebarsBoundView` is created with the appropriate sub-template\n      and context set up. When the associated property changes, just the template\n      for this view will re-render.\n\n      @class _HandlebarsBoundView\n      @namespace Ember\n      @extends Ember._MetamorphView\n      @private\n    */\n    var _HandlebarsBoundView = _MetamorphView.extend({\n      instrumentName: 'boundHandlebars',\n\n      _states: states,\n\n      /**\n        The function used to determine if the `displayTemplate` or\n        `inverseTemplate` should be rendered. This should be a function that takes\n        a value and returns a Boolean.\n\n        @property shouldDisplayFunc\n        @type Function\n        @default null\n      */\n      shouldDisplayFunc: null,\n\n      /**\n        Whether the template rendered by this view gets passed the context object\n        of its parent template, or gets passed the value of retrieving `path`\n        from the `pathRoot`.\n\n        For example, this is true when using the `{{#if}}` helper, because the\n        template inside the helper should look up properties relative to the same\n        object as outside the block. This would be `false` when used with `{{#with\n        foo}}` because the template should receive the object found by evaluating\n        `foo`.\n\n        @property preserveContext\n        @type Boolean\n        @default false\n      */\n      preserveContext: false,\n\n      /**\n        If `preserveContext` is true, this is the object that will be used\n        to render the template.\n\n        @property previousContext\n        @type Object\n      */\n      previousContext: null,\n\n      /**\n        The template to render when `shouldDisplayFunc` evaluates to `true`.\n\n        @property displayTemplate\n        @type Function\n        @default null\n      */\n      displayTemplate: null,\n\n      /**\n        The template to render when `shouldDisplayFunc` evaluates to `false`.\n\n        @property inverseTemplate\n        @type Function\n        @default null\n      */\n      inverseTemplate: null,\n\n\n      /**\n        The path to look up on `pathRoot` that is passed to\n        `shouldDisplayFunc` to determine which template to render.\n\n        In addition, if `preserveContext` is `false,` the object at this path will\n        be passed to the template when rendering.\n\n        @property path\n        @type String\n        @default null\n      */\n      path: null,\n\n      /**\n        The object from which the `path` will be looked up. Sometimes this is the\n        same as the `previousContext`, but in cases where this view has been\n        generated for paths that start with a keyword such as `view` or\n        `controller`, the path root will be that resolved object.\n\n        @property pathRoot\n        @type Object\n      */\n      pathRoot: null,\n\n      normalizedValue: function() {\n        var path = get(this, 'path');\n        var pathRoot  = get(this, 'pathRoot');\n        var valueNormalizer = get(this, 'valueNormalizerFunc');\n        var result, templateData;\n\n        // Use the pathRoot as the result if no path is provided. This\n        // happens if the path is `this`, which gets normalized into\n        // a `pathRoot` of the current Handlebars context and a path\n        // of `''`.\n        if (path === '') {\n          result = pathRoot;\n        } else {\n          templateData = get(this, 'templateData');\n          result = handlebarsGet(pathRoot, path, { data: templateData });\n        }\n\n        return valueNormalizer ? valueNormalizer(result) : result;\n      },\n\n      rerenderIfNeeded: function() {\n        this.currentState.rerenderIfNeeded(this);\n      },\n\n      /**\n        Determines which template to invoke, sets up the correct state based on\n        that logic, then invokes the default `Ember.View` `render` implementation.\n\n        This method will first look up the `path` key on `pathRoot`,\n        then pass that value to the `shouldDisplayFunc` function. If that returns\n        `true,` the `displayTemplate` function will be rendered to DOM. Otherwise,\n        `inverseTemplate`, if specified, will be rendered.\n\n        For example, if this `Ember._HandlebarsBoundView` represented the `{{#with\n        foo}}` helper, it would look up the `foo` property of its context, and\n        `shouldDisplayFunc` would always return true. The object found by looking\n        up `foo` would be passed to `displayTemplate`.\n\n        @method render\n        @param {Ember.RenderBuffer} buffer\n      */\n      render: function(buffer) {\n        // If not invoked via a triple-mustache ({{{foo}}}), escape\n        // the content of the template.\n        var escape = get(this, 'isEscaped');\n\n        var shouldDisplay = get(this, 'shouldDisplayFunc');\n        var preserveContext = get(this, 'preserveContext');\n        var context = get(this, 'previousContext');\n\n        var inverseTemplate = get(this, 'inverseTemplate');\n        var displayTemplate = get(this, 'displayTemplate');\n\n        var result = this.normalizedValue();\n\n        this._lastNormalizedValue = result;\n\n        // First, test the conditional to see if we should\n        // render the template or not.\n        if (shouldDisplay(result)) {\n          set(this, 'template', displayTemplate);\n\n          // If we are preserving the context (for example, if this\n          // is an #if block, call the template with the same object.\n          if (preserveContext) {\n            set(this, '_context', context);\n          } else {\n          // Otherwise, determine if this is a block bind or not.\n          // If so, pass the specified object to the template\n            if (displayTemplate) {\n              set(this, '_context', result);\n            } else {\n            // This is not a bind block, just push the result of the\n            // expression to the render context and return.\n              if (result === null || result === undefined) {\n                result = \"\";\n              } else if (!(result instanceof SafeString)) {\n                result = String(result);\n              }\n\n              if (escape) { result = Handlebars.Utils.escapeExpression(result); }\n              buffer.push(result);\n              return;\n            }\n          }\n        } else if (inverseTemplate) {\n          set(this, 'template', inverseTemplate);\n\n          if (preserveContext) {\n            set(this, '_context', context);\n          } else {\n            set(this, '_context', result);\n          }\n        } else {\n          set(this, 'template', function() { return ''; });\n        }\n\n        return this._super(buffer);\n      }\n    });\n\n    __exports__._HandlebarsBoundView = _HandlebarsBoundView;\n    __exports__.SimpleHandlebarsView = SimpleHandlebarsView;\n  });\nenifed(\"ember-handlebars/views/metamorph_view\",\n  [\"ember-metal/core\",\"ember-views/views/core_view\",\"ember-views/views/view\",\"ember-metal/mixin\",\"ember-metal/run_loop\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    /* global Metamorph:true */\n\n    /*jshint newcap:false*/\n    var Ember = __dependency1__[\"default\"];\n    // Ember.deprecate\n\n    var CoreView = __dependency2__[\"default\"];\n    var View = __dependency3__[\"default\"];\n    var Mixin = __dependency4__.Mixin;\n    var run = __dependency5__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-handlebars\n    */\n\n    function notifyMutationListeners() {\n      run.once(View, 'notifyMutationListeners');\n    }\n\n    // The `morph` and `outerHTML` properties are internal only\n    // and not observable.\n\n    /**\n      @class _Metamorph\n      @namespace Ember\n      @private\n    */\n    var _Metamorph = Mixin.create({\n      isVirtual: true,\n      tagName: '',\n\n      instrumentName: 'metamorph',\n\n      init: function() {\n        this._super();\n        Ember.deprecate('Supplying a tagName to Metamorph views is unreliable and is deprecated. You may be setting the tagName on a Handlebars helper that creates a Metamorph.', !this.tagName);\n      }\n    });\n    __exports__._Metamorph = _Metamorph;\n    /**\n      @class _MetamorphView\n      @namespace Ember\n      @extends Ember.View\n      @uses Ember._Metamorph\n      @private\n    */\n    var _MetamorphView = View.extend(_Metamorph);\n    __exports__._MetamorphView = _MetamorphView;\n    /**\n      @class _SimpleMetamorphView\n      @namespace Ember\n      @extends Ember.CoreView\n      @uses Ember._Metamorph\n      @private\n    */\n    var _SimpleMetamorphView = CoreView.extend(_Metamorph);\n    __exports__._SimpleMetamorphView = _SimpleMetamorphView;__exports__[\"default\"] = View.extend(_Metamorph);\n  });\nenifed(\"ember-metal-views\",\n  [\"ember-metal-views/renderer\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Renderer = __dependency1__[\"default\"];\n    __exports__.Renderer = Renderer;\n  });\nenifed(\"ember-metal-views/renderer\",\n  [\"morph\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DOMHelper = __dependency1__.DOMHelper;\n\n    function Renderer() {\n      this._uuid = 0;\n      this._views = new Array(2000);\n      this._queue = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\n      this._parents = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\n      this._elements = new Array(17);\n      this._inserts = {};\n      this._dom = new DOMHelper();\n    }\n\n    function Renderer_renderTree(_view, _parentView, _insertAt) {\n      var views = this._views;\n      views[0] = _view;\n      var insertAt = _insertAt === undefined ? -1 : _insertAt;\n      var index = 0;\n      var total = 1;\n      var levelBase = _parentView ? _parentView._level+1 : 0;\n\n      var root = _parentView == null ? _view : _parentView._root;\n\n      // if root view has a _morph assigned\n      var willInsert = !!root._morph;\n\n      var queue = this._queue;\n      queue[0] = 0;\n      var length = 1;\n\n      var parentIndex = -1;\n      var parents = this._parents;\n      var parent = _parentView || null;\n      var elements = this._elements;\n      var element = null;\n      var contextualElement = null;\n      var level = 0;\n\n      var view = _view;\n      var children, i, l, child;\n      while (length) {\n        elements[level] = element;\n        if (!view._morph) {\n          // ensure props we add are in same order\n          view._morph = null;\n        }\n        view._root = root;\n        this.uuid(view);\n        view._level = levelBase + level;\n        if (view._elementCreated) {\n          this.remove(view, false, true);\n        }\n\n        this.willCreateElement(view);\n\n        contextualElement = view._morph && view._morph.contextualElement;\n        if (!contextualElement && parent && parent._childViewsMorph) {\n          contextualElement = parent._childViewsMorph.contextualElement;\n        }\n        if (!contextualElement && view._didCreateElementWithoutMorph) {\n          // This code path is only used by createElement and rerender when createElement\n          // was previously called on a view.\n          contextualElement = document.body;\n        }\n        Ember.assert(\"Required contextualElement for view \"+_view+\" is missing\", contextualElement);\n        element = this.createElement(view, contextualElement);\n\n        parents[level++] = parentIndex;\n        parentIndex = index;\n        parent = view;\n\n        // enqueue for end\n        queue[length++] = index;\n        // enqueue children\n        children = this.childViews(view);\n        if (children) {\n          for (i=children.length-1;i>=0;i--) {\n            child = children[i];\n            index = total++;\n            views[index] = child;\n            queue[length++] = index;\n            view = child;\n          }\n        }\n\n        index = queue[--length];\n        view = views[index];\n\n        while (parentIndex === index) {\n          level--;\n          view._elementCreated = true;\n          this.didCreateElement(view);\n          if (willInsert) {\n            this.willInsertElement(view);\n          }\n\n          if (level === 0) {\n            length--;\n            break;\n          }\n\n          parentIndex = parents[level];\n          parent = parentIndex === -1 ? _parentView : views[parentIndex];\n          this.insertElement(view, parent, element, -1);\n          index = queue[--length];\n          view = views[index];\n          element = elements[level];\n          elements[level] = null;\n        }\n      }\n\n      this.insertElement(view, _parentView, element, insertAt);\n\n      for (i=total-1;i>=0;i--) {\n        if (willInsert) {\n          views[i]._elementInserted = true;\n          this.didInsertElement(views[i]);\n        }\n        views[i] = null;\n      }\n\n      return element;\n    }\n\n    Renderer.prototype.uuid = function Renderer_uuid(view) {\n      if (view._uuid === undefined) {\n        view._uuid = ++this._uuid;\n        view._renderer = this;\n      } // else assert(view._renderer === this)\n      return view._uuid;\n    };\n\n    Renderer.prototype.scheduleInsert =\n      function Renderer_scheduleInsert(view, morph) {\n        if (view._morph || view._elementCreated) {\n          throw new Error(\"You cannot insert a View that has already been rendered\");\n        }\n        Ember.assert(\"You cannot insert a View without a morph\", morph);\n        view._morph = morph;\n        var viewId = this.uuid(view);\n        this._inserts[viewId] = this.scheduleRender(this, function() {\n          this._inserts[viewId] = null;\n          this.renderTree(view);\n        });\n      };\n\n    Renderer.prototype.appendTo =\n      function Renderer_appendTo(view, target) {\n        var morph = this._dom.appendMorph(target);\n        this.scheduleInsert(view, morph);\n      };\n\n    Renderer.prototype.replaceIn =\n      function Renderer_replaceIn(view, target) {\n        var morph = this._dom.createMorph(target, null, null);\n        this.scheduleInsert(view, morph);\n      };\n\n    function Renderer_remove(_view, shouldDestroy, reset) {\n      var viewId = this.uuid(_view);\n\n      if (this._inserts[viewId]) {\n        this.cancelRender(this._inserts[viewId]);\n        this._inserts[viewId] = undefined;\n      }\n\n      if (!_view._elementCreated) {\n        return;\n      }\n\n      var removeQueue = [];\n      var destroyQueue = [];\n      var morph = _view._morph;\n      var  idx, len, view, staticChildren, queue,\n        childViews, i, l, parentView;\n\n      removeQueue.push(_view);\n\n      for (idx=0; idx<removeQueue.length; idx++) {\n        view = removeQueue[idx];\n\n        if (!shouldDestroy && view._childViewsMorph) {\n          queue = removeQueue;\n        } else {\n          queue = destroyQueue;\n        }\n\n        this.beforeRemove(removeQueue[idx]);\n\n        childViews = view._childViews;\n        if (childViews) {\n          for (i=0,l=childViews.length; i<l; i++) {\n            queue.push(childViews[i]);\n          }\n        }\n      }\n\n      for (idx=0; idx<destroyQueue.length; idx++) {\n        view = destroyQueue[idx];\n\n        this.beforeRemove(destroyQueue[idx]);\n\n        childViews = view._childViews;\n        if (childViews) {\n          for (i=0,l=childViews.length; i<l; i++) {\n            destroyQueue.push(childViews[i]);\n          }\n        }\n      }\n\n      // destroy DOM from root insertion\n      if (morph && !reset) {\n        morph.destroy();\n      }\n\n      for (idx=0, len=removeQueue.length; idx < len; idx++) {\n        this.afterRemove(removeQueue[idx], false);\n      }\n\n      for (idx=0, len=destroyQueue.length; idx < len; idx++) {\n        this.afterRemove(destroyQueue[idx], true);\n      }\n\n      if (reset) {\n        _view._morph = morph;\n      }\n    }\n\n    function Renderer_insertElement(view, parentView, element, index) {\n      if (element === null || element === undefined) return;\n      if (view._morph) {\n        view._morph.update(element);\n      } else if (parentView) {\n        if (index === -1) {\n          view._morph = parentView._childViewsMorph.append(element);\n        } else {\n          view._morph = parentView._childViewsMorph.insert(index, element);\n        }\n      }\n    }\n\n    function Renderer_beforeRemove(view) {\n      if (view._elementCreated) {\n        this.willDestroyElement(view);\n      }\n      if (view._elementInserted) {\n        this.willRemoveElement(view);\n      }\n    }\n\n    function Renderer_afterRemove(view, shouldDestroy) {\n      view._elementInserted = false;\n      view._morph = null;\n      view._childViewsMorph = null;\n      if (view._elementCreated) {\n        view._elementCreated = false;\n        this.didDestroyElement(view);\n      }\n      if (shouldDestroy) {\n        this.destroyView(view);\n      }\n    }\n\n    Renderer.prototype.remove = Renderer_remove;\n    Renderer.prototype.destroy = function (view) {\n      this.remove(view, true);\n    };\n\n    Renderer.prototype.renderTree = Renderer_renderTree;\n    Renderer.prototype.insertElement = Renderer_insertElement;\n    Renderer.prototype.beforeRemove = Renderer_beforeRemove;\n    Renderer.prototype.afterRemove = Renderer_afterRemove;\n\n    /// HOOKS\n    var noop = function () {};\n\n    Renderer.prototype.willCreateElement = noop; // inBuffer\n    Renderer.prototype.createElement = noop; // renderToBuffer or createElement\n    Renderer.prototype.didCreateElement = noop; // hasElement\n    Renderer.prototype.willInsertElement = noop; // will place into DOM\n    Renderer.prototype.didInsertElement = noop; // inDOM // placed into DOM\n    Renderer.prototype.willRemoveElement = noop; // removed from DOM  willDestroyElement currently paired with didInsertElement\n    Renderer.prototype.willDestroyElement = noop; // willClearRender (currently balanced with render) this is now paired with createElement\n    Renderer.prototype.didDestroyElement = noop; // element destroyed so view.destroy shouldn't try to remove it removedFromDOM\n    Renderer.prototype.destroyView = noop;\n    Renderer.prototype.childViews = noop;\n\n    __exports__[\"default\"] = Renderer;\n  });\nenifed(\"ember-metal\",\n  [\"ember-metal/core\",\"ember-metal/merge\",\"ember-metal/instrumentation\",\"ember-metal/utils\",\"ember-metal/error\",\"ember-metal/enumerable_utils\",\"ember-metal/cache\",\"ember-metal/platform\",\"ember-metal/array\",\"ember-metal/logger\",\"ember-metal/property_get\",\"ember-metal/events\",\"ember-metal/observer_set\",\"ember-metal/property_events\",\"ember-metal/properties\",\"ember-metal/property_set\",\"ember-metal/map\",\"ember-metal/get_properties\",\"ember-metal/set_properties\",\"ember-metal/watch_key\",\"ember-metal/chains\",\"ember-metal/watch_path\",\"ember-metal/watching\",\"ember-metal/expand_properties\",\"ember-metal/computed\",\"ember-metal/computed_macros\",\"ember-metal/observer\",\"ember-metal/mixin\",\"ember-metal/binding\",\"ember-metal/run_loop\",\"ember-metal/libraries\",\"ember-metal/is_none\",\"ember-metal/is_empty\",\"ember-metal/is_blank\",\"ember-metal/is_present\",\"ember-metal/keys\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __dependency16__, __dependency17__, __dependency18__, __dependency19__, __dependency20__, __dependency21__, __dependency22__, __dependency23__, __dependency24__, __dependency25__, __dependency26__, __dependency27__, __dependency28__, __dependency29__, __dependency30__, __dependency31__, __dependency32__, __dependency33__, __dependency34__, __dependency35__, __dependency36__, __exports__) {\n    \"use strict\";\n    /**\n    Ember Metal\n\n    @module ember\n    @submodule ember-metal\n    */\n\n    // BEGIN IMPORTS\n    var Ember = __dependency1__[\"default\"];\n    var merge = __dependency2__[\"default\"];\n    var instrument = __dependency3__.instrument;\n    var subscribe = __dependency3__.subscribe;\n    var unsubscribe = __dependency3__.unsubscribe;\n    var reset = __dependency3__.reset;\n    var generateGuid = __dependency4__.generateGuid;\n    var GUID_KEY = __dependency4__.GUID_KEY;\n    var guidFor = __dependency4__.guidFor;\n    var META_DESC = __dependency4__.META_DESC;\n    var EMPTY_META = __dependency4__.EMPTY_META;\n    var meta = __dependency4__.meta;\n    var getMeta = __dependency4__.getMeta;\n    var setMeta = __dependency4__.setMeta;\n    var metaPath = __dependency4__.metaPath;\n    var inspect = __dependency4__.inspect;\n    var typeOf = __dependency4__.typeOf;\n    var tryCatchFinally = __dependency4__.tryCatchFinally;\n    var isArray = __dependency4__.isArray;\n    var makeArray = __dependency4__.makeArray;\n    var canInvoke = __dependency4__.canInvoke;\n    var tryInvoke = __dependency4__.tryInvoke;\n    var tryFinally = __dependency4__.tryFinally;\n    var wrap = __dependency4__.wrap;\n    var apply = __dependency4__.apply;\n    var applyStr = __dependency4__.applyStr;\n    var uuid = __dependency4__.uuid;\n    var EmberError = __dependency5__[\"default\"];\n    var EnumerableUtils = __dependency6__[\"default\"];\n    var Cache = __dependency7__[\"default\"];\n    var create = __dependency8__.create;\n    var hasPropertyAccessors = __dependency8__.hasPropertyAccessors;\n    var filter = __dependency9__.filter;\n    var forEach = __dependency9__.forEach;\n    var indexOf = __dependency9__.indexOf;\n    var map = __dependency9__.map;\n    var Logger = __dependency10__[\"default\"];\n\n    var get = __dependency11__.get;\n    var getWithDefault = __dependency11__.getWithDefault;\n    var normalizeTuple = __dependency11__.normalizeTuple;\n    var _getPath = __dependency11__._getPath;\n\n    var on = __dependency12__.on;\n    var addListener = __dependency12__.addListener;\n    var removeListener = __dependency12__.removeListener;\n    var suspendListener = __dependency12__.suspendListener;\n    var suspendListeners = __dependency12__.suspendListeners;\n    var sendEvent = __dependency12__.sendEvent;\n    var hasListeners = __dependency12__.hasListeners;\n    var watchedEvents = __dependency12__.watchedEvents;\n    var listenersFor = __dependency12__.listenersFor;\n    var listenersDiff = __dependency12__.listenersDiff;\n    var listenersUnion = __dependency12__.listenersUnion;\n\n    var ObserverSet = __dependency13__[\"default\"];\n\n    var propertyWillChange = __dependency14__.propertyWillChange;\n    var propertyDidChange = __dependency14__.propertyDidChange;\n    var overrideChains = __dependency14__.overrideChains;\n    var beginPropertyChanges = __dependency14__.beginPropertyChanges;\n    var endPropertyChanges = __dependency14__.endPropertyChanges;\n    var changeProperties = __dependency14__.changeProperties;\n\n    var Descriptor = __dependency15__.Descriptor;\n    var defineProperty = __dependency15__.defineProperty;\n    var set = __dependency16__.set;\n    var trySet = __dependency16__.trySet;\n\n    var OrderedSet = __dependency17__.OrderedSet;\n    var Map = __dependency17__.Map;\n    var MapWithDefault = __dependency17__.MapWithDefault;\n    var getProperties = __dependency18__[\"default\"];\n    var setProperties = __dependency19__[\"default\"];\n    var watchKey = __dependency20__.watchKey;\n    var unwatchKey = __dependency20__.unwatchKey;\n    var flushPendingChains = __dependency21__.flushPendingChains;\n    var removeChainWatcher = __dependency21__.removeChainWatcher;\n    var ChainNode = __dependency21__.ChainNode;\n    var finishChains = __dependency21__.finishChains;\n    var watchPath = __dependency22__.watchPath;\n    var unwatchPath = __dependency22__.unwatchPath;\n    var watch = __dependency23__.watch;\n    var isWatching = __dependency23__.isWatching;\n    var unwatch = __dependency23__.unwatch;\n    var rewatch = __dependency23__.rewatch;\n    var destroy = __dependency23__.destroy;\n    var expandProperties = __dependency24__[\"default\"];\n    var ComputedProperty = __dependency25__.ComputedProperty;\n    var computed = __dependency25__.computed;\n    var cacheFor = __dependency25__.cacheFor;\n\n    // side effect of defining the computed.* macros\n\n    var addObserver = __dependency27__.addObserver;\n    var observersFor = __dependency27__.observersFor;\n    var removeObserver = __dependency27__.removeObserver;\n    var addBeforeObserver = __dependency27__.addBeforeObserver;\n    var _suspendBeforeObserver = __dependency27__._suspendBeforeObserver;\n    var _suspendObserver = __dependency27__._suspendObserver;\n    var _suspendBeforeObservers = __dependency27__._suspendBeforeObservers;\n    var _suspendObservers = __dependency27__._suspendObservers;\n    var beforeObserversFor = __dependency27__.beforeObserversFor;\n    var removeBeforeObserver = __dependency27__.removeBeforeObserver;\n    var IS_BINDING = __dependency28__.IS_BINDING;\n    var mixin = __dependency28__.mixin;\n    var Mixin = __dependency28__.Mixin;\n    var required = __dependency28__.required;\n    var aliasMethod = __dependency28__.aliasMethod;\n    var observer = __dependency28__.observer;\n    var immediateObserver = __dependency28__.immediateObserver;\n    var beforeObserver = __dependency28__.beforeObserver;\n    var Binding = __dependency29__.Binding;\n    var isGlobalPath = __dependency29__.isGlobalPath;\n    var bind = __dependency29__.bind;\n    var oneWay = __dependency29__.oneWay;\n    var run = __dependency30__[\"default\"];\n    var libraries = __dependency31__[\"default\"];\n    var isNone = __dependency32__.isNone;\n    var none = __dependency32__.none;\n    var isEmpty = __dependency33__.isEmpty;\n    var empty = __dependency33__.empty;\n    var isBlank = __dependency34__[\"default\"];\n    var isPresent = __dependency35__[\"default\"];\n    var keys = __dependency36__[\"default\"];\n\n    // END IMPORTS\n\n    // BEGIN EXPORTS\n    var EmberInstrumentation = Ember.Instrumentation = {};\n    EmberInstrumentation.instrument = instrument;\n    EmberInstrumentation.subscribe = subscribe;\n    EmberInstrumentation.unsubscribe = unsubscribe;\n    EmberInstrumentation.reset  = reset;\n\n    Ember.instrument = instrument;\n    Ember.subscribe = subscribe;\n\n    Ember._Cache = Cache;\n\n    Ember.generateGuid    = generateGuid;\n    Ember.GUID_KEY        = GUID_KEY;\n    Ember.create          = create;\n    Ember.keys            = keys;\n    Ember.platform        = {\n      defineProperty: defineProperty,\n      hasPropertyAccessors: hasPropertyAccessors\n    };\n\n    var EmberArrayPolyfills = Ember.ArrayPolyfills = {};\n\n    EmberArrayPolyfills.map = map;\n    EmberArrayPolyfills.forEach = forEach;\n    EmberArrayPolyfills.filter = filter;\n    EmberArrayPolyfills.indexOf = indexOf;\n\n    Ember.Error           = EmberError;\n    Ember.guidFor         = guidFor;\n    Ember.META_DESC       = META_DESC;\n    Ember.EMPTY_META      = EMPTY_META;\n    Ember.meta            = meta;\n    Ember.getMeta         = getMeta;\n    Ember.setMeta         = setMeta;\n    Ember.metaPath        = metaPath;\n    Ember.inspect         = inspect;\n    Ember.typeOf          = typeOf;\n    Ember.tryCatchFinally = tryCatchFinally;\n    Ember.isArray         = isArray;\n    Ember.makeArray       = makeArray;\n    Ember.canInvoke       = canInvoke;\n    Ember.tryInvoke       = tryInvoke;\n    Ember.tryFinally      = tryFinally;\n    Ember.wrap            = wrap;\n    Ember.apply           = apply;\n    Ember.applyStr        = applyStr;\n    Ember.uuid            = uuid;\n\n    Ember.Logger = Logger;\n\n    Ember.get            = get;\n    Ember.getWithDefault = getWithDefault;\n    Ember.normalizeTuple = normalizeTuple;\n    Ember._getPath       = _getPath;\n\n    Ember.EnumerableUtils = EnumerableUtils;\n\n    Ember.on                = on;\n    Ember.addListener       = addListener;\n    Ember.removeListener    = removeListener;\n    Ember._suspendListener  = suspendListener;\n    Ember._suspendListeners = suspendListeners;\n    Ember.sendEvent         = sendEvent;\n    Ember.hasListeners      = hasListeners;\n    Ember.watchedEvents     = watchedEvents;\n    Ember.listenersFor      = listenersFor;\n    Ember.listenersDiff     = listenersDiff;\n    Ember.listenersUnion    = listenersUnion;\n\n    Ember._ObserverSet = ObserverSet;\n\n    Ember.propertyWillChange = propertyWillChange;\n    Ember.propertyDidChange = propertyDidChange;\n    Ember.overrideChains = overrideChains;\n    Ember.beginPropertyChanges = beginPropertyChanges;\n    Ember.endPropertyChanges = endPropertyChanges;\n    Ember.changeProperties = changeProperties;\n\n    Ember.Descriptor     = Descriptor;\n    Ember.defineProperty = defineProperty;\n\n    Ember.set    = set;\n    Ember.trySet = trySet;\n\n    Ember.OrderedSet = OrderedSet;\n    Ember.Map = Map;\n    Ember.MapWithDefault = MapWithDefault;\n\n    Ember.getProperties = getProperties;\n    Ember.setProperties = setProperties;\n\n    Ember.watchKey   = watchKey;\n    Ember.unwatchKey = unwatchKey;\n\n    Ember.flushPendingChains = flushPendingChains;\n    Ember.removeChainWatcher = removeChainWatcher;\n    Ember._ChainNode = ChainNode;\n    Ember.finishChains = finishChains;\n\n    Ember.watchPath = watchPath;\n    Ember.unwatchPath = unwatchPath;\n\n    Ember.watch = watch;\n    Ember.isWatching = isWatching;\n    Ember.unwatch = unwatch;\n    Ember.rewatch = rewatch;\n    Ember.destroy = destroy;\n\n    Ember.expandProperties = expandProperties;\n\n    Ember.ComputedProperty = ComputedProperty;\n    Ember.computed = computed;\n    Ember.cacheFor = cacheFor;\n\n    Ember.addObserver = addObserver;\n    Ember.observersFor = observersFor;\n    Ember.removeObserver = removeObserver;\n    Ember.addBeforeObserver = addBeforeObserver;\n    Ember._suspendBeforeObserver = _suspendBeforeObserver;\n    Ember._suspendBeforeObservers = _suspendBeforeObservers;\n    Ember._suspendObserver = _suspendObserver;\n    Ember._suspendObservers = _suspendObservers;\n    Ember.beforeObserversFor = beforeObserversFor;\n    Ember.removeBeforeObserver = removeBeforeObserver;\n\n    Ember.IS_BINDING = IS_BINDING;\n    Ember.required = required;\n    Ember.aliasMethod = aliasMethod;\n    Ember.observer = observer;\n    Ember.immediateObserver = immediateObserver;\n    Ember.beforeObserver = beforeObserver;\n    Ember.mixin = mixin;\n    Ember.Mixin = Mixin;\n\n    Ember.oneWay = oneWay;\n    Ember.bind = bind;\n    Ember.Binding = Binding;\n    Ember.isGlobalPath = isGlobalPath;\n\n    Ember.run = run;\n\n    Ember.libraries = libraries;\n    Ember.libraries.registerCoreLibrary('Ember', Ember.VERSION);\n\n    Ember.isNone = isNone;\n    Ember.none = none;\n\n    Ember.isEmpty = isEmpty;\n    Ember.empty = empty;\n\n    Ember.isBlank = isBlank;\n\n    \n      Ember.isPresent = isPresent;\n    \n\n    Ember.merge = merge;\n\n    /**\n      A function may be assigned to `Ember.onerror` to be called when Ember\n      internals encounter an error. This is useful for specialized error handling\n      and reporting code.\n\n      ```javascript\n      Ember.onerror = function(error) {\n        Em.$.ajax('/report-error', 'POST', {\n          stack: error.stack,\n          otherInformation: 'whatever app state you want to provide'\n        });\n      };\n      ```\n\n      Internally, `Ember.onerror` is used as Backburner's error handler.\n\n      @event onerror\n      @for Ember\n      @param {Exception} error the error object\n    */\n    Ember.onerror = null;\n    // END EXPORTS\n\n    // do this for side-effects of updating Ember.assert, warn, etc when\n    // ember-debug is present\n    if (Ember.__loader.registry['ember-debug']) {\n      requireModule('ember-debug');\n    }\n\n    __exports__[\"default\"] = Ember;\n  });\nenifed(\"ember-metal/alias\",\n  [\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/error\",\"ember-metal/properties\",\"ember-metal/computed\",\"ember-metal/platform\",\"ember-metal/utils\",\"ember-metal/dependent_keys\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    var get = __dependency1__.get;\n    var set = __dependency2__.set;\n    var EmberError = __dependency3__[\"default\"];\n    var Descriptor = __dependency4__.Descriptor;\n    var defineProperty = __dependency4__.defineProperty;\n    var ComputedProperty = __dependency5__.ComputedProperty;\n    var create = __dependency6__.create;\n    var meta = __dependency7__.meta;\n    var inspect = __dependency7__.inspect;\n    var addDependentKeys = __dependency8__.addDependentKeys;\n    var removeDependentKeys = __dependency8__.removeDependentKeys;\n\n    function alias(altKey) {\n      return new AliasedProperty(altKey);\n    }\n\n    __exports__.alias = alias;function AliasedProperty(altKey) {\n      this.altKey = altKey;\n      this._dependentKeys = [ altKey ];\n    }\n\n    __exports__.AliasedProperty = AliasedProperty;AliasedProperty.prototype = create(Descriptor.prototype);\n\n    AliasedProperty.prototype.get = function AliasedProperty_get(obj, keyName) {\n      return get(obj, this.altKey);\n    };\n\n    AliasedProperty.prototype.set = function AliasedProperty_set(obj, keyName, value) {\n      return set(obj, this.altKey, value);\n    };\n\n    AliasedProperty.prototype.willWatch = function(obj, keyName) {\n      addDependentKeys(this, obj, keyName, meta(obj));\n    };\n\n    AliasedProperty.prototype.didUnwatch = function(obj, keyName) {\n      removeDependentKeys(this, obj, keyName, meta(obj));\n    };\n\n    AliasedProperty.prototype.setup = function(obj, keyName) {\n      var m = meta(obj);\n      if (m.watching[keyName]) {\n        addDependentKeys(this, obj, keyName, m);\n      }\n    };\n\n    AliasedProperty.prototype.teardown = function(obj, keyName) {\n      var m = meta(obj);\n      if (m.watching[keyName]) {\n        removeDependentKeys(this, obj, keyName, m);\n      }\n    };\n\n    AliasedProperty.prototype.readOnly = function() {\n      this.set = AliasedProperty_readOnlySet;\n      return this;\n    };\n\n    function AliasedProperty_readOnlySet(obj, keyName, value) {\n      throw new EmberError('Cannot set read-only property \"' + keyName + '\" on object: ' + inspect(obj));\n    }\n\n    AliasedProperty.prototype.oneWay = function() {\n      this.set = AliasedProperty_oneWaySet;\n      return this;\n    };\n\n    function AliasedProperty_oneWaySet(obj, keyName, value) {\n      defineProperty(obj, keyName, null);\n      return set(obj, keyName, value);\n    }\n\n    // Backwards compatibility with Ember Data\n    AliasedProperty.prototype._meta = undefined;\n    AliasedProperty.prototype.meta = ComputedProperty.prototype.meta;\n  });\nenifed(\"ember-metal/array\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n    @module ember-metal\n    */\n\n    var ArrayPrototype = Array.prototype;\n\n    // Testing this is not ideal, but we want to use native functions\n    // if available, but not to use versions created by libraries like Prototype\n    var isNativeFunc = function(func) {\n      // This should probably work in all browsers likely to have ES5 array methods\n      return func && Function.prototype.toString.call(func).indexOf('[native code]') > -1;\n    };\n\n    var defineNativeShim = function(nativeFunc, shim) {\n      if (isNativeFunc(nativeFunc)) {\n        return nativeFunc;\n      }\n      return shim;\n    };\n\n    // From: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/map\n    var map = defineNativeShim(ArrayPrototype.map, function(fun /*, thisp */) {\n      //\"use strict\";\n\n      if (this === void 0 || this === null || typeof fun !== \"function\") {\n        throw new TypeError();\n      }\n\n      var t = Object(this);\n      var len = t.length >>> 0;\n      var res = new Array(len);\n      var thisp = arguments[1];\n\n      for (var i = 0; i < len; i++) {\n        if (i in t) {\n          res[i] = fun.call(thisp, t[i], i, t);\n        }\n      }\n\n      return res;\n    });\n\n    // From: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/foreach\n    var forEach = defineNativeShim(ArrayPrototype.forEach, function(fun /*, thisp */) {\n      //\"use strict\";\n\n      if (this === void 0 || this === null || typeof fun !== \"function\") {\n        throw new TypeError();\n      }\n\n      var t = Object(this);\n      var len = t.length >>> 0;\n      var thisp = arguments[1];\n\n      for (var i = 0; i < len; i++) {\n        if (i in t) {\n          fun.call(thisp, t[i], i, t);\n        }\n      }\n    });\n\n    var indexOf = defineNativeShim(ArrayPrototype.indexOf, function (obj, fromIndex) {\n      if (fromIndex === null || fromIndex === undefined) {\n        fromIndex = 0;\n      }\n      else if (fromIndex < 0) {\n        fromIndex = Math.max(0, this.length + fromIndex);\n      }\n\n      for (var i = fromIndex, j = this.length; i < j; i++) {\n        if (this[i] === obj) {\n          return i;\n        }\n      }\n      return -1;\n    });\n\n    var lastIndexOf = defineNativeShim(ArrayPrototype.lastIndexOf, function(obj, fromIndex) {\n        var len = this.length;\n        var idx;\n\n        if (fromIndex === undefined) fromIndex = len-1;\n        else fromIndex = (fromIndex < 0) ? Math.ceil(fromIndex) : Math.floor(fromIndex);\n        if (fromIndex < 0) fromIndex += len;\n\n        for(idx = fromIndex;idx>=0;idx--) {\n          if (this[idx] === obj) return idx ;\n        }\n        return -1;\n    });\n\n    var filter = defineNativeShim(ArrayPrototype.filter, function (fn, context) {\n      var i, value;\n      var result = [];\n      var length = this.length;\n\n      for (i = 0; i < length; i++) {\n        if (this.hasOwnProperty(i)) {\n          value = this[i];\n          if (fn.call(context, value, i, this)) {\n            result.push(value);\n          }\n        }\n      }\n      return result;\n    });\n\n    if (Ember.SHIM_ES5) {\n      ArrayPrototype.map = ArrayPrototype.map || map;\n      ArrayPrototype.forEach = ArrayPrototype.forEach || forEach;\n      ArrayPrototype.filter = ArrayPrototype.filter || filter;\n      ArrayPrototype.indexOf = ArrayPrototype.indexOf || indexOf;\n      ArrayPrototype.lastIndexOf = ArrayPrototype.lastIndexOf || lastIndexOf;\n    }\n\n    /**\n      Array polyfills to support ES5 features in older browsers.\n\n      @namespace Ember\n      @property ArrayPolyfills\n    */\n    __exports__.map = map;\n    __exports__.forEach = forEach;\n    __exports__.filter = filter;\n    __exports__.indexOf = indexOf;\n    __exports__.lastIndexOf = lastIndexOf;\n  });\nenifed(\"ember-metal/binding\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-metal/observer\",\"ember-metal/run_loop\",\"ember-metal/path_cache\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.Logger, Ember.LOG_BINDINGS, assert\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var trySet = __dependency3__.trySet;\n    var guidFor = __dependency4__.guidFor;\n    var addObserver = __dependency5__.addObserver;\n    var removeObserver = __dependency5__.removeObserver;\n    var _suspendObserver = __dependency5__._suspendObserver;\n    var run = __dependency6__[\"default\"];\n    var isGlobalPath = __dependency7__.isGlobal;\n\n\n    // ES6TODO: where is Ember.lookup defined?\n    /**\n    @module ember-metal\n    */\n\n    // ..........................................................\n    // CONSTANTS\n    //\n\n    /**\n      Debug parameter you can turn on. This will log all bindings that fire to\n      the console. This should be disabled in production code. Note that you\n      can also enable this from the console or temporarily.\n\n      @property LOG_BINDINGS\n      @for Ember\n      @type Boolean\n      @default false\n    */\n    Ember.LOG_BINDINGS = false || !!Ember.ENV.LOG_BINDINGS;\n\n    /**\n      Returns true if the provided path is global (e.g., `MyApp.fooController.bar`)\n      instead of local (`foo.bar.baz`).\n\n      @method isGlobalPath\n      @for Ember\n      @private\n      @param {String} path\n      @return Boolean\n    */\n\n    function getWithGlobals(obj, path) {\n      return get(isGlobalPath(path) ? Ember.lookup : obj, path);\n    }\n\n    // ..........................................................\n    // BINDING\n    //\n\n    function Binding(toPath, fromPath) {\n      this._direction = undefined;\n      this._from = fromPath;\n      this._to   = toPath;\n      this._readyToSync = undefined;\n      this._oneWay = undefined;\n    }\n\n    /**\n    @class Binding\n    @namespace Ember\n    */\n\n    Binding.prototype = {\n      /**\n        This copies the Binding so it can be connected to another object.\n\n        @method copy\n        @return {Ember.Binding} `this`\n      */\n      copy: function () {\n        var copy = new Binding(this._to, this._from);\n        if (this._oneWay) { copy._oneWay = true; }\n        return copy;\n      },\n\n      // ..........................................................\n      // CONFIG\n      //\n\n      /**\n        This will set `from` property path to the specified value. It will not\n        attempt to resolve this property path to an actual object until you\n        connect the binding.\n\n        The binding will search for the property path starting at the root object\n        you pass when you `connect()` the binding. It follows the same rules as\n        `get()` - see that method for more information.\n\n        @method from\n        @param {String} path the property path to connect to\n        @return {Ember.Binding} `this`\n      */\n      from: function(path) {\n        this._from = path;\n        return this;\n      },\n\n      /**\n        This will set the `to` property path to the specified value. It will not\n        attempt to resolve this property path to an actual object until you\n        connect the binding.\n\n        The binding will search for the property path starting at the root object\n        you pass when you `connect()` the binding. It follows the same rules as\n        `get()` - see that method for more information.\n\n        @method to\n        @param {String|Tuple} path A property path or tuple\n        @return {Ember.Binding} `this`\n      */\n      to: function(path) {\n        this._to = path;\n        return this;\n      },\n\n      /**\n        Configures the binding as one way. A one-way binding will relay changes\n        on the `from` side to the `to` side, but not the other way around. This\n        means that if you change the `to` side directly, the `from` side may have\n        a different value.\n\n        @method oneWay\n        @return {Ember.Binding} `this`\n      */\n      oneWay: function() {\n        this._oneWay = true;\n        return this;\n      },\n\n      /**\n        @method toString\n        @return {String} string representation of binding\n      */\n      toString: function() {\n        var oneWay = this._oneWay ? '[oneWay]' : '';\n        return \"Ember.Binding<\" + guidFor(this) + \">(\" + this._from + \" -> \" + this._to + \")\" + oneWay;\n      },\n\n      // ..........................................................\n      // CONNECT AND SYNC\n      //\n\n      /**\n        Attempts to connect this binding instance so that it can receive and relay\n        changes. This method will raise an exception if you have not set the\n        from/to properties yet.\n\n        @method connect\n        @param {Object} obj The root object for this binding.\n        @return {Ember.Binding} `this`\n      */\n      connect: function(obj) {\n        Ember.assert('Must pass a valid object to Ember.Binding.connect()', !!obj);\n\n        var fromPath = this._from;\n        var toPath = this._to;\n        trySet(obj, toPath, getWithGlobals(obj, fromPath));\n\n        // add an observer on the object to be notified when the binding should be updated\n        addObserver(obj, fromPath, this, this.fromDidChange);\n\n        // if the binding is a two-way binding, also set up an observer on the target\n        if (!this._oneWay) { addObserver(obj, toPath, this, this.toDidChange); }\n\n        this._readyToSync = true;\n\n        return this;\n      },\n\n      /**\n        Disconnects the binding instance. Changes will no longer be relayed. You\n        will not usually need to call this method.\n\n        @method disconnect\n        @param {Object} obj The root object you passed when connecting the binding.\n        @return {Ember.Binding} `this`\n      */\n      disconnect: function(obj) {\n        Ember.assert('Must pass a valid object to Ember.Binding.disconnect()', !!obj);\n\n        var twoWay = !this._oneWay;\n\n        // remove an observer on the object so we're no longer notified of\n        // changes that should update bindings.\n        removeObserver(obj, this._from, this, this.fromDidChange);\n\n        // if the binding is two-way, remove the observer from the target as well\n        if (twoWay) { removeObserver(obj, this._to, this, this.toDidChange); }\n\n        this._readyToSync = false; // disable scheduled syncs...\n        return this;\n      },\n\n      // ..........................................................\n      // PRIVATE\n      //\n\n      /* called when the from side changes */\n      fromDidChange: function(target) {\n        this._scheduleSync(target, 'fwd');\n      },\n\n      /* called when the to side changes */\n      toDidChange: function(target) {\n        this._scheduleSync(target, 'back');\n      },\n\n      _scheduleSync: function(obj, dir) {\n        var existingDir = this._direction;\n\n        // if we haven't scheduled the binding yet, schedule it\n        if (existingDir === undefined) {\n          run.schedule('sync', this, this._sync, obj);\n          this._direction  = dir;\n        }\n\n        // If both a 'back' and 'fwd' sync have been scheduled on the same object,\n        // default to a 'fwd' sync so that it remains deterministic.\n        if (existingDir === 'back' && dir === 'fwd') {\n          this._direction = 'fwd';\n        }\n      },\n\n      _sync: function(obj) {\n        var log = Ember.LOG_BINDINGS;\n\n        // don't synchronize destroyed objects or disconnected bindings\n        if (obj.isDestroyed || !this._readyToSync) { return; }\n\n        // get the direction of the binding for the object we are\n        // synchronizing from\n        var direction = this._direction;\n\n        var fromPath = this._from;\n        var toPath = this._to;\n\n        this._direction = undefined;\n\n        // if we're synchronizing from the remote object...\n        if (direction === 'fwd') {\n          var fromValue = getWithGlobals(obj, this._from);\n          if (log) {\n            Ember.Logger.log(' ', this.toString(), '->', fromValue, obj);\n          }\n          if (this._oneWay) {\n            trySet(obj, toPath, fromValue);\n          } else {\n            _suspendObserver(obj, toPath, this, this.toDidChange, function () {\n              trySet(obj, toPath, fromValue);\n            });\n          }\n        // if we're synchronizing *to* the remote object\n        } else if (direction === 'back') {\n          var toValue = get(obj, this._to);\n          if (log) {\n            Ember.Logger.log(' ', this.toString(), '<-', toValue, obj);\n          }\n          _suspendObserver(obj, fromPath, this, this.fromDidChange, function () {\n            trySet(isGlobalPath(fromPath) ? Ember.lookup : obj, fromPath, toValue);\n          });\n        }\n      }\n\n    };\n\n    function mixinProperties(to, from) {\n      for (var key in from) {\n        if (from.hasOwnProperty(key)) {\n          to[key] = from[key];\n        }\n      }\n    }\n\n    mixinProperties(Binding, {\n\n      /*\n        See `Ember.Binding.from`.\n\n        @method from\n        @static\n      */\n      from: function(from) {\n        var C = this;\n        return new C(undefined, from);\n      },\n\n      /*\n        See `Ember.Binding.to`.\n\n        @method to\n        @static\n      */\n      to: function(to) {\n        var C = this;\n        return new C(to, undefined);\n      },\n\n      /**\n        Creates a new Binding instance and makes it apply in a single direction.\n        A one-way binding will relay changes on the `from` side object (supplied\n        as the `from` argument) the `to` side, but not the other way around.\n        This means that if you change the \"to\" side directly, the \"from\" side may have\n        a different value.\n\n        See `Binding.oneWay`.\n\n        @method oneWay\n        @param {String} from from path.\n        @param {Boolean} [flag] (Optional) passing nothing here will make the\n          binding `oneWay`. You can instead pass `false` to disable `oneWay`, making the\n          binding two way again.\n        @return {Ember.Binding} `this`\n      */\n      oneWay: function(from, flag) {\n        var C = this;\n        return new C(undefined, from).oneWay(flag);\n      }\n\n    });\n    /**\n      An `Ember.Binding` connects the properties of two objects so that whenever\n      the value of one property changes, the other property will be changed also.\n\n      ## Automatic Creation of Bindings with `/^*Binding/`-named Properties\n\n      You do not usually create Binding objects directly but instead describe\n      bindings in your class or object definition using automatic binding\n      detection.\n\n      Properties ending in a `Binding` suffix will be converted to `Ember.Binding`\n      instances. The value of this property should be a string representing a path\n      to another object or a custom binding instance created using Binding helpers\n      (see \"One Way Bindings\"):\n\n      ```\n      valueBinding: \"MyApp.someController.title\"\n      ```\n\n      This will create a binding from `MyApp.someController.title` to the `value`\n      property of your object instance automatically. Now the two values will be\n      kept in sync.\n\n      ## One Way Bindings\n\n      One especially useful binding customization you can use is the `oneWay()`\n      helper. This helper tells Ember that you are only interested in\n      receiving changes on the object you are binding from. For example, if you\n      are binding to a preference and you want to be notified if the preference\n      has changed, but your object will not be changing the preference itself, you\n      could do:\n\n      ```\n      bigTitlesBinding: Ember.Binding.oneWay(\"MyApp.preferencesController.bigTitles\")\n      ```\n\n      This way if the value of `MyApp.preferencesController.bigTitles` changes the\n      `bigTitles` property of your object will change also. However, if you\n      change the value of your `bigTitles` property, it will not update the\n      `preferencesController`.\n\n      One way bindings are almost twice as fast to setup and twice as fast to\n      execute because the binding only has to worry about changes to one side.\n\n      You should consider using one way bindings anytime you have an object that\n      may be created frequently and you do not intend to change a property; only\n      to monitor it for changes (such as in the example above).\n\n      ## Adding Bindings Manually\n\n      All of the examples above show you how to configure a custom binding, but the\n      result of these customizations will be a binding template, not a fully active\n      Binding instance. The binding will actually become active only when you\n      instantiate the object the binding belongs to. It is useful however, to\n      understand what actually happens when the binding is activated.\n\n      For a binding to function it must have at least a `from` property and a `to`\n      property. The `from` property path points to the object/key that you want to\n      bind from while the `to` path points to the object/key you want to bind to.\n\n      When you define a custom binding, you are usually describing the property\n      you want to bind from (such as `MyApp.someController.value` in the examples\n      above). When your object is created, it will automatically assign the value\n      you want to bind `to` based on the name of your binding key. In the\n      examples above, during init, Ember objects will effectively call\n      something like this on your binding:\n\n      ```javascript\n      binding = Ember.Binding.from(\"valueBinding\").to(\"value\");\n      ```\n\n      This creates a new binding instance based on the template you provide, and\n      sets the to path to the `value` property of the new object. Now that the\n      binding is fully configured with a `from` and a `to`, it simply needs to be\n      connected to become active. This is done through the `connect()` method:\n\n      ```javascript\n      binding.connect(this);\n      ```\n\n      Note that when you connect a binding you pass the object you want it to be\n      connected to. This object will be used as the root for both the from and\n      to side of the binding when inspecting relative paths. This allows the\n      binding to be automatically inherited by subclassed objects as well.\n\n      This also allows you to bind between objects using the paths you declare in\n      `from` and `to`:\n\n      ```javascript\n      // Example 1\n      binding = Ember.Binding.from(\"App.someObject.value\").to(\"value\");\n      binding.connect(this);\n\n      // Example 2\n      binding = Ember.Binding.from(\"parentView.value\").to(\"App.someObject.value\");\n      binding.connect(this);\n      ```\n\n      Now that the binding is connected, it will observe both the from and to side\n      and relay changes.\n\n      If you ever needed to do so (you almost never will, but it is useful to\n      understand this anyway), you could manually create an active binding by\n      using the `Ember.bind()` helper method. (This is the same method used by\n      to setup your bindings on objects):\n\n      ```javascript\n      Ember.bind(MyApp.anotherObject, \"value\", \"MyApp.someController.value\");\n      ```\n\n      Both of these code fragments have the same effect as doing the most friendly\n      form of binding creation like so:\n\n      ```javascript\n      MyApp.anotherObject = Ember.Object.create({\n        valueBinding: \"MyApp.someController.value\",\n\n        // OTHER CODE FOR THIS OBJECT...\n      });\n      ```\n\n      Ember's built in binding creation method makes it easy to automatically\n      create bindings for you. You should always use the highest-level APIs\n      available, even if you understand how it works underneath.\n\n      @class Binding\n      @namespace Ember\n      @since Ember 0.9\n    */\n    // Ember.Binding = Binding; ES6TODO: where to put this?\n\n\n    /**\n      Global helper method to create a new binding. Just pass the root object\n      along with a `to` and `from` path to create and connect the binding.\n\n      @method bind\n      @for Ember\n      @param {Object} obj The root object of the transform.\n      @param {String} to The path to the 'to' side of the binding.\n        Must be relative to obj.\n      @param {String} from The path to the 'from' side of the binding.\n        Must be relative to obj or a global path.\n      @return {Ember.Binding} binding instance\n    */\n    function bind(obj, to, from) {\n      return new Binding(to, from).connect(obj);\n    }\n\n    __exports__.bind = bind;/**\n      @method oneWay\n      @for Ember\n      @param {Object} obj The root object of the transform.\n      @param {String} to The path to the 'to' side of the binding.\n        Must be relative to obj.\n      @param {String} from The path to the 'from' side of the binding.\n        Must be relative to obj or a global path.\n      @return {Ember.Binding} binding instance\n    */\n    function oneWay(obj, to, from) {\n      return new Binding(to, from).oneWay().connect(obj);\n    }\n\n    __exports__.oneWay = oneWay;__exports__.Binding = Binding;\n    __exports__.isGlobalPath = isGlobalPath;\n  });\nenifed(\"ember-metal/cache\",\n  [\"ember-metal/dictionary\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var dictionary = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Cache;\n\n    function Cache(limit, func) {\n      this.store  = dictionary(null);\n      this.size   = 0;\n      this.misses = 0;\n      this.hits   = 0;\n      this.limit  = limit;\n      this.func   = func;\n    }\n\n    var FALSE     = function() { };\n    var ZERO      = function() { };\n    var UNDEFINED = function() { };\n    var NULL      = function() { };\n\n    Cache.prototype = {\n      set: function(key, value) {\n        if (this.limit > this.size) {\n          this.size ++;\n          if (value === undefined) {\n            this.store[key] = UNDEFINED;\n          } else {\n            this.store[key] = value;\n          }\n        }\n\n        return value;\n      },\n\n      get: function(key) {\n        var value = this.store[key];\n\n        if (value === undefined) {\n          this.misses ++;\n          value = this.set(key, this.func(key));\n        } else if (value === UNDEFINED) {\n          this.hits ++;\n          value = undefined;\n        } else {\n          this.hits ++;\n          // nothing to translate\n        }\n\n        return value;\n      },\n\n      purge: function() {\n        this.store  = dictionary(null);\n        this.size   = 0;\n        this.hits   = 0;\n        this.misses = 0;\n      }\n    };\n  });\nenifed(\"ember-metal/chains\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/utils\",\"ember-metal/array\",\"ember-metal/watch_key\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // warn, assert, etc;\n    var get = __dependency2__.get;\n    var normalizeTuple = __dependency2__.normalizeTuple;\n    var meta = __dependency3__.meta;\n    var forEach = __dependency4__.forEach;\n    var watchKey = __dependency5__.watchKey;\n    var unwatchKey = __dependency5__.unwatchKey;\n\n    var metaFor = meta;\n    var warn = Ember.warn;\n    var FIRST_KEY = /^([^\\.]+)/;\n\n    function firstKey(path) {\n      return path.match(FIRST_KEY)[0];\n    }\n\n    var pendingQueue = [];\n\n    // attempts to add the pendingQueue chains again. If some of them end up\n    // back in the queue and reschedule is true, schedules a timeout to try\n    // again.\n    function flushPendingChains() {\n      if (pendingQueue.length === 0) { return; } // nothing to do\n\n      var queue = pendingQueue;\n      pendingQueue = [];\n\n      forEach.call(queue, function(q) { q[0].add(q[1]); });\n\n      warn('Watching an undefined global, Ember expects watched globals to be setup by the time the run loop is flushed, check for typos', pendingQueue.length === 0);\n    }\n\n    __exports__.flushPendingChains = flushPendingChains;function addChainWatcher(obj, keyName, node) {\n      if (!obj || ('object' !== typeof obj)) { return; } // nothing to do\n\n      var m = metaFor(obj);\n      var nodes = m.chainWatchers;\n\n      if (!m.hasOwnProperty('chainWatchers')) {\n        nodes = m.chainWatchers = {};\n      }\n\n      if (!nodes[keyName]) { nodes[keyName] = []; }\n      nodes[keyName].push(node);\n      watchKey(obj, keyName, m);\n    }\n\n    function removeChainWatcher(obj, keyName, node) {\n      if (!obj || 'object' !== typeof obj) { return; } // nothing to do\n\n      var m = obj['__ember_meta__'];\n      if (m && !m.hasOwnProperty('chainWatchers')) { return; } // nothing to do\n\n      var nodes = m && m.chainWatchers;\n\n      if (nodes && nodes[keyName]) {\n        nodes = nodes[keyName];\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          if (nodes[i] === node) {\n            nodes.splice(i, 1);\n            break;\n          }\n        }\n      }\n      unwatchKey(obj, keyName, m);\n    }\n\n    // A ChainNode watches a single key on an object. If you provide a starting\n    // value for the key then the node won't actually watch it. For a root node\n    // pass null for parent and key and object for value.\n    function ChainNode(parent, key, value) {\n      this._parent = parent;\n      this._key    = key;\n\n      // _watching is true when calling get(this._parent, this._key) will\n      // return the value of this node.\n      //\n      // It is false for the root of a chain (because we have no parent)\n      // and for global paths (because the parent node is the object with\n      // the observer on it)\n      this._watching = value===undefined;\n\n      this._value  = value;\n      this._paths = {};\n      if (this._watching) {\n        this._object = parent.value();\n        if (this._object) { addChainWatcher(this._object, this._key, this); }\n      }\n\n      // Special-case: the EachProxy relies on immediate evaluation to\n      // establish its observers.\n      //\n      // TODO: Replace this with an efficient callback that the EachProxy\n      // can implement.\n      if (this._parent && this._parent._key === '@each') {\n        this.value();\n      }\n    }\n\n    var ChainNodePrototype = ChainNode.prototype;\n\n    function lazyGet(obj, key) {\n      if (!obj) return undefined;\n\n      var meta = obj['__ember_meta__'];\n      // check if object meant only to be a prototype\n      if (meta && meta.proto === obj) return undefined;\n\n      if (key === \"@each\") return get(obj, key);\n\n      // if a CP only return cached value\n      var desc = meta && meta.descs[key];\n      if (desc && desc._cacheable) {\n        if (key in meta.cache) {\n          return meta.cache[key];\n        } else {\n          return undefined;\n        }\n      }\n\n      return get(obj, key);\n    }\n\n    ChainNodePrototype.value = function() {\n      if (this._value === undefined && this._watching) {\n        var obj = this._parent.value();\n        this._value = lazyGet(obj, this._key);\n      }\n      return this._value;\n    };\n\n    ChainNodePrototype.destroy = function() {\n      if (this._watching) {\n        var obj = this._object;\n        if (obj) { removeChainWatcher(obj, this._key, this); }\n        this._watching = false; // so future calls do nothing\n      }\n    };\n\n    // copies a top level object only\n    ChainNodePrototype.copy = function(obj) {\n      var ret = new ChainNode(null, null, obj);\n      var paths = this._paths;\n      var path;\n\n      for (path in paths) {\n        if (paths[path] <= 0) { continue; } // this check will also catch non-number vals.\n        ret.add(path);\n      }\n      return ret;\n    };\n\n    // called on the root node of a chain to setup watchers on the specified\n    // path.\n    ChainNodePrototype.add = function(path) {\n      var obj, tuple, key, src, paths;\n\n      paths = this._paths;\n      paths[path] = (paths[path] || 0) + 1;\n\n      obj = this.value();\n      tuple = normalizeTuple(obj, path);\n\n      // the path was a local path\n      if (tuple[0] && tuple[0] === obj) {\n        path = tuple[1];\n        key  = firstKey(path);\n        path = path.slice(key.length+1);\n\n      // global path, but object does not exist yet.\n      // put into a queue and try to connect later.\n      } else if (!tuple[0]) {\n        pendingQueue.push([this, path]);\n        tuple.length = 0;\n        return;\n\n      // global path, and object already exists\n      } else {\n        src  = tuple[0];\n        key  = path.slice(0, 0-(tuple[1].length+1));\n        path = tuple[1];\n      }\n\n      tuple.length = 0;\n      this.chain(key, path, src);\n    };\n\n    // called on the root node of a chain to teardown watcher on the specified\n    // path\n    ChainNodePrototype.remove = function(path) {\n      var obj, tuple, key, src, paths;\n\n      paths = this._paths;\n      if (paths[path] > 0) { paths[path]--; }\n\n      obj = this.value();\n      tuple = normalizeTuple(obj, path);\n      if (tuple[0] === obj) {\n        path = tuple[1];\n        key  = firstKey(path);\n        path = path.slice(key.length+1);\n      } else {\n        src  = tuple[0];\n        key  = path.slice(0, 0-(tuple[1].length+1));\n        path = tuple[1];\n      }\n\n      tuple.length = 0;\n      this.unchain(key, path);\n    };\n\n    ChainNodePrototype.count = 0;\n\n    ChainNodePrototype.chain = function(key, path, src) {\n      var chains = this._chains;\n      var node;\n      if (!chains) { chains = this._chains = {}; }\n\n      node = chains[key];\n      if (!node) { node = chains[key] = new ChainNode(this, key, src); }\n      node.count++; // count chains...\n\n      // chain rest of path if there is one\n      if (path) {\n        key = firstKey(path);\n        path = path.slice(key.length+1);\n        node.chain(key, path); // NOTE: no src means it will observe changes...\n      }\n    };\n\n    ChainNodePrototype.unchain = function(key, path) {\n      var chains = this._chains;\n      var node = chains[key];\n\n      // unchain rest of path first...\n      if (path && path.length>1) {\n        key  = firstKey(path);\n        path = path.slice(key.length+1);\n        node.unchain(key, path);\n      }\n\n      // delete node if needed.\n      node.count--;\n      if (node.count<=0) {\n        delete chains[node._key];\n        node.destroy();\n      }\n\n    };\n\n    ChainNodePrototype.willChange = function(events) {\n      var chains = this._chains;\n      if (chains) {\n        for(var key in chains) {\n          if (!chains.hasOwnProperty(key)) { continue; }\n          chains[key].willChange(events);\n        }\n      }\n\n      if (this._parent) { this._parent.chainWillChange(this, this._key, 1, events); }\n    };\n\n    ChainNodePrototype.chainWillChange = function(chain, path, depth, events) {\n      if (this._key) { path = this._key + '.' + path; }\n\n      if (this._parent) {\n        this._parent.chainWillChange(this, path, depth+1, events);\n      } else {\n        if (depth > 1) {\n          events.push(this.value(), path);\n        }\n        path = 'this.' + path;\n        if (this._paths[path] > 0) {\n          events.push(this.value(), path);\n        }\n      }\n    };\n\n    ChainNodePrototype.chainDidChange = function(chain, path, depth, events) {\n      if (this._key) { path = this._key + '.' + path; }\n      if (this._parent) {\n        this._parent.chainDidChange(this, path, depth+1, events);\n      } else {\n        if (depth > 1) {\n          events.push(this.value(), path);\n        }\n        path = 'this.' + path;\n        if (this._paths[path] > 0) {\n          events.push(this.value(), path);\n        }\n      }\n    };\n\n    ChainNodePrototype.didChange = function(events) {\n      // invalidate my own value first.\n      if (this._watching) {\n        var obj = this._parent.value();\n        if (obj !== this._object) {\n          removeChainWatcher(this._object, this._key, this);\n          this._object = obj;\n          addChainWatcher(obj, this._key, this);\n        }\n        this._value  = undefined;\n\n        // Special-case: the EachProxy relies on immediate evaluation to\n        // establish its observers.\n        if (this._parent && this._parent._key === '@each')\n          this.value();\n      }\n\n      // then notify chains...\n      var chains = this._chains;\n      if (chains) {\n        for(var key in chains) {\n          if (!chains.hasOwnProperty(key)) { continue; }\n          chains[key].didChange(events);\n        }\n      }\n\n      // if no events are passed in then we only care about the above wiring update\n      if (events === null) { return; }\n\n      // and finally tell parent about my path changing...\n      if (this._parent) { this._parent.chainDidChange(this, this._key, 1, events); }\n    };\n\n    function finishChains(obj) {\n      // We only create meta if we really have to\n      var m = obj['__ember_meta__'],\n        chains, chainWatchers, chainNodes;\n      if (m) {\n        // finish any current chains node watchers that reference obj\n        chainWatchers = m.chainWatchers;\n        if (chainWatchers) {\n          for(var key in chainWatchers) {\n            if (!chainWatchers.hasOwnProperty(key)) { continue; }\n            chainNodes = chainWatchers[key];\n            if (chainNodes) {\n              for (var i=0,l=chainNodes.length;i<l;i++) {\n                chainNodes[i].didChange(null);\n              }\n            }\n          }\n        }\n        // copy chains from prototype\n        chains = m.chains;\n        if (chains && chains.value() !== obj) {\n          metaFor(obj).chains = chains = chains.copy(obj);\n        }\n      }\n    }\n\n    __exports__.finishChains = finishChains;__exports__.removeChainWatcher = removeChainWatcher;\n    __exports__.ChainNode = ChainNode;\n  });\nenifed(\"ember-metal/computed\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-metal/expand_properties\",\"ember-metal/error\",\"ember-metal/properties\",\"ember-metal/property_events\",\"ember-metal/dependent_keys\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var meta = __dependency4__.meta;\n    var inspect = __dependency4__.inspect;\n    var expandProperties = __dependency5__[\"default\"];\n    var EmberError = __dependency6__[\"default\"];\n    var Descriptor = __dependency7__.Descriptor;\n    var defineProperty = __dependency7__.defineProperty;\n    var propertyWillChange = __dependency8__.propertyWillChange;\n    var propertyDidChange = __dependency8__.propertyDidChange;\n    var addDependentKeys = __dependency9__.addDependentKeys;\n    var removeDependentKeys = __dependency9__.removeDependentKeys;\n\n    /**\n    @module ember-metal\n    */\n\n    Ember.warn(\"The CP_DEFAULT_CACHEABLE flag has been removed and computed properties are always cached by default. Use `volatile` if you don't want caching.\", Ember.ENV.CP_DEFAULT_CACHEABLE !== false);\n\n\n    var metaFor = meta;\n    var a_slice = [].slice;\n\n    function UNDEFINED() { }\n\n    // ..........................................................\n    // COMPUTED PROPERTY\n    //\n\n    /**\n      A computed property transforms an objects function into a property.\n\n      By default the function backing the computed property will only be called\n      once and the result will be cached. You can specify various properties\n      that your computed property is dependent on. This will force the cached\n      result to be recomputed if the dependencies are modified.\n\n      In the following example we declare a computed property (by calling\n      `.property()` on the fullName function) and setup the properties\n      dependencies (depending on firstName and lastName). The fullName function\n      will be called once (regardless of how many times it is accessed) as long\n      as it's dependencies have not been changed. Once firstName or lastName are updated\n      any future calls (or anything bound) to fullName will incorporate the new\n      values.\n\n      ```javascript\n      var Person = Ember.Object.extend({\n        // these will be supplied by `create`\n        firstName: null,\n        lastName: null,\n\n        fullName: function() {\n          var firstName = this.get('firstName');\n          var lastName = this.get('lastName');\n\n         return firstName + ' ' + lastName;\n        }.property('firstName', 'lastName')\n      });\n\n      var tom = Person.create({\n        firstName: 'Tom',\n        lastName: 'Dale'\n      });\n\n      tom.get('fullName') // 'Tom Dale'\n      ```\n\n      You can also define what Ember should do when setting a computed property.\n      If you try to set a computed property, it will be invoked with the key and\n      value you want to set it to. You can also accept the previous value as the\n      third parameter.\n\n      ```javascript\n      var Person = Ember.Object.extend({\n        // these will be supplied by `create`\n        firstName: null,\n        lastName: null,\n\n        fullName: function(key, value, oldValue) {\n          // getter\n          if (arguments.length === 1) {\n            var firstName = this.get('firstName');\n            var lastName = this.get('lastName');\n\n            return firstName + ' ' + lastName;\n\n          // setter\n          } else {\n            var name = value.split(' ');\n\n            this.set('firstName', name[0]);\n            this.set('lastName', name[1]);\n\n            return value;\n          }\n        }.property('firstName', 'lastName')\n      });\n\n      var person = Person.create();\n\n      person.set('fullName', 'Peter Wagenet');\n      person.get('firstName'); // 'Peter'\n      person.get('lastName');  // 'Wagenet'\n      ```\n\n      @class ComputedProperty\n      @namespace Ember\n      @extends Ember.Descriptor\n      @constructor\n    */\n    function ComputedProperty(func, opts) {\n      func.__ember_arity__ = func.length;\n      this.func = func;\n\n      this._cacheable = (opts && opts.cacheable !== undefined) ? opts.cacheable : true;\n      this._dependentKeys = opts && opts.dependentKeys;\n      this._readOnly = opts && (opts.readOnly !== undefined || !!opts.readOnly) || false;\n    }\n\n    ComputedProperty.prototype = new Descriptor();\n\n    var ComputedPropertyPrototype = ComputedProperty.prototype;\n    ComputedPropertyPrototype._dependentKeys = undefined;\n    ComputedPropertyPrototype._suspended = undefined;\n    ComputedPropertyPrototype._meta = undefined;\n\n    /**\n      Properties are cacheable by default. Computed property will automatically\n      cache the return value of your function until one of the dependent keys changes.\n\n      Call `volatile()` to set it into non-cached mode. When in this mode\n      the computed property will not automatically cache the return value.\n\n      However, if a property is properly observable, there is no reason to disable\n      caching.\n\n      @method cacheable\n      @param {Boolean} aFlag optional set to `false` to disable caching\n      @return {Ember.ComputedProperty} this\n      @chainable\n    */\n    ComputedPropertyPrototype.cacheable = function(aFlag) {\n      this._cacheable = aFlag !== false;\n      return this;\n    };\n\n    /**\n      Call on a computed property to set it into non-cached mode. When in this\n      mode the computed property will not automatically cache the return value.\n\n      ```javascript\n      var outsideService = Ember.Object.extend({\n        value: function() {\n          return OutsideService.getValue();\n        }.property().volatile()\n      }).create();\n      ```\n\n      @method volatile\n      @return {Ember.ComputedProperty} this\n      @chainable\n    */\n    ComputedPropertyPrototype[\"volatile\"] = function() {\n      return this.cacheable(false);\n    };\n\n    /**\n      Call on a computed property to set it into read-only mode. When in this\n      mode the computed property will throw an error when set.\n\n      ```javascript\n      var Person = Ember.Object.extend({\n        guid: function() {\n          return 'guid-guid-guid';\n        }.property().readOnly()\n      });\n\n      var person = Person.create();\n\n      person.set('guid', 'new-guid'); // will throw an exception\n      ```\n\n      @method readOnly\n      @return {Ember.ComputedProperty} this\n      @chainable\n    */\n    ComputedPropertyPrototype.readOnly = function(readOnly) {\n      this._readOnly = readOnly === undefined || !!readOnly;\n      return this;\n    };\n\n    /**\n      Sets the dependent keys on this computed property. Pass any number of\n      arguments containing key paths that this computed property depends on.\n\n      ```javascript\n      var President = Ember.Object.extend({\n        fullName: computed(function() {\n          return this.get('firstName') + ' ' + this.get('lastName');\n\n          // Tell Ember that this computed property depends on firstName\n          // and lastName\n        }).property('firstName', 'lastName')\n      });\n\n      var president = President.create({\n        firstName: 'Barack',\n        lastName: 'Obama'\n      });\n\n      president.get('fullName'); // 'Barack Obama'\n      ```\n\n      @method property\n      @param {String} path* zero or more property paths\n      @return {Ember.ComputedProperty} this\n      @chainable\n    */\n    ComputedPropertyPrototype.property = function() {\n      var args;\n\n      var addArg = function (property) {\n        args.push(property);\n      };\n\n      args = [];\n      for (var i = 0, l = arguments.length; i < l; i++) {\n        expandProperties(arguments[i], addArg);\n      }\n\n      this._dependentKeys = args;\n      return this;\n    };\n\n    /**\n      In some cases, you may want to annotate computed properties with additional\n      metadata about how they function or what values they operate on. For example,\n      computed property functions may close over variables that are then no longer\n      available for introspection.\n\n      You can pass a hash of these values to a computed property like this:\n\n      ```\n      person: function() {\n        var personId = this.get('personId');\n        return App.Person.create({ id: personId });\n      }.property().meta({ type: App.Person })\n      ```\n\n      The hash that you pass to the `meta()` function will be saved on the\n      computed property descriptor under the `_meta` key. Ember runtime\n      exposes a public API for retrieving these values from classes,\n      via the `metaForProperty()` function.\n\n      @method meta\n      @param {Hash} meta\n      @chainable\n    */\n\n    ComputedPropertyPrototype.meta = function(meta) {\n      if (arguments.length === 0) {\n        return this._meta || {};\n      } else {\n        this._meta = meta;\n        return this;\n      }\n    };\n\n    /* impl descriptor API */\n    ComputedPropertyPrototype.didChange = function(obj, keyName) {\n      // _suspended is set via a CP.set to ensure we don't clear\n      // the cached value set by the setter\n      if (this._cacheable && this._suspended !== obj) {\n        var meta = metaFor(obj);\n        if (meta.cache[keyName] !== undefined) {\n          meta.cache[keyName] = undefined;\n          removeDependentKeys(this, obj, keyName, meta);\n        }\n      }\n    };\n\n    function finishChains(chainNodes)\n    {\n      for (var i=0, l=chainNodes.length; i<l; i++) {\n        chainNodes[i].didChange(null);\n      }\n    }\n\n    /**\n      Access the value of the function backing the computed property.\n      If this property has already been cached, return the cached result.\n      Otherwise, call the function passing the property name as an argument.\n\n      ```javascript\n      var Person = Ember.Object.extend({\n        fullName: function(keyName) {\n          // the keyName parameter is 'fullName' in this case.\n          return this.get('firstName') + ' ' + this.get('lastName');\n        }.property('firstName', 'lastName')\n      });\n\n\n      var tom = Person.create({\n        firstName: 'Tom',\n        lastName: 'Dale'\n      });\n\n      tom.get('fullName') // 'Tom Dale'\n      ```\n\n      @method get\n      @param {String} keyName The key being accessed.\n      @return {Object} The return value of the function backing the CP.\n    */\n    ComputedPropertyPrototype.get = function(obj, keyName) {\n      var ret, cache, meta, chainNodes;\n      if (this._cacheable) {\n        meta = metaFor(obj);\n        cache = meta.cache;\n\n        var result = cache[keyName];\n\n        if (result === UNDEFINED) {\n          return undefined;\n        }  else if (result !== undefined) {\n          return result;\n        }\n\n        ret = this.func.call(obj, keyName);\n        if (ret === undefined) {\n          cache[keyName] = UNDEFINED;\n        } else {\n          cache[keyName] = ret;\n        }\n\n        chainNodes = meta.chainWatchers && meta.chainWatchers[keyName];\n        if (chainNodes) { finishChains(chainNodes); }\n        addDependentKeys(this, obj, keyName, meta);\n      } else {\n        ret = this.func.call(obj, keyName);\n      }\n      return ret;\n    };\n\n    /**\n      Set the value of a computed property. If the function that backs your\n      computed property does not accept arguments then the default action for\n      setting would be to define the property on the current object, and set\n      the value of the property to the value being set.\n\n      Generally speaking if you intend for your computed property to be set\n      your backing function should accept either two or three arguments.\n\n      ```javascript\n      var Person = Ember.Object.extend({\n        // these will be supplied by `create`\n        firstName: null,\n        lastName: null,\n\n        fullName: function(key, value, oldValue) {\n          // getter\n          if (arguments.length === 1) {\n            var firstName = this.get('firstName');\n            var lastName = this.get('lastName');\n\n            return firstName + ' ' + lastName;\n\n          // setter\n          } else {\n            var name = value.split(' ');\n\n            this.set('firstName', name[0]);\n            this.set('lastName', name[1]);\n\n            return value;\n          }\n        }.property('firstName', 'lastName')\n      });\n\n      var person = Person.create();\n\n      person.set('fullName', 'Peter Wagenet');\n      person.get('firstName'); // 'Peter'\n      person.get('lastName');  // 'Wagenet'\n      ```\n\n      @method set\n      @param {String} keyName The key being accessed.\n      @param {Object} newValue The new value being assigned.\n      @param {String} oldValue The old value being replaced.\n      @return {Object} The return value of the function backing the CP.\n    */\n    ComputedPropertyPrototype.set = function computedPropertySetWithSuspend(obj, keyName, value) {\n      var oldSuspended = this._suspended;\n\n      this._suspended = obj;\n\n      try {\n        this._set(obj, keyName, value);\n      } finally {\n        this._suspended = oldSuspended;\n      }\n    };\n\n    ComputedPropertyPrototype._set = function computedPropertySet(obj, keyName, value) {\n      var cacheable      = this._cacheable;\n      var func           = this.func;\n      var meta           = metaFor(obj, cacheable);\n      var cache          = meta.cache;\n      var hadCachedValue = false;\n\n      var funcArgLength, cachedValue, ret;\n\n      if (this._readOnly) {\n        throw new EmberError('Cannot set read-only property \"' + keyName + '\" on object: ' + inspect(obj));\n      }\n\n      if (cacheable && cache[keyName] !== undefined) {\n        if(cache[keyName] !== UNDEFINED) {\n          cachedValue = cache[keyName];\n        }\n\n        hadCachedValue = true;\n      }\n\n      // Check if the CP has been wrapped. If it has, use the\n      // length from the wrapped function.\n\n      funcArgLength = func.wrappedFunction ? func.wrappedFunction.__ember_arity__ : func.__ember_arity__;\n\n      // For backwards-compatibility with computed properties\n      // that check for arguments.length === 2 to determine if\n      // they are being get or set, only pass the old cached\n      // value if the computed property opts into a third\n      // argument.\n      if (funcArgLength === 3) {\n        ret = func.call(obj, keyName, value, cachedValue);\n      } else if (funcArgLength === 2) {\n        ret = func.call(obj, keyName, value);\n      } else {\n        defineProperty(obj, keyName, null, cachedValue);\n        set(obj, keyName, value);\n        return;\n      }\n\n      if (hadCachedValue && cachedValue === ret) { return; }\n\n      var watched = meta.watching[keyName];\n      if (watched) {\n        propertyWillChange(obj, keyName);\n      }\n\n      if (hadCachedValue) {\n        cache[keyName] = undefined;\n      }\n\n      if (cacheable) {\n        if (!hadCachedValue) {\n          addDependentKeys(this, obj, keyName, meta);\n        }\n        if (ret === undefined) {\n          cache[keyName] = UNDEFINED;\n        } else {\n          cache[keyName] = ret;\n        }\n      }\n\n      if (watched) {\n        propertyDidChange(obj, keyName);\n      }\n\n      return ret;\n    };\n\n    /* called before property is overridden */\n    ComputedPropertyPrototype.teardown = function(obj, keyName) {\n      var meta = metaFor(obj);\n\n      if (keyName in meta.cache) {\n        removeDependentKeys(this, obj, keyName, meta);\n      }\n\n      if (this._cacheable) { delete meta.cache[keyName]; }\n\n      return null; // no value to restore\n    };\n\n\n    /**\n      This helper returns a new property descriptor that wraps the passed\n      computed property function. You can use this helper to define properties\n      with mixins or via `Ember.defineProperty()`.\n\n      The function you pass will be used to both get and set property values.\n      The function should accept two parameters, key and value. If value is not\n      undefined you should set the value first. In either case return the\n      current value of the property.\n      \n      A computed property defined in this way might look like this:\n\n      ```js\n      var Person = Ember.Object.extend({\n        firstName: 'Betty',\n        lastName: 'Jones',\n\n        fullName: Ember.computed('firstName', 'lastName', function(key, value) {\n          return this.get('firstName') + ' ' + this.get('lastName');\n        })\n      });\n\n      var client = Person.create();\n\n      client.get('fullName'); // 'Betty Jones'\n      \n      client.set('lastName', 'Fuller');\n      client.get('fullName'); // 'Betty Fuller'\n      ```\n\n      _Note: This is the prefered way to define computed properties when writing third-party\n      libraries that depend on or use Ember, since there is no guarantee that the user\n      will have prototype extensions enabled._\n\n      You might use this method if you disabled\n      [Prototype Extensions](http://emberjs.com/guides/configuring-ember/disabling-prototype-extensions/).\n      The alternative syntax might look like this\n      (if prototype extensions are enabled, which is the default behavior):\n\n      ```js\n      fullName: function () {\n        return this.get('firstName') + ' ' + this.get('lastName');\n      }.property('firstName', 'lastName')\n      ```\n\n      @method computed\n      @for Ember\n      @param {String} [dependentKeys*] Optional dependent keys that trigger this computed property.\n      @param {Function} func The computed property function.\n      @return {Ember.ComputedProperty} property descriptor instance\n    */\n    function computed(func) {\n      var args;\n\n      if (arguments.length > 1) {\n        args = a_slice.call(arguments);\n        func = args.pop();\n      }\n\n      if (typeof func !== \"function\") {\n        throw new EmberError(\"Computed Property declared without a property function\");\n      }\n\n      var cp = new ComputedProperty(func);\n\n      if (args) {\n        cp.property.apply(cp, args);\n      }\n\n      return cp;\n    }\n\n    /**\n      Returns the cached value for a property, if one exists.\n      This can be useful for peeking at the value of a computed\n      property that is generated lazily, without accidentally causing\n      it to be created.\n\n      @method cacheFor\n      @for Ember\n      @param {Object} obj the object whose property you want to check\n      @param {String} key the name of the property whose cached value you want\n        to return\n      @return {Object} the cached value\n    */\n    function cacheFor(obj, key) {\n      var meta = obj['__ember_meta__'];\n      var cache = meta && meta.cache;\n      var ret = cache && cache[key];\n\n      if (ret === UNDEFINED) { return undefined; }\n      return ret;\n    }\n\n    cacheFor.set = function(cache, key, value) {\n      if (value === undefined) {\n        cache[key] = UNDEFINED;\n      } else {\n        cache[key] = value;\n      }\n    };\n\n    cacheFor.get = function(cache, key) {\n      var ret = cache[key];\n      if (ret === UNDEFINED) { return undefined; }\n      return ret;\n    };\n\n    cacheFor.remove = function(cache, key) {\n      cache[key] = undefined;\n    };\n\n    __exports__.ComputedProperty = ComputedProperty;\n    __exports__.computed = computed;\n    __exports__.cacheFor = cacheFor;\n  });\nenifed(\"ember-metal/computed_macros\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/computed\",\"ember-metal/is_empty\",\"ember-metal/is_none\",\"ember-metal/alias\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var computed = __dependency4__.computed;\n    var isEmpty = __dependency5__[\"default\"];\n    var isNone = __dependency6__.isNone;\n    var alias = __dependency7__.alias;\n\n    /**\n    @module ember-metal\n    */\n\n    var a_slice = [].slice;\n\n    function getProperties(self, propertyNames) {\n      var ret = {};\n      for(var i = 0; i < propertyNames.length; i++) {\n        ret[propertyNames[i]] = get(self, propertyNames[i]);\n      }\n      return ret;\n    }\n\n    function registerComputed(name, macro) {\n      computed[name] = function(dependentKey) {\n        var args = a_slice.call(arguments);\n        return computed(dependentKey, function() {\n          return macro.apply(this, args);\n        });\n      };\n    }\n\n    function registerComputedWithProperties(name, macro) {\n      computed[name] = function() {\n        var properties = a_slice.call(arguments);\n\n        var computedFunc = computed(function() {\n          return macro.apply(this, [getProperties(this, properties)]);\n        });\n\n        return computedFunc.property.apply(computedFunc, properties);\n      };\n    }\n\n    /**\n      A computed property that returns true if the value of the dependent\n      property is null, an empty string, empty array, or empty function.\n\n      Example\n\n      ```javascript\n      var ToDoList = Ember.Object.extend({\n        done: Ember.computed.empty('todos')\n      });\n\n      var todoList = ToDoList.create({\n        todos: ['Unit Test', 'Documentation', 'Release']\n      });\n\n      todoList.get('done'); // false\n      todoList.get('todos').clear();\n      todoList.get('done'); // true\n      ```\n\n      @since 1.6.0\n      @method computed.empty\n      @for Ember\n      @param {String} dependentKey\n      @return {Ember.ComputedProperty} computed property which negate\n      the original value for property\n    */\n    computed.empty = function (dependentKey) {\n      return computed(dependentKey + '.length', function () {\n        return isEmpty(get(this, dependentKey));\n      });\n    };\n\n    /**\n      A computed property that returns true if the value of the dependent\n      property is NOT null, an empty string, empty array, or empty function.\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        hasStuff: Ember.computed.notEmpty('backpack')\n      });\n\n      var hamster = Hamster.create({ backpack: ['Food', 'Sleeping Bag', 'Tent'] });\n\n      hamster.get('hasStuff');         // true\n      hamster.get('backpack').clear(); // []\n      hamster.get('hasStuff');         // false\n      ```\n\n      @method computed.notEmpty\n      @for Ember\n      @param {String} dependentKey\n      @return {Ember.ComputedProperty} computed property which returns true if\n      original value for property is not empty.\n    */\n    computed.notEmpty = function(dependentKey) {\n      return computed(dependentKey + '.length', function () {\n        return !isEmpty(get(this, dependentKey));\n      });\n    };\n\n    /**\n      A computed property that returns true if the value of the dependent\n      property is null or undefined. This avoids errors from JSLint complaining\n      about use of ==, which can be technically confusing.\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        isHungry: Ember.computed.none('food')\n      });\n\n      var hamster = Hamster.create();\n\n      hamster.get('isHungry'); // true\n      hamster.set('food', 'Banana');\n      hamster.get('isHungry'); // false\n      hamster.set('food', null);\n      hamster.get('isHungry'); // true\n      ```\n\n      @method computed.none\n      @for Ember\n      @param {String} dependentKey\n      @return {Ember.ComputedProperty} computed property which\n      returns true if original value for property is null or undefined.\n    */\n    registerComputed('none', function(dependentKey) {\n      return isNone(get(this, dependentKey));\n    });\n\n    /**\n      A computed property that returns the inverse boolean value\n      of the original value for the dependent property.\n\n      Example\n\n      ```javascript\n      var User = Ember.Object.extend({\n        isAnonymous: Ember.computed.not('loggedIn')\n      });\n\n      var user = User.create({loggedIn: false});\n\n      user.get('isAnonymous'); // true\n      user.set('loggedIn', true);\n      user.get('isAnonymous'); // false\n      ```\n\n      @method computed.not\n      @for Ember\n      @param {String} dependentKey\n      @return {Ember.ComputedProperty} computed property which returns\n      inverse of the original value for property\n    */\n    registerComputed('not', function(dependentKey) {\n      return !get(this, dependentKey);\n    });\n\n    /**\n      A computed property that converts the provided dependent property\n      into a boolean value.\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        hasBananas: Ember.computed.bool('numBananas')\n      });\n\n      var hamster = Hamster.create();\n\n      hamster.get('hasBananas'); // false\n      hamster.set('numBananas', 0);\n      hamster.get('hasBananas'); // false\n      hamster.set('numBananas', 1);\n      hamster.get('hasBananas'); // true\n      hamster.set('numBananas', null);\n      hamster.get('hasBananas'); // false\n      ```\n\n      @method computed.bool\n      @for Ember\n      @param {String} dependentKey\n      @return {Ember.ComputedProperty} computed property which converts\n      to boolean the original value for property\n    */\n    registerComputed('bool', function(dependentKey) {\n      return !!get(this, dependentKey);\n    });\n\n    /**\n      A computed property which matches the original value for the\n      dependent property against a given RegExp, returning `true`\n      if they values matches the RegExp and `false` if it does not.\n\n      Example\n\n      ```javascript\n      var User = Ember.Object.extend({\n        hasValidEmail: Ember.computed.match('email', /^.+@.+\\..+$/)\n      });\n\n      var user = User.create({loggedIn: false});\n\n      user.get('hasValidEmail'); // false\n      user.set('email', '');\n      user.get('hasValidEmail'); // false\n      user.set('email', 'ember_hamster@example.com');\n      user.get('hasValidEmail'); // true\n      ```\n\n      @method computed.match\n      @for Ember\n      @param {String} dependentKey\n      @param {RegExp} regexp\n      @return {Ember.ComputedProperty} computed property which match\n      the original value for property against a given RegExp\n    */\n    registerComputed('match', function(dependentKey, regexp) {\n      var value = get(this, dependentKey);\n      return typeof value === 'string' ? regexp.test(value) : false;\n    });\n\n    /**\n      A computed property that returns true if the provided dependent property\n      is equal to the given value.\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        napTime: Ember.computed.equal('state', 'sleepy')\n      });\n\n      var hamster = Hamster.create();\n\n      hamster.get('napTime'); // false\n      hamster.set('state', 'sleepy');\n      hamster.get('napTime'); // true\n      hamster.set('state', 'hungry');\n      hamster.get('napTime'); // false\n      ```\n\n      @method computed.equal\n      @for Ember\n      @param {String} dependentKey\n      @param {String|Number|Object} value\n      @return {Ember.ComputedProperty} computed property which returns true if\n      the original value for property is equal to the given value.\n    */\n    registerComputed('equal', function(dependentKey, value) {\n      return get(this, dependentKey) === value;\n    });\n\n    /**\n      A computed property that returns true if the provided dependent property\n      is greater than the provided value.\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        hasTooManyBananas: Ember.computed.gt('numBananas', 10)\n      });\n\n      var hamster = Hamster.create();\n\n      hamster.get('hasTooManyBananas'); // false\n      hamster.set('numBananas', 3);\n      hamster.get('hasTooManyBananas'); // false\n      hamster.set('numBananas', 11);\n      hamster.get('hasTooManyBananas'); // true\n      ```\n\n      @method computed.gt\n      @for Ember\n      @param {String} dependentKey\n      @param {Number} value\n      @return {Ember.ComputedProperty} computed property which returns true if\n      the original value for property is greater than given value.\n    */\n    registerComputed('gt', function(dependentKey, value) {\n      return get(this, dependentKey) > value;\n    });\n\n    /**\n      A computed property that returns true if the provided dependent property\n      is greater than or equal to the provided value.\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        hasTooManyBananas: Ember.computed.gte('numBananas', 10)\n      });\n\n      var hamster = Hamster.create();\n\n      hamster.get('hasTooManyBananas'); // false\n      hamster.set('numBananas', 3);\n      hamster.get('hasTooManyBananas'); // false\n      hamster.set('numBananas', 10);\n      hamster.get('hasTooManyBananas'); // true\n      ```\n\n      @method computed.gte\n      @for Ember\n      @param {String} dependentKey\n      @param {Number} value\n      @return {Ember.ComputedProperty} computed property which returns true if\n      the original value for property is greater or equal then given value.\n    */\n    registerComputed('gte', function(dependentKey, value) {\n      return get(this, dependentKey) >= value;\n    });\n\n    /**\n      A computed property that returns true if the provided dependent property\n      is less than the provided value.\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        needsMoreBananas: Ember.computed.lt('numBananas', 3)\n      });\n\n      var hamster = Hamster.create();\n\n      hamster.get('needsMoreBananas'); // true\n      hamster.set('numBananas', 3);\n      hamster.get('needsMoreBananas'); // false\n      hamster.set('numBananas', 2);\n      hamster.get('needsMoreBananas'); // true\n      ```\n\n      @method computed.lt\n      @for Ember\n      @param {String} dependentKey\n      @param {Number} value\n      @return {Ember.ComputedProperty} computed property which returns true if\n      the original value for property is less then given value.\n    */\n    registerComputed('lt', function(dependentKey, value) {\n      return get(this, dependentKey) < value;\n    });\n\n    /**\n      A computed property that returns true if the provided dependent property\n      is less than or equal to the provided value.\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        needsMoreBananas: Ember.computed.lte('numBananas', 3)\n      });\n\n      var hamster = Hamster.create();\n\n      hamster.get('needsMoreBananas'); // true\n      hamster.set('numBananas', 5);\n      hamster.get('needsMoreBananas'); // false\n      hamster.set('numBananas', 3);\n      hamster.get('needsMoreBananas'); // true\n      ```\n\n      @method computed.lte\n      @for Ember\n      @param {String} dependentKey\n      @param {Number} value\n      @return {Ember.ComputedProperty} computed property which returns true if\n      the original value for property is less or equal than given value.\n    */\n    registerComputed('lte', function(dependentKey, value) {\n      return get(this, dependentKey) <= value;\n    });\n\n    /**\n      A computed property that performs a logical `and` on the\n      original values for the provided dependent properties.\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        readyForCamp: Ember.computed.and('hasTent', 'hasBackpack')\n      });\n\n      var hamster = Hamster.create();\n\n      hamster.get('readyForCamp'); // false\n      hamster.set('hasTent', true);\n      hamster.get('readyForCamp'); // false\n      hamster.set('hasBackpack', true);\n      hamster.get('readyForCamp'); // true\n      ```\n\n      @method computed.and\n      @for Ember\n      @param {String} dependentKey*\n      @return {Ember.ComputedProperty} computed property which performs\n      a logical `and` on the values of all the original values for properties.\n    */\n    registerComputedWithProperties('and', function(properties) {\n      for (var key in properties) {\n        if (properties.hasOwnProperty(key) && !properties[key]) {\n          return false;\n        }\n      }\n      return true;\n    });\n\n    /**\n      A computed property which performs a logical `or` on the\n      original values for the provided dependent properties.\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        readyForRain: Ember.computed.or('hasJacket', 'hasUmbrella')\n      });\n\n      var hamster = Hamster.create();\n\n      hamster.get('readyForRain'); // false\n      hamster.set('hasJacket', true);\n      hamster.get('readyForRain'); // true\n      ```\n\n      @method computed.or\n      @for Ember\n      @param {String} dependentKey*\n      @return {Ember.ComputedProperty} computed property which performs\n      a logical `or` on the values of all the original values for properties.\n    */\n    registerComputedWithProperties('or', function(properties) {\n      for (var key in properties) {\n        if (properties.hasOwnProperty(key) && properties[key]) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    /**\n      A computed property that returns the first truthy value\n      from a list of dependent properties.\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        hasClothes: Ember.computed.any('hat', 'shirt')\n      });\n\n      var hamster = Hamster.create();\n\n      hamster.get('hasClothes'); // null\n      hamster.set('shirt', 'Hawaiian Shirt');\n      hamster.get('hasClothes'); // 'Hawaiian Shirt'\n      ```\n\n      @method computed.any\n      @for Ember\n      @param {String} dependentKey*\n      @return {Ember.ComputedProperty} computed property which returns\n      the first truthy value of given list of properties.\n    */\n    registerComputedWithProperties('any', function(properties) {\n      for (var key in properties) {\n        if (properties.hasOwnProperty(key) && properties[key]) {\n          return properties[key];\n        }\n      }\n      return null;\n    });\n\n    /**\n      A computed property that returns the array of values\n      for the provided dependent properties.\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        clothes: Ember.computed.collect('hat', 'shirt')\n      });\n\n      var hamster = Hamster.create();\n\n      hamster.get('clothes'); // [null, null]\n      hamster.set('hat', 'Camp Hat');\n      hamster.set('shirt', 'Camp Shirt');\n      hamster.get('clothes'); // ['Camp Hat', 'Camp Shirt']\n      ```\n\n      @method computed.collect\n      @for Ember\n      @param {String} dependentKey*\n      @return {Ember.ComputedProperty} computed property which maps\n      values of all passed in properties to an array.\n    */\n    registerComputedWithProperties('collect', function(properties) {\n      var res = [];\n      for (var key in properties) {\n        if (properties.hasOwnProperty(key)) {\n          if (isNone(properties[key])) {\n            res.push(null);\n          } else {\n            res.push(properties[key]);\n          }\n        }\n      }\n      return res;\n    });\n\n    /**\n      Creates a new property that is an alias for another property\n      on an object. Calls to `get` or `set` this property behave as\n      though they were called on the original property.\n\n      ```javascript\n      var Person = Ember.Object.extend({\n        name: 'Alex Matchneer',\n        nomen: Ember.computed.alias('name')\n      });\n\n      var alex = Person.create();\n\n      alex.get('nomen'); // 'Alex Matchneer'\n      alex.get('name');  // 'Alex Matchneer'\n\n      alex.set('nomen', '@machty');\n      alex.get('name');  // '@machty'\n      ```\n\n      @method computed.alias\n      @for Ember\n      @param {String} dependentKey\n      @return {Ember.ComputedProperty} computed property which creates an\n      alias to the original value for property.\n    */\n    computed.alias = alias;\n\n    /**\n      Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n      data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n      not mutate the upstream property, rather causes the current property to\n      become the value set. This causes the downstream property to permanently\n      diverge from the upstream property.\n\n      Example\n\n      ```javascript\n      var User = Ember.Object.extend({\n        firstName: null,\n        lastName: null,\n        nickName: Ember.computed.oneWay('firstName')\n      });\n\n      var teddy = User.create({\n        firstName: 'Teddy',\n        lastName:  'Zeenny'\n      });\n\n      teddy.get('nickName');              // 'Teddy'\n      teddy.set('nickName', 'TeddyBear'); // 'TeddyBear'\n      teddy.get('firstName');             // 'Teddy'\n      ```\n\n      @method computed.oneWay\n      @for Ember\n      @param {String} dependentKey\n      @return {Ember.ComputedProperty} computed property which creates a\n      one way computed property to the original value for property.\n    */\n    computed.oneWay = function(dependentKey) {\n      return alias(dependentKey).oneWay();\n    };\n\n    /**\n      This is a more semantically meaningful alias of `computed.oneWay`,\n      whose name is somewhat ambiguous as to which direction the data flows.\n\n      @method computed.reads\n      @for Ember\n      @param {String} dependentKey\n      @return {Ember.ComputedProperty} computed property which creates a\n        one way computed property to the original value for property.\n     */\n    computed.reads = computed.oneWay;\n\n    /**\n      Where `computed.oneWay` provides oneWay bindings, `computed.readOnly` provides\n      a readOnly one way binding. Very often when using `computed.oneWay` one does\n      not also want changes to propogate back up, as they will replace the value.\n\n      This prevents the reverse flow, and also throws an exception when it occurs.\n\n      Example\n\n      ```javascript\n      var User = Ember.Object.extend({\n        firstName: null,\n        lastName: null,\n        nickName: Ember.computed.readOnly('firstName')\n      });\n\n      var teddy = User.create({\n        firstName: 'Teddy',\n        lastName:  'Zeenny'\n      });\n\n      teddy.get('nickName');              // 'Teddy'\n      teddy.set('nickName', 'TeddyBear'); // throws Exception\n      // throw new Ember.Error('Cannot Set: nickName on: <User:ember27288>' );`\n      teddy.get('firstName');             // 'Teddy'\n      ```\n\n      @method computed.readOnly\n      @for Ember\n      @param {String} dependentKey\n      @return {Ember.ComputedProperty} computed property which creates a\n      one way computed property to the original value for property.\n      @since 1.5.0\n    */\n    computed.readOnly = function(dependentKey) {\n      return alias(dependentKey).readOnly();\n    };\n    /**\n      A computed property that acts like a standard getter and setter,\n      but returns the value at the provided `defaultPath` if the\n      property itself has not been set to a value\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        wishList: Ember.computed.defaultTo('favoriteFood')\n      });\n\n      var hamster = Hamster.create({ favoriteFood: 'Banana' });\n\n      hamster.get('wishList');                     // 'Banana'\n      hamster.set('wishList', 'More Unit Tests');\n      hamster.get('wishList');                     // 'More Unit Tests'\n      hamster.get('favoriteFood');                 // 'Banana'\n      ```\n\n      @method computed.defaultTo\n      @for Ember\n      @param {String} defaultPath\n      @return {Ember.ComputedProperty} computed property which acts like\n      a standard getter and setter, but defaults to the value from `defaultPath`.\n      @deprecated Use `Ember.computed.oneWay` or custom CP with default instead.\n    */\n    // ES6TODO: computed should have its own export path so you can do import {defaultTo} from computed\n    computed.defaultTo = function(defaultPath) {\n      return computed(function(key, newValue, cachedValue) {\n        Ember.deprecate('Usage of Ember.computed.defaultTo is deprecated, use `Ember.computed.oneWay` instead.');\n\n        if (arguments.length === 1) {\n          return get(this, defaultPath);\n        }\n        return newValue != null ? newValue : get(this, defaultPath);\n      });\n    };\n\n    /**\n      Creates a new property that is an alias for another property\n      on an object. Calls to `get` or `set` this property behave as\n      though they were called on the original property, but also\n      print a deprecation warning.\n\n      @method computed.deprecatingAlias\n      @for Ember\n      @param {String} dependentKey\n      @return {Ember.ComputedProperty} computed property which creates an\n      alias with a deprecation to the original value for property.\n      @since 1.7.0\n    */\n    computed.deprecatingAlias = function(dependentKey) {\n      return computed(dependentKey, function(key, value) {\n        Ember.deprecate('Usage of `' + key + '` is deprecated, use `' + dependentKey + '` instead.');\n\n        if (arguments.length > 1) {\n          set(this, dependentKey, value);\n          return value;\n        } else {\n          return get(this, dependentKey);\n        }\n      });\n    };\n  });\nenifed(\"ember-metal/core\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /*globals Ember:true,Em:true,ENV,EmberENV,MetamorphENV:true */\n\n    /**\n    @module ember\n    @submodule ember-metal\n    */\n\n    /**\n      All Ember methods and functions are defined inside of this namespace. You\n      generally should not add new properties to this namespace as it may be\n      overwritten by future versions of Ember.\n\n      You can also use the shorthand `Em` instead of `Ember`.\n\n      Ember-Runtime is a framework that provides core functions for Ember including\n      cross-platform functions, support for property observing and objects. Its\n      focus is on small size and performance. You can use this in place of or\n      along-side other cross-platform libraries such as jQuery.\n\n      The core Runtime framework is based on the jQuery API with a number of\n      performance optimizations.\n\n      @class Ember\n      @static\n      @version 1.8.1\n    */\n\n    if ('undefined' === typeof Ember) {\n      // Create core object. Make it act like an instance of Ember.Namespace so that\n      // objects assigned to it are given a sane string representation.\n      Ember = {};\n    }\n\n    // Default imports, exports and lookup to the global object;\n    var imports = Ember.imports = Ember.imports || this;\n    var exports = Ember.exports = Ember.exports || this;\n    var lookup  = Ember.lookup  = Ember.lookup  || this;\n\n    // aliases needed to keep minifiers from removing the global context\n    exports.Em = exports.Ember = Ember;\n\n    // Make sure these are set whether Ember was already defined or not\n\n    Ember.isNamespace = true;\n\n    Ember.toString = function() { return \"Ember\"; };\n\n\n    /**\n      @property VERSION\n      @type String\n      @default '1.8.1'\n      @static\n    */\n    Ember.VERSION = '1.8.1';\n\n    /**\n      Standard environmental variables. You can define these in a global `EmberENV`\n      variable before loading Ember to control various configuration settings.\n\n      For backwards compatibility with earlier versions of Ember the global `ENV`\n      variable will be used if `EmberENV` is not defined.\n\n      @property ENV\n      @type Hash\n    */\n\n    if (Ember.ENV) {\n      // do nothing if Ember.ENV is already setup\n    } else if ('undefined' !== typeof EmberENV) {\n      Ember.ENV = EmberENV;\n    } else if('undefined' !== typeof ENV) {\n      Ember.ENV = ENV;\n    } else {\n      Ember.ENV = {};\n    }\n\n    Ember.config = Ember.config || {};\n\n    // We disable the RANGE API by default for performance reasons\n    if ('undefined' === typeof Ember.ENV.DISABLE_RANGE_API) {\n      Ember.ENV.DISABLE_RANGE_API = true;\n    }\n\n    if (\"undefined\" === typeof MetamorphENV) {\n      exports.MetamorphENV = {};\n    }\n\n    MetamorphENV.DISABLE_RANGE_API = Ember.ENV.DISABLE_RANGE_API;\n\n    /**\n      Hash of enabled Canary features. Add to this before creating your application.\n\n      You can also define `ENV.FEATURES` if you need to enable features flagged at runtime.\n\n      @class FEATURES\n      @namespace Ember\n      @static\n      @since 1.1.0\n    */\n\n    Ember.FEATURES = Ember.ENV.FEATURES || {};\n\n    /**\n      Test that a feature is enabled. Parsed by Ember's build tools to leave\n      experimental features out of beta/stable builds.\n\n      You can define the following configuration options:\n\n      * `ENV.ENABLE_ALL_FEATURES` - force all features to be enabled.\n      * `ENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly\n        enabled/disabled.\n\n      @method isEnabled\n      @param {String} feature\n      @return {Boolean}\n      @for Ember.FEATURES\n      @since 1.1.0\n    */\n\n    Ember.FEATURES.isEnabled = function(feature) {\n      var featureValue = Ember.FEATURES[feature];\n\n      if (Ember.ENV.ENABLE_ALL_FEATURES) {\n        return true;\n      } else if (featureValue === true || featureValue === false || featureValue === undefined) {\n        return featureValue;\n      } else if (Ember.ENV.ENABLE_OPTIONAL_FEATURES) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    // ..........................................................\n    // BOOTSTRAP\n    //\n\n    /**\n      Determines whether Ember should enhance some built-in object prototypes to\n      provide a more friendly API. If enabled, a few methods will be added to\n      `Function`, `String`, and `Array`. `Object.prototype` will not be enhanced,\n      which is the one that causes most trouble for people.\n\n      In general we recommend leaving this option set to true since it rarely\n      conflicts with other code. If you need to turn it off however, you can\n      define an `ENV.EXTEND_PROTOTYPES` config to disable it.\n\n      @property EXTEND_PROTOTYPES\n      @type Boolean\n      @default true\n      @for Ember\n    */\n    Ember.EXTEND_PROTOTYPES = Ember.ENV.EXTEND_PROTOTYPES;\n\n    if (typeof Ember.EXTEND_PROTOTYPES === 'undefined') {\n      Ember.EXTEND_PROTOTYPES = true;\n    }\n\n    /**\n      Determines whether Ember logs a full stack trace during deprecation warnings\n\n      @property LOG_STACKTRACE_ON_DEPRECATION\n      @type Boolean\n      @default true\n    */\n    Ember.LOG_STACKTRACE_ON_DEPRECATION = (Ember.ENV.LOG_STACKTRACE_ON_DEPRECATION !== false);\n\n    /**\n      Determines whether Ember should add ECMAScript 5 shims to older browsers.\n\n      @property SHIM_ES5\n      @type Boolean\n      @default Ember.EXTEND_PROTOTYPES\n    */\n    Ember.SHIM_ES5 = (Ember.ENV.SHIM_ES5 === false) ? false : Ember.EXTEND_PROTOTYPES;\n\n    /**\n      Determines whether Ember logs info about version of used libraries\n\n      @property LOG_VERSION\n      @type Boolean\n      @default true\n    */\n    Ember.LOG_VERSION = (Ember.ENV.LOG_VERSION === false) ? false : true;\n\n    /**\n      Empty function. Useful for some operations. Always returns `this`.\n\n      @method K\n      @private\n      @return {Object}\n    */\n    var K = function() { return this; };\n    var K = K;\n    __exports__.K = K;Ember.K = K;\n    //TODO: ES6 GLOBL TODO\n\n    // Stub out the methods defined by the ember-debug package in case it's not loaded\n\n    if ('undefined' === typeof Ember.assert) { Ember.assert = Ember.K; }\n    if ('undefined' === typeof Ember.warn) { Ember.warn = Ember.K; }\n    if ('undefined' === typeof Ember.debug) { Ember.debug = Ember.K; }\n    if ('undefined' === typeof Ember.runInDebug) { Ember.runInDebug = Ember.K; }\n    if ('undefined' === typeof Ember.deprecate) { Ember.deprecate = Ember.K; }\n    if ('undefined' === typeof Ember.deprecateFunc) {\n      Ember.deprecateFunc = function(_, func) { return func; };\n    }\n\n    __exports__[\"default\"] = Ember;\n  });\nenifed(\"ember-metal/dependent_keys\",\n  [\"ember-metal/platform\",\"ember-metal/watching\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n        // Remove \"use strict\"; from transpiled module until\n    // https://bugs.webkit.org/show_bug.cgi?id=138038 is fixed\n    //\n    // REMOVE_USE_STRICT: true\n\n    var o_create = __dependency1__.create;\n    var watch = __dependency2__.watch;\n    var unwatch = __dependency2__.unwatch;\n\n    /**\n    @module ember-metal\n    */\n\n    // ..........................................................\n    // DEPENDENT KEYS\n    //\n\n    // data structure:\n    //  meta.deps = {\n    //    'depKey': {\n    //      'keyName': count,\n    //    }\n    //  }\n\n    /*\n      This function returns a map of unique dependencies for a\n      given object and key.\n    */\n    function keysForDep(depsMeta, depKey) {\n      var keys = depsMeta[depKey];\n      if (!keys) {\n        // if there are no dependencies yet for a the given key\n        // create a new empty list of dependencies for the key\n        keys = depsMeta[depKey] = {};\n      } else if (!depsMeta.hasOwnProperty(depKey)) {\n        // otherwise if the dependency list is inherited from\n        // a superclass, clone the hash\n        keys = depsMeta[depKey] = o_create(keys);\n      }\n      return keys;\n    }\n\n    function metaForDeps(meta) {\n      return keysForDep(meta, 'deps');\n    }\n\n    function addDependentKeys(desc, obj, keyName, meta) {\n      // the descriptor has a list of dependent keys, so\n      // add all of its dependent keys.\n      var depKeys = desc._dependentKeys, depsMeta, idx, len, depKey, keys;\n      if (!depKeys) return;\n\n      depsMeta = metaForDeps(meta);\n\n      for(idx = 0, len = depKeys.length; idx < len; idx++) {\n        depKey = depKeys[idx];\n        // Lookup keys meta for depKey\n        keys = keysForDep(depsMeta, depKey);\n        // Increment the number of times depKey depends on keyName.\n        keys[keyName] = (keys[keyName] || 0) + 1;\n        // Watch the depKey\n        watch(obj, depKey, meta);\n      }\n    }\n\n    __exports__.addDependentKeys = addDependentKeys;function removeDependentKeys(desc, obj, keyName, meta) {\n      // the descriptor has a list of dependent keys, so\n      // remove all of its dependent keys.\n      var depKeys = desc._dependentKeys, depsMeta, idx, len, depKey, keys;\n      if (!depKeys) return;\n\n      depsMeta = metaForDeps(meta);\n\n      for(idx = 0, len = depKeys.length; idx < len; idx++) {\n        depKey = depKeys[idx];\n        // Lookup keys meta for depKey\n        keys = keysForDep(depsMeta, depKey);\n        // Decrement the number of times depKey depends on keyName.\n        keys[keyName] = (keys[keyName] || 0) - 1;\n        // Unwatch the depKey\n        unwatch(obj, depKey, meta);\n      }\n    }\n\n    __exports__.removeDependentKeys = removeDependentKeys;\n  });\nenifed(\"ember-metal/deprecate_property\",\n  [\"ember-metal/core\",\"ember-metal/platform\",\"ember-metal/properties\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember-metal\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    var hasPropertyAccessors = __dependency2__.hasPropertyAccessors;\n    var defineProperty = __dependency3__.defineProperty;\n    var get = __dependency4__.get;\n    var set = __dependency5__.set;\n\n\n    /**\n      Used internally to allow changing properties in a backwards compatible way, and print a helpful\n      deprecation warning.\n\n      @method deprecateProperty\n      @param {Object} object The object to add the deprecated property to.\n      @param {String} deprecatedKey The property to add (and print deprecation warnings upon accessing).\n      @param {String} newKey The property that will be aliased.\n      @private\n      @since 1.7.0\n    */\n\n    function deprecateProperty(object, deprecatedKey, newKey) {\n      function deprecate() {\n        Ember.deprecate('Usage of `' + deprecatedKey + '` is deprecated, use `' + newKey + '` instead.');\n      }\n\n      if (hasPropertyAccessors) {\n        defineProperty(object, deprecatedKey, {\n            configurable: true,\n            enumerable: false,\n            set: function(value) { deprecate(); set(this, newKey, value); },\n            get: function() { deprecate(); return get(this, newKey); }\n        });\n      }\n    }\n\n    __exports__.deprecateProperty = deprecateProperty;\n  });\nenifed(\"ember-metal/dictionary\",\n  [\"ember-metal/platform\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var create = __dependency1__.create;\n\n    // the delete is meant to hint at runtimes that this object should remain in\n    // dictionary mode. This is clearly a runtime specific hack, but currently it\n    // appears worthwile in some usecases. Please note, these deletes do increase\n    // the cost of creation dramatically over a plain Object.create. And as this\n    // only makes sense for long-lived dictionaries that aren't instantiated often.\n    __exports__[\"default\"] = function makeDictionary(parent) {\n      var dict = create(parent);\n      dict['_dict'] = null;\n      delete dict['_dict'];\n      return dict;\n    }\n  });\nenifed(\"ember-metal/enumerable_utils\",\n  [\"ember-metal/array\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var _filter = __dependency1__.filter;\n    var a_forEach = __dependency1__.forEach;\n    var _indexOf = __dependency1__.indexOf;\n    var _map = __dependency1__.map;\n\n    var splice = Array.prototype.splice;\n\n    /**\n     * Defines some convenience methods for working with Enumerables.\n     * `Ember.EnumerableUtils` uses `Ember.ArrayPolyfills` when necessary.\n     *\n     * @class EnumerableUtils\n     * @namespace Ember\n     * @static\n     * */\n\n    /**\n     * Calls the map function on the passed object with a specified callback. This\n     * uses `Ember.ArrayPolyfill`'s-map method when necessary.\n     *\n     * @method map\n     * @param {Object} obj The object that should be mapped\n     * @param {Function} callback The callback to execute\n     * @param {Object} thisArg Value to use as this when executing *callback*\n     *\n     * @return {Array} An array of mapped values.\n     */\n    function map(obj, callback, thisArg) {\n      return obj.map ? obj.map(callback, thisArg) : _map.call(obj, callback, thisArg);\n    }\n\n    __exports__.map = map;/**\n     * Calls the forEach function on the passed object with a specified callback. This\n     * uses `Ember.ArrayPolyfill`'s-forEach method when necessary.\n     *\n     * @method forEach\n     * @param {Object} obj The object to call forEach on\n     * @param {Function} callback The callback to execute\n     * @param {Object} thisArg Value to use as this when executing *callback*\n     *\n     */\n    function forEach(obj, callback, thisArg) {\n      return obj.forEach ? obj.forEach(callback, thisArg) : a_forEach.call(obj, callback, thisArg);\n    }\n\n    __exports__.forEach = forEach;/**\n     * Calls the filter function on the passed object with a specified callback. This\n     * uses `Ember.ArrayPolyfill`'s-filter method when necessary.\n     *\n     * @method filter\n     * @param {Object} obj The object to call filter on\n     * @param {Function} callback The callback to execute\n     * @param {Object} thisArg Value to use as this when executing *callback*\n     *\n     * @return {Array} An array containing the filtered values\n     * @since 1.4.0\n     */\n    function filter(obj, callback, thisArg) {\n      return obj.filter ? obj.filter(callback, thisArg) : _filter.call(obj, callback, thisArg);\n    }\n\n    __exports__.filter = filter;/**\n     * Calls the indexOf function on the passed object with a specified callback. This\n     * uses `Ember.ArrayPolyfill`'s-indexOf method when necessary.\n     *\n     * @method indexOf\n     * @param {Object} obj The object to call indexOn on\n     * @param {Function} callback The callback to execute\n     * @param {Object} index The index to start searching from\n     *\n     */\n    function indexOf(obj, element, index) {\n      return obj.indexOf ? obj.indexOf(element, index) : _indexOf.call(obj, element, index);\n    }\n\n    __exports__.indexOf = indexOf;/**\n     * Returns an array of indexes of the first occurrences of the passed elements\n     * on the passed object.\n     *\n     * ```javascript\n     *  var array = [1, 2, 3, 4, 5];\n     *  Ember.EnumerableUtils.indexesOf(array, [2, 5]); // [1, 4]\n     *\n     *  var fubar = \"Fubarr\";\n     *  Ember.EnumerableUtils.indexesOf(fubar, ['b', 'r']); // [2, 4]\n     * ```\n     *\n     * @method indexesOf\n     * @param {Object} obj The object to check for element indexes\n     * @param {Array} elements The elements to search for on *obj*\n     *\n     * @return {Array} An array of indexes.\n     *\n     */\n    function indexesOf(obj, elements) {\n      return elements === undefined ? [] : map(elements, function(item) {\n        return indexOf(obj, item);\n      });\n    }\n\n    __exports__.indexesOf = indexesOf;/**\n     * Adds an object to an array. If the array already includes the object this\n     * method has no effect.\n     *\n     * @method addObject\n     * @param {Array} array The array the passed item should be added to\n     * @param {Object} item The item to add to the passed array\n     *\n     * @return 'undefined'\n     */\n    function addObject(array, item) {\n      var index = indexOf(array, item);\n      if (index === -1) { array.push(item); }\n    }\n\n    __exports__.addObject = addObject;/**\n     * Removes an object from an array. If the array does not contain the passed\n     * object this method has no effect.\n     *\n     * @method removeObject\n     * @param {Array} array The array to remove the item from.\n     * @param {Object} item The item to remove from the passed array.\n     *\n     * @return 'undefined'\n     */\n    function removeObject(array, item) {\n      var index = indexOf(array, item);\n      if (index !== -1) { array.splice(index, 1); }\n    }\n\n    __exports__.removeObject = removeObject;function _replace(array, idx, amt, objects) {\n      var args = [].concat(objects);\n      var ret = [];\n      // https://code.google.com/p/chromium/issues/detail?id=56588\n      var size = 60000;\n      var start = idx;\n      var ends = amt;\n      var count, chunk;\n\n      while (args.length) {\n        count = ends > size ? size : ends;\n        if (count <= 0) { count = 0; }\n\n        chunk = args.splice(0, size);\n        chunk = [start, count].concat(chunk);\n\n        start += size;\n        ends -= count;\n\n        ret = ret.concat(splice.apply(array, chunk));\n      }\n      return ret;\n    }\n\n    __exports__._replace = _replace;/**\n     * Replaces objects in an array with the passed objects.\n     *\n     * ```javascript\n     *   var array = [1,2,3];\n     *   Ember.EnumerableUtils.replace(array, 1, 2, [4, 5]); // [1, 4, 5]\n     *\n     *   var array = [1,2,3];\n     *   Ember.EnumerableUtils.replace(array, 1, 1, [4, 5]); // [1, 4, 5, 3]\n     *\n     *   var array = [1,2,3];\n     *   Ember.EnumerableUtils.replace(array, 10, 1, [4, 5]); // [1, 2, 3, 4, 5]\n     * ```\n     *\n     * @method replace\n     * @param {Array} array The array the objects should be inserted into.\n     * @param {Number} idx Starting index in the array to replace. If *idx* >=\n     * length, then append to the end of the array.\n     * @param {Number} amt Number of elements that should be removed from the array,\n     * starting at *idx*\n     * @param {Array} objects An array of zero or more objects that should be\n     * inserted into the array at *idx*\n     *\n     * @return {Array} The modified array.\n     */\n    function replace(array, idx, amt, objects) {\n      if (array.replace) {\n        return array.replace(idx, amt, objects);\n      } else {\n        return _replace(array, idx, amt, objects);\n      }\n    }\n\n    __exports__.replace = replace;/**\n     * Calculates the intersection of two arrays. This method returns a new array\n     * filled with the records that the two passed arrays share with each other.\n     * If there is no intersection, an empty array will be returned.\n     *\n     * ```javascript\n     * var array1 = [1, 2, 3, 4, 5];\n     * var array2 = [1, 3, 5, 6, 7];\n     *\n     * Ember.EnumerableUtils.intersection(array1, array2); // [1, 3, 5]\n     *\n     * var array1 = [1, 2, 3];\n     * var array2 = [4, 5, 6];\n     *\n     * Ember.EnumerableUtils.intersection(array1, array2); // []\n     * ```\n     *\n     * @method intersection\n     * @param {Array} array1 The first array\n     * @param {Array} array2 The second array\n     *\n     * @return {Array} The intersection of the two passed arrays.\n     */\n    function intersection(array1, array2) {\n      var result = [];\n      forEach(array1, function(element) {\n        if (indexOf(array2, element) >= 0) {\n          result.push(element);\n        }\n      });\n\n      return result;\n    }\n\n    __exports__.intersection = intersection;// TODO: this only exists to maintain the existing api, as we move forward it\n    // should only be part of the \"global build\" via some shim\n    __exports__[\"default\"] = {\n      _replace: _replace,\n      addObject: addObject,\n      filter: filter,\n      forEach: forEach,\n      indexOf: indexOf,\n      indexesOf: indexesOf,\n      intersection: intersection,\n      map: map,\n      removeObject: removeObject,\n      replace: replace\n    };\n  });\nenifed(\"ember-metal/error\",\n  [\"ember-metal/platform\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var create = __dependency1__.create;\n\n    var errorProps = [\n      'description',\n      'fileName',\n      'lineNumber',\n      'message',\n      'name',\n      'number',\n      'stack'\n    ];\n\n    /**\n      A subclass of the JavaScript Error object for use in Ember.\n\n      @class Error\n      @namespace Ember\n      @extends Error\n      @constructor\n    */\n    function EmberError() {\n      var tmp = Error.apply(this, arguments);\n\n      // Adds a `stack` property to the given error object that will yield the\n      // stack trace at the time captureStackTrace was called.\n      // When collecting the stack trace all frames above the topmost call\n      // to this function, including that call, will be left out of the\n      // stack trace.\n      // This is useful because we can hide Ember implementation details\n      // that are not very helpful for the user.\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, Ember.Error);\n      }\n      // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n      for (var idx = 0; idx < errorProps.length; idx++) {\n        this[errorProps[idx]] = tmp[errorProps[idx]];\n      }\n    }\n\n    EmberError.prototype = create(Error.prototype);\n\n    __exports__[\"default\"] = EmberError;\n  });\nenifed(\"ember-metal/events\",\n  [\"ember-metal/core\",\"ember-metal/utils\",\"ember-metal/platform\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n        // Remove \"use strict\"; from transpiled module until\n    // https://bugs.webkit.org/show_bug.cgi?id=138038 is fixed\n    //\n    // REMOVE_USE_STRICT: true\n\n    /**\n    @module ember-metal\n    */\n    var Ember = __dependency1__[\"default\"];\n    var meta = __dependency2__.meta;\n    var tryFinally = __dependency2__.tryFinally;\n    var apply = __dependency2__.apply;\n    var applyStr = __dependency2__.applyStr;\n    var create = __dependency3__.create;\n\n    var a_slice = [].slice;\n    var metaFor = meta;\n\n    /* listener flags */\n    var ONCE = 1;\n    var SUSPENDED = 2;\n\n\n    /*\n      The event system uses a series of nested hashes to store listeners on an\n      object. When a listener is registered, or when an event arrives, these\n      hashes are consulted to determine which target and action pair to invoke.\n\n      The hashes are stored in the object's meta hash, and look like this:\n\n          // Object's meta hash\n          {\n            listeners: {       // variable name: `listenerSet`\n              \"foo:changed\": [ // variable name: `actions`\n                target, method, flags\n              ]\n            }\n          }\n\n    */\n\n    function indexOf(array, target, method) {\n      var index = -1;\n      // hashes are added to the end of the event array\n      // so it makes sense to start searching at the end\n      // of the array and search in reverse\n      for (var i = array.length - 3 ; i >=0; i -= 3) {\n        if (target === array[i] && method === array[i + 1]) {\n             index = i; break;\n        }\n      }\n      return index;\n    }\n\n    function actionsFor(obj, eventName) {\n      var meta = metaFor(obj, true);\n      var actions;\n\n      if (!meta.listeners) { meta.listeners = {}; }\n\n      if (!meta.hasOwnProperty('listeners')) {\n        // setup inherited copy of the listeners object\n        meta.listeners = create(meta.listeners);\n      }\n\n      actions = meta.listeners[eventName];\n\n      // if there are actions, but the eventName doesn't exist in our listeners, then copy them from the prototype\n      if (actions && !meta.listeners.hasOwnProperty(eventName)) {\n        actions = meta.listeners[eventName] = meta.listeners[eventName].slice();\n      } else if (!actions) {\n        actions = meta.listeners[eventName] = [];\n      }\n\n      return actions;\n    }\n\n    function listenersUnion(obj, eventName, otherActions) {\n      var meta = obj['__ember_meta__'];\n      var actions = meta && meta.listeners && meta.listeners[eventName];\n\n      if (!actions) { return; }\n      for (var i = actions.length - 3; i >= 0; i -= 3) {\n        var target = actions[i];\n        var method = actions[i+1];\n        var flags = actions[i+2];\n        var actionIndex = indexOf(otherActions, target, method);\n\n        if (actionIndex === -1) {\n          otherActions.push(target, method, flags);\n        }\n      }\n    }\n\n    __exports__.listenersUnion = listenersUnion;function listenersDiff(obj, eventName, otherActions) {\n      var meta = obj['__ember_meta__'];\n      var actions = meta && meta.listeners && meta.listeners[eventName];\n      var diffActions = [];\n\n      if (!actions) { return; }\n      for (var i = actions.length - 3; i >= 0; i -= 3) {\n        var target = actions[i];\n        var method = actions[i+1];\n        var flags = actions[i+2];\n        var actionIndex = indexOf(otherActions, target, method);\n\n        if (actionIndex !== -1) { continue; }\n\n        otherActions.push(target, method, flags);\n        diffActions.push(target, method, flags);\n      }\n\n      return diffActions;\n    }\n\n    __exports__.listenersDiff = listenersDiff;/**\n      Add an event listener\n\n      @method addListener\n      @for Ember\n      @param obj\n      @param {String} eventName\n      @param {Object|Function} targetOrMethod A target object or a function\n      @param {Function|String} method A function or the name of a function to be called on `target`\n      @param {Boolean} once A flag whether a function should only be called once\n    */\n    function addListener(obj, eventName, target, method, once) {\n      Ember.assert(\"You must pass at least an object and event name to Ember.addListener\", !!obj && !!eventName);\n\n      if (!method && 'function' === typeof target) {\n        method = target;\n        target = null;\n      }\n\n      var actions = actionsFor(obj, eventName);\n      var actionIndex = indexOf(actions, target, method);\n      var flags = 0;\n\n      if (once) flags |= ONCE;\n\n      if (actionIndex !== -1) { return; }\n\n      actions.push(target, method, flags);\n\n      if ('function' === typeof obj.didAddListener) {\n        obj.didAddListener(eventName, target, method);\n      }\n    }\n\n    __exports__.addListener = addListener;/**\n      Remove an event listener\n\n      Arguments should match those passed to `Ember.addListener`.\n\n      @method removeListener\n      @for Ember\n      @param obj\n      @param {String} eventName\n      @param {Object|Function} targetOrMethod A target object or a function\n      @param {Function|String} method A function or the name of a function to be called on `target`\n    */\n    function removeListener(obj, eventName, target, method) {\n      Ember.assert(\"You must pass at least an object and event name to Ember.removeListener\", !!obj && !!eventName);\n\n      if (!method && 'function' === typeof target) {\n        method = target;\n        target = null;\n      }\n\n      function _removeListener(target, method) {\n        var actions = actionsFor(obj, eventName);\n        var actionIndex = indexOf(actions, target, method);\n\n        // action doesn't exist, give up silently\n        if (actionIndex === -1) { return; }\n\n        actions.splice(actionIndex, 3);\n\n        if ('function' === typeof obj.didRemoveListener) {\n          obj.didRemoveListener(eventName, target, method);\n        }\n      }\n\n      if (method) {\n        _removeListener(target, method);\n      } else {\n        var meta = obj['__ember_meta__'];\n        var actions = meta && meta.listeners && meta.listeners[eventName];\n\n        if (!actions) { return; }\n        for (var i = actions.length - 3; i >= 0; i -= 3) {\n          _removeListener(actions[i], actions[i+1]);\n        }\n      }\n    }\n\n    /**\n      Suspend listener during callback.\n\n      This should only be used by the target of the event listener\n      when it is taking an action that would cause the event, e.g.\n      an object might suspend its property change listener while it is\n      setting that property.\n\n      @method suspendListener\n      @for Ember\n\n      @private\n      @param obj\n      @param {String} eventName\n      @param {Object|Function} targetOrMethod A target object or a function\n      @param {Function|String} method A function or the name of a function to be called on `target`\n      @param {Function} callback\n    */\n    function suspendListener(obj, eventName, target, method, callback) {\n      if (!method && 'function' === typeof target) {\n        method = target;\n        target = null;\n      }\n\n      var actions = actionsFor(obj, eventName);\n      var actionIndex = indexOf(actions, target, method);\n\n      if (actionIndex !== -1) {\n        actions[actionIndex+2] |= SUSPENDED; // mark the action as suspended\n      }\n\n      function tryable()   { return callback.call(target); }\n      function finalizer() { if (actionIndex !== -1) { actions[actionIndex+2] &= ~SUSPENDED; } }\n\n      return tryFinally(tryable, finalizer);\n    }\n\n    __exports__.suspendListener = suspendListener;/**\n      Suspends multiple listeners during a callback.\n\n      @method suspendListeners\n      @for Ember\n\n      @private\n      @param obj\n      @param {Array} eventName Array of event names\n      @param {Object|Function} targetOrMethod A target object or a function\n      @param {Function|String} method A function or the name of a function to be called on `target`\n      @param {Function} callback\n    */\n    function suspendListeners(obj, eventNames, target, method, callback) {\n      if (!method && 'function' === typeof target) {\n        method = target;\n        target = null;\n      }\n\n      var suspendedActions = [];\n      var actionsList = [];\n      var eventName, actions, i, l;\n\n      for (i=0, l=eventNames.length; i<l; i++) {\n        eventName = eventNames[i];\n        actions = actionsFor(obj, eventName);\n        var actionIndex = indexOf(actions, target, method);\n\n        if (actionIndex !== -1) {\n          actions[actionIndex+2] |= SUSPENDED;\n          suspendedActions.push(actionIndex);\n          actionsList.push(actions);\n        }\n      }\n\n      function tryable() { return callback.call(target); }\n\n      function finalizer() {\n        for (var i = 0, l = suspendedActions.length; i < l; i++) {\n          var actionIndex = suspendedActions[i];\n          actionsList[i][actionIndex+2] &= ~SUSPENDED;\n        }\n      }\n\n      return tryFinally(tryable, finalizer);\n    }\n\n    __exports__.suspendListeners = suspendListeners;/**\n      Return a list of currently watched events\n\n      @private\n      @method watchedEvents\n      @for Ember\n      @param obj\n    */\n    function watchedEvents(obj) {\n      var listeners = obj['__ember_meta__'].listeners, ret = [];\n\n      if (listeners) {\n        for(var eventName in listeners) {\n          if (listeners[eventName]) { ret.push(eventName); }\n        }\n      }\n      return ret;\n    }\n\n    __exports__.watchedEvents = watchedEvents;/**\n      Send an event. The execution of suspended listeners\n      is skipped, and once listeners are removed. A listener without\n      a target is executed on the passed object. If an array of actions\n      is not passed, the actions stored on the passed object are invoked.\n\n      @method sendEvent\n      @for Ember\n      @param obj\n      @param {String} eventName\n      @param {Array} params Optional parameters for each listener.\n      @param {Array} actions Optional array of actions (listeners).\n      @return true\n    */\n    function sendEvent(obj, eventName, params, actions) {\n      // first give object a chance to handle it\n      if (obj !== Ember && 'function' === typeof obj.sendEvent) {\n        obj.sendEvent(eventName, params);\n      }\n\n      if (!actions) {\n        var meta = obj['__ember_meta__'];\n        actions = meta && meta.listeners && meta.listeners[eventName];\n      }\n\n      if (!actions) { return; }\n\n      for (var i = actions.length - 3; i >= 0; i -= 3) { // looping in reverse for once listeners\n        var target = actions[i], method = actions[i+1], flags = actions[i+2];\n        if (!method) { continue; }\n        if (flags & SUSPENDED) { continue; }\n        if (flags & ONCE) { removeListener(obj, eventName, target, method); }\n        if (!target) { target = obj; }\n        if ('string' === typeof method) {\n          if (params) {\n            applyStr(target, method, params);\n          } else {\n            target[method]();\n          }\n        } else {\n          if (params) {\n            apply(target, method, params);\n          } else {\n            method.call(target);\n          }\n        }\n      }\n      return true;\n    }\n\n    __exports__.sendEvent = sendEvent;/**\n      @private\n      @method hasListeners\n      @for Ember\n      @param obj\n      @param {String} eventName\n    */\n    function hasListeners(obj, eventName) {\n      var meta = obj['__ember_meta__'];\n      var actions = meta && meta.listeners && meta.listeners[eventName];\n\n      return !!(actions && actions.length);\n    }\n\n    __exports__.hasListeners = hasListeners;/**\n      @private\n      @method listenersFor\n      @for Ember\n      @param obj\n      @param {String} eventName\n    */\n    function listenersFor(obj, eventName) {\n      var ret = [];\n      var meta = obj['__ember_meta__'];\n      var actions = meta && meta.listeners && meta.listeners[eventName];\n\n      if (!actions) { return ret; }\n\n      for (var i = 0, l = actions.length; i < l; i += 3) {\n        var target = actions[i];\n        var method = actions[i+1];\n        ret.push([target, method]);\n      }\n\n      return ret;\n    }\n\n    __exports__.listenersFor = listenersFor;/**\n      Define a property as a function that should be executed when\n      a specified event or events are triggered.\n\n\n      ``` javascript\n      var Job = Ember.Object.extend({\n        logCompleted: Ember.on('completed', function() {\n          console.log('Job completed!');\n        })\n      });\n\n      var job = Job.create();\n\n      Ember.sendEvent(job, 'completed'); // Logs 'Job completed!'\n     ```\n\n      @method on\n      @for Ember\n      @param {String} eventNames*\n      @param {Function} func\n      @return func\n    */\n    function on(){\n      var func = a_slice.call(arguments, -1)[0];\n      var events = a_slice.call(arguments, 0, -1);\n      func.__ember_listens__ = events;\n      return func;\n    }\n\n    __exports__.on = on;__exports__.removeListener = removeListener;\n  });\nenifed(\"ember-metal/expand_properties\",\n  [\"ember-metal/core\",\"ember-metal/error\",\"ember-metal/enumerable_utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var EmberError = __dependency2__[\"default\"];\n    var forEach = __dependency3__.forEach;\n\n    /**\n      @module ember-metal\n      */\n\n    var BRACE_EXPANSION = /^((?:[^\\.]*\\.)*)\\{(.*)\\}$/;\n    var SPLIT_REGEX = /\\{|\\}/;\n\n    /**\n      Expands `pattern`, invoking `callback` for each expansion.\n\n      The only pattern supported is brace-expansion, anything else will be passed\n      once to `callback` directly.\n\n      Example\n\n      ```js\n      function echo(arg){ console.log(arg); }\n\n      Ember.expandProperties('foo.bar', echo);              //=> 'foo.bar'\n      Ember.expandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'\n      Ember.expandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'\n      Ember.expandProperties('{foo,bar}.baz', echo);        //=> '{foo,bar}.baz'\n      Ember.expandProperties('foo.{bar,baz}.@each', echo)   //=> 'foo.bar.@each', 'foo.baz.@each'\n      Ember.expandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'\n      Ember.expandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'\n      ```\n\n      @method\n      @private\n      @param {String} pattern The property pattern to expand.\n      @param {Function} callback The callback to invoke.  It is invoked once per\n      expansion, and is passed the expansion.\n      */\n    __exports__[\"default\"] = function expandProperties(pattern, callback) {\n      if (pattern.indexOf(' ') > -1) {\n        throw new EmberError('Brace expanded properties cannot contain spaces, ' +\n          'e.g. `user.{firstName, lastName}` should be `user.{firstName,lastName}`');\n      }\n\n      \n        return newExpandProperties(pattern, callback);\n          }\n\n    function oldExpandProperties(pattern, callback) {\n      var match, prefix, list;\n\n      if (match = BRACE_EXPANSION.exec(pattern)) {\n        prefix = match[1];\n        list = match[2];\n\n        forEach(list.split(','), function (suffix) {\n            callback(prefix + suffix);\n        });\n      } else {\n        callback(pattern);\n      }\n    }\n\n    function newExpandProperties(pattern, callback) {\n      if ('string' === Ember.typeOf(pattern)) {\n        var parts = pattern.split(SPLIT_REGEX);\n        var properties = [parts];\n\n        forEach(parts, function(part, index) {\n          if (part.indexOf(',') >= 0) {\n            properties = duplicateAndReplace(properties, part.split(','), index);\n          }\n        });\n\n        forEach(properties, function(property) {\n          callback(property.join(''));\n        });\n      } else {\n        callback(pattern);\n      }\n    }\n\n    function duplicateAndReplace(properties, currentParts, index) {\n      var all = [];\n\n      forEach(properties, function(property) {\n        forEach(currentParts, function(part) {\n          var current = property.slice(0);\n          current[index] = part;\n          all.push(current);\n        });\n      });\n\n      return all;\n    }\n  });\nenifed(\"ember-metal/get_properties\",\n  [\"ember-metal/property_get\",\"ember-metal/utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var get = __dependency1__.get;\n    var typeOf = __dependency2__.typeOf;\n\n    /**\n      To get multiple properties at once, call `Ember.getProperties`\n      with an object followed by a list of strings or an array:\n\n      ```javascript\n      Ember.getProperties(record, 'firstName', 'lastName', 'zipCode');\n      // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n      ```\n\n      is equivalent to:\n\n      ```javascript\n      Ember.getProperties(record, ['firstName', 'lastName', 'zipCode']);\n      // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n      ```\n\n      @method getProperties\n      @param obj\n      @param {String...|Array} list of keys to get\n      @return {Hash}\n    */\n    __exports__[\"default\"] = function getProperties(obj) {\n      var ret = {};\n      var propertyNames = arguments;\n      var i = 1;\n\n      if (arguments.length === 2 && typeOf(arguments[1]) === 'array') {\n        i = 0;\n        propertyNames = arguments[1];\n      }\n      for(var len = propertyNames.length; i < len; i++) {\n        ret[propertyNames[i]] = get(obj, propertyNames[i]);\n      }\n      return ret;\n    }\n  });\nenifed(\"ember-metal/instrumentation\",\n  [\"ember-metal/core\",\"ember-metal/utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var tryCatchFinally = __dependency2__.tryCatchFinally;\n\n    /**\n      The purpose of the Ember Instrumentation module is\n      to provide efficient, general-purpose instrumentation\n      for Ember.\n\n      Subscribe to a listener by using `Ember.subscribe`:\n\n      ```javascript\n      Ember.subscribe(\"render\", {\n        before: function(name, timestamp, payload) {\n\n        },\n\n        after: function(name, timestamp, payload) {\n\n        }\n      });\n      ```\n\n      If you return a value from the `before` callback, that same\n      value will be passed as a fourth parameter to the `after`\n      callback.\n\n      Instrument a block of code by using `Ember.instrument`:\n\n      ```javascript\n      Ember.instrument(\"render.handlebars\", payload, function() {\n        // rendering logic\n      }, binding);\n      ```\n\n      Event names passed to `Ember.instrument` are namespaced\n      by periods, from more general to more specific. Subscribers\n      can listen for events by whatever level of granularity they\n      are interested in.\n\n      In the above example, the event is `render.handlebars`,\n      and the subscriber listened for all events beginning with\n      `render`. It would receive callbacks for events named\n      `render`, `render.handlebars`, `render.container`, or\n      even `render.handlebars.layout`.\n\n      @class Instrumentation\n      @namespace Ember\n      @static\n    */\n    var subscribers = [];\n    __exports__.subscribers = subscribers;var cache = {};\n\n    var populateListeners = function(name) {\n      var listeners = [];\n      var subscriber;\n\n      for (var i=0, l=subscribers.length; i<l; i++) {\n        subscriber = subscribers[i];\n        if (subscriber.regex.test(name)) {\n          listeners.push(subscriber.object);\n        }\n      }\n\n      cache[name] = listeners;\n      return listeners;\n    };\n\n    var time = (function() {\n      var perf = 'undefined' !== typeof window ? window.performance || {} : {};\n      var fn = perf.now || perf.mozNow || perf.webkitNow || perf.msNow || perf.oNow;\n      // fn.bind will be available in all the browsers that support the advanced window.performance... ;-)\n      return fn ? fn.bind(perf) : function() { return +new Date(); };\n    })();\n\n    /**\n      Notifies event's subscribers, calls `before` and `after` hooks.\n\n      @method instrument\n      @namespace Ember.Instrumentation\n\n      @param {String} [name] Namespaced event name.\n      @param {Object} payload\n      @param {Function} callback Function that you're instrumenting.\n      @param {Object} binding Context that instrument function is called with.\n    */\n    function instrument(name, _payload, callback, binding) {\n      if (subscribers.length === 0) {\n        return callback.call(binding);\n      }\n      var payload = _payload || {};\n      var finalizer = _instrumentStart(name, function () {\n        return payload;\n      });\n      if (finalizer) {\n        var tryable = function _instrumenTryable() {\n          return callback.call(binding);\n        };\n        var catchable = function _instrumentCatchable(e) {\n          payload.exception = e;\n        };\n        return tryCatchFinally(tryable, catchable, finalizer);\n      } else {\n        return callback.call(binding);\n      }\n    }\n\n    __exports__.instrument = instrument;// private for now\n    function _instrumentStart(name, _payload) {\n      var listeners = cache[name];\n\n      if (!listeners) {\n        listeners = populateListeners(name);\n      }\n\n      if (listeners.length === 0) {\n        return;\n      }\n\n      var payload = _payload();\n\n      var STRUCTURED_PROFILE = Ember.STRUCTURED_PROFILE;\n      var timeName;\n      if (STRUCTURED_PROFILE) {\n        timeName = name + \": \" + payload.object;\n        console.time(timeName);\n      }\n\n      var l = listeners.length;\n      var beforeValues = new Array(l);\n      var i, listener;\n      var timestamp = time();\n      for (i=0; i<l; i++) {\n        listener = listeners[i];\n        beforeValues[i] = listener.before(name, timestamp, payload);\n      }\n\n      return function _instrumentEnd() {\n        var i, l, listener;\n        var timestamp = time();\n        for (i=0, l=listeners.length; i<l; i++) {\n          listener = listeners[i];\n          listener.after(name, timestamp, payload, beforeValues[i]);\n        }\n\n        if (STRUCTURED_PROFILE) {\n          console.timeEnd(timeName);\n        }\n      };\n    }\n\n    __exports__._instrumentStart = _instrumentStart;/**\n      Subscribes to a particular event or instrumented block of code.\n\n      @method subscribe\n      @namespace Ember.Instrumentation\n\n      @param {String} [pattern] Namespaced event name.\n      @param {Object} [object] Before and After hooks.\n\n      @return {Subscriber}\n    */\n    function subscribe(pattern, object) {\n      var paths = pattern.split(\".\"), path, regex = [];\n\n      for (var i=0, l=paths.length; i<l; i++) {\n        path = paths[i];\n        if (path === \"*\") {\n          regex.push(\"[^\\\\.]*\");\n        } else {\n          regex.push(path);\n        }\n      }\n\n      regex = regex.join(\"\\\\.\");\n      regex = regex + \"(\\\\..*)?\";\n\n      var subscriber = {\n        pattern: pattern,\n        regex: new RegExp(\"^\" + regex + \"$\"),\n        object: object\n      };\n\n      subscribers.push(subscriber);\n      cache = {};\n\n      return subscriber;\n    }\n\n    __exports__.subscribe = subscribe;/**\n      Unsubscribes from a particular event or instrumented block of code.\n\n      @method unsubscribe\n      @namespace Ember.Instrumentation\n\n      @param {Object} [subscriber]\n    */\n    function unsubscribe(subscriber) {\n      var index;\n\n      for (var i=0, l=subscribers.length; i<l; i++) {\n        if (subscribers[i] === subscriber) {\n          index = i;\n        }\n      }\n\n      subscribers.splice(index, 1);\n      cache = {};\n    }\n\n    __exports__.unsubscribe = unsubscribe;/**\n      Resets `Ember.Instrumentation` by flushing list of subscribers.\n\n      @method reset\n      @namespace Ember.Instrumentation\n    */\n    function reset() {\n      subscribers.length = 0;\n      cache = {};\n    }\n\n    __exports__.reset = reset;\n  });\nenifed(\"ember-metal/is_blank\",\n  [\"ember-metal/core\",\"ember-metal/is_empty\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // deprecateFunc\n    var isEmpty = __dependency2__[\"default\"];\n\n    /**\n      A value is blank if it is empty or a whitespace string.\n\n      ```javascript\n      Ember.isBlank();                // true\n      Ember.isBlank(null);            // true\n      Ember.isBlank(undefined);       // true\n      Ember.isBlank('');              // true\n      Ember.isBlank([]);              // true\n      Ember.isBlank('\\n\\t');          // true\n      Ember.isBlank('  ');            // true\n      Ember.isBlank({});              // false\n      Ember.isBlank('\\n\\t Hello');    // false\n      Ember.isBlank('Hello world');   // false\n      Ember.isBlank([1,2,3]);         // false\n      ```\n\n      @method isBlank\n      @for Ember\n      @param {Object} obj Value to test\n      @return {Boolean}\n      @since 1.5.0\n      */\n    __exports__[\"default\"] = function isBlank(obj) {\n      return isEmpty(obj) || (typeof obj === 'string' && obj.match(/\\S/) === null);\n    }\n  });\nenifed(\"ember-metal/is_empty\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/is_none\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // deprecateFunc\n    var get = __dependency2__.get;\n    var isNone = __dependency3__[\"default\"];\n\n    /**\n      Verifies that a value is `null` or an empty string, empty array,\n      or empty function.\n\n      Constrains the rules on `Ember.isNone` by returning true for empty\n      string and empty arrays.\n\n      ```javascript\n      Ember.isEmpty();                // true\n      Ember.isEmpty(null);            // true\n      Ember.isEmpty(undefined);       // true\n      Ember.isEmpty('');              // true\n      Ember.isEmpty([]);              // true\n      Ember.isEmpty('Adam Hawkins');  // false\n      Ember.isEmpty([0,1,2]);         // false\n      ```\n\n      @method isEmpty\n      @for Ember\n      @param {Object} obj Value to test\n      @return {Boolean}\n    */\n    function isEmpty(obj) {\n      var none = isNone(obj);\n      if (none) {\n        return none;\n      }\n\n      if (typeof obj.size === 'number') {\n        return !obj.size;\n      }\n\n      var objectType = typeof obj;\n\n      if (objectType === 'object') {\n        var size = get(obj, 'size');\n        if (typeof size === 'number') {\n          return !size;\n        }\n      }\n\n      if (typeof obj.length === 'number' && objectType !== 'function') {\n        return !obj.length;\n      }\n\n      if (objectType === 'object') {\n        var length = get(obj, 'length');\n        if (typeof length === 'number') {\n          return !length;\n        }\n      }\n\n      return false;\n    }\n\n    var empty = Ember.deprecateFunc(\"Ember.empty is deprecated. Please use Ember.isEmpty instead.\", isEmpty);\n    __exports__.empty = empty;\n    __exports__[\"default\"] = isEmpty;\n    __exports__.isEmpty = isEmpty;\n    __exports__.empty = empty;\n  });\nenifed(\"ember-metal/is_none\",\n  [\"ember-metal/core\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // deprecateFunc\n\n    /**\n      Returns true if the passed value is null or undefined. This avoids errors\n      from JSLint complaining about use of ==, which can be technically\n      confusing.\n\n      ```javascript\n      Ember.isNone();              // true\n      Ember.isNone(null);          // true\n      Ember.isNone(undefined);     // true\n      Ember.isNone('');            // false\n      Ember.isNone([]);            // false\n      Ember.isNone(function() {});  // false\n      ```\n\n      @method isNone\n      @for Ember\n      @param {Object} obj Value to test\n      @return {Boolean}\n    */\n    function isNone(obj) {\n      return obj === null || obj === undefined;\n    }\n\n    var none = Ember.deprecateFunc(\"Ember.none is deprecated. Please use Ember.isNone instead.\", isNone);\n    __exports__.none = none;\n    __exports__[\"default\"] = isNone;\n    __exports__.isNone = isNone;\n  });\nenifed(\"ember-metal/is_present\",\n  [\"ember-metal/is_blank\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var isBlank = __dependency1__[\"default\"];\n    var isPresent;\n\n    \n      /**\n        A value is present if it not `isBlank`.\n\n        ```javascript\n        Ember.isPresent();                // false\n        Ember.isPresent(null);            // false\n        Ember.isPresent(undefined);       // false\n        Ember.isPresent('');              // false\n        Ember.isPresent([]);              // false\n        Ember.isPresent('\\n\\t');          // false\n        Ember.isPresent('  ');            // false\n        Ember.isPresent({});              // true\n        Ember.isPresent('\\n\\t Hello');    // true\n        Ember.isPresent('Hello world');   // true\n        Ember.isPresent([1,2,3]);         // true\n        ```\n\n        @method isPresent\n        @for Ember\n        @param {Object} obj Value to test\n        @return {Boolean}\n        @since 1.7.0\n        */\n      isPresent = function isPresent(obj) {\n        return !isBlank(obj);\n      };\n    \n\n    __exports__[\"default\"] = isPresent;\n  });\nenifed(\"ember-metal/keys\",\n  [\"ember-metal/platform\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var canDefineNonEnumerableProperties = __dependency1__.canDefineNonEnumerableProperties;\n\n    /**\n      Returns all of the keys defined on an object or hash. This is useful\n      when inspecting objects for debugging. On browsers that support it, this\n      uses the native `Object.keys` implementation.\n\n      @method keys\n      @for Ember\n      @param {Object} obj\n      @return {Array} Array containing keys of obj\n    */\n    var keys = Object.keys;\n\n    if (!keys || !canDefineNonEnumerableProperties) {\n      // modified from\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n      keys = (function () {\n        var hasOwnProperty = Object.prototype.hasOwnProperty,\n            hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),\n            dontEnums = [\n              'toString',\n              'toLocaleString',\n              'valueOf',\n              'hasOwnProperty',\n              'isPrototypeOf',\n              'propertyIsEnumerable',\n              'constructor'\n            ],\n            dontEnumsLength = dontEnums.length;\n\n        return function keys(obj) {\n          if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n            throw new TypeError('Object.keys called on non-object');\n          }\n\n          var result = [], prop, i;\n\n          for (prop in obj) {\n            if (prop !== '_super' &&\n              prop.lastIndexOf('__',0) !== 0 &&\n              hasOwnProperty.call(obj, prop)) {\n              result.push(prop);\n            }\n          }\n\n          if (hasDontEnumBug) {\n            for (i = 0; i < dontEnumsLength; i++) {\n              if (hasOwnProperty.call(obj, dontEnums[i])) {\n                result.push(dontEnums[i]);\n              }\n            }\n          }\n          return result;\n        };\n      }());\n    }\n\n    __exports__[\"default\"] = keys;\n  });\nenifed(\"ember-metal/libraries\",\n  [\"ember-metal/enumerable_utils\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    // Provides a way to register library versions with ember.\n    var forEach = __dependency1__.forEach;\n    var indexOf = __dependency1__.indexOf;\n\n    var libraries = function() {\n      var _libraries   = [];\n      var coreLibIndex = 0;\n\n      var getLibrary = function(name) {\n        for (var i = 0; i < _libraries.length; i++) {\n          if (_libraries[i].name === name) {\n            return _libraries[i];\n          }\n        }\n      };\n\n      _libraries.register = function(name, version) {\n        if (!getLibrary(name)) {\n          _libraries.push({name: name, version: version});\n        }\n      };\n\n      _libraries.registerCoreLibrary = function(name, version) {\n        if (!getLibrary(name)) {\n          _libraries.splice(coreLibIndex++, 0, {name: name, version: version});\n        }\n      };\n\n      _libraries.deRegister = function(name) {\n        var lib = getLibrary(name);\n        if (lib) _libraries.splice(indexOf(_libraries, lib), 1);\n      };\n\n      _libraries.each = function (callback) {\n        forEach(_libraries, function(lib) {\n          callback(lib.name, lib.version);\n        });\n      };\n\n      return _libraries;\n    }();\n\n    __exports__[\"default\"] = libraries;\n  });\nenifed(\"ember-metal/logger\",\n  [\"ember-metal/core\",\"ember-metal/error\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var EmberError = __dependency2__[\"default\"];\n\n    function consoleMethod(name) {\n      var consoleObj, logToConsole;\n      if (Ember.imports.console) {\n        consoleObj = Ember.imports.console;\n      } else if (typeof console !== 'undefined') {\n        consoleObj = console;\n      }\n\n      var method = typeof consoleObj === 'object' ? consoleObj[name] : null;\n\n      if (method) {\n        // Older IE doesn't support apply, but Chrome needs it\n        if (typeof method.apply === 'function') {\n          logToConsole = function() {\n            method.apply(consoleObj, arguments);\n          };\n          logToConsole.displayName = 'console.' + name;\n          return logToConsole;\n        } else {\n          return function() {\n            var message = Array.prototype.join.call(arguments, ', ');\n            method(message);\n          };\n        }\n      }\n    }\n\n    function assertPolyfill(test, message) {\n      if (!test) {\n        try {\n          // attempt to preserve the stack\n          throw new EmberError(\"assertion failed: \" + message);\n        } catch(error) {\n          setTimeout(function() {\n            throw error;\n          }, 0);\n        }\n      }\n    }\n\n    /**\n      Inside Ember-Metal, simply uses the methods from `imports.console`.\n      Override this to provide more robust logging functionality.\n\n      @class Logger\n      @namespace Ember\n    */\n    __exports__[\"default\"] = {\n      /**\n       Logs the arguments to the console.\n       You can pass as many arguments as you want and they will be joined together with a space.\n\n        ```javascript\n        var foo = 1;\n        Ember.Logger.log('log value of foo:', foo);\n        // \"log value of foo: 1\" will be printed to the console\n        ```\n\n       @method log\n       @for Ember.Logger\n       @param {*} arguments\n      */\n      log:   consoleMethod('log')   || Ember.K,\n\n      /**\n       Prints the arguments to the console with a warning icon.\n       You can pass as many arguments as you want and they will be joined together with a space.\n\n        ```javascript\n        Ember.Logger.warn('Something happened!');\n        // \"Something happened!\" will be printed to the console with a warning icon.\n        ```\n\n       @method warn\n       @for Ember.Logger\n       @param {*} arguments\n      */\n      warn:  consoleMethod('warn')  || Ember.K,\n\n      /**\n       Prints the arguments to the console with an error icon, red text and a stack trace.\n       You can pass as many arguments as you want and they will be joined together with a space.\n\n        ```javascript\n        Ember.Logger.error('Danger! Danger!');\n        // \"Danger! Danger!\" will be printed to the console in red text.\n        ```\n\n       @method error\n       @for Ember.Logger\n       @param {*} arguments\n      */\n      error: consoleMethod('error') || Ember.K,\n\n      /**\n       Logs the arguments to the console.\n       You can pass as many arguments as you want and they will be joined together with a space.\n\n        ```javascript\n        var foo = 1;\n        Ember.Logger.info('log value of foo:', foo);\n        // \"log value of foo: 1\" will be printed to the console\n        ```\n\n       @method info\n       @for Ember.Logger\n       @param {*} arguments\n      */\n      info:  consoleMethod('info')  || Ember.K,\n\n      /**\n       Logs the arguments to the console in blue text.\n       You can pass as many arguments as you want and they will be joined together with a space.\n\n        ```javascript\n        var foo = 1;\n        Ember.Logger.debug('log value of foo:', foo);\n        // \"log value of foo: 1\" will be printed to the console\n        ```\n\n       @method debug\n       @for Ember.Logger\n       @param {*} arguments\n      */\n      debug: consoleMethod('debug') || consoleMethod('info') || Ember.K,\n\n      /**\n       If the value passed into `Ember.Logger.assert` is not truthy it will throw an error with a stack trace.\n\n        ```javascript\n        Ember.Logger.assert(true); // undefined\n        Ember.Logger.assert(true === false); // Throws an Assertion failed error.\n        ```\n\n       @method assert\n       @for Ember.Logger\n       @param {Boolean} bool Value to test\n      */\n      assert: consoleMethod('assert') || assertPolyfill\n    };\n  });\nenifed(\"ember-metal/map\",\n  [\"ember-metal/utils\",\"ember-metal/array\",\"ember-metal/platform\",\"ember-metal/deprecate_property\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember-metal\n    */\n\n    /*\n      JavaScript (before ES6) does not have a Map implementation. Objects,\n      which are often used as dictionaries, may only have Strings as keys.\n\n      Because Ember has a way to get a unique identifier for every object\n      via `Ember.guidFor`, we can implement a performant Map with arbitrary\n      keys. Because it is commonly used in low-level bookkeeping, Map is\n      implemented as a pure JavaScript object for performance.\n\n      This implementation follows the current iteration of the ES6 proposal for\n      maps (http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets),\n      with one exception:  as we do not have the luxury of in-VM iteration, we implement a\n      forEach method for iteration.\n\n      Map is mocked out to look like an Ember object, so you can do\n      `Ember.Map.create()` for symmetry with other Ember classes.\n    */\n\n    var guidFor = __dependency1__.guidFor;\n    var indexOf = __dependency2__.indexOf;\n    var create = __dependency3__.create;\n    var deprecateProperty = __dependency4__.deprecateProperty;\n\n    function missingFunction(fn) {\n      throw new TypeError('' + Object.prototype.toString.call(fn) + \" is not a function\");\n    }\n\n    function missingNew(name) {\n      throw new TypeError(\"Constructor \" + name + \"requires 'new'\");\n    }\n\n    function copyNull(obj) {\n      var output = create(null);\n\n      for (var prop in obj) {\n        // hasOwnPropery is not needed because obj is Object.create(null);\n        output[prop] = obj[prop];\n      }\n\n      return output;\n    }\n\n    function copyMap(original, newObject) {\n      var keys = original.keys.copy();\n      var values = copyNull(original.values);\n\n      newObject.keys = keys;\n      newObject.values = values;\n      newObject.size = original.size;\n\n      return newObject;\n    }\n\n    /**\n      This class is used internally by Ember and Ember Data.\n      Please do not use it at this time. We plan to clean it up\n      and add many tests soon.\n\n      @class OrderedSet\n      @namespace Ember\n      @constructor\n      @private\n    */\n    function OrderedSet() {\n\n      if (this instanceof OrderedSet) {\n        this.clear();\n        this._silenceRemoveDeprecation = false;\n      } else {\n        missingNew(\"OrderedSet\");\n      }\n    }\n\n    /**\n      @method create\n      @static\n      @return {Ember.OrderedSet}\n    */\n    OrderedSet.create = function() {\n      var Constructor = this;\n\n      return new Constructor();\n    };\n\n    OrderedSet.prototype = {\n      constructor: OrderedSet,\n      /**\n        @method clear\n      */\n      clear: function() {\n        this.presenceSet = create(null);\n        this.list = [];\n        this.size = 0;\n      },\n\n      /**\n        @method add\n        @param obj\n        @param guid (optional, and for internal use)\n        @return {Ember.OrderedSet}\n      */\n      add: function(obj, _guid) {\n        var guid = _guid || guidFor(obj);\n        var presenceSet = this.presenceSet;\n        var list = this.list;\n\n        if (presenceSet[guid] === true) {\n          return;\n        }\n\n        presenceSet[guid] = true;\n        this.size = list.push(obj);\n\n        return this;\n      },\n\n      /**\n        @deprecated\n\n        @method remove\n        @param obj\n        @param _guid (optional and for internal use only)\n        @return {Boolean}\n      */\n      remove: function(obj, _guid) {\n        Ember.deprecate('Calling `OrderedSet.prototype.remove` has been deprecated, please use `OrderedSet.prototype.delete` instead.', this._silenceRemoveDeprecation);\n\n        return this[\"delete\"](obj, _guid);\n      },\n\n      /**\n        @method delete\n        @param obj\n        @param _guid (optional and for internal use only)\n        @return {Boolean}\n      */\n      \"delete\": function(obj, _guid) {\n        var guid = _guid || guidFor(obj);\n        var presenceSet = this.presenceSet;\n        var list = this.list;\n\n        if (presenceSet[guid] === true) {\n          delete presenceSet[guid];\n          var index = indexOf.call(list, obj);\n          if (index > -1) {\n            list.splice(index, 1);\n          }\n          this.size = list.length;\n          return true;\n        } else {\n          return false;\n        }\n      },\n\n      /**\n        @method isEmpty\n        @return {Boolean}\n      */\n      isEmpty: function() {\n        return this.size === 0;\n      },\n\n      /**\n        @method has\n        @param obj\n        @return {Boolean}\n      */\n      has: function(obj) {\n        if (this.size === 0) { return false; }\n\n        var guid = guidFor(obj);\n        var presenceSet = this.presenceSet;\n\n        return presenceSet[guid] === true;\n      },\n\n      /**\n        @method forEach\n        @param {Function} fn\n        @param self\n      */\n      forEach: function(fn /*, thisArg*/) {\n        if (typeof fn !== 'function') {\n          missingFunction(fn);\n        }\n\n        if (this.size === 0) { return; }\n\n        var list = this.list;\n        var length = arguments.length;\n        var i;\n\n        if (length === 2) {\n          for (i = 0; i < list.length; i++) {\n            fn.call(arguments[1], list[i]);\n          }\n        } else {\n          for (i = 0; i < list.length; i++) {\n            fn(list[i]);\n          }\n        }\n      },\n\n      /**\n        @method toArray\n        @return {Array}\n      */\n      toArray: function() {\n        return this.list.slice();\n      },\n\n      /**\n        @method copy\n        @return {Ember.OrderedSet}\n      */\n      copy: function() {\n        var Constructor = this.constructor;\n        var set = new Constructor();\n\n        set._silenceRemoveDeprecation = this._silenceRemoveDeprecation;\n        set.presenceSet = copyNull(this.presenceSet);\n        set.list = this.toArray();\n        set.size = this.size;\n\n        return set;\n      }\n    };\n\n    deprecateProperty(OrderedSet.prototype, 'length', 'size');\n\n    /**\n      A Map stores values indexed by keys. Unlike JavaScript's\n      default Objects, the keys of a Map can be any JavaScript\n      object.\n\n      Internally, a Map has two data structures:\n\n      1. `keys`: an OrderedSet of all of the existing keys\n      2. `values`: a JavaScript Object indexed by the `Ember.guidFor(key)`\n\n      When a key/value pair is added for the first time, we\n      add the key to the `keys` OrderedSet, and create or\n      replace an entry in `values`. When an entry is deleted,\n      we delete its entry in `keys` and `values`.\n\n      @class Map\n      @namespace Ember\n      @private\n      @constructor\n    */\n    function Map() {\n      if (this instanceof this.constructor) {\n        this.keys = OrderedSet.create();\n        this.keys._silenceRemoveDeprecation = true;\n        this.values = create(null);\n        this.size = 0;\n      } else {\n        missingNew(\"OrderedSet\");\n      }\n    }\n\n    Ember.Map = Map;\n\n    /**\n      @method create\n      @static\n    */\n    Map.create = function() {\n      var Constructor = this;\n      return new Constructor();\n    };\n\n    Map.prototype = {\n      constructor: Map,\n\n      /**\n        This property will change as the number of objects in the map changes.\n\n        @property size\n        @type number\n        @default 0\n      */\n      size: 0,\n\n      /**\n        Retrieve the value associated with a given key.\n\n        @method get\n        @param {*} key\n        @return {*} the value associated with the key, or `undefined`\n      */\n      get: function(key) {\n        if (this.size === 0) { return; }\n\n        var values = this.values;\n        var guid = guidFor(key);\n\n        return values[guid];\n      },\n\n      /**\n        Adds a value to the map. If a value for the given key has already been\n        provided, the new value will replace the old value.\n\n        @method set\n        @param {*} key\n        @param {*} value\n        @return {Ember.Map}\n      */\n      set: function(key, value) {\n        var keys = this.keys;\n        var values = this.values;\n        var guid = guidFor(key);\n\n        // ensure we don't store -0\n        var k = key === -0 ? 0 : key;\n\n        keys.add(k, guid);\n\n        values[guid] = value;\n\n        this.size = keys.size;\n\n        return this;\n      },\n\n      /**\n        @deprecated see delete\n        Removes a value from the map for an associated key.\n\n        @method remove\n        @param {*} key\n        @return {Boolean} true if an item was removed, false otherwise\n      */\n      remove: function(key) {\n        Ember.deprecate('Calling `Map.prototype.remove` has been deprecated, please use `Map.prototype.delete` instead.');\n\n        return this[\"delete\"](key);\n      },\n\n      /**\n        Removes a value from the map for an associated key.\n\n        @method delete\n        @param {*} key\n        @return {Boolean} true if an item was removed, false otherwise\n      */\n      \"delete\": function(key) {\n        if (this.size === 0) { return false; }\n        // don't use ES6 \"delete\" because it will be annoying\n        // to use in browsers that are not ES6 friendly;\n        var keys = this.keys;\n        var values = this.values;\n        var guid = guidFor(key);\n\n        if (keys[\"delete\"](key, guid)) {\n          delete values[guid];\n          this.size = keys.size;\n          return true;\n        } else {\n          return false;\n        }\n      },\n\n      /**\n        Check whether a key is present.\n\n        @method has\n        @param {*} key\n        @return {Boolean} true if the item was present, false otherwise\n      */\n      has: function(key) {\n        return this.keys.has(key);\n      },\n\n      /**\n        Iterate over all the keys and values. Calls the function once\n        for each key, passing in the key and value, in that order.\n\n        The keys are guaranteed to be iterated over in insertion order.\n\n        @method forEach\n        @param {Function} callback\n        @param {*} self if passed, the `this` value inside the\n          callback. By default, `this` is the map.\n      */\n      forEach: function(callback /*, thisArg*/) {\n        if (typeof callback !== 'function') {\n          missingFunction(callback);\n        }\n\n        if (this.size === 0) { return; }\n\n        var length = arguments.length;\n        var map = this;\n        var cb, thisArg;\n\n        if (length === 2) {\n          thisArg = arguments[1];\n          cb = function(key) {\n            callback.call(thisArg, map.get(key), key);\n          };\n        } else {\n          cb = function(key) {\n            callback(map.get(key), key);\n          };\n        }\n\n        this.keys.forEach(cb);\n      },\n\n      /**\n        @method clear\n      */\n      clear: function() {\n        this.keys.clear();\n        this.values = create(null);\n        this.size = 0;\n      },\n\n      /**\n        @method copy\n        @return {Ember.Map}\n      */\n      copy: function() {\n        return copyMap(this, new Map());\n      }\n    };\n\n    deprecateProperty(Map.prototype, 'length', 'size');\n\n    /**\n      @class MapWithDefault\n      @namespace Ember\n      @extends Ember.Map\n      @private\n      @constructor\n      @param [options]\n        @param {*} [options.defaultValue]\n    */\n    function MapWithDefault(options) {\n      this._super$constructor();\n      this.defaultValue = options.defaultValue;\n    }\n\n    /**\n      @method create\n      @static\n      @param [options]\n        @param {*} [options.defaultValue]\n      @return {Ember.MapWithDefault|Ember.Map} If options are passed, returns\n        `Ember.MapWithDefault` otherwise returns `Ember.Map`\n    */\n    MapWithDefault.create = function(options) {\n      if (options) {\n        return new MapWithDefault(options);\n      } else {\n        return new Map();\n      }\n    };\n\n    MapWithDefault.prototype = create(Map.prototype);\n    MapWithDefault.prototype.constructor = MapWithDefault;\n    MapWithDefault.prototype._super$constructor = Map;\n    MapWithDefault.prototype._super$get = Map.prototype.get;\n\n    /**\n      Retrieve the value associated with a given key.\n\n      @method get\n      @param {*} key\n      @return {*} the value associated with the key, or the default value\n    */\n    MapWithDefault.prototype.get = function(key) {\n      var hasValue = this.has(key);\n\n      if (hasValue) {\n        return this._super$get(key);\n      } else {\n        var defaultValue = this.defaultValue(key);\n        this.set(key, defaultValue);\n        return defaultValue;\n      }\n    };\n\n    /**\n      @method copy\n      @return {Ember.MapWithDefault}\n    */\n    MapWithDefault.prototype.copy = function() {\n      var Constructor = this.constructor;\n      return copyMap(this, new Constructor({\n        defaultValue: this.defaultValue\n      }));\n    };\n\n    __exports__[\"default\"] = Map;\n\n    __exports__.OrderedSet = OrderedSet;\n    __exports__.Map = Map;\n    __exports__.MapWithDefault = MapWithDefault;\n  });\nenifed(\"ember-metal/merge\",\n  [\"ember-metal/keys\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var keys = __dependency1__[\"default\"];\n\n    /**\n      Merge the contents of two objects together into the first object.\n\n      ```javascript\n      Ember.merge({first: 'Tom'}, {last: 'Dale'}); // {first: 'Tom', last: 'Dale'}\n      var a = {first: 'Yehuda'}, b = {last: 'Katz'};\n      Ember.merge(a, b); // a == {first: 'Yehuda', last: 'Katz'}, b == {last: 'Katz'}\n      ```\n\n      @method merge\n      @for Ember\n      @param {Object} original The object to merge into\n      @param {Object} updates The object to copy properties from\n      @return {Object}\n    */\n    __exports__[\"default\"] = function merge(original, updates) {\n      if (!updates || typeof updates !== 'object') { \n        return original;\n      }\n\n      var props = keys(updates);\n      var prop;\n      var length = props.length;\n\n      for (var i = 0; i < length; i++) {\n        prop = props[i];\n        original[prop] = updates[prop];\n      }\n\n      return original;\n    }\n  });\nenifed(\"ember-metal/mixin\",\n  [\"ember-metal/core\",\"ember-metal/merge\",\"ember-metal/array\",\"ember-metal/platform\",\"ember-metal/utils\",\"ember-metal/expand_properties\",\"ember-metal/properties\",\"ember-metal/computed\",\"ember-metal/binding\",\"ember-metal/observer\",\"ember-metal/events\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __exports__) {\n        // Remove \"use strict\"; from transpiled module until\n    // https://bugs.webkit.org/show_bug.cgi?id=138038 is fixed\n    //\n    // REMOVE_USE_STRICT: true\n\n    /**\n    @module ember\n    @submodule ember-metal\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // warn, assert, wrap, et;\n    var merge = __dependency2__[\"default\"];\n    var map = __dependency3__.map;\n    var indexOf = __dependency3__.indexOf;\n    var forEach = __dependency3__.forEach;\n    var create = __dependency4__.create;\n    var guidFor = __dependency5__.guidFor;\n    var meta = __dependency5__.meta;\n    var wrap = __dependency5__.wrap;\n    var makeArray = __dependency5__.makeArray;\n    var apply = __dependency5__.apply;\n    var isArray = __dependency5__.isArray;\n    var expandProperties = __dependency6__[\"default\"];\n    var Descriptor = __dependency7__.Descriptor;\n    var defineProperty = __dependency7__.defineProperty;\n    var ComputedProperty = __dependency8__.ComputedProperty;\n    var Binding = __dependency9__.Binding;\n    var addObserver = __dependency10__.addObserver;\n    var removeObserver = __dependency10__.removeObserver;\n    var addBeforeObserver = __dependency10__.addBeforeObserver;\n    var removeBeforeObserver = __dependency10__.removeBeforeObserver;\n    var addListener = __dependency11__.addListener;\n    var removeListener = __dependency11__.removeListener;\n\n    var REQUIRED;\n    var a_map = map;\n    var a_indexOf = indexOf;\n    var a_forEach = forEach;\n    var a_slice = [].slice;\n    var o_create = create;\n    var metaFor = meta;\n\n    function superFunction(){\n      var func = this.__nextSuper;\n      var ret;\n      if (func) {\n        var args = new Array(arguments.length);\n        for (var i = 0, l = args.length; i < l; i++) {\n          args[i] = arguments[i];\n        }\n        this.__nextSuper = null;\n        ret = apply(this, func, args);\n        this.__nextSuper = func;\n      }\n      return ret;\n    }\n\n    function mixinsMeta(obj) {\n      var m = metaFor(obj, true);\n      var ret = m.mixins;\n      if (!ret) {\n        ret = m.mixins = {};\n      } else if (!m.hasOwnProperty('mixins')) {\n        ret = m.mixins = o_create(ret);\n      }\n      return ret;\n    }\n\n    function initMixin(mixin, args) {\n      if (args && args.length > 0) {\n        mixin.mixins = a_map.call(args, function(x) {\n          if (x instanceof Mixin) { return x; }\n\n          // Note: Manually setup a primitive mixin here. This is the only\n          // way to actually get a primitive mixin. This way normal creation\n          // of mixins will give you combined mixins...\n          var mixin = new Mixin();\n          mixin.properties = x;\n          return mixin;\n        });\n      }\n      return mixin;\n    }\n\n    function isMethod(obj) {\n      return 'function' === typeof obj &&\n             obj.isMethod !== false &&\n             obj !== Boolean && obj !== Object && obj !== Number && obj !== Array && obj !== Date && obj !== String;\n    }\n\n    var CONTINUE = {};\n\n    function mixinProperties(mixinsMeta, mixin) {\n      var guid;\n\n      if (mixin instanceof Mixin) {\n        guid = guidFor(mixin);\n        if (mixinsMeta[guid]) { return CONTINUE; }\n        mixinsMeta[guid] = mixin;\n        return mixin.properties;\n      } else {\n        return mixin; // apply anonymous mixin properties\n      }\n    }\n\n    function concatenatedMixinProperties(concatProp, props, values, base) {\n      var concats;\n\n      // reset before adding each new mixin to pickup concats from previous\n      concats = values[concatProp] || base[concatProp];\n      if (props[concatProp]) {\n        concats = concats ? concats.concat(props[concatProp]) : props[concatProp];\n      }\n\n      return concats;\n    }\n\n    function giveDescriptorSuper(meta, key, property, values, descs) {\n      var superProperty;\n\n      // Computed properties override methods, and do not call super to them\n      if (values[key] === undefined) {\n        // Find the original descriptor in a parent mixin\n        superProperty = descs[key];\n      }\n\n      // If we didn't find the original descriptor in a parent mixin, find\n      // it on the original object.\n      superProperty = superProperty || meta.descs[key];\n\n      if (superProperty === undefined || !(superProperty instanceof ComputedProperty)) {\n        return property;\n      }\n\n      // Since multiple mixins may inherit from the same parent, we need\n      // to clone the computed property so that other mixins do not receive\n      // the wrapped version.\n      property = o_create(property);\n      property.func = wrap(property.func, superProperty.func);\n\n      return property;\n    }\n\n    function giveMethodSuper(obj, key, method, values, descs) {\n      var superMethod;\n\n      // Methods overwrite computed properties, and do not call super to them.\n      if (descs[key] === undefined) {\n        // Find the original method in a parent mixin\n        superMethod = values[key];\n      }\n\n      // If we didn't find the original value in a parent mixin, find it in\n      // the original object\n      superMethod = superMethod || obj[key];\n\n      // Only wrap the new method if the original method was a function\n      if (superMethod === undefined || 'function' !== typeof superMethod) {\n        return method;\n      }\n\n      return wrap(method, superMethod);\n    }\n\n    function applyConcatenatedProperties(obj, key, value, values) {\n      var baseValue = values[key] || obj[key];\n\n      if (baseValue) {\n        if ('function' === typeof baseValue.concat) {\n          return baseValue.concat(value);\n        } else {\n          return makeArray(baseValue).concat(value);\n        }\n      } else {\n        return makeArray(value);\n      }\n    }\n\n    function applyMergedProperties(obj, key, value, values) {\n      var baseValue = values[key] || obj[key];\n\n      Ember.assert(\"You passed in `\" + JSON.stringify(value) + \"` as the value for `\" + key +\n                   \"` but `\" + key + \"` cannot be an Array\", !isArray(value));\n\n      if (!baseValue) { return value; }\n\n      var newBase = merge({}, baseValue);\n      var hasFunction = false;\n\n      for (var prop in value) {\n        if (!value.hasOwnProperty(prop)) { continue; }\n\n        var propValue = value[prop];\n        if (isMethod(propValue)) {\n          // TODO: support for Computed Properties, etc?\n          hasFunction = true;\n          newBase[prop] = giveMethodSuper(obj, prop, propValue, baseValue, {});\n        } else {\n          newBase[prop] = propValue;\n        }\n      }\n\n      if (hasFunction) {\n        newBase._super = superFunction;\n      }\n\n      return newBase;\n    }\n\n    function addNormalizedProperty(base, key, value, meta, descs, values, concats, mergings) {\n      if (value instanceof Descriptor) {\n        if (value === REQUIRED && descs[key]) { return CONTINUE; }\n\n        // Wrap descriptor function to implement\n        // __nextSuper() if needed\n        if (value.func) {\n          value = giveDescriptorSuper(meta, key, value, values, descs);\n        }\n\n        descs[key]  = value;\n        values[key] = undefined;\n      } else {\n        if ((concats && a_indexOf.call(concats, key) >= 0) ||\n                    key === 'concatenatedProperties' ||\n                    key === 'mergedProperties') {\n          value = applyConcatenatedProperties(base, key, value, values);\n        } else if ((mergings && a_indexOf.call(mergings, key) >= 0)) {\n          value = applyMergedProperties(base, key, value, values);\n        } else if (isMethod(value)) {\n          value = giveMethodSuper(base, key, value, values, descs);\n        }\n\n        descs[key] = undefined;\n        values[key] = value;\n      }\n    }\n\n    function mergeMixins(mixins, m, descs, values, base, keys) {\n      var mixin, props, key, concats, mergings, meta;\n\n      function removeKeys(keyName) {\n        delete descs[keyName];\n        delete values[keyName];\n      }\n\n      for(var i=0, l=mixins.length; i<l; i++) {\n        mixin = mixins[i];\n        Ember.assert('Expected hash or Mixin instance, got ' + Object.prototype.toString.call(mixin),\n                     typeof mixin === 'object' && mixin !== null && Object.prototype.toString.call(mixin) !== '[object Array]');\n\n        props = mixinProperties(m, mixin);\n        if (props === CONTINUE) { continue; }\n\n        if (props) {\n          meta = metaFor(base);\n          if (base.willMergeMixin) { base.willMergeMixin(props); }\n          concats = concatenatedMixinProperties('concatenatedProperties', props, values, base);\n          mergings = concatenatedMixinProperties('mergedProperties', props, values, base);\n\n          for (key in props) {\n            if (!props.hasOwnProperty(key)) { continue; }\n            keys.push(key);\n            addNormalizedProperty(base, key, props[key], meta, descs, values, concats, mergings);\n          }\n\n          // manually copy toString() because some JS engines do not enumerate it\n          if (props.hasOwnProperty('toString')) { base.toString = props.toString; }\n        } else if (mixin.mixins) {\n          mergeMixins(mixin.mixins, m, descs, values, base, keys);\n          if (mixin._without) { a_forEach.call(mixin._without, removeKeys); }\n        }\n      }\n    }\n\n    var IS_BINDING = /^.+Binding$/;\n\n    function detectBinding(obj, key, value, m) {\n      if (IS_BINDING.test(key)) {\n        var bindings = m.bindings;\n        if (!bindings) {\n          bindings = m.bindings = {};\n        } else if (!m.hasOwnProperty('bindings')) {\n          bindings = m.bindings = o_create(m.bindings);\n        }\n        bindings[key] = value;\n      }\n    }\n\n    function connectBindings(obj, m) {\n      // TODO Mixin.apply(instance) should disconnect binding if exists\n      var bindings = m.bindings;\n      var key, binding, to;\n      if (bindings) {\n        for (key in bindings) {\n          binding = bindings[key];\n          if (binding) {\n            to = key.slice(0, -7); // strip Binding off end\n            if (binding instanceof Binding) {\n              binding = binding.copy(); // copy prototypes' instance\n              binding.to(to);\n            } else { // binding is string path\n              binding = new Binding(to, binding);\n            }\n            binding.connect(obj);\n            obj[key] = binding;\n          }\n        }\n        // mark as applied\n        m.bindings = {};\n      }\n    }\n\n    function finishPartial(obj, m) {\n      connectBindings(obj, m || metaFor(obj));\n      return obj;\n    }\n\n    function followAlias(obj, desc, m, descs, values) {\n      var altKey = desc.methodName;\n      var value;\n      if (descs[altKey] || values[altKey]) {\n        value = values[altKey];\n        desc  = descs[altKey];\n      } else if (m.descs[altKey]) {\n        desc  = m.descs[altKey];\n        value = undefined;\n      } else {\n        desc = undefined;\n        value = obj[altKey];\n      }\n\n      return { desc: desc, value: value };\n    }\n\n    function updateObserversAndListeners(obj, key, observerOrListener, pathsKey, updateMethod) {\n      var paths = observerOrListener[pathsKey];\n\n      if (paths) {\n        for (var i=0, l=paths.length; i<l; i++) {\n          updateMethod(obj, paths[i], null, key);\n        }\n      }\n    }\n\n    function replaceObserversAndListeners(obj, key, observerOrListener) {\n      var prev = obj[key];\n\n      if ('function' === typeof prev) {\n        updateObserversAndListeners(obj, key, prev, '__ember_observesBefore__', removeBeforeObserver);\n        updateObserversAndListeners(obj, key, prev, '__ember_observes__', removeObserver);\n        updateObserversAndListeners(obj, key, prev, '__ember_listens__', removeListener);\n      }\n\n      if ('function' === typeof observerOrListener) {\n        updateObserversAndListeners(obj, key, observerOrListener, '__ember_observesBefore__', addBeforeObserver);\n        updateObserversAndListeners(obj, key, observerOrListener, '__ember_observes__', addObserver);\n        updateObserversAndListeners(obj, key, observerOrListener, '__ember_listens__', addListener);\n      }\n    }\n\n    function applyMixin(obj, mixins, partial) {\n      var descs = {};\n      var values = {};\n      var m = metaFor(obj);\n      var keys = [];\n      var key, value, desc;\n\n      obj._super = superFunction;\n\n      // Go through all mixins and hashes passed in, and:\n      //\n      // * Handle concatenated properties\n      // * Handle merged properties\n      // * Set up _super wrapping if necessary\n      // * Set up computed property descriptors\n      // * Copying `toString` in broken browsers\n      mergeMixins(mixins, mixinsMeta(obj), descs, values, obj, keys);\n\n      for(var i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        if (key === 'constructor' || !values.hasOwnProperty(key)) { continue; }\n\n        desc = descs[key];\n        value = values[key];\n\n        if (desc === REQUIRED) { continue; }\n\n        while (desc && desc instanceof Alias) {\n          var followed = followAlias(obj, desc, m, descs, values);\n          desc = followed.desc;\n          value = followed.value;\n        }\n\n        if (desc === undefined && value === undefined) { continue; }\n\n        replaceObserversAndListeners(obj, key, value);\n        detectBinding(obj, key, value, m);\n        defineProperty(obj, key, desc, value, m);\n      }\n\n      if (!partial) { // don't apply to prototype\n        finishPartial(obj, m);\n      }\n\n      return obj;\n    }\n\n    /**\n      @method mixin\n      @for Ember\n      @param obj\n      @param mixins*\n      @return obj\n    */\n    function mixin(obj) {\n      var args = a_slice.call(arguments, 1);\n      applyMixin(obj, args, false);\n      return obj;\n    }\n\n    __exports__.mixin = mixin;/**\n      The `Ember.Mixin` class allows you to create mixins, whose properties can be\n      added to other classes. For instance,\n\n      ```javascript\n      App.Editable = Ember.Mixin.create({\n        edit: function() {\n          console.log('starting to edit');\n          this.set('isEditing', true);\n        },\n        isEditing: false\n      });\n\n      // Mix mixins into classes by passing them as the first arguments to\n      // .extend.\n      App.CommentView = Ember.View.extend(App.Editable, {\n        template: Ember.Handlebars.compile('{{#if view.isEditing}}...{{else}}...{{/if}}')\n      });\n\n      commentView = App.CommentView.create();\n      commentView.edit(); // outputs 'starting to edit'\n      ```\n\n      Note that Mixins are created with `Ember.Mixin.create`, not\n      `Ember.Mixin.extend`.\n\n      Note that mixins extend a constructor's prototype so arrays and object literals\n      defined as properties will be shared amongst objects that implement the mixin.\n      If you want to define a property in a mixin that is not shared, you can define\n      it either as a computed property or have it be created on initialization of the object.\n\n      ```javascript\n      //filters array will be shared amongst any object implementing mixin\n      App.Filterable = Ember.Mixin.create({\n        filters: Ember.A()\n      });\n\n      //filters will be a separate  array for every object implementing the mixin\n      App.Filterable = Ember.Mixin.create({\n        filters: Ember.computed(function(){return Ember.A();})\n      });\n\n      //filters will be created as a separate array during the object's initialization\n      App.Filterable = Ember.Mixin.create({\n        init: function() {\n          this._super();\n          this.set(\"filters\", Ember.A());\n        }\n      });\n      ```\n\n      @class Mixin\n      @namespace Ember\n    */\n    __exports__[\"default\"] = Mixin;\n    function Mixin() { return initMixin(this, arguments); }\n    Mixin.prototype = {\n      properties: null,\n      mixins: null,\n      ownerConstructor: null\n    };\n\n    Mixin._apply = applyMixin;\n\n    Mixin.applyPartial = function(obj) {\n      var args = a_slice.call(arguments, 1);\n      return applyMixin(obj, args, true);\n    };\n\n    Mixin.finishPartial = finishPartial;\n\n    // ES6TODO: this relies on a global state?\n    Ember.anyUnprocessedMixins = false;\n\n    /**\n      @method create\n      @static\n      @param arguments*\n    */\n    Mixin.create = function() {\n      // ES6TODO: this relies on a global state?\n      Ember.anyUnprocessedMixins = true;\n      var M = this;\n      return initMixin(new M(), arguments);\n    };\n\n    var MixinPrototype = Mixin.prototype;\n\n    /**\n      @method reopen\n      @param arguments*\n    */\n    MixinPrototype.reopen = function() {\n      var mixin, tmp;\n\n      if (this.properties) {\n        mixin = Mixin.create();\n        mixin.properties = this.properties;\n        delete this.properties;\n        this.mixins = [mixin];\n      } else if (!this.mixins) {\n        this.mixins = [];\n      }\n\n      var len = arguments.length;\n      var mixins = this.mixins;\n      var idx;\n\n      for(idx=0; idx < len; idx++) {\n        mixin = arguments[idx];\n        Ember.assert('Expected hash or Mixin instance, got ' + Object.prototype.toString.call(mixin),\n                     typeof mixin === 'object' && mixin !== null && Object.prototype.toString.call(mixin) !== '[object Array]');\n\n        if (mixin instanceof Mixin) {\n          mixins.push(mixin);\n        } else {\n          tmp = Mixin.create();\n          tmp.properties = mixin;\n          mixins.push(tmp);\n        }\n      }\n\n      return this;\n    };\n\n    /**\n      @method apply\n      @param obj\n      @return applied object\n    */\n    MixinPrototype.apply = function(obj) {\n      return applyMixin(obj, [this], false);\n    };\n\n    MixinPrototype.applyPartial = function(obj) {\n      return applyMixin(obj, [this], true);\n    };\n\n    function _detect(curMixin, targetMixin, seen) {\n      var guid = guidFor(curMixin);\n\n      if (seen[guid]) { return false; }\n      seen[guid] = true;\n\n      if (curMixin === targetMixin) { return true; }\n      var mixins = curMixin.mixins;\n      var loc = mixins ? mixins.length : 0;\n      while (--loc >= 0) {\n        if (_detect(mixins[loc], targetMixin, seen)) { return true; }\n      }\n      return false;\n    }\n\n    /**\n      @method detect\n      @param obj\n      @return {Boolean}\n    */\n    MixinPrototype.detect = function(obj) {\n      if (!obj) { return false; }\n      if (obj instanceof Mixin) { return _detect(obj, this, {}); }\n      var m = obj['__ember_meta__'];\n      var mixins = m && m.mixins;\n      if (mixins) {\n        return !!mixins[guidFor(this)];\n      }\n      return false;\n    };\n\n    MixinPrototype.without = function() {\n      var ret = new Mixin(this);\n      ret._without = a_slice.call(arguments);\n      return ret;\n    };\n\n    function _keys(ret, mixin, seen) {\n      if (seen[guidFor(mixin)]) { return; }\n      seen[guidFor(mixin)] = true;\n\n      if (mixin.properties) {\n        var props = mixin.properties;\n        for (var key in props) {\n          if (props.hasOwnProperty(key)) { ret[key] = true; }\n        }\n      } else if (mixin.mixins) {\n        a_forEach.call(mixin.mixins, function(x) { _keys(ret, x, seen); });\n      }\n    }\n\n    MixinPrototype.keys = function() {\n      var keys = {};\n      var seen = {};\n      var ret = [];\n      _keys(keys, this, seen);\n      for(var key in keys) {\n        if (keys.hasOwnProperty(key)) { ret.push(key); }\n      }\n      return ret;\n    };\n\n    // returns the mixins currently applied to the specified object\n    // TODO: Make Ember.mixin\n    Mixin.mixins = function(obj) {\n      var m = obj['__ember_meta__'];\n      var mixins = m && m.mixins;\n      var ret = [];\n\n      if (!mixins) { return ret; }\n\n      for (var key in mixins) {\n        var mixin = mixins[key];\n\n        // skip primitive mixins since these are always anonymous\n        if (!mixin.properties) { ret.push(mixin); }\n      }\n\n      return ret;\n    };\n\n    REQUIRED = new Descriptor();\n    REQUIRED.toString = function() { return '(Required Property)'; };\n\n    /**\n      Denotes a required property for a mixin\n\n      @method required\n      @for Ember\n    */\n    function required() {\n      return REQUIRED;\n    }\n\n    __exports__.required = required;function Alias(methodName) {\n      this.methodName = methodName;\n    }\n\n    Alias.prototype = new Descriptor();\n\n    /**\n      Makes a method available via an additional name.\n\n      ```javascript\n      App.Person = Ember.Object.extend({\n        name: function() {\n          return 'Tomhuda Katzdale';\n        },\n        moniker: Ember.aliasMethod('name')\n      });\n\n      var goodGuy = App.Person.create();\n\n      goodGuy.name();    // 'Tomhuda Katzdale'\n      goodGuy.moniker(); // 'Tomhuda Katzdale'\n      ```\n\n      @method aliasMethod\n      @for Ember\n      @param {String} methodName name of the method to alias\n      @return {Ember.Descriptor}\n    */\n    function aliasMethod(methodName) {\n      return new Alias(methodName);\n    }\n\n    __exports__.aliasMethod = aliasMethod;// ..........................................................\n    // OBSERVER HELPER\n    //\n\n    /**\n      Specify a method that observes property changes.\n\n      ```javascript\n      Ember.Object.extend({\n        valueObserver: Ember.observer('value', function() {\n          // Executes whenever the \"value\" property changes\n        })\n      });\n      ```\n\n      In the future this method may become asynchronous. If you want to ensure\n      synchronous behavior, use `immediateObserver`.\n\n      Also available as `Function.prototype.observes` if prototype extensions are\n      enabled.\n\n      @method observer\n      @for Ember\n      @param {String} propertyNames*\n      @param {Function} func\n      @return func\n    */\n    function observer() {\n      var func  = a_slice.call(arguments, -1)[0];\n      var paths;\n\n      var addWatchedProperty = function (path) { paths.push(path); };\n      var _paths = a_slice.call(arguments, 0, -1);\n\n      if (typeof func !== \"function\") {\n        // revert to old, soft-deprecated argument ordering\n\n        func  = arguments[0];\n        _paths = a_slice.call(arguments, 1);\n      }\n\n      paths = [];\n\n      for (var i=0; i<_paths.length; ++i) {\n        expandProperties(_paths[i], addWatchedProperty);\n      }\n\n      if (typeof func !== \"function\") {\n        throw new Ember.Error(\"Ember.observer called without a function\");\n      }\n\n      func.__ember_observes__ = paths;\n      return func;\n    }\n\n    __exports__.observer = observer;/**\n      Specify a method that observes property changes.\n\n      ```javascript\n      Ember.Object.extend({\n        valueObserver: Ember.immediateObserver('value', function() {\n          // Executes whenever the \"value\" property changes\n        })\n      });\n      ```\n\n      In the future, `Ember.observer` may become asynchronous. In this event,\n      `Ember.immediateObserver` will maintain the synchronous behavior.\n\n      Also available as `Function.prototype.observesImmediately` if prototype extensions are\n      enabled.\n\n      @method immediateObserver\n      @for Ember\n      @param {String} propertyNames*\n      @param {Function} func\n      @return func\n    */\n    function immediateObserver() {\n      for (var i=0, l=arguments.length; i<l; i++) {\n        var arg = arguments[i];\n        Ember.assert(\"Immediate observers must observe internal properties only, not properties on other objects.\", typeof arg !== \"string\" || arg.indexOf('.') === -1);\n      }\n\n      return observer.apply(this, arguments);\n    }\n\n    __exports__.immediateObserver = immediateObserver;/**\n      When observers fire, they are called with the arguments `obj`, `keyName`.\n\n      Note, `@each.property` observer is called per each add or replace of an element\n      and it's not called with a specific enumeration item.\n\n      A `beforeObserver` fires before a property changes.\n\n      A `beforeObserver` is an alternative form of `.observesBefore()`.\n\n      ```javascript\n      App.PersonView = Ember.View.extend({\n        friends: [{ name: 'Tom' }, { name: 'Stefan' }, { name: 'Kris' }],\n\n        valueWillChange: Ember.beforeObserver('content.value', function(obj, keyName) {\n          this.changingFrom = obj.get(keyName);\n        }),\n\n        valueDidChange: Ember.observer('content.value', function(obj, keyName) {\n            // only run if updating a value already in the DOM\n            if (this.get('state') === 'inDOM') {\n              var color = obj.get(keyName) > this.changingFrom ? 'green' : 'red';\n              // logic\n            }\n        }),\n\n        friendsDidChange: Ember.observer('friends.@each.name', function(obj, keyName) {\n          // some logic\n          // obj.get(keyName) returns friends array\n        })\n      });\n      ```\n\n      Also available as `Function.prototype.observesBefore` if prototype extensions are\n      enabled.\n\n      @method beforeObserver\n      @for Ember\n      @param {String} propertyNames*\n      @param {Function} func\n      @return func\n    */\n    function beforeObserver() {\n      var func  = a_slice.call(arguments, -1)[0];\n      var paths;\n\n      var addWatchedProperty = function(path) { paths.push(path); };\n\n      var _paths = a_slice.call(arguments, 0, -1);\n\n      if (typeof func !== \"function\") {\n        // revert to old, soft-deprecated argument ordering\n\n        func  = arguments[0];\n        _paths = a_slice.call(arguments, 1);\n      }\n\n      paths = [];\n\n      for (var i=0; i<_paths.length; ++i) {\n        expandProperties(_paths[i], addWatchedProperty);\n      }\n\n      if (typeof func !== \"function\") {\n        throw new Ember.Error(\"Ember.beforeObserver called without a function\");\n      }\n\n      func.__ember_observesBefore__ = paths;\n      return func;\n    }\n\n    __exports__.beforeObserver = beforeObserver;__exports__.IS_BINDING = IS_BINDING;\n    __exports__.Mixin = Mixin;\n  });\nenifed(\"ember-metal/observer\",\n  [\"ember-metal/watching\",\"ember-metal/array\",\"ember-metal/events\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var watch = __dependency1__.watch;\n    var unwatch = __dependency1__.unwatch;\n    var map = __dependency2__.map;\n    var listenersFor = __dependency3__.listenersFor;\n    var addListener = __dependency3__.addListener;\n    var removeListener = __dependency3__.removeListener;\n    var suspendListeners = __dependency3__.suspendListeners;\n    var suspendListener = __dependency3__.suspendListener;\n    /**\n    @module ember-metal\n    */\n\n    var AFTER_OBSERVERS = ':change';\n    var BEFORE_OBSERVERS = ':before';\n\n    function changeEvent(keyName) {\n      return keyName + AFTER_OBSERVERS;\n    }\n\n    function beforeEvent(keyName) {\n      return keyName + BEFORE_OBSERVERS;\n    }\n\n    /**\n      @method addObserver\n      @for Ember\n      @param obj\n      @param {String} path\n      @param {Object|Function} targetOrMethod\n      @param {Function|String} [method]\n    */\n    function addObserver(obj, _path, target, method) {\n      addListener(obj, changeEvent(_path), target, method);\n      watch(obj, _path);\n\n      return this;\n    }\n\n    __exports__.addObserver = addObserver;function observersFor(obj, path) {\n      return listenersFor(obj, changeEvent(path));\n    }\n\n    __exports__.observersFor = observersFor;/**\n      @method removeObserver\n      @for Ember\n      @param obj\n      @param {String} path\n      @param {Object|Function} targetOrMethod\n      @param {Function|String} [method]\n    */\n    function removeObserver(obj, _path, target, method) {\n      unwatch(obj, _path);\n      removeListener(obj, changeEvent(_path), target, method);\n\n      return this;\n    }\n\n    __exports__.removeObserver = removeObserver;/**\n      @method addBeforeObserver\n      @for Ember\n      @param obj\n      @param {String} path\n      @param {Object|Function} targetOrMethod\n      @param {Function|String} [method]\n    */\n    function addBeforeObserver(obj, _path, target, method) {\n      addListener(obj, beforeEvent(_path), target, method);\n      watch(obj, _path);\n\n      return this;\n    }\n\n    __exports__.addBeforeObserver = addBeforeObserver;// Suspend observer during callback.\n    //\n    // This should only be used by the target of the observer\n    // while it is setting the observed path.\n    function _suspendBeforeObserver(obj, path, target, method, callback) {\n      return suspendListener(obj, beforeEvent(path), target, method, callback);\n    }\n\n    __exports__._suspendBeforeObserver = _suspendBeforeObserver;function _suspendObserver(obj, path, target, method, callback) {\n      return suspendListener(obj, changeEvent(path), target, method, callback);\n    }\n\n    __exports__._suspendObserver = _suspendObserver;function _suspendBeforeObservers(obj, paths, target, method, callback) {\n      var events = map.call(paths, beforeEvent);\n      return suspendListeners(obj, events, target, method, callback);\n    }\n\n    __exports__._suspendBeforeObservers = _suspendBeforeObservers;function _suspendObservers(obj, paths, target, method, callback) {\n      var events = map.call(paths, changeEvent);\n      return suspendListeners(obj, events, target, method, callback);\n    }\n\n    __exports__._suspendObservers = _suspendObservers;function beforeObserversFor(obj, path) {\n      return listenersFor(obj, beforeEvent(path));\n    }\n\n    __exports__.beforeObserversFor = beforeObserversFor;/**\n      @method removeBeforeObserver\n      @for Ember\n      @param obj\n      @param {String} path\n      @param {Object|Function} targetOrMethod\n      @param {Function|String} [method]\n    */\n    function removeBeforeObserver(obj, _path, target, method) {\n      unwatch(obj, _path);\n      removeListener(obj, beforeEvent(_path), target, method);\n\n      return this;\n    }\n\n    __exports__.removeBeforeObserver = removeBeforeObserver;\n  });\nenifed(\"ember-metal/observer_set\",\n  [\"ember-metal/utils\",\"ember-metal/events\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var guidFor = __dependency1__.guidFor;\n    var sendEvent = __dependency2__.sendEvent;\n\n    /*\n      this.observerSet = {\n        [senderGuid]: { // variable name: `keySet`\n          [keyName]: listIndex\n        }\n      },\n      this.observers = [\n        {\n          sender: obj,\n          keyName: keyName,\n          eventName: eventName,\n          listeners: [\n            [target, method, flags]\n          ]\n        },\n        ...\n      ]\n    */\n    __exports__[\"default\"] = ObserverSet;\n    function ObserverSet() {\n      this.clear();\n    }\n\n\n    ObserverSet.prototype.add = function(sender, keyName, eventName) {\n      var observerSet = this.observerSet;\n      var observers = this.observers;\n      var senderGuid = guidFor(sender);\n      var keySet = observerSet[senderGuid];\n      var index;\n\n      if (!keySet) {\n        observerSet[senderGuid] = keySet = {};\n      }\n      index = keySet[keyName];\n      if (index === undefined) {\n        index = observers.push({\n          sender: sender,\n          keyName: keyName,\n          eventName: eventName,\n          listeners: []\n        }) - 1;\n        keySet[keyName] = index;\n      }\n      return observers[index].listeners;\n    };\n\n    ObserverSet.prototype.flush = function() {\n      var observers = this.observers;\n      var i, len, observer, sender;\n      this.clear();\n      for (i=0, len=observers.length; i < len; ++i) {\n        observer = observers[i];\n        sender = observer.sender;\n        if (sender.isDestroying || sender.isDestroyed) { continue; }\n        sendEvent(sender, observer.eventName, [sender, observer.keyName], observer.listeners);\n      }\n    };\n\n    ObserverSet.prototype.clear = function() {\n      this.observerSet = {};\n      this.observers = [];\n    };\n  });\nenifed(\"ember-metal/path_cache\",\n  [\"ember-metal/cache\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Cache = __dependency1__[\"default\"];\n\n    var IS_GLOBAL      = /^([A-Z$]|([0-9][A-Z$]))/;\n    var IS_GLOBAL_PATH = /^([A-Z$]|([0-9][A-Z$])).*[\\.]/;\n    var HAS_THIS       = 'this.';\n\n    var isGlobalCache     = new Cache(1000, function(key) { return IS_GLOBAL.test(key);          });\n    var isGlobalPathCache = new Cache(1000, function(key) { return IS_GLOBAL_PATH.test(key);     });\n    var hasThisCache      = new Cache(1000, function(key) { return key.indexOf(HAS_THIS) !== -1; });\n    var isPathCache       = new Cache(1000, function(key) { return key.indexOf('.')      !== -1; });\n\n    var caches = {\n      isGlobalCache:     isGlobalCache,\n      isGlobalPathCache: isGlobalPathCache,\n      hasThisCache:      hasThisCache,\n      isPathCache:       isPathCache\n    };\n    __exports__.caches = caches;\n    function isGlobal(path) {\n      return isGlobalCache.get(path);\n    }\n\n    __exports__.isGlobal = isGlobal;function isGlobalPath(path) {\n      return isGlobalPathCache.get(path);\n    }\n\n    __exports__.isGlobalPath = isGlobalPath;function hasThis(path) {\n      return hasThisCache.get(path);\n    }\n\n    __exports__.hasThis = hasThis;function isPath(path) {\n      return isPathCache.get(path);\n    }\n\n    __exports__.isPath = isPath;\n  });\nenifed(\"ember-metal/platform\",\n  [\"ember-metal/platform/define_property\",\"ember-metal/platform/define_properties\",\"ember-metal/platform/create\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var hasES5CompliantDefineProperty = __dependency1__.hasES5CompliantDefineProperty;\n    var defineProperty = __dependency1__.defineProperty;\n    var defineProperties = __dependency2__[\"default\"];\n    var create = __dependency3__[\"default\"];\n\n    /**\n    @module ember-metal\n    */\n\n    var hasPropertyAccessors = hasES5CompliantDefineProperty;\n    var canDefineNonEnumerableProperties = hasES5CompliantDefineProperty;\n\n    /**\n      Platform specific methods and feature detectors needed by the framework.\n\n      @class platform\n      @namespace Ember\n      @static\n    */\n\n    __exports__.create = create;\n    __exports__.defineProperty = defineProperty;\n    __exports__.defineProperties = defineProperties;\n    __exports__.hasPropertyAccessors = hasPropertyAccessors;\n    __exports__.canDefineNonEnumerableProperties = canDefineNonEnumerableProperties;\n  });\nenifed(\"ember-metal/platform/create\",\n  [\"exports\"],\n  function(__exports__) {\n        // Remove \"use strict\"; from transpiled module until\n    // https://bugs.webkit.org/show_bug.cgi?id=138038 is fixed\n    //\n    // REMOVE_USE_STRICT: true\n\n    /**\n    @class platform\n    @namespace Ember\n    @static\n    */\n\n    /**\n      Identical to `Object.create()`. Implements if not available natively.\n\n      @method create\n      @for Ember\n    */\n    var create;\n    // ES5 15.2.3.5\n    // http://es5.github.com/#x15.2.3.5\n    if (!(Object.create && !Object.create(null).hasOwnProperty)) {\n      /* jshint scripturl:true, proto:true */\n      // Contributed by Brandon Benvie, October, 2012\n      var createEmpty;\n      var supportsProto = !({'__proto__':null} instanceof Object);\n      // the following produces false positives\n      // in Opera Mini => not a reliable check\n      // Object.prototype.__proto__ === null\n      if (supportsProto || typeof document === 'undefined') {\n        createEmpty = function () {\n          return { \"__proto__\": null };\n        };\n      } else {\n        // In old IE __proto__ can't be used to manually set `null`, nor does\n        // any other method exist to make an object that inherits from nothing,\n        // aside from Object.prototype itself. Instead, create a new global\n        // object and *steal* its Object.prototype and strip it bare. This is\n        // used as the prototype to create nullary objects.\n        createEmpty = function () {\n          var iframe = document.createElement('iframe');\n          var parent = document.body || document.documentElement;\n          iframe.style.display = 'none';\n          parent.appendChild(iframe);\n          iframe.src = 'javascript:';\n          var empty = iframe.contentWindow.Object.prototype;\n          parent.removeChild(iframe);\n          iframe = null;\n          delete empty.constructor;\n          delete empty.hasOwnProperty;\n          delete empty.propertyIsEnumerable;\n          delete empty.isPrototypeOf;\n          delete empty.toLocaleString;\n          delete empty.toString;\n          delete empty.valueOf;\n\n          function Empty() {}\n          Empty.prototype = empty;\n          // short-circuit future calls\n          createEmpty = function () {\n            return new Empty();\n          };\n          return new Empty();\n        };\n      }\n\n      create = Object.create = function create(prototype, properties) {\n\n        var object;\n        function Type() {}  // An empty constructor.\n\n        if (prototype === null) {\n          object = createEmpty();\n        } else {\n          if (typeof prototype !== \"object\" && typeof prototype !== \"function\") {\n            // In the native implementation `parent` can be `null`\n            // OR *any* `instanceof Object`  (Object|Function|Array|RegExp|etc)\n            // Use `typeof` tho, b/c in old IE, DOM elements are not `instanceof Object`\n            // like they are in modern browsers. Using `Object.create` on DOM elements\n            // is...err...probably inappropriate, but the native version allows for it.\n            throw new TypeError(\"Object prototype may only be an Object or null\"); // same msg as Chrome\n          }\n\n          Type.prototype = prototype;\n\n          object = new Type();\n        }\n\n        if (properties !== undefined) {\n          Object.defineProperties(object, properties);\n        }\n\n        return object;\n      };\n    } else {\n      create = Object.create;\n    }\n\n    __exports__[\"default\"] = create;\n  });\nenifed(\"ember-metal/platform/define_properties\",\n  [\"ember-metal/platform/define_property\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var defineProperty = __dependency1__.defineProperty;\n\n    var defineProperties = Object.defineProperties;\n\n    // ES5 15.2.3.7\n    // http://es5.github.com/#x15.2.3.7\n    if (!defineProperties) {\n      defineProperties = function defineProperties(object, properties) {\n        for (var property in properties) {\n          if (properties.hasOwnProperty(property) && property !== \"__proto__\") {\n            defineProperty(object, property, properties[property]);\n          }\n        }\n        return object;\n      };\n\n      Object.defineProperties = defineProperties;\n    }\n\n    __exports__[\"default\"] = defineProperties;\n  });\nenifed(\"ember-metal/platform/define_property\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /*globals Node */\n\n    /**\n    @class platform\n    @namespace Ember\n    @static\n    */\n\n    /**\n      Set to true if the platform supports native getters and setters.\n\n      @property hasPropertyAccessors\n      @final\n    */\n\n    /**\n      Identical to `Object.defineProperty()`. Implements as much functionality\n      as possible if not available natively.\n\n      @method defineProperty\n      @param {Object} obj The object to modify\n      @param {String} keyName property name to modify\n      @param {Object} desc descriptor hash\n      @return {void}\n    */\n    var defineProperty = (function checkCompliance(defineProperty) {\n      if (!defineProperty) return;\n      try {\n        var a = 5;\n        var obj = {};\n        defineProperty(obj, 'a', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return a;\n          },\n          set: function (v) {\n            a = v;\n          }\n        });\n        if (obj.a !== 5) return;\n        obj.a = 10;\n        if (a !== 10) return;\n\n        // check non-enumerability\n        defineProperty(obj, 'a', {\n          configurable: true,\n          enumerable: false,\n          writable: true,\n          value: true\n        });\n        for (var key in obj) {\n          if (key === 'a') return;\n        }\n\n        // Detects a bug in Android <3.2 where you cannot redefine a property using\n        // Object.defineProperty once accessors have already been set.\n        if (obj.a !== true) return;\n\n        // defineProperty is compliant\n        return defineProperty;\n      } catch (e) {\n        // IE8 defines Object.defineProperty but calling it on an Object throws\n        return;\n      }\n    })(Object.defineProperty);\n\n    var hasES5CompliantDefineProperty = !!defineProperty;\n\n    if (hasES5CompliantDefineProperty && typeof document !== 'undefined') {\n      // This is for Safari 5.0, which supports Object.defineProperty, but not\n      // on DOM nodes.\n      var canDefinePropertyOnDOM = (function() {\n        try {\n          defineProperty(document.createElement('div'), 'definePropertyOnDOM', {});\n          return true;\n        } catch(e) { }\n\n        return false;\n      })();\n\n      if (!canDefinePropertyOnDOM) {\n        defineProperty = function(obj, keyName, desc) {\n          var isNode;\n\n          if (typeof Node === \"object\") {\n            isNode = obj instanceof Node;\n          } else {\n            isNode = typeof obj === \"object\" && typeof obj.nodeType === \"number\" && typeof obj.nodeName === \"string\";\n          }\n\n          if (isNode) {\n            // TODO: Should we have a warning here?\n            return (obj[keyName] = desc.value);\n          } else {\n            return Object.defineProperty(obj, keyName, desc);\n          }\n        };\n      }\n    }\n\n    if (!hasES5CompliantDefineProperty) {\n      defineProperty = function defineProperty(obj, keyName, desc) {\n        if (!desc.get) { obj[keyName] = desc.value; }\n      };\n    }\n\n    __exports__.hasES5CompliantDefineProperty = hasES5CompliantDefineProperty;\n    __exports__.defineProperty = defineProperty;\n  });\nenifed(\"ember-metal/properties\",\n  [\"ember-metal/core\",\"ember-metal/utils\",\"ember-metal/platform\",\"ember-metal/property_events\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember-metal\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    var metaFor = __dependency2__.meta;\n    var objectDefineProperty = __dependency3__.defineProperty;\n    var hasPropertyAccessors = __dependency3__.hasPropertyAccessors;\n    var overrideChains = __dependency4__.overrideChains;\n    // ..........................................................\n    // DESCRIPTOR\n    //\n\n    /**\n      Objects of this type can implement an interface to respond to requests to\n      get and set. The default implementation handles simple properties.\n\n      You generally won't need to create or subclass this directly.\n\n      @class Descriptor\n      @namespace Ember\n      @private\n      @constructor\n    */\n    function Descriptor() {}\n\n    __exports__.Descriptor = Descriptor;// ..........................................................\n    // DEFINING PROPERTIES API\n    //\n\n    function MANDATORY_SETTER_FUNCTION(name) {\n      return function SETTER_FUNCTION(value) {\n        Ember.assert(\"You must use Ember.set() to set the `\" + name + \"` property (of \" + this + \") to `\" + value + \"`.\", false);\n      };\n    }\n\n    __exports__.MANDATORY_SETTER_FUNCTION = MANDATORY_SETTER_FUNCTION;function DEFAULT_GETTER_FUNCTION(name) {\n      return function GETTER_FUNCTION() {\n        var meta = this['__ember_meta__'];\n        return meta && meta.values[name];\n      };\n    }\n\n    __exports__.DEFAULT_GETTER_FUNCTION = DEFAULT_GETTER_FUNCTION;/**\n      NOTE: This is a low-level method used by other parts of the API. You almost\n      never want to call this method directly. Instead you should use\n      `Ember.mixin()` to define new properties.\n\n      Defines a property on an object. This method works much like the ES5\n      `Object.defineProperty()` method except that it can also accept computed\n      properties and other special descriptors.\n\n      Normally this method takes only three parameters. However if you pass an\n      instance of `Ember.Descriptor` as the third param then you can pass an\n      optional value as the fourth parameter. This is often more efficient than\n      creating new descriptor hashes for each property.\n\n      ## Examples\n\n      ```javascript\n      // ES5 compatible mode\n      Ember.defineProperty(contact, 'firstName', {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: 'Charles'\n      });\n\n      // define a simple property\n      Ember.defineProperty(contact, 'lastName', undefined, 'Jolley');\n\n      // define a computed property\n      Ember.defineProperty(contact, 'fullName', Ember.computed(function() {\n        return this.firstName+' '+this.lastName;\n      }).property('firstName', 'lastName'));\n      ```\n\n      @private\n      @method defineProperty\n      @for Ember\n      @param {Object} obj the object to define this property on. This may be a prototype.\n      @param {String} keyName the name of the property\n      @param {Ember.Descriptor} [desc] an instance of `Ember.Descriptor` (typically a\n        computed property) or an ES5 descriptor.\n        You must provide this or `data` but not both.\n      @param {*} [data] something other than a descriptor, that will\n        become the explicit value of this property.\n    */\n    function defineProperty(obj, keyName, desc, data, meta) {\n      var descs, existingDesc, watching, value;\n\n      if (!meta) meta = metaFor(obj);\n      descs = meta.descs;\n      existingDesc = meta.descs[keyName];\n      var watchEntry = meta.watching[keyName];\n\n      watching = watchEntry !== undefined && watchEntry > 0;\n\n      if (existingDesc instanceof Descriptor) {\n        existingDesc.teardown(obj, keyName);\n      }\n\n      if (desc instanceof Descriptor) {\n        value = desc;\n\n        descs[keyName] = desc;\n        \n          if (watching && hasPropertyAccessors) {\n            objectDefineProperty(obj, keyName, {\n              configurable: true,\n              enumerable: true,\n              writable: true,\n              value: undefined // make enumerable\n            });\n          } else {\n            obj[keyName] = undefined; // make enumerable\n          }\n                if (desc.setup) { desc.setup(obj, keyName); }\n      } else {\n        descs[keyName] = undefined; // shadow descriptor in proto\n        if (desc == null) {\n          value = data;\n\n          \n            if (watching && hasPropertyAccessors) {\n              meta.values[keyName] = data;\n              objectDefineProperty(obj, keyName, {\n                configurable: true,\n                enumerable: true,\n                set: MANDATORY_SETTER_FUNCTION(keyName),\n                get: DEFAULT_GETTER_FUNCTION(keyName)\n              });\n            } else {\n              obj[keyName] = data;\n            }\n                  } else {\n          value = desc;\n\n          // compatibility with ES5\n          objectDefineProperty(obj, keyName, desc);\n        }\n      }\n\n      // if key is being watched, override chains that\n      // were initialized with the prototype\n      if (watching) { overrideChains(obj, keyName, meta); }\n\n      // The `value` passed to the `didDefineProperty` hook is\n      // either the descriptor or data, whichever was passed.\n      if (obj.didDefineProperty) { obj.didDefineProperty(obj, keyName, value); }\n\n      return this;\n    }\n    __exports__.defineProperty = defineProperty;\n  });\nenifed(\"ember-metal/property_events\",\n  [\"ember-metal/utils\",\"ember-metal/events\",\"ember-metal/observer_set\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var guidFor = __dependency1__.guidFor;\n    var tryFinally = __dependency1__.tryFinally;\n    var sendEvent = __dependency2__.sendEvent;\n    var listenersUnion = __dependency2__.listenersUnion;\n    var listenersDiff = __dependency2__.listenersDiff;\n    var ObserverSet = __dependency3__[\"default\"];\n\n    var beforeObserverSet = new ObserverSet();\n    var observerSet = new ObserverSet();\n    var deferred = 0;\n\n    // ..........................................................\n    // PROPERTY CHANGES\n    //\n\n    /**\n      This function is called just before an object property is about to change.\n      It will notify any before observers and prepare caches among other things.\n\n      Normally you will not need to call this method directly but if for some\n      reason you can't directly watch a property you can invoke this method\n      manually along with `Ember.propertyDidChange()` which you should call just\n      after the property value changes.\n\n      @method propertyWillChange\n      @for Ember\n      @param {Object} obj The object with the property that will change\n      @param {String} keyName The property key (or path) that will change.\n      @return {void}\n    */\n    function propertyWillChange(obj, keyName) {\n      var m = obj['__ember_meta__'];\n      var watching = (m && m.watching[keyName] > 0) || keyName === 'length';\n      var proto = m && m.proto;\n      var desc = m && m.descs[keyName];\n\n      if (!watching) { return; }\n      if (proto === obj) { return; }\n      if (desc && desc.willChange) { desc.willChange(obj, keyName); }\n      dependentKeysWillChange(obj, keyName, m);\n      chainsWillChange(obj, keyName, m);\n      notifyBeforeObservers(obj, keyName);\n    }\n\n    /**\n      This function is called just after an object property has changed.\n      It will notify any observers and clear caches among other things.\n\n      Normally you will not need to call this method directly but if for some\n      reason you can't directly watch a property you can invoke this method\n      manually along with `Ember.propertyWillChange()` which you should call just\n      before the property value changes.\n\n      @method propertyDidChange\n      @for Ember\n      @param {Object} obj The object with the property that will change\n      @param {String} keyName The property key (or path) that will change.\n      @return {void}\n    */\n    function propertyDidChange(obj, keyName) {\n      var m = obj['__ember_meta__'];\n      var watching = (m && m.watching[keyName] > 0) || keyName === 'length';\n      var proto = m && m.proto;\n      var desc = m && m.descs[keyName];\n\n      if (proto === obj) { return; }\n\n      // shouldn't this mean that we're watching this key?\n      if (desc && desc.didChange) { desc.didChange(obj, keyName); }\n      if (!watching && keyName !== 'length') { return; }\n\n      if (m && m.deps && m.deps[keyName]) {\n        dependentKeysDidChange(obj, keyName, m);\n      }\n\n      chainsDidChange(obj, keyName, m, false);\n      notifyObservers(obj, keyName);\n    }\n\n    var WILL_SEEN, DID_SEEN;\n    // called whenever a property is about to change to clear the cache of any dependent keys (and notify those properties of changes, etc...)\n    function dependentKeysWillChange(obj, depKey, meta) {\n      if (obj.isDestroying) { return; }\n\n      var deps;\n      if (meta && meta.deps && (deps = meta.deps[depKey])) {\n        var seen = WILL_SEEN;\n        var top = !seen;\n        if (top) { seen = WILL_SEEN = {}; }\n        iterDeps(propertyWillChange, obj, deps, depKey, seen, meta);\n        if (top) { WILL_SEEN = null; }\n      }\n    }\n\n    // called whenever a property has just changed to update dependent keys\n    function dependentKeysDidChange(obj, depKey, meta) {\n      if (obj.isDestroying) { return; }\n\n      var deps;\n      if (meta && meta.deps && (deps = meta.deps[depKey])) {\n        var seen = DID_SEEN;\n        var top = !seen;\n        if (top) { seen = DID_SEEN = {}; }\n        iterDeps(propertyDidChange, obj, deps, depKey, seen, meta);\n        if (top) { DID_SEEN = null; }\n      }\n    }\n\n    function keysOf(obj) {\n      var keys = [];\n      for (var key in obj) keys.push(key);\n      return keys;\n    }\n\n    function iterDeps(method, obj, deps, depKey, seen, meta) {\n      var keys, key, i, desc;\n      var guid = guidFor(obj);\n      var current = seen[guid];\n      if (!current) current = seen[guid] = {};\n      if (current[depKey]) return;\n      current[depKey] = true;\n\n      if (deps) {\n        keys = keysOf(deps);\n        var descs = meta.descs;\n        for (i=0; i<keys.length; i++) {\n          key = keys[i];\n          desc = descs[key];\n          if (desc && desc._suspended === obj) continue;\n          method(obj, key);\n        }\n      }\n    }\n\n    function chainsWillChange(obj, keyName, m) {\n      if (!(m.hasOwnProperty('chainWatchers') &&\n            m.chainWatchers[keyName])) {\n        return;\n      }\n\n      var nodes = m.chainWatchers[keyName];\n      var events = [];\n      var i, l;\n\n      for(i = 0, l = nodes.length; i < l; i++) {\n        nodes[i].willChange(events);\n      }\n\n      for (i = 0, l = events.length; i < l; i += 2) {\n        propertyWillChange(events[i], events[i+1]);\n      }\n    }\n\n    function chainsDidChange(obj, keyName, m, suppressEvents) {\n      if (!(m && m.hasOwnProperty('chainWatchers') &&\n            m.chainWatchers[keyName])) {\n        return;\n      }\n\n      var nodes = m.chainWatchers[keyName];\n      var events = suppressEvents ? null : [];\n      var i, l;\n\n      for(i = 0, l = nodes.length; i < l; i++) {\n        nodes[i].didChange(events);\n      }\n\n      if (suppressEvents) {\n        return;\n      }\n\n      for (i = 0, l = events.length; i < l; i += 2) {\n        propertyDidChange(events[i], events[i+1]);\n      }\n    }\n\n    function overrideChains(obj, keyName, m) {\n      chainsDidChange(obj, keyName, m, true);\n    }\n\n    /**\n      @method beginPropertyChanges\n      @chainable\n      @private\n    */\n    function beginPropertyChanges() {\n      deferred++;\n    }\n\n    /**\n      @method endPropertyChanges\n      @private\n    */\n    function endPropertyChanges() {\n      deferred--;\n      if (deferred<=0) {\n        beforeObserverSet.clear();\n        observerSet.flush();\n      }\n    }\n\n    /**\n      Make a series of property changes together in an\n      exception-safe way.\n\n      ```javascript\n      Ember.changeProperties(function() {\n        obj1.set('foo', mayBlowUpWhenSet);\n        obj2.set('bar', baz);\n      });\n      ```\n\n      @method changeProperties\n      @param {Function} callback\n      @param [binding]\n    */\n    function changeProperties(cb, binding) {\n      beginPropertyChanges();\n      tryFinally(cb, endPropertyChanges, binding);\n    }\n\n    function notifyBeforeObservers(obj, keyName) {\n      if (obj.isDestroying) { return; }\n\n      var eventName = keyName + ':before';\n      var listeners, diff;\n      if (deferred) {\n        listeners = beforeObserverSet.add(obj, keyName, eventName);\n        diff = listenersDiff(obj, eventName, listeners);\n        sendEvent(obj, eventName, [obj, keyName], diff);\n      } else {\n        sendEvent(obj, eventName, [obj, keyName]);\n      }\n    }\n\n    function notifyObservers(obj, keyName) {\n      if (obj.isDestroying) { return; }\n\n      var eventName = keyName + ':change';\n      var listeners;\n      if (deferred) {\n        listeners = observerSet.add(obj, keyName, eventName);\n        listenersUnion(obj, eventName, listeners);\n      } else {\n        sendEvent(obj, eventName, [obj, keyName]);\n      }\n    }\n\n    __exports__.propertyWillChange = propertyWillChange;\n    __exports__.propertyDidChange = propertyDidChange;\n    __exports__.overrideChains = overrideChains;\n    __exports__.beginPropertyChanges = beginPropertyChanges;\n    __exports__.endPropertyChanges = endPropertyChanges;\n    __exports__.changeProperties = changeProperties;\n  });\nenifed(\"ember-metal/property_get\",\n  [\"ember-metal/core\",\"ember-metal/error\",\"ember-metal/path_cache\",\"ember-metal/platform\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember-metal\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    var EmberError = __dependency2__[\"default\"];\n    var isGlobalPath = __dependency3__.isGlobalPath;\n    var isPath = __dependency3__.isPath;\n    var pathHasThis = __dependency3__.hasThis;\n    var hasPropertyAccessors = __dependency4__.hasPropertyAccessors;\n\n    var FIRST_KEY = /^([^\\.]+)/;\n\n    // ..........................................................\n    // GET AND SET\n    //\n    // If we are on a platform that supports accessors we can use those.\n    // Otherwise simulate accessors by looking up the property directly on the\n    // object.\n\n    /**\n      Gets the value of a property on an object. If the property is computed,\n      the function will be invoked. If the property is not defined but the\n      object implements the `unknownProperty` method then that will be invoked.\n\n      If you plan to run on IE8 and older browsers then you should use this\n      method anytime you want to retrieve a property on an object that you don't\n      know for sure is private. (Properties beginning with an underscore '_'\n      are considered private.)\n\n      On all newer browsers, you only need to use this method to retrieve\n      properties if the property might not be defined on the object and you want\n      to respect the `unknownProperty` handler. Otherwise you can ignore this\n      method.\n\n      Note that if the object itself is `undefined`, this method will throw\n      an error.\n\n      @method get\n      @for Ember\n      @param {Object} obj The object to retrieve from.\n      @param {String} keyName The property key to retrieve\n      @return {Object} the property value or `null`.\n    */\n    var get = function get(obj, keyName) {\n      // Helpers that operate with 'this' within an #each\n      if (keyName === '') {\n        return obj;\n      }\n\n      if (!keyName && 'string' === typeof obj) {\n        keyName = obj;\n        obj = null;\n      }\n\n      Ember.assert(\"Cannot call get with \"+ keyName +\" key.\", !!keyName);\n      Ember.assert(\"Cannot call get with '\"+ keyName +\"' on an undefined object.\", obj !== undefined);\n\n      if (obj === null) {\n        var value = _getPath(obj, keyName);\n        Ember.deprecate(\n          \"Ember.get fetched '\"+keyName+\"' from the global context. This behavior will change in the future (issue #3852)\",\n          !value || (obj && obj !== Ember.lookup) || isPath(keyName) || isGlobalPath(keyName+\".\") // Add a . to ensure simple paths are matched.\n        );\n        return value;\n      }\n\n      var meta = obj['__ember_meta__'];\n      var desc = meta && meta.descs[keyName];\n      var ret;\n\n      if (desc === undefined && isPath(keyName)) {\n        return _getPath(obj, keyName);\n      }\n\n      if (desc) {\n        return desc.get(obj, keyName);\n      } else {\n        \n          if (hasPropertyAccessors && meta && meta.watching[keyName] > 0) {\n            ret = meta.values[keyName];\n          } else {\n            ret = obj[keyName];\n          }\n        \n        if (ret === undefined &&\n            'object' === typeof obj && !(keyName in obj) && 'function' === typeof obj.unknownProperty) {\n          return obj.unknownProperty(keyName);\n        }\n\n        return ret;\n      }\n    };\n\n    // Currently used only by Ember Data tests\n    if (Ember.config.overrideAccessors) {\n      Ember.get = get;\n      Ember.config.overrideAccessors();\n      get = Ember.get;\n    }\n\n    /**\n      Normalizes a target/path pair to reflect that actual target/path that should\n      be observed, etc. This takes into account passing in global property\n      paths (i.e. a path beginning with a captial letter not defined on the\n      target).\n\n      @private\n      @method normalizeTuple\n      @for Ember\n      @param {Object} target The current target. May be `null`.\n      @param {String} path A path on the target or a global property path.\n      @return {Array} a temporary array with the normalized target/path pair.\n    */\n    function normalizeTuple(target, path) {\n      var hasThis  = pathHasThis(path);\n      var isGlobal = !hasThis && isGlobalPath(path);\n      var key;\n\n      if (!target || isGlobal) target = Ember.lookup;\n      if (hasThis) path = path.slice(5);\n\n      Ember.deprecate(\n        \"normalizeTuple will return '\"+path+\"' as a non-global. This behavior will change in the future (issue #3852)\",\n        target === Ember.lookup || !target || hasThis || isGlobal || !isGlobalPath(path+'.')\n      );\n\n      if (target === Ember.lookup) {\n        key = path.match(FIRST_KEY)[0];\n        target = get(target, key);\n        path   = path.slice(key.length+1);\n      }\n\n      // must return some kind of path to be valid else other things will break.\n      if (!path || path.length===0) throw new EmberError('Path cannot be empty');\n\n      return [ target, path ];\n    }\n\n    function _getPath(root, path) {\n      var hasThis, parts, tuple, idx, len;\n\n      // If there is no root and path is a key name, return that\n      // property from the global object.\n      // E.g. get('Ember') -> Ember\n      if (root === null && !isPath(path)) {\n        return get(Ember.lookup, path);\n      }\n\n      // detect complicated paths and normalize them\n      hasThis = pathHasThis(path);\n\n      if (!root || hasThis) {\n        tuple = normalizeTuple(root, path);\n        root = tuple[0];\n        path = tuple[1];\n        tuple.length = 0;\n      }\n\n      parts = path.split(\".\");\n      len = parts.length;\n      for (idx = 0; root != null && idx < len; idx++) {\n        root = get(root, parts[idx], true);\n        if (root && root.isDestroyed) { return undefined; }\n      }\n      return root;\n    }\n\n    function getWithDefault(root, key, defaultValue) {\n      var value = get(root, key);\n\n      if (value === undefined) { return defaultValue; }\n      return value;\n    }\n\n    __exports__.getWithDefault = getWithDefault;__exports__[\"default\"] = get;\n    __exports__.get = get;\n    __exports__.normalizeTuple = normalizeTuple;\n    __exports__._getPath = _getPath;\n  });\nenifed(\"ember-metal/property_set\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_events\",\"ember-metal/properties\",\"ember-metal/error\",\"ember-metal/path_cache\",\"ember-metal/platform\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var getPath = __dependency2__._getPath;\n    var propertyWillChange = __dependency3__.propertyWillChange;\n    var propertyDidChange = __dependency3__.propertyDidChange;\n    var defineProperty = __dependency4__.defineProperty;\n    var EmberError = __dependency5__[\"default\"];\n    var isPath = __dependency6__.isPath;\n    var hasPropertyAccessors = __dependency7__.hasPropertyAccessors;\n\n    var IS_GLOBAL = /^([A-Z$]|([0-9][A-Z$]))/;\n\n    /**\n      Sets the value of a property on an object, respecting computed properties\n      and notifying observers and other listeners of the change. If the\n      property is not defined but the object implements the `setUnknownProperty`\n      method then that will be invoked as well.\n\n      @method set\n      @for Ember\n      @param {Object} obj The object to modify.\n      @param {String} keyName The property key to set\n      @param {Object} value The value to set\n      @return {Object} the passed value.\n    */\n    var set = function set(obj, keyName, value, tolerant) {\n      if (typeof obj === 'string') {\n        Ember.assert(\"Path '\" + obj + \"' must be global if no obj is given.\", IS_GLOBAL.test(obj));\n        value = keyName;\n        keyName = obj;\n        obj = null;\n      }\n\n      Ember.assert(\"Cannot call set with \"+ keyName +\" key.\", !!keyName);\n\n      if (!obj) {\n        return setPath(obj, keyName, value, tolerant);\n      }\n\n      var meta = obj['__ember_meta__'];\n      var desc = meta && meta.descs[keyName];\n      var isUnknown, currentValue;\n\n      if (desc === undefined && isPath(keyName)) {\n        return setPath(obj, keyName, value, tolerant);\n      }\n\n      Ember.assert(\"You need to provide an object and key to `set`.\", !!obj && keyName !== undefined);\n      Ember.assert('calling set on destroyed object', !obj.isDestroyed);\n\n      if (desc !== undefined) {\n        desc.set(obj, keyName, value);\n      } else {\n\n        if (typeof obj === 'object' && obj !== null && value !== undefined && obj[keyName] === value) {\n          return value;\n        }\n\n        isUnknown = 'object' === typeof obj && !(keyName in obj);\n\n        // setUnknownProperty is called if `obj` is an object,\n        // the property does not already exist, and the\n        // `setUnknownProperty` method exists on the object\n        if (isUnknown && 'function' === typeof obj.setUnknownProperty) {\n          obj.setUnknownProperty(keyName, value);\n        } else if (meta && meta.watching[keyName] > 0) {\n          \n            if (hasPropertyAccessors) {\n              currentValue = meta.values[keyName];\n            } else {\n              currentValue = obj[keyName];\n            }\n                    // only trigger a change if the value has changed\n          if (value !== currentValue) {\n            propertyWillChange(obj, keyName);\n            \n              if (hasPropertyAccessors) {\n                if (\n                  (currentValue === undefined && !(keyName in obj)) ||\n                  !Object.prototype.propertyIsEnumerable.call(obj, keyName)\n                ) {\n                  defineProperty(obj, keyName, null, value); // setup mandatory setter\n                } else {\n                  meta.values[keyName] = value;\n                }\n              } else {\n                obj[keyName] = value;\n              }\n                        propertyDidChange(obj, keyName);\n          }\n        } else {\n          obj[keyName] = value;\n        }\n      }\n      return value;\n    };\n\n    // Currently used only by Ember Data tests\n    // ES6TODO: Verify still true\n    if (Ember.config.overrideAccessors) {\n      Ember.set = set;\n      Ember.config.overrideAccessors();\n      set = Ember.set;\n    }\n\n    function setPath(root, path, value, tolerant) {\n      var keyName;\n\n      // get the last part of the path\n      keyName = path.slice(path.lastIndexOf('.') + 1);\n\n      // get the first part of the part\n      path    = (path === keyName) ? keyName : path.slice(0, path.length-(keyName.length+1));\n\n      // unless the path is this, look up the first part to\n      // get the root\n      if (path !== 'this') {\n        root = getPath(root, path);\n      }\n\n      if (!keyName || keyName.length === 0) {\n        throw new EmberError('Property set failed: You passed an empty path');\n      }\n\n      if (!root) {\n        if (tolerant) { return; }\n        else { throw new EmberError('Property set failed: object in path \"'+path+'\" could not be found or was destroyed.'); }\n      }\n\n      return set(root, keyName, value);\n    }\n\n    /**\n      Error-tolerant form of `Ember.set`. Will not blow up if any part of the\n      chain is `undefined`, `null`, or destroyed.\n\n      This is primarily used when syncing bindings, which may try to update after\n      an object has been destroyed.\n\n      @method trySet\n      @for Ember\n      @param {Object} obj The object to modify.\n      @param {String} path The property path to set\n      @param {Object} value The value to set\n    */\n    function trySet(root, path, value) {\n      return set(root, path, value, true);\n    }\n\n    __exports__.trySet = trySet;__exports__.set = set;\n  });\nenifed(\"ember-metal/run_loop\",\n  [\"ember-metal/core\",\"ember-metal/utils\",\"ember-metal/array\",\"ember-metal/property_events\",\"backburner\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var apply = __dependency2__.apply;\n    var GUID_KEY = __dependency2__.GUID_KEY;\n    var indexOf = __dependency3__.indexOf;\n    var beginPropertyChanges = __dependency4__.beginPropertyChanges;\n    var endPropertyChanges = __dependency4__.endPropertyChanges;\n    var Backburner = __dependency5__[\"default\"];\n\n    function onBegin(current) {\n      run.currentRunLoop = current;\n    }\n\n    function onEnd(current, next) {\n      run.currentRunLoop = next;\n    }\n\n    // ES6TODO: should Backburner become es6?\n    var backburner = new Backburner(['sync', 'actions', 'destroy'], {\n      GUID_KEY: GUID_KEY,\n      sync: {\n        before: beginPropertyChanges,\n        after: endPropertyChanges\n      },\n      defaultQueue: 'actions',\n      onBegin: onBegin,\n      onEnd: onEnd,\n      onErrorTarget: Ember,\n      onErrorMethod: 'onerror'\n    });\n    var slice = [].slice;\n    var concat = [].concat;\n\n    // ..........................................................\n    // run - this is ideally the only public API the dev sees\n    //\n\n    /**\n      Runs the passed target and method inside of a RunLoop, ensuring any\n      deferred actions including bindings and views updates are flushed at the\n      end.\n\n      Normally you should not need to invoke this method yourself. However if\n      you are implementing raw event handlers when interfacing with other\n      libraries or plugins, you should probably wrap all of your code inside this\n      call.\n\n      ```javascript\n      run(function() {\n        // code to be execute within a RunLoop\n      });\n      ```\n\n      @class run\n      @namespace Ember\n      @static\n      @constructor\n      @param {Object} [target] target of method to call\n      @param {Function|String} method Method to invoke.\n        May be a function or a string. If you pass a string\n        then it will be looked up on the passed target.\n      @param {Object} [args*] Any additional arguments you wish to pass to the method.\n      @return {Object} return value from invoking the passed function.\n    */\n    __exports__[\"default\"] = run;\n    function run() {\n      return backburner.run.apply(backburner, arguments);\n    }\n\n    /**\n      If no run-loop is present, it creates a new one. If a run loop is\n      present it will queue itself to run on the existing run-loops action\n      queue.\n\n      Please note: This is not for normal usage, and should be used sparingly.\n\n      If invoked when not within a run loop:\n\n      ```javascript\n      run.join(function() {\n        // creates a new run-loop\n      });\n      ```\n\n      Alternatively, if called within an existing run loop:\n\n      ```javascript\n      run(function() {\n        // creates a new run-loop\n        run.join(function() {\n          // joins with the existing run-loop, and queues for invocation on\n          // the existing run-loops action queue.\n        });\n      });\n      ```\n\n      @method join\n      @namespace Ember\n      @param {Object} [target] target of method to call\n      @param {Function|String} method Method to invoke.\n        May be a function or a string. If you pass a string\n        then it will be looked up on the passed target.\n      @param {Object} [args*] Any additional arguments you wish to pass to the method.\n      @return {Object} Return value from invoking the passed function. Please note,\n      when called within an existing loop, no return value is possible.\n    */\n    run.join = function(target, method /* args */) {\n      if (!run.currentRunLoop) {\n        return Ember.run.apply(Ember, arguments);\n      }\n\n      var args = slice.call(arguments);\n      args.unshift('actions');\n      run.schedule.apply(run, args);\n    };\n\n    /**\n      Provides a useful utility for when integrating with non-Ember libraries\n      that provide asynchronous callbacks.\n\n      Ember utilizes a run-loop to batch and coalesce changes. This works by\n      marking the start and end of Ember-related Javascript execution.\n\n      When using events such as a View's click handler, Ember wraps the event\n      handler in a run-loop, but when integrating with non-Ember libraries this\n      can be tedious.\n\n      For example, the following is rather verbose but is the correct way to combine\n      third-party events and Ember code.\n\n      ```javascript\n      var that = this;\n      jQuery(window).on('resize', function(){\n        run(function(){\n          that.handleResize();\n        });\n      });\n      ```\n\n      To reduce the boilerplate, the following can be used to construct a\n      run-loop-wrapped callback handler.\n\n      ```javascript\n      jQuery(window).on('resize', run.bind(this, this.handleResize));\n      ```\n\n      @method bind\n      @namespace Ember\n      @param {Object} [target] target of method to call\n      @param {Function|String} method Method to invoke.\n        May be a function or a string. If you pass a string\n        then it will be looked up on the passed target.\n      @param {Object} [args*] Any additional arguments you wish to pass to the method.\n      @return {Object} return value from invoking the passed function. Please note,\n      when called within an existing loop, no return value is possible.\n      @since 1.4.0\n    */\n    run.bind = function(target, method /* args*/) {\n      var args = slice.call(arguments);\n      return function() {\n        return run.join.apply(run, args.concat(slice.call(arguments)));\n      };\n    };\n\n    run.backburner = backburner;\n    run.currentRunLoop = null;\n    run.queues = backburner.queueNames;\n\n    /**\n      Begins a new RunLoop. Any deferred actions invoked after the begin will\n      be buffered until you invoke a matching call to `run.end()`. This is\n      a lower-level way to use a RunLoop instead of using `run()`.\n\n      ```javascript\n      run.begin();\n      // code to be execute within a RunLoop\n      run.end();\n      ```\n\n      @method begin\n      @return {void}\n    */\n    run.begin = function() {\n      backburner.begin();\n    };\n\n    /**\n      Ends a RunLoop. This must be called sometime after you call\n      `run.begin()` to flush any deferred actions. This is a lower-level way\n      to use a RunLoop instead of using `run()`.\n\n      ```javascript\n      run.begin();\n      // code to be execute within a RunLoop\n      run.end();\n      ```\n\n      @method end\n      @return {void}\n    */\n    run.end = function() {\n      backburner.end();\n    };\n\n    /**\n      Array of named queues. This array determines the order in which queues\n      are flushed at the end of the RunLoop. You can define your own queues by\n      simply adding the queue name to this array. Normally you should not need\n      to inspect or modify this property.\n\n      @property queues\n      @type Array\n      @default ['sync', 'actions', 'destroy']\n    */\n\n    /**\n      Adds the passed target/method and any optional arguments to the named\n      queue to be executed at the end of the RunLoop. If you have not already\n      started a RunLoop when calling this method one will be started for you\n      automatically.\n\n      At the end of a RunLoop, any methods scheduled in this way will be invoked.\n      Methods will be invoked in an order matching the named queues defined in\n      the `run.queues` property.\n\n      ```javascript\n      run.schedule('sync', this, function() {\n        // this will be executed in the first RunLoop queue, when bindings are synced\n        console.log(\"scheduled on sync queue\");\n      });\n\n      run.schedule('actions', this, function() {\n        // this will be executed in the 'actions' queue, after bindings have synced.\n        console.log(\"scheduled on actions queue\");\n      });\n\n      // Note the functions will be run in order based on the run queues order.\n      // Output would be:\n      //   scheduled on sync queue\n      //   scheduled on actions queue\n      ```\n\n      @method schedule\n      @param {String} queue The name of the queue to schedule against.\n        Default queues are 'sync' and 'actions'\n      @param {Object} [target] target object to use as the context when invoking a method.\n      @param {String|Function} method The method to invoke. If you pass a string it\n        will be resolved on the target object at the time the scheduled item is\n        invoked allowing you to change the target function.\n      @param {Object} [arguments*] Optional arguments to be passed to the queued method.\n      @return {void}\n    */\n    run.schedule = function(queue, target, method) {\n      checkAutoRun();\n      backburner.schedule.apply(backburner, arguments);\n    };\n\n    // Used by global test teardown\n    run.hasScheduledTimers = function() {\n      return backburner.hasTimers();\n    };\n\n    // Used by global test teardown\n    run.cancelTimers = function () {\n      backburner.cancelTimers();\n    };\n\n    /**\n      Immediately flushes any events scheduled in the 'sync' queue. Bindings\n      use this queue so this method is a useful way to immediately force all\n      bindings in the application to sync.\n\n      You should call this method anytime you need any changed state to propagate\n      throughout the app immediately without repainting the UI (which happens\n      in the later 'render' queue added by the `ember-views` package).\n\n      ```javascript\n      run.sync();\n      ```\n\n      @method sync\n      @return {void}\n    */\n    run.sync = function() {\n      if (backburner.currentInstance) {\n        backburner.currentInstance.queues.sync.flush();\n      }\n    };\n\n    /**\n      Invokes the passed target/method and optional arguments after a specified\n      period of time. The last parameter of this method must always be a number\n      of milliseconds.\n\n      You should use this method whenever you need to run some action after a\n      period of time instead of using `setTimeout()`. This method will ensure that\n      items that expire during the same script execution cycle all execute\n      together, which is often more efficient than using a real setTimeout.\n\n      ```javascript\n      run.later(myContext, function() {\n        // code here will execute within a RunLoop in about 500ms with this == myContext\n      }, 500);\n      ```\n\n      @method later\n      @param {Object} [target] target of method to invoke\n      @param {Function|String} method The method to invoke.\n        If you pass a string it will be resolved on the\n        target at the time the method is invoked.\n      @param {Object} [args*] Optional arguments to pass to the timeout.\n      @param {Number} wait Number of milliseconds to wait.\n      @return {Object} Timer information for use in cancelling, see `run.cancel`.\n    */\n    run.later = function(/*target, method*/) {\n      return backburner.later.apply(backburner, arguments);\n    };\n\n    /**\n      Schedule a function to run one time during the current RunLoop. This is equivalent\n      to calling `scheduleOnce` with the \"actions\" queue.\n\n      @method once\n      @param {Object} [target] The target of the method to invoke.\n      @param {Function|String} method The method to invoke.\n        If you pass a string it will be resolved on the\n        target at the time the method is invoked.\n      @param {Object} [args*] Optional arguments to pass to the timeout.\n      @return {Object} Timer information for use in cancelling, see `run.cancel`.\n    */\n    run.once = function(target, method) {\n      checkAutoRun();\n      var args = slice.call(arguments);\n      args.unshift('actions');\n      return apply(backburner, backburner.scheduleOnce, args);\n    };\n\n    /**\n      Schedules a function to run one time in a given queue of the current RunLoop.\n      Calling this method with the same queue/target/method combination will have\n      no effect (past the initial call).\n\n      Note that although you can pass optional arguments these will not be\n      considered when looking for duplicates. New arguments will replace previous\n      calls.\n\n      ```javascript\n      run(function() {\n        var sayHi = function() { console.log('hi'); }\n        run.scheduleOnce('afterRender', myContext, sayHi);\n        run.scheduleOnce('afterRender', myContext, sayHi);\n        // sayHi will only be executed once, in the afterRender queue of the RunLoop\n      });\n      ```\n\n      Also note that passing an anonymous function to `run.scheduleOnce` will\n      not prevent additional calls with an identical anonymous function from\n      scheduling the items multiple times, e.g.:\n\n      ```javascript\n      function scheduleIt() {\n        run.scheduleOnce('actions', myContext, function() { console.log(\"Closure\"); });\n      }\n      scheduleIt();\n      scheduleIt();\n      // \"Closure\" will print twice, even though we're using `run.scheduleOnce`,\n      // because the function we pass to it is anonymous and won't match the\n      // previously scheduled operation.\n      ```\n\n      Available queues, and their order, can be found at `run.queues`\n\n      @method scheduleOnce\n      @param {String} [queue] The name of the queue to schedule against. Default queues are 'sync' and 'actions'.\n      @param {Object} [target] The target of the method to invoke.\n      @param {Function|String} method The method to invoke.\n        If you pass a string it will be resolved on the\n        target at the time the method is invoked.\n      @param {Object} [args*] Optional arguments to pass to the timeout.\n      @return {Object} Timer information for use in cancelling, see `run.cancel`.\n    */\n    run.scheduleOnce = function(/*queue, target, method*/) {\n      checkAutoRun();\n      return backburner.scheduleOnce.apply(backburner, arguments);\n    };\n\n    /**\n      Schedules an item to run from within a separate run loop, after\n      control has been returned to the system. This is equivalent to calling\n      `run.later` with a wait time of 1ms.\n\n      ```javascript\n      run.next(myContext, function() {\n        // code to be executed in the next run loop,\n        // which will be scheduled after the current one\n      });\n      ```\n\n      Multiple operations scheduled with `run.next` will coalesce\n      into the same later run loop, along with any other operations\n      scheduled by `run.later` that expire right around the same\n      time that `run.next` operations will fire.\n\n      Note that there are often alternatives to using `run.next`.\n      For instance, if you'd like to schedule an operation to happen\n      after all DOM element operations have completed within the current\n      run loop, you can make use of the `afterRender` run loop queue (added\n      by the `ember-views` package, along with the preceding `render` queue\n      where all the DOM element operations happen). Example:\n\n      ```javascript\n      App.MyCollectionView = Ember.CollectionView.extend({\n        didInsertElement: function() {\n          run.scheduleOnce('afterRender', this, 'processChildElements');\n        },\n        processChildElements: function() {\n          // ... do something with collectionView's child view\n          // elements after they've finished rendering, which\n          // can't be done within the CollectionView's\n          // `didInsertElement` hook because that gets run\n          // before the child elements have been added to the DOM.\n        }\n      });\n      ```\n\n      One benefit of the above approach compared to using `run.next` is\n      that you will be able to perform DOM/CSS operations before unprocessed\n      elements are rendered to the screen, which may prevent flickering or\n      other artifacts caused by delaying processing until after rendering.\n\n      The other major benefit to the above approach is that `run.next`\n      introduces an element of non-determinism, which can make things much\n      harder to test, due to its reliance on `setTimeout`; it's much harder\n      to guarantee the order of scheduled operations when they are scheduled\n      outside of the current run loop, i.e. with `run.next`.\n\n      @method next\n      @param {Object} [target] target of method to invoke\n      @param {Function|String} method The method to invoke.\n        If you pass a string it will be resolved on the\n        target at the time the method is invoked.\n      @param {Object} [args*] Optional arguments to pass to the timeout.\n      @return {Object} Timer information for use in cancelling, see `run.cancel`.\n    */\n    run.next = function() {\n      var args = slice.call(arguments);\n      args.push(1);\n      return apply(backburner, backburner.later, args);\n    };\n\n    /**\n      Cancels a scheduled item. Must be a value returned by `run.later()`,\n      `run.once()`, `run.next()`, `run.debounce()`, or\n      `run.throttle()`.\n\n      ```javascript\n      var runNext = run.next(myContext, function() {\n        // will not be executed\n      });\n      run.cancel(runNext);\n\n      var runLater = run.later(myContext, function() {\n        // will not be executed\n      }, 500);\n      run.cancel(runLater);\n\n      var runOnce = run.once(myContext, function() {\n        // will not be executed\n      });\n      run.cancel(runOnce);\n\n      var throttle = run.throttle(myContext, function() {\n        // will not be executed\n      }, 1, false);\n      run.cancel(throttle);\n\n      var debounce = run.debounce(myContext, function() {\n        // will not be executed\n      }, 1);\n      run.cancel(debounce);\n\n      var debounceImmediate = run.debounce(myContext, function() {\n        // will be executed since we passed in true (immediate)\n      }, 100, true);\n      // the 100ms delay until this method can be called again will be cancelled\n      run.cancel(debounceImmediate);\n      ```\n\n      @method cancel\n      @param {Object} timer Timer object to cancel\n      @return {Boolean} true if cancelled or false/undefined if it wasn't found\n    */\n    run.cancel = function(timer) {\n      return backburner.cancel(timer);\n    };\n\n    /**\n      Delay calling the target method until the debounce period has elapsed\n      with no additional debounce calls. If `debounce` is called again before\n      the specified time has elapsed, the timer is reset and the entire period\n      must pass again before the target method is called.\n\n      This method should be used when an event may be called multiple times\n      but the action should only be called once when the event is done firing.\n      A common example is for scroll events where you only want updates to\n      happen once scrolling has ceased.\n\n      ```javascript\n        var myFunc = function() { console.log(this.name + ' ran.'); };\n        var myContext = {name: 'debounce'};\n\n        run.debounce(myContext, myFunc, 150);\n\n        // less than 150ms passes\n\n        run.debounce(myContext, myFunc, 150);\n\n        // 150ms passes\n        // myFunc is invoked with context myContext\n        // console logs 'debounce ran.' one time.\n      ```\n\n      Immediate allows you to run the function immediately, but debounce\n      other calls for this function until the wait time has elapsed. If\n      `debounce` is called again before the specified time has elapsed,\n      the timer is reset and the entire period must pass again before\n      the method can be called again.\n\n      ```javascript\n        var myFunc = function() { console.log(this.name + ' ran.'); };\n        var myContext = {name: 'debounce'};\n\n        run.debounce(myContext, myFunc, 150, true);\n\n        // console logs 'debounce ran.' one time immediately.\n        // 100ms passes\n\n        run.debounce(myContext, myFunc, 150, true);\n\n        // 150ms passes and nothing else is logged to the console and\n        // the debouncee is no longer being watched\n\n        run.debounce(myContext, myFunc, 150, true);\n\n        // console logs 'debounce ran.' one time immediately.\n        // 150ms passes and nothing else is logged to the console and\n        // the debouncee is no longer being watched\n\n      ```\n\n      @method debounce\n      @param {Object} [target] target of method to invoke\n      @param {Function|String} method The method to invoke.\n        May be a function or a string. If you pass a string\n        then it will be looked up on the passed target.\n      @param {Object} [args*] Optional arguments to pass to the timeout.\n      @param {Number} wait Number of milliseconds to wait.\n      @param {Boolean} immediate Trigger the function on the leading instead\n        of the trailing edge of the wait interval. Defaults to false.\n      @return {Array} Timer information for use in cancelling, see `run.cancel`.\n    */\n    run.debounce = function() {\n      return backburner.debounce.apply(backburner, arguments);\n    };\n\n    /**\n      Ensure that the target method is never called more frequently than\n      the specified spacing period. The target method is called immediately.\n\n      ```javascript\n        var myFunc = function() { console.log(this.name + ' ran.'); };\n        var myContext = {name: 'throttle'};\n\n        run.throttle(myContext, myFunc, 150);\n        // myFunc is invoked with context myContext\n        // console logs 'throttle ran.'\n\n        // 50ms passes\n        run.throttle(myContext, myFunc, 150);\n\n        // 50ms passes\n        run.throttle(myContext, myFunc, 150);\n\n        // 150ms passes\n        run.throttle(myContext, myFunc, 150);\n        // myFunc is invoked with context myContext\n        // console logs 'throttle ran.'\n      ```\n\n      @method throttle\n      @param {Object} [target] target of method to invoke\n      @param {Function|String} method The method to invoke.\n        May be a function or a string. If you pass a string\n        then it will be looked up on the passed target.\n      @param {Object} [args*] Optional arguments to pass to the timeout.\n      @param {Number} spacing Number of milliseconds to space out requests.\n      @param {Boolean} immediate Trigger the function on the leading instead\n        of the trailing edge of the wait interval. Defaults to true.\n      @return {Array} Timer information for use in cancelling, see `run.cancel`.\n    */\n    run.throttle = function() {\n      return backburner.throttle.apply(backburner, arguments);\n    };\n\n    // Make sure it's not an autorun during testing\n    function checkAutoRun() {\n      if (!run.currentRunLoop) {\n        Ember.assert(\"You have turned on testing mode, which disabled the run-loop's autorun. You will need to wrap any code with asynchronous side-effects in an run\", !Ember.testing);\n      }\n    }\n\n    /**\n      Add a new named queue after the specified queue.\n\n      The queue to add will only be added once.\n\n      @method _addQueue\n      @param {String} name the name of the queue to add.\n      @param {String} after the name of the queue to add after.\n      @private\n    */\n    run._addQueue = function(name, after) {\n      if (indexOf.call(run.queues, name) === -1) {\n        run.queues.splice(indexOf.call(run.queues, after)+1, 0, name);\n      }\n    };\n  });\nenifed(\"ember-metal/set_properties\",\n  [\"ember-metal/property_events\",\"ember-metal/property_set\",\"ember-metal/keys\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var changeProperties = __dependency1__.changeProperties;\n    var set = __dependency2__.set;\n    var keys = __dependency3__[\"default\"];\n\n    /**\n      Set a list of properties on an object. These properties are set inside\n      a single `beginPropertyChanges` and `endPropertyChanges` batch, so\n      observers will be buffered.\n\n      ```javascript\n      var anObject = Ember.Object.create();\n\n      anObject.setProperties({\n        firstName: 'Stanley',\n        lastName: 'Stuart',\n        age: 21\n      });\n      ```\n\n      @method setProperties\n      @param obj\n      @param {Object} properties\n      @return obj\n    */\n    __exports__[\"default\"] = function setProperties(obj, properties) {\n      if (!properties || typeof properties !== \"object\") { return obj; }\n      changeProperties(function() {\n        var props = keys(properties);\n        var propertyName;\n\n        for (var i = 0, l = props.length; i < l; i++) {\n          propertyName = props[i];\n\n          set(obj, propertyName, properties[propertyName]);\n        }\n      });\n      return obj;\n    }\n  });\nenifed(\"ember-metal/utils\",\n  [\"ember-metal/core\",\"ember-metal/platform\",\"ember-metal/array\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n        // Remove \"use strict\"; from transpiled module until\n    // https://bugs.webkit.org/show_bug.cgi?id=138038 is fixed\n    //\n    // REMOVE_USE_STRICT: true\n\n    var Ember = __dependency1__[\"default\"];\n    var o_defineProperty = __dependency2__.defineProperty;\n    var canDefineNonEnumerableProperties = __dependency2__.canDefineNonEnumerableProperties;\n    var hasPropertyAccessors = __dependency2__.hasPropertyAccessors;\n    var create = __dependency2__.create;\n\n    var forEach = __dependency3__.forEach;\n\n    /**\n    @module ember-metal\n    */\n\n    /**\n      Previously we used `Ember.$.uuid`, however `$.uuid` has been removed from\n      jQuery master. We'll just bootstrap our own uuid now.\n\n      @private\n      @return {Number} the uuid\n    */\n    var _uuid = 0;\n\n    /**\n      Generates a universally unique identifier. This method\n      is used internally by Ember for assisting with\n      the generation of GUID's and other unique identifiers\n      such as `bind-attr` data attributes.\n\n      @public\n      @return {Number} [description]\n     */\n    function uuid() {\n      return ++_uuid;\n    }\n\n    __exports__.uuid = uuid;/**\n      Prefix used for guids through out Ember.\n      @private\n      @property GUID_PREFIX\n      @for Ember\n      @type String\n      @final\n    */\n    var GUID_PREFIX = 'ember';\n\n    var o_create = create;\n    // Used for guid generation...\n    var numberCache  = [];\n    var stringCache  = {};\n\n    /**\n      Strongly hint runtimes to intern the provided string.\n\n      When do I need to use this function?\n\n      For the most part, never. Pre-mature optimization is bad, and often the\n      runtime does exactly what you need it to, and more often the trade-off isn't\n      worth it.\n\n      Why?\n\n      Runtimes store strings in at least 2 different representations:\n      Ropes and Symbols (interned strings). The Rope provides a memory efficient\n      data-structure for strings created from concatenation or some other string\n      manipulation like splitting.\n\n      Unfortunately checking equality of different ropes can be quite costly as\n      runtimes must resort to clever string comparison algorithims. These\n      algorithims typically cost in proportion to the length of the string.\n      Luckily, this is where the Symbols (interned strings) shine. As Symbols are\n      unique by their string content, equality checks can be done by pointer\n      comparision.\n\n      How do I know if my string is a rope or symbol?\n\n      Typically (warning general sweeping statement, but truthy in runtimes at\n      present) static strings created as part of the JS source are interned.\n      Strings often used for comparisions can be interned at runtime if some\n      criteria are met.  One of these criteria can be the size of the entire rope.\n      For example, in chrome 38 a rope longer then 12 characters will not\n      intern, nor will segments of that rope.\n\n      Some numbers: http://jsperf.com/eval-vs-keys/8\n\n      Known Trick™\n\n      @private\n      @return {String} interned version of the provided string\n    */\n    function intern(str) {\n      var obj = {};\n      obj[str] = 1;\n      for (var key in obj) {\n        if (key === str) return key;\n      }\n      return str;\n    }\n\n    /**\n      A unique key used to assign guids and other private metadata to objects.\n      If you inspect an object in your browser debugger you will often see these.\n      They can be safely ignored.\n\n      On browsers that support it, these properties are added with enumeration\n      disabled so they won't show up when you iterate over your properties.\n\n      @private\n      @property GUID_KEY\n      @for Ember\n      @type String\n      @final\n    */\n    var GUID_KEY = intern('__ember' + (+ new Date()));\n\n    var GUID_DESC = {\n      writable:    false,\n      configurable: false,\n      enumerable:  false,\n      value: null\n    };\n\n    /**\n      Generates a new guid, optionally saving the guid to the object that you\n      pass in. You will rarely need to use this method. Instead you should\n      call `Ember.guidFor(obj)`, which return an existing guid if available.\n\n      @private\n      @method generateGuid\n      @for Ember\n      @param {Object} [obj] Object the guid will be used for. If passed in, the guid will\n        be saved on the object and reused whenever you pass the same object\n        again.\n\n        If no object is passed, just generate a new guid.\n      @param {String} [prefix] Prefix to place in front of the guid. Useful when you want to\n        separate the guid into separate namespaces.\n      @return {String} the guid\n    */\n    function generateGuid(obj, prefix) {\n      if (!prefix) prefix = GUID_PREFIX;\n      var ret = (prefix + uuid());\n      if (obj) {\n        if (obj[GUID_KEY] === null) {\n          obj[GUID_KEY] = ret;\n        } else {\n          GUID_DESC.value = ret;\n          o_defineProperty(obj, GUID_KEY, GUID_DESC);\n        }\n      }\n      return ret;\n    }\n\n    __exports__.generateGuid = generateGuid;/**\n      Returns a unique id for the object. If the object does not yet have a guid,\n      one will be assigned to it. You can call this on any object,\n      `Ember.Object`-based or not, but be aware that it will add a `_guid`\n      property.\n\n      You can also use this method on DOM Element objects.\n\n      @private\n      @method guidFor\n      @for Ember\n      @param {Object} obj any object, string, number, Element, or primitive\n      @return {String} the unique guid for this instance.\n    */\n    function guidFor(obj) {\n\n      // special cases where we don't want to add a key to object\n      if (obj === undefined) return \"(undefined)\";\n      if (obj === null) return \"(null)\";\n\n      var ret;\n      var type = typeof obj;\n\n      // Don't allow prototype changes to String etc. to change the guidFor\n      switch(type) {\n        case 'number':\n          ret = numberCache[obj];\n          if (!ret) ret = numberCache[obj] = 'nu'+obj;\n          return ret;\n\n        case 'string':\n          ret = stringCache[obj];\n          if (!ret) ret = stringCache[obj] = 'st' + uuid();\n          return ret;\n\n        case 'boolean':\n          return obj ? '(true)' : '(false)';\n\n        default:\n          if (obj[GUID_KEY]) return obj[GUID_KEY];\n          if (obj === Object) return '(Object)';\n          if (obj === Array)  return '(Array)';\n          ret = GUID_PREFIX + uuid();\n\n          if (obj[GUID_KEY] === null) {\n            obj[GUID_KEY] = ret;\n          } else {\n            GUID_DESC.value = ret;\n            o_defineProperty(obj, GUID_KEY, GUID_DESC);\n          }\n          return ret;\n      }\n    }\n\n    __exports__.guidFor = guidFor;// ..........................................................\n    // META\n    //\n\n    var META_DESC = {\n      writable: true,\n      configurable: false,\n      enumerable: false,\n      value: null\n    };\n\n    function Meta(obj) {\n      this.descs = {};\n      this.watching = {};\n      this.cache = {};\n      this.cacheMeta = {};\n      this.source = obj;\n    }\n\n    Meta.prototype = {\n      descs: null,\n      deps: null,\n      watching: null,\n      listeners: null,\n      cache: null,\n      cacheMeta: null,\n      source: null,\n      mixins: null,\n      bindings: null,\n      chains: null,\n      chainWatchers: null,\n      values: null,\n      proto: null\n    };\n\n    if (!canDefineNonEnumerableProperties) {\n      // on platforms that don't support enumerable false\n      // make meta fail jQuery.isPlainObject() to hide from\n      // jQuery.extend() by having a property that fails\n      // hasOwnProperty check.\n      Meta.prototype.__preventPlainObject__ = true;\n\n      // Without non-enumerable properties, meta objects will be output in JSON\n      // unless explicitly suppressed\n      Meta.prototype.toJSON = function () { };\n    }\n\n    // Placeholder for non-writable metas.\n    var EMPTY_META = new Meta(null);\n\n    \n      if (hasPropertyAccessors) {\n        EMPTY_META.values = {};\n      }\n    \n\n    /**\n      Retrieves the meta hash for an object. If `writable` is true ensures the\n      hash is writable for this object as well.\n\n      The meta object contains information about computed property descriptors as\n      well as any watched properties and other information. You generally will\n      not access this information directly but instead work with higher level\n      methods that manipulate this hash indirectly.\n\n      @method meta\n      @for Ember\n      @private\n\n      @param {Object} obj The object to retrieve meta for\n      @param {Boolean} [writable=true] Pass `false` if you do not intend to modify\n        the meta hash, allowing the method to avoid making an unnecessary copy.\n      @return {Object} the meta hash for an object\n    */\n    function meta(obj, writable) {\n\n      var ret = obj['__ember_meta__'];\n      if (writable===false) return ret || EMPTY_META;\n\n      if (!ret) {\n        if (canDefineNonEnumerableProperties) o_defineProperty(obj, '__ember_meta__', META_DESC);\n\n        ret = new Meta(obj);\n\n        \n          if (hasPropertyAccessors) {\n            ret.values = {};\n          }\n        \n\n        obj['__ember_meta__'] = ret;\n\n        // make sure we don't accidentally try to create constructor like desc\n        ret.descs.constructor = null;\n\n      } else if (ret.source !== obj) {\n        if (canDefineNonEnumerableProperties) o_defineProperty(obj, '__ember_meta__', META_DESC);\n\n        ret = o_create(ret);\n        ret.descs     = o_create(ret.descs);\n        ret.watching  = o_create(ret.watching);\n        ret.cache     = {};\n        ret.cacheMeta = {};\n        ret.source    = obj;\n\n        \n          if (hasPropertyAccessors) {\n            ret.values = o_create(ret.values);\n          }\n        \n\n        obj['__ember_meta__'] = ret;\n      }\n      return ret;\n    }\n\n    function getMeta(obj, property) {\n      var _meta = meta(obj, false);\n      return _meta[property];\n    }\n\n    __exports__.getMeta = getMeta;function setMeta(obj, property, value) {\n      var _meta = meta(obj, true);\n      _meta[property] = value;\n      return value;\n    }\n\n    __exports__.setMeta = setMeta;/**\n      @deprecated\n      @private\n\n      In order to store defaults for a class, a prototype may need to create\n      a default meta object, which will be inherited by any objects instantiated\n      from the class's constructor.\n\n      However, the properties of that meta object are only shallow-cloned,\n      so if a property is a hash (like the event system's `listeners` hash),\n      it will by default be shared across all instances of that class.\n\n      This method allows extensions to deeply clone a series of nested hashes or\n      other complex objects. For instance, the event system might pass\n      `['listeners', 'foo:change', 'ember157']` to `prepareMetaPath`, which will\n      walk down the keys provided.\n\n      For each key, if the key does not exist, it is created. If it already\n      exists and it was inherited from its constructor, the constructor's\n      key is cloned.\n\n      You can also pass false for `writable`, which will simply return\n      undefined if `prepareMetaPath` discovers any part of the path that\n      shared or undefined.\n\n      @method metaPath\n      @for Ember\n      @param {Object} obj The object whose meta we are examining\n      @param {Array} path An array of keys to walk down\n      @param {Boolean} writable whether or not to create a new meta\n        (or meta property) if one does not already exist or if it's\n        shared with its constructor\n    */\n    function metaPath(obj, path, writable) {\n      Ember.deprecate(\"Ember.metaPath is deprecated and will be removed from future releases.\");\n      var _meta = meta(obj, writable);\n      var keyName, value;\n\n      for (var i=0, l=path.length; i<l; i++) {\n        keyName = path[i];\n        value = _meta[keyName];\n\n        if (!value) {\n          if (!writable) { return undefined; }\n          value = _meta[keyName] = { __ember_source__: obj };\n        } else if (value.__ember_source__ !== obj) {\n          if (!writable) { return undefined; }\n          value = _meta[keyName] = o_create(value);\n          value.__ember_source__ = obj;\n        }\n\n        _meta = value;\n      }\n\n      return value;\n    }\n\n    __exports__.metaPath = metaPath;/**\n      Wraps the passed function so that `this._super` will point to the superFunc\n      when the function is invoked. This is the primitive we use to implement\n      calls to super.\n\n      @private\n      @method wrap\n      @for Ember\n      @param {Function} func The function to call\n      @param {Function} superFunc The super function.\n      @return {Function} wrapped function.\n    */\n    function wrap(func, superFunc) {\n      function superWrapper() {\n        var ret;\n        var sup  = this && this.__nextSuper;\n        var args = new Array(arguments.length);\n        for (var i = 0, l = args.length; i < l; i++) {\n          args[i] = arguments[i];\n        }\n        if(this) { this.__nextSuper = superFunc; }\n        ret = apply(this, func, args);\n        if(this) { this.__nextSuper = sup; }\n        return ret;\n      }\n\n      superWrapper.wrappedFunction = func;\n      superWrapper.wrappedFunction.__ember_arity__ = func.length;\n      superWrapper.__ember_observes__ = func.__ember_observes__;\n      superWrapper.__ember_observesBefore__ = func.__ember_observesBefore__;\n      superWrapper.__ember_listens__ = func.__ember_listens__;\n\n      return superWrapper;\n    }\n\n    __exports__.wrap = wrap;var EmberArray;\n\n    /**\n      Returns true if the passed object is an array or Array-like.\n\n      Ember Array Protocol:\n\n        - the object has an objectAt property\n        - the object is a native Array\n        - the object is an Object, and has a length property\n\n      Unlike `Ember.typeOf` this method returns true even if the passed object is\n      not formally array but appears to be array-like (i.e. implements `Ember.Array`)\n\n      ```javascript\n      Ember.isArray();                                          // false\n      Ember.isArray([]);                                        // true\n      Ember.isArray(Ember.ArrayProxy.create({ content: [] }));  // true\n      ```\n\n      @method isArray\n      @for Ember\n      @param {Object} obj The object to test\n      @return {Boolean} true if the passed object is an array or Array-like\n    */\n    // ES6TODO: Move up to runtime? This is only use in ember-metal by concatenatedProperties\n    function isArray(obj) {\n      var modulePath, type;\n\n      if (typeof EmberArray === \"undefined\") {\n        modulePath = 'ember-runtime/mixins/array';\n        if (Ember.__loader.registry[modulePath]) {\n          EmberArray = Ember.__loader.require(modulePath)['default'];\n        }\n      }\n\n      if (!obj || obj.setInterval) { return false; }\n      if (Array.isArray && Array.isArray(obj)) { return true; }\n      if (EmberArray && EmberArray.detect(obj)) { return true; }\n\n      type = typeOf(obj);\n      if ('array' === type) { return true; }\n      if ((obj.length !== undefined) && 'object' === type) { return true; }\n      return false;\n    }\n\n    /**\n      Forces the passed object to be part of an array. If the object is already\n      an array or array-like, returns the object. Otherwise adds the object to\n      an array. If obj is `null` or `undefined`, returns an empty array.\n\n      ```javascript\n      Ember.makeArray();            // []\n      Ember.makeArray(null);        // []\n      Ember.makeArray(undefined);   // []\n      Ember.makeArray('lindsay');   // ['lindsay']\n      Ember.makeArray([1, 2, 42]);  // [1, 2, 42]\n\n      var controller = Ember.ArrayProxy.create({ content: [] });\n\n      Ember.makeArray(controller) === controller;  // true\n      ```\n\n      @method makeArray\n      @for Ember\n      @param {Object} obj the object\n      @return {Array}\n    */\n    function makeArray(obj) {\n      if (obj === null || obj === undefined) { return []; }\n      return isArray(obj) ? obj : [obj];\n    }\n\n    __exports__.makeArray = makeArray;/**\n      Checks to see if the `methodName` exists on the `obj`.\n\n      ```javascript\n      var foo = { bar: Ember.K, baz: null };\n\n      Ember.canInvoke(foo, 'bar'); // true\n      Ember.canInvoke(foo, 'baz'); // false\n      Ember.canInvoke(foo, 'bat'); // false\n      ```\n\n      @method canInvoke\n      @for Ember\n      @param {Object} obj The object to check for the method\n      @param {String} methodName The method name to check for\n      @return {Boolean}\n    */\n    function canInvoke(obj, methodName) {\n      return !!(obj && typeof obj[methodName] === 'function');\n    }\n\n    /**\n      Checks to see if the `methodName` exists on the `obj`,\n      and if it does, invokes it with the arguments passed.\n\n      ```javascript\n      var d = new Date('03/15/2013');\n\n      Ember.tryInvoke(d, 'getTime');              // 1363320000000\n      Ember.tryInvoke(d, 'setFullYear', [2014]);  // 1394856000000\n      Ember.tryInvoke(d, 'noSuchMethod', [2014]); // undefined\n      ```\n\n      @method tryInvoke\n      @for Ember\n      @param {Object} obj The object to check for the method\n      @param {String} methodName The method name to check for\n      @param {Array} [args] The arguments to pass to the method\n      @return {*} the return value of the invoked method or undefined if it cannot be invoked\n    */\n    function tryInvoke(obj, methodName, args) {\n      if (canInvoke(obj, methodName)) {\n        return args ? applyStr(obj, methodName, args) : applyStr(obj, methodName);\n      }\n    }\n\n    __exports__.tryInvoke = tryInvoke;// https://github.com/emberjs/ember.js/pull/1617\n    var needsFinallyFix = (function() {\n      var count = 0;\n      try{\n        try { }\n        finally {\n          count++;\n          throw new Error('needsFinallyFixTest');\n        }\n      } catch (e) {}\n\n      return count !== 1;\n    })();\n\n    /**\n      Provides try/finally functionality, while working\n      around Safari's double finally bug.\n\n      ```javascript\n      var tryable = function() {\n        someResource.lock();\n        runCallback(); // May throw error.\n      };\n\n      var finalizer = function() {\n        someResource.unlock();\n      };\n\n      Ember.tryFinally(tryable, finalizer);\n      ```\n\n      @method tryFinally\n      @for Ember\n      @param {Function} tryable The function to run the try callback\n      @param {Function} finalizer The function to run the finally callback\n      @param {Object} [binding] The optional calling object. Defaults to 'this'\n      @return {*} The return value is the that of the finalizer,\n      unless that value is undefined, in which case it is the return value\n      of the tryable\n    */\n\n    var tryFinally;\n    if (needsFinallyFix) {\n      tryFinally = function(tryable, finalizer, binding) {\n        var result, finalResult, finalError;\n\n        binding = binding || this;\n\n        try {\n          result = tryable.call(binding);\n        } finally {\n          try {\n            finalResult = finalizer.call(binding);\n          } catch (e) {\n            finalError = e;\n          }\n        }\n\n        if (finalError) { throw finalError; }\n\n        return (finalResult === undefined) ? result : finalResult;\n      };\n    } else {\n      tryFinally = function(tryable, finalizer, binding) {\n        var result, finalResult;\n\n        binding = binding || this;\n\n        try {\n          result = tryable.call(binding);\n        } finally {\n          finalResult = finalizer.call(binding);\n        }\n\n        return (finalResult === undefined) ? result : finalResult;\n      };\n    }\n\n    /**\n      Provides try/catch/finally functionality, while working\n      around Safari's double finally bug.\n\n      ```javascript\n      var tryable = function() {\n        for (i = 0, l = listeners.length; i < l; i++) {\n          listener = listeners[i];\n          beforeValues[i] = listener.before(name, time(), payload);\n        }\n\n        return callback.call(binding);\n      };\n\n      var catchable = function(e) {\n        payload = payload || {};\n        payload.exception = e;\n      };\n\n      var finalizer = function() {\n        for (i = 0, l = listeners.length; i < l; i++) {\n          listener = listeners[i];\n          listener.after(name, time(), payload, beforeValues[i]);\n        }\n      };\n\n      Ember.tryCatchFinally(tryable, catchable, finalizer);\n      ```\n\n      @method tryCatchFinally\n      @for Ember\n      @param {Function} tryable The function to run the try callback\n      @param {Function} catchable The function to run the catchable callback\n      @param {Function} finalizer The function to run the finally callback\n      @param {Object} [binding] The optional calling object. Defaults to 'this'\n      @return {*} The return value is the that of the finalizer,\n      unless that value is undefined, in which case it is the return value\n      of the tryable.\n    */\n    var tryCatchFinally;\n    if (needsFinallyFix) {\n      tryCatchFinally = function(tryable, catchable, finalizer, binding) {\n        var result, finalResult, finalError;\n\n        binding = binding || this;\n\n        try {\n          result = tryable.call(binding);\n        } catch(error) {\n          result = catchable.call(binding, error);\n        } finally {\n          try {\n            finalResult = finalizer.call(binding);\n          } catch (e) {\n            finalError = e;\n          }\n        }\n\n        if (finalError) { throw finalError; }\n\n        return (finalResult === undefined) ? result : finalResult;\n      };\n    } else {\n      tryCatchFinally = function(tryable, catchable, finalizer, binding) {\n        var result, finalResult;\n\n        binding = binding || this;\n\n        try {\n          result = tryable.call(binding);\n        } catch(error) {\n          result = catchable.call(binding, error);\n        } finally {\n          finalResult = finalizer.call(binding);\n        }\n\n        return (finalResult === undefined) ? result : finalResult;\n      };\n    }\n\n    // ........................................\n    // TYPING & ARRAY MESSAGING\n    //\n\n    var TYPE_MAP = {};\n    var t = \"Boolean Number String Function Array Date RegExp Object\".split(\" \");\n    forEach.call(t, function(name) {\n      TYPE_MAP[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n    });\n\n    var toString = Object.prototype.toString;\n\n    var EmberObject;\n\n    /**\n      Returns a consistent type for the passed item.\n\n      Use this instead of the built-in `typeof` to get the type of an item.\n      It will return the same result across all browsers and includes a bit\n      more detail. Here is what will be returned:\n\n          | Return Value  | Meaning                                              |\n          |---------------|------------------------------------------------------|\n          | 'string'      | String primitive or String object.                   |\n          | 'number'      | Number primitive or Number object.                   |\n          | 'boolean'     | Boolean primitive or Boolean object.                 |\n          | 'null'        | Null value                                           |\n          | 'undefined'   | Undefined value                                      |\n          | 'function'    | A function                                           |\n          | 'array'       | An instance of Array                                 |\n          | 'regexp'      | An instance of RegExp                                |\n          | 'date'        | An instance of Date                                  |\n          | 'class'       | An Ember class (created using Ember.Object.extend()) |\n          | 'instance'    | An Ember object instance                             |\n          | 'error'       | An instance of the Error object                      |\n          | 'object'      | A JavaScript object not inheriting from Ember.Object |\n\n      Examples:\n\n      ```javascript\n      Ember.typeOf();                       // 'undefined'\n      Ember.typeOf(null);                   // 'null'\n      Ember.typeOf(undefined);              // 'undefined'\n      Ember.typeOf('michael');              // 'string'\n      Ember.typeOf(new String('michael'));  // 'string'\n      Ember.typeOf(101);                    // 'number'\n      Ember.typeOf(new Number(101));        // 'number'\n      Ember.typeOf(true);                   // 'boolean'\n      Ember.typeOf(new Boolean(true));      // 'boolean'\n      Ember.typeOf(Ember.makeArray);        // 'function'\n      Ember.typeOf([1, 2, 90]);             // 'array'\n      Ember.typeOf(/abc/);                  // 'regexp'\n      Ember.typeOf(new Date());             // 'date'\n      Ember.typeOf(Ember.Object.extend());  // 'class'\n      Ember.typeOf(Ember.Object.create());  // 'instance'\n      Ember.typeOf(new Error('teamocil'));  // 'error'\n\n      // 'normal' JavaScript object\n      Ember.typeOf({ a: 'b' });             // 'object'\n      ```\n\n      @method typeOf\n      @for Ember\n      @param {Object} item the item to check\n      @return {String} the type\n    */\n    function typeOf(item) {\n      var ret, modulePath;\n\n      // ES6TODO: Depends on Ember.Object which is defined in runtime.\n      if (typeof EmberObject === \"undefined\") {\n        modulePath = 'ember-runtime/system/object';\n        if (Ember.__loader.registry[modulePath]) {\n          EmberObject = Ember.__loader.require(modulePath)['default'];\n        }\n      }\n\n      ret = (item === null || item === undefined) ? String(item) : TYPE_MAP[toString.call(item)] || 'object';\n\n      if (ret === 'function') {\n        if (EmberObject && EmberObject.detect(item)) ret = 'class';\n      } else if (ret === 'object') {\n        if (item instanceof Error) ret = 'error';\n        else if (EmberObject && item instanceof EmberObject) ret = 'instance';\n        else if (item instanceof Date) ret = 'date';\n      }\n\n      return ret;\n    }\n\n    /**\n      Convenience method to inspect an object. This method will attempt to\n      convert the object into a useful string description.\n\n      It is a pretty simple implementation. If you want something more robust,\n      use something like JSDump: https://github.com/NV/jsDump\n\n      @method inspect\n      @for Ember\n      @param {Object} obj The object you want to inspect.\n      @return {String} A description of the object\n      @since 1.4.0\n    */\n    function inspect(obj) {\n      var type = typeOf(obj);\n      if (type === 'array') {\n        return '[' + obj + ']';\n      }\n      if (type !== 'object') {\n        return obj + '';\n      }\n\n      var v;\n      var ret = [];\n      for(var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          v = obj[key];\n          if (v === 'toString') { continue; } // ignore useless items\n          if (typeOf(v) === 'function') { v = \"function() { ... }\"; }\n\n          if (v && typeof v.toString !== 'function') {\n            ret.push(key + \": \" + toString.call(v));\n          } else {\n            ret.push(key + \": \" + v);\n          }\n        }\n      }\n      return \"{\" + ret.join(\", \") + \"}\";\n    }\n\n    __exports__.inspect = inspect;// The following functions are intentionally minified to keep the functions\n    // below Chrome's function body size inlining limit of 600 chars.\n\n    function apply(t /* target */, m /* method */, a /* args */) {\n      var l = a && a.length;\n      if (!a || !l) { return m.call(t); }\n      switch (l) {\n        case 1:  return m.call(t, a[0]);\n        case 2:  return m.call(t, a[0], a[1]);\n        case 3:  return m.call(t, a[0], a[1], a[2]);\n        case 4:  return m.call(t, a[0], a[1], a[2], a[3]);\n        case 5:  return m.call(t, a[0], a[1], a[2], a[3], a[4]);\n        default: return m.apply(t, a);\n      }\n    }\n\n    __exports__.apply = apply;function applyStr(t /* target */, m /* method */, a /* args */) {\n      var l = a && a.length;\n      if (!a || !l) { return t[m](); }\n      switch (l) {\n        case 1:  return t[m](a[0]);\n        case 2:  return t[m](a[0], a[1]);\n        case 3:  return t[m](a[0], a[1], a[2]);\n        case 4:  return t[m](a[0], a[1], a[2], a[3]);\n        case 5:  return t[m](a[0], a[1], a[2], a[3], a[4]);\n        default: return t[m].apply(t, a);\n      }\n    }\n\n    __exports__.applyStr = applyStr;__exports__.GUID_KEY = GUID_KEY;\n    __exports__.META_DESC = META_DESC;\n    __exports__.EMPTY_META = EMPTY_META;\n    __exports__.meta = meta;\n    __exports__.typeOf = typeOf;\n    __exports__.tryCatchFinally = tryCatchFinally;\n    __exports__.isArray = isArray;\n    __exports__.canInvoke = canInvoke;\n    __exports__.tryFinally = tryFinally;\n  });\nenifed(\"ember-metal/watch_key\",\n  [\"ember-metal/core\",\"ember-metal/utils\",\"ember-metal/platform\",\"ember-metal/properties\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var meta = __dependency2__.meta;\n    var typeOf = __dependency2__.typeOf;\n    var o_defineProperty = __dependency3__.defineProperty;\n    var hasPropertyAccessors = __dependency3__.hasPropertyAccessors;\n    var MANDATORY_SETTER_FUNCTION = __dependency4__.MANDATORY_SETTER_FUNCTION;\n    var DEFAULT_GETTER_FUNCTION = __dependency4__.DEFAULT_GETTER_FUNCTION;\n\n    var metaFor = meta; // utils.js\n\n\n    function watchKey(obj, keyName, meta) {\n      // can't watch length on Array - it is special...\n      if (keyName === 'length' && typeOf(obj) === 'array') { return; }\n\n      var m = meta || metaFor(obj), watching = m.watching;\n\n      // activate watching first time\n      if (!watching[keyName]) {\n        watching[keyName] = 1;\n\n        var desc = m.descs[keyName];\n        if (desc && desc.willWatch) { desc.willWatch(obj, keyName); }\n\n        if ('function' === typeof obj.willWatchProperty) {\n          obj.willWatchProperty(keyName);\n        }\n\n        \n          if (hasPropertyAccessors) {\n            handleMandatorySetter(m, obj, keyName);\n          }\n        \n      } else {\n        watching[keyName] = (watching[keyName] || 0) + 1;\n      }\n    }\n\n    __exports__.watchKey = watchKey;\n    \n      var handleMandatorySetter = function handleMandatorySetter(m, obj, keyName) {\n        // this x in Y deopts, so keeping it in this function is better;\n        if (keyName in obj) {\n          m.values[keyName] = obj[keyName];\n          o_defineProperty(obj, keyName, {\n            configurable: true,\n            enumerable: Object.prototype.propertyIsEnumerable.call(obj, keyName),\n            set: MANDATORY_SETTER_FUNCTION(keyName),\n            get: DEFAULT_GETTER_FUNCTION(keyName)\n          });\n        }\n      };\n    \n\n    function unwatchKey(obj, keyName, meta) {\n      var m = meta || metaFor(obj), watching = m.watching;\n\n      if (watching[keyName] === 1) {\n        watching[keyName] = 0;\n\n        var desc = m.descs[keyName];\n        if (desc && desc.didUnwatch) { desc.didUnwatch(obj, keyName); }\n\n        if ('function' === typeof obj.didUnwatchProperty) {\n          obj.didUnwatchProperty(keyName);\n        }\n\n        \n          if (hasPropertyAccessors && keyName in obj) {\n            o_defineProperty(obj, keyName, {\n              configurable: true,\n              enumerable: Object.prototype.propertyIsEnumerable.call(obj, keyName),\n              set: function(val) {\n                // redefine to set as enumerable\n                o_defineProperty(obj, keyName, {\n                  configurable: true,\n                  writable: true,\n                  enumerable: true,\n                  value: val\n                });\n                delete m.values[keyName];\n              },\n              get: DEFAULT_GETTER_FUNCTION(keyName)\n            });\n          }\n        \n      } else if (watching[keyName] > 1) {\n        watching[keyName]--;\n      }\n    }\n\n    __exports__.unwatchKey = unwatchKey;\n  });\nenifed(\"ember-metal/watch_path\",\n  [\"ember-metal/utils\",\"ember-metal/chains\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var meta = __dependency1__.meta;\n    var typeOf = __dependency1__.typeOf;\n    var ChainNode = __dependency2__.ChainNode;\n\n    var metaFor = meta;\n\n    // get the chains for the current object. If the current object has\n    // chains inherited from the proto they will be cloned and reconfigured for\n    // the current object.\n    function chainsFor(obj, meta) {\n      var m = meta || metaFor(obj);\n      var ret = m.chains;\n      if (!ret) {\n        ret = m.chains = new ChainNode(null, null, obj);\n      } else if (ret.value() !== obj) {\n        ret = m.chains = ret.copy(obj);\n      }\n      return ret;\n    }\n\n    function watchPath(obj, keyPath, meta) {\n      // can't watch length on Array - it is special...\n      if (keyPath === 'length' && typeOf(obj) === 'array') { return; }\n\n      var m = meta || metaFor(obj);\n      var watching = m.watching;\n\n      if (!watching[keyPath]) { // activate watching first time\n        watching[keyPath] = 1;\n        chainsFor(obj, m).add(keyPath);\n      } else {\n        watching[keyPath] = (watching[keyPath] || 0) + 1;\n      }\n    }\n\n    __exports__.watchPath = watchPath;function unwatchPath(obj, keyPath, meta) {\n      var m = meta || metaFor(obj);\n      var watching = m.watching;\n\n      if (watching[keyPath] === 1) {\n        watching[keyPath] = 0;\n        chainsFor(obj, m).remove(keyPath);\n      } else if (watching[keyPath] > 1) {\n        watching[keyPath]--;\n      }\n    }\n\n    __exports__.unwatchPath = unwatchPath;\n  });\nenifed(\"ember-metal/watching\",\n  [\"ember-metal/utils\",\"ember-metal/chains\",\"ember-metal/watch_key\",\"ember-metal/watch_path\",\"ember-metal/path_cache\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember-metal\n    */\n\n    var meta = __dependency1__.meta;\n    var GUID_KEY = __dependency1__.GUID_KEY;\n    var typeOf = __dependency1__.typeOf;\n    var generateGuid = __dependency1__.generateGuid;\n    var removeChainWatcher = __dependency2__.removeChainWatcher;\n    var flushPendingChains = __dependency2__.flushPendingChains;\n    var watchKey = __dependency3__.watchKey;\n    var unwatchKey = __dependency3__.unwatchKey;\n    var watchPath = __dependency4__.watchPath;\n    var unwatchPath = __dependency4__.unwatchPath;\n\n    var metaFor = meta; // utils.js\n    var isPath = __dependency5__.isPath;\n\n    /**\n      Starts watching a property on an object. Whenever the property changes,\n      invokes `Ember.propertyWillChange` and `Ember.propertyDidChange`. This is the\n      primitive used by observers and dependent keys; usually you will never call\n      this method directly but instead use higher level methods like\n      `Ember.addObserver()`\n\n      @private\n      @method watch\n      @for Ember\n      @param obj\n      @param {String} keyName\n    */\n    function watch(obj, _keyPath, m) {\n      // can't watch length on Array - it is special...\n      if (_keyPath === 'length' && typeOf(obj) === 'array') { return; }\n\n      if (!isPath(_keyPath)) {\n        watchKey(obj, _keyPath, m);\n      } else {\n        watchPath(obj, _keyPath, m);\n      }\n    }\n\n    __exports__.watch = watch;\n\n    function isWatching(obj, key) {\n      var meta = obj['__ember_meta__'];\n      return (meta && meta.watching[key]) > 0;\n    }\n\n    __exports__.isWatching = isWatching;watch.flushPending = flushPendingChains;\n\n    function unwatch(obj, _keyPath, m) {\n      // can't watch length on Array - it is special...\n      if (_keyPath === 'length' && typeOf(obj) === 'array') { return; }\n\n      if (!isPath(_keyPath)) {\n        unwatchKey(obj, _keyPath, m);\n      } else {\n        unwatchPath(obj, _keyPath, m);\n      }\n    }\n\n    __exports__.unwatch = unwatch;/**\n      Call on an object when you first beget it from another object. This will\n      setup any chained watchers on the object instance as needed. This method is\n      safe to call multiple times.\n\n      @private\n      @method rewatch\n      @for Ember\n      @param obj\n    */\n    function rewatch(obj) {\n      var m = obj['__ember_meta__'], chains = m && m.chains;\n\n      // make sure the object has its own guid.\n      if (GUID_KEY in obj && !obj.hasOwnProperty(GUID_KEY)) {\n        generateGuid(obj);\n      }\n\n      // make sure any chained watchers update.\n      if (chains && chains.value() !== obj) {\n        m.chains = chains.copy(obj);\n      }\n    }\n\n    __exports__.rewatch = rewatch;var NODE_STACK = [];\n\n    /**\n      Tears down the meta on an object so that it can be garbage collected.\n      Multiple calls will have no effect.\n\n      @method destroy\n      @for Ember\n      @param {Object} obj  the object to destroy\n      @return {void}\n    */\n    function destroy(obj) {\n      var meta = obj['__ember_meta__'], node, nodes, key, nodeObject;\n      if (meta) {\n        obj['__ember_meta__'] = null;\n        // remove chainWatchers to remove circular references that would prevent GC\n        node = meta.chains;\n        if (node) {\n          NODE_STACK.push(node);\n          // process tree\n          while (NODE_STACK.length > 0) {\n            node = NODE_STACK.pop();\n            // push children\n            nodes = node._chains;\n            if (nodes) {\n              for (key in nodes) {\n                if (nodes.hasOwnProperty(key)) {\n                  NODE_STACK.push(nodes[key]);\n                }\n              }\n            }\n            // remove chainWatcher in node object\n            if (node._watching) {\n              nodeObject = node._object;\n              if (nodeObject) {\n                removeChainWatcher(nodeObject, node._key, node);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    __exports__.destroy = destroy;\n  });\nenifed(\"ember-routing-handlebars\",\n  [\"ember-metal/core\",\"ember-handlebars\",\"ember-routing/system/router\",\"ember-routing-handlebars/helpers/shared\",\"ember-routing-handlebars/helpers/link_to\",\"ember-routing-handlebars/helpers/outlet\",\"ember-routing-handlebars/helpers/render\",\"ember-routing-handlebars/helpers/action\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    /**\n    Ember Routing Handlebars\n\n    @module ember\n    @submodule ember-routing-handlebars\n    @requires ember-views\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    var EmberHandlebars = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n\n    var resolvePaths = __dependency4__.resolvePaths;\n    var resolveParams = __dependency4__.resolveParams;\n\n    var deprecatedLinkToHelper = __dependency5__.deprecatedLinkToHelper;\n    var linkToHelper = __dependency5__.linkToHelper;\n    var LinkView = __dependency5__.LinkView;\n    var queryParamsHelper = __dependency5__.queryParamsHelper;\n\n    var outletHelper = __dependency6__.outletHelper;\n    var OutletView = __dependency6__.OutletView;\n\n    var renderHelper = __dependency7__[\"default\"];\n\n    var ActionHelper = __dependency8__.ActionHelper;\n    var actionHelper = __dependency8__.actionHelper;\n\n    Router.resolveParams = resolveParams;\n    Router.resolvePaths = resolvePaths;\n\n    Ember.LinkView = LinkView;\n    EmberHandlebars.ActionHelper = ActionHelper;\n    EmberHandlebars.OutletView = OutletView;\n\n    EmberHandlebars.registerHelper('render', renderHelper);\n    EmberHandlebars.registerHelper('action', actionHelper);\n    EmberHandlebars.registerHelper('outlet', outletHelper);\n    EmberHandlebars.registerHelper('link-to', linkToHelper);\n    EmberHandlebars.registerHelper('linkTo', deprecatedLinkToHelper);\n    EmberHandlebars.registerHelper('query-params', queryParamsHelper);\n\n    __exports__[\"default\"] = Ember;\n  });\nenifed(\"ember-routing-handlebars/helpers/action\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/array\",\"ember-metal/utils\",\"ember-metal/run_loop\",\"ember-views/system/utils\",\"ember-views/system/action_manager\",\"ember-routing/system/router\",\"ember-handlebars\",\"ember-handlebars/ext\",\"ember-handlebars/helpers/view\",\"ember-routing-handlebars/helpers/shared\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Handlebars, uuid, FEATURES, assert, deprecate\n    var get = __dependency2__.get;\n    var forEach = __dependency3__.forEach;\n    var uuid = __dependency4__.uuid;\n    var run = __dependency5__[\"default\"];\n\n    var isSimpleClick = __dependency6__.isSimpleClick;\n    var ActionManager = __dependency7__[\"default\"];\n    var EmberRouter = __dependency8__[\"default\"];\n\n    var EmberHandlebars = __dependency9__[\"default\"];\n    var handlebarsGet = __dependency10__.handlebarsGet;\n    var viewHelper = __dependency11__.viewHelper;\n    var resolveParams = __dependency12__.resolveParams;\n    var resolvePath = __dependency12__.resolvePath;\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    var SafeString = EmberHandlebars.SafeString;\n    var a_slice = Array.prototype.slice;\n\n    function args(options, actionName) {\n      var ret = [];\n      if (actionName) { ret.push(actionName); }\n\n      var types = options.options.types.slice(1);\n      var data = options.options.data;\n\n      return ret.concat(resolveParams(options.context, options.params, { types: types, data: data }));\n    }\n\n    var ActionHelper = {};\n\n    // registeredActions is re-exported for compatibility with older plugins\n    // that were using this undocumented API.\n    ActionHelper.registeredActions = ActionManager.registeredActions;\n\n    __exports__.ActionHelper = ActionHelper;\n\n    var keys = [\"alt\", \"shift\", \"meta\", \"ctrl\"];\n\n    var POINTER_EVENT_TYPE_REGEX = /^click|mouse|touch/;\n\n    var isAllowedEvent = function(event, allowedKeys) {\n      if (typeof allowedKeys === \"undefined\") {\n        if (POINTER_EVENT_TYPE_REGEX.test(event.type)) {\n          return isSimpleClick(event);\n        } else {\n          allowedKeys = '';\n        }\n      }\n\n      if (allowedKeys.indexOf(\"any\") >= 0) {\n        return true;\n      }\n\n      var allowed = true;\n\n      forEach.call(keys, function(key) {\n        if (event[key + \"Key\"] && allowedKeys.indexOf(key) === -1) {\n          allowed = false;\n        }\n      });\n\n      return allowed;\n    };\n\n    function isKeyEvent(eventName) {\n      return ['keyUp', 'keyPress', 'keyDown'].indexOf(eventName) !== -1;\n    }\n\n    function ignoreKeyEvent(eventName, event, keyCode) {\n      var any = 'any';\n      keyCode = keyCode || any;\n      return isKeyEvent(eventName) && keyCode !== any && keyCode !== event.which.toString();\n    }\n\n    ActionHelper.registerAction = function(actionNameOrPath, options, allowedKeys) {\n      var actionId = uuid();\n\n      ActionManager.registeredActions[actionId] = {\n        eventName: options.eventName,\n        handler: function handleRegisteredAction(event) {\n          if (!isAllowedEvent(event, allowedKeys)) { return true; }\n\n          if (options.preventDefault !== false) {\n            event.preventDefault();\n          }\n\n          if (options.bubbles === false) {\n            event.stopPropagation();\n          }\n\n          var target = options.target;\n          var parameters = options.parameters;\n          var eventName = options.eventName;\n          var actionName;\n\n          \n          if (target.target) {\n            target = handlebarsGet(target.root, target.target, target.options);\n          } else {\n            target = target.root;\n          }\n\n          if (options.boundProperty) {\n            actionName = resolveParams(parameters.context, [actionNameOrPath], { types: ['ID'], data: parameters.options.data })[0];\n\n            if (typeof actionName === 'undefined' || typeof actionName === 'function') {\n              Ember.deprecate(\"You specified a quoteless path to the {{action}} helper '\" + actionNameOrPath + \"' which did not resolve to an actionName. Perhaps you meant to use a quoted actionName? (e.g. {{action '\" + actionNameOrPath + \"'}}).\");\n              actionName = actionNameOrPath;\n            }\n          }\n\n          if (!actionName) {\n            actionName = actionNameOrPath;\n          }\n\n          run(function runRegisteredAction() {\n            if (target.send) {\n              target.send.apply(target, args(parameters, actionName));\n            } else {\n              Ember.assert(\"The action '\" + actionName + \"' did not exist on \" + target, typeof target[actionName] === 'function');\n              target[actionName].apply(target, args(parameters));\n            }\n          });\n        }\n      };\n\n      options.view.on('willClearRender', function() {\n        delete ActionManager.registeredActions[actionId];\n      });\n\n      return actionId;\n    };\n\n    /**\n\n      The `{{action}}` helper provides a useful shortcut for registering an HTML\n      element within a template for a single DOM event and forwarding that\n      interaction to the template's controller or specified `target` option.\n\n      If the controller does not implement the specified action, the event is sent\n      to the current route, and it bubbles up the route hierarchy from there.\n\n      For more advanced event handling see [Ember.Component](/api/classes/Ember.Component.html)\n\n\n      ### Use\n      Given the following application Handlebars template on the page\n\n      ```handlebars\n      <div {{action 'anActionName'}}>\n        click me\n      </div>\n      ```\n\n      And application code\n\n      ```javascript\n      App.ApplicationController = Ember.Controller.extend({\n        actions: {\n          anActionName: function() {\n          }\n        }\n      });\n      ```\n\n      Will result in the following rendered HTML\n\n      ```html\n      <div class=\"ember-view\">\n        <div data-ember-action=\"1\">\n          click me\n        </div>\n      </div>\n      ```\n\n      Clicking \"click me\" will trigger the `anActionName` action of the\n      `App.ApplicationController`. In this case, no additional parameters will be passed.\n\n      If you provide additional parameters to the helper:\n\n      ```handlebars\n      <button {{action 'edit' post}}>Edit</button>\n      ```\n\n      Those parameters will be passed along as arguments to the JavaScript\n      function implementing the action.\n\n      ### Event Propagation\n\n      Events triggered through the action helper will automatically have\n      `.preventDefault()` called on them. You do not need to do so in your event\n      handlers. If you need to allow event propagation (to handle file inputs for\n      example) you can supply the `preventDefault=false` option to the `{{action}}` helper:\n\n      ```handlebars\n      <div {{action \"sayHello\" preventDefault=false}}>\n        <input type=\"file\" />\n        <input type=\"checkbox\" />\n      </div>\n      ```\n\n      To disable bubbling, pass `bubbles=false` to the helper:\n\n      ```handlebars\n      <button {{action 'edit' post bubbles=false}}>Edit</button>\n      ```\n\n      If you need the default handler to trigger you should either register your\n      own event handler, or use event methods on your view class. See [Ember.View](/api/classes/Ember.View.html)\n      'Responding to Browser Events' for more information.\n\n      ### Specifying DOM event type\n\n      By default the `{{action}}` helper registers for DOM `click` events. You can\n      supply an `on` option to the helper to specify a different DOM event name:\n\n      ```handlebars\n      <div {{action \"anActionName\" on=\"doubleClick\"}}>\n        click me\n      </div>\n      ```\n\n      See `Ember.View` 'Responding to Browser Events' for a list of\n      acceptable DOM event names.\n\n      ### Specifying whitelisted modifier keys\n\n      By default the `{{action}}` helper will ignore click event with pressed modifier\n      keys. You can supply an `allowedKeys` option to specify which keys should not be ignored.\n\n      ```handlebars\n      <div {{action \"anActionName\" allowedKeys=\"alt\"}}>\n        click me\n      </div>\n      ```\n\n      This way the `{{action}}` will fire when clicking with the alt key pressed down.\n\n      Alternatively, supply \"any\" to the `allowedKeys` option to accept any combination of modifier keys.\n\n      ```handlebars\n      <div {{action \"anActionName\" allowedKeys=\"any\"}}>\n        click me with any key pressed\n      </div>\n      ```\n\n      ### Specifying a Target\n\n      There are several possible target objects for `{{action}}` helpers:\n\n      In a typical Ember application, where templates are managed through use of the\n      `{{outlet}}` helper, actions will bubble to the current controller, then\n      to the current route, and then up the route hierarchy.\n\n      Alternatively, a `target` option can be provided to the helper to change\n      which object will receive the method call. This option must be a path\n      to an object, accessible in the current context:\n\n      ```handlebars\n      {{! the application template }}\n      <div {{action \"anActionName\" target=view}}>\n        click me\n      </div>\n      ```\n\n      ```javascript\n      App.ApplicationView = Ember.View.extend({\n        actions: {\n          anActionName: function(){}\n        }\n      });\n\n      ```\n\n      ### Additional Parameters\n\n      You may specify additional parameters to the `{{action}}` helper. These\n      parameters are passed along as the arguments to the JavaScript function\n      implementing the action.\n\n      ```handlebars\n      {{#each person in people}}\n        <div {{action \"edit\" person}}>\n          click me\n        </div>\n      {{/each}}\n      ```\n\n      Clicking \"click me\" will trigger the `edit` method on the current controller\n      with the value of `person` as a parameter.\n\n      @method action\n      @for Ember.Handlebars.helpers\n      @param {String} actionName\n      @param {Object} [context]*\n      @param {Hash} options\n    */\n    function actionHelper(actionName) {\n      var options = arguments[arguments.length - 1];\n      var contexts = a_slice.call(arguments, 1, -1);\n      var hash = options.hash;\n      var controller = options.data.keywords.controller;\n\n      // create a hash to pass along to registerAction\n      var action = {\n        eventName: hash.on || \"click\",\n        parameters: {\n          context: this,\n          options: options,\n          params: contexts\n        },\n        view: options.data.view,\n        bubbles: hash.bubbles,\n        preventDefault: hash.preventDefault,\n        target: { options: options },\n        withKeyCode: hash.withKeyCode,\n        boundProperty: options.types[0] === \"ID\"\n      };\n\n      if (hash.target) {\n        action.target.root = this;\n        action.target.target = hash.target;\n      } else if (controller) {\n        action.target.root = controller;\n      }\n\n      var actionId = ActionHelper.registerAction(actionName, action, hash.allowedKeys);\n      return new SafeString('data-ember-action=\"' + actionId + '\"');\n    }\n\n    __exports__.actionHelper = actionHelper;\n  });\nenifed(\"ember-routing-handlebars/helpers/link_to\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/merge\",\"ember-metal/run_loop\",\"ember-metal/computed\",\"ember-runtime/system/lazy_load\",\"ember-runtime/system/string\",\"ember-runtime/system/object\",\"ember-metal/keys\",\"ember-views/system/utils\",\"ember-views/views/component\",\"ember-handlebars\",\"ember-handlebars/helpers/view\",\"ember-routing/system/router\",\"ember-routing-handlebars/helpers/shared\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __dependency16__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // FEATURES, Logger, Handlebars, warn, assert\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var merge = __dependency4__[\"default\"];\n    var run = __dependency5__[\"default\"];\n    var computed = __dependency6__.computed;\n\n    var onLoad = __dependency7__.onLoad;\n    var fmt = __dependency8__.fmt;\n    var EmberObject = __dependency9__[\"default\"];\n    var keys = __dependency10__[\"default\"];\n    var isSimpleClick = __dependency11__.isSimpleClick;\n    var EmberComponent = __dependency12__[\"default\"];\n    var EmberHandlebars = __dependency13__[\"default\"];\n    var viewHelper = __dependency14__.viewHelper;\n    var EmberRouter = __dependency15__[\"default\"];\n    var resolveParams = __dependency16__.resolveParams;\n    var resolvePaths = __dependency16__.resolvePaths;\n    var routeArgs = __dependency16__.routeArgs;\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    var slice = [].slice;\n\n    requireModule('ember-handlebars');\n\n    var numberOfContextsAcceptedByHandler = function(handler, handlerInfos) {\n      var req = 0;\n      for (var i = 0, l = handlerInfos.length; i < l; i++) {\n        req = req + handlerInfos[i].names.length;\n        if (handlerInfos[i].handler === handler)\n          break;\n      }\n\n      return req;\n    };\n\n    var QueryParams = EmberObject.extend({\n      values: null\n    });\n\n    function getResolvedPaths(options) {\n\n      var types = options.options.types;\n      var data = options.options.data;\n\n      return resolvePaths(options.context, options.params, { types: types, data: data });\n    }\n\n    /**\n      `Ember.LinkView` renders an element whose `click` event triggers a\n      transition of the application's instance of `Ember.Router` to\n      a supplied route by name.\n\n      Instances of `LinkView` will most likely be created through\n      the `link-to` Handlebars helper, but properties of this class\n      can be overridden to customize application-wide behavior.\n\n      @class LinkView\n      @namespace Ember\n      @extends Ember.View\n      @see {Handlebars.helpers.link-to}\n    **/\n    var LinkView = Ember.LinkView = EmberComponent.extend({\n      tagName: 'a',\n\n      /**\n        @deprecated Use current-when instead.\n        @property currentWhen\n      */\n      currentWhen: null,\n\n      /**\n        Used to determine when this LinkView is active.\n\n        @property currentWhen\n      */\n      'current-when': null,\n\n      /**\n        Sets the `title` attribute of the `LinkView`'s HTML element.\n\n        @property title\n        @default null\n      **/\n      title: null,\n\n      /**\n        Sets the `rel` attribute of the `LinkView`'s HTML element.\n\n        @property rel\n        @default null\n      **/\n      rel: null,\n\n      /**\n        The CSS class to apply to `LinkView`'s element when its `active`\n        property is `true`.\n\n        @property activeClass\n        @type String\n        @default active\n      **/\n      activeClass: 'active',\n\n      /**\n        The CSS class to apply to `LinkView`'s element when its `loading`\n        property is `true`.\n\n        @property loadingClass\n        @type String\n        @default loading\n      **/\n      loadingClass: 'loading',\n\n      /**\n        The CSS class to apply to a `LinkView`'s element when its `disabled`\n        property is `true`.\n\n        @property disabledClass\n        @type String\n        @default disabled\n      **/\n      disabledClass: 'disabled',\n      _isDisabled: false,\n\n      /**\n        Determines whether the `LinkView` will trigger routing via\n        the `replaceWith` routing strategy.\n\n        @property replace\n        @type Boolean\n        @default false\n      **/\n      replace: false,\n\n      /**\n        By default the `{{link-to}}` helper will bind to the `href` and\n        `title` attributes. It's discourage that you override these defaults,\n        however you can push onto the array if needed.\n\n        @property attributeBindings\n        @type Array | String\n        @default ['href', 'title', 'rel']\n       **/\n      attributeBindings: ['href', 'title', 'rel', 'tabindex'],\n\n      /**\n        By default the `{{link-to}}` helper will bind to the `active`, `loading`, and\n        `disabled` classes. It is discouraged to override these directly.\n\n        @property classNameBindings\n        @type Array\n        @default ['active', 'loading', 'disabled']\n       **/\n      classNameBindings: ['active', 'loading', 'disabled'],\n\n      /**\n        By default the `{{link-to}}` helper responds to the `click` event. You\n        can override this globally by setting this property to your custom\n        event name.\n\n        This is particularly useful on mobile when one wants to avoid the 300ms\n        click delay using some sort of custom `tap` event.\n\n        @property eventName\n        @type String\n        @default click\n      */\n      eventName: 'click',\n\n      // this is doc'ed here so it shows up in the events\n      // section of the API documentation, which is where\n      // people will likely go looking for it.\n      /**\n        Triggers the `LinkView`'s routing behavior. If\n        `eventName` is changed to a value other than `click`\n        the routing behavior will trigger on that custom event\n        instead.\n\n        @event click\n      **/\n\n      /**\n        An overridable method called when LinkView objects are instantiated.\n\n        Example:\n\n        ```javascript\n        App.MyLinkView = Ember.LinkView.extend({\n          init: function() {\n            this._super();\n            Ember.Logger.log('Event is ' + this.get('eventName'));\n          }\n        });\n        ```\n\n        NOTE: If you do override `init` for a framework class like `Ember.View` or\n        `Ember.ArrayController`, be sure to call `this._super()` in your\n        `init` declaration! If you don't, Ember may not have an opportunity to\n        do important setup work, and you'll see strange behavior in your\n        application.\n\n        @method init\n      */\n      init: function() {\n        this._super.apply(this, arguments);\n\n        Ember.deprecate('Using currentWhen with {{link-to}} is deprecated in favor of `current-when`.', !this.currentWhen);\n\n        // Map desired event name to invoke function\n        var eventName = get(this, 'eventName');\n        this.on(eventName, this, this._invoke);\n      },\n\n      /**\n        This method is invoked by observers installed during `init` that fire\n        whenever the params change\n\n        @private\n        @method _paramsChanged\n        @since 1.3.0\n       */\n      _paramsChanged: function() {\n        this.notifyPropertyChange('resolvedParams');\n      },\n\n      /**\n       This is called to setup observers that will trigger a rerender.\n\n       @private\n       @method _setupPathObservers\n       @since 1.3.0\n      **/\n      _setupPathObservers: function(){\n        var helperParameters = this.parameters;\n        var linkTextPath = helperParameters.options.linkTextPath;\n        var paths = getResolvedPaths(helperParameters);\n        var length = paths.length;\n        var path, i, normalizedPath;\n\n        if (linkTextPath) {\n          normalizedPath = getNormalizedPath(linkTextPath, helperParameters);\n          this.registerObserver(normalizedPath.root, normalizedPath.path, this, this.rerender);\n        }\n\n        for(i=0; i < length; i++) {\n          path = paths[i];\n          if (null === path) {\n            // A literal value was provided, not a path, so nothing to observe.\n            continue;\n          }\n\n          normalizedPath = getNormalizedPath(path, helperParameters);\n          this.registerObserver(normalizedPath.root, normalizedPath.path, this, this._paramsChanged);\n        }\n\n        var queryParamsObject = this.queryParamsObject;\n        if (queryParamsObject) {\n          var values = queryParamsObject.values;\n\n          // Install observers for all of the hash options\n          // provided in the (query-params) subexpression.\n          for (var k in values) {\n            if (!values.hasOwnProperty(k)) { continue; }\n\n            if (queryParamsObject.types[k] === 'ID') {\n              normalizedPath = getNormalizedPath(values[k], helperParameters);\n              this.registerObserver(normalizedPath.root, normalizedPath.path, this, this._paramsChanged);\n            }\n          }\n        }\n      },\n\n      afterRender: function(){\n        this._super.apply(this, arguments);\n        this._setupPathObservers();\n      },\n\n      /**\n\n        Accessed as a classname binding to apply the `LinkView`'s `disabledClass`\n        CSS `class` to the element when the link is disabled.\n\n        When `true` interactions with the element will not trigger route changes.\n        @property disabled\n      */\n      disabled: computed(function computeLinkViewDisabled(key, value) {\n        if (value !== undefined) { this.set('_isDisabled', value); }\n\n        return value ? get(this, 'disabledClass') : false;\n      }),\n\n      /**\n        Accessed as a classname binding to apply the `LinkView`'s `activeClass`\n        CSS `class` to the element when the link is active.\n\n        A `LinkView` is considered active when its `currentWhen` property is `true`\n        or the application's current route is the route the `LinkView` would trigger\n        transitions into.\n\n        The `currentWhen` property can match against multiple routes by separating\n        route names using the ` ` (space) character.\n\n        @property active\n      **/\n      active: computed('loadedParams', function computeLinkViewActive() {\n        if (get(this, 'loading')) { return false; }\n\n        var router = get(this, 'router');\n        var loadedParams = get(this, 'loadedParams');\n        var contexts = loadedParams.models;\n        var currentWhen = this['current-when'] || this.currentWhen;\n        var isCurrentWhenSpecified = Boolean(currentWhen);\n        currentWhen = currentWhen || loadedParams.targetRouteName;\n\n        function isActiveForRoute(routeName) {\n          var handlers = router.router.recognizer.handlersFor(routeName);\n          var leafName = handlers[handlers.length-1].handler;\n          var maximumContexts = numberOfContextsAcceptedByHandler(routeName, handlers);\n\n          // NOTE: any ugliness in the calculation of activeness is largely\n          // due to the fact that we support automatic normalizing of\n          // `resource` -> `resource.index`, even though there might be\n          // dynamic segments / query params defined on `resource.index`\n          // which complicates (and makes somewhat ambiguous) the calculation\n          // of activeness for links that link to `resource` instead of\n          // directly to `resource.index`.\n\n          // if we don't have enough contexts revert back to full route name\n          // this is because the leaf route will use one of the contexts\n          if (contexts.length > maximumContexts) {\n            routeName = leafName;\n          }\n\n          var args = routeArgs(routeName, contexts, null);\n          var isActive = router.isActive.apply(router, args);\n          if (!isActive) { return false; }\n\n          var emptyQueryParams = Ember.isEmpty(Ember.keys(loadedParams.queryParams));\n\n          if (!isCurrentWhenSpecified && !emptyQueryParams && isActive) {\n            var visibleQueryParams = {};\n            merge(visibleQueryParams, loadedParams.queryParams);\n            router._prepareQueryParams(loadedParams.targetRouteName, loadedParams.models, visibleQueryParams);\n            isActive = shallowEqual(visibleQueryParams, router.router.state.queryParams);\n          }\n\n          return isActive;\n        }\n\n        \n          currentWhen = currentWhen.split(' ');\n          for (var i = 0, len = currentWhen.length; i < len; i++) {\n            if (isActiveForRoute(currentWhen[i])) {\n              return get(this, 'activeClass');\n            }\n          }\n              }),\n\n      /**\n        Accessed as a classname binding to apply the `LinkView`'s `loadingClass`\n        CSS `class` to the element when the link is loading.\n\n        A `LinkView` is considered loading when it has at least one\n        parameter whose value is currently null or undefined. During\n        this time, clicking the link will perform no transition and\n        emit a warning that the link is still in a loading state.\n\n        @property loading\n      **/\n      loading: computed('loadedParams', function computeLinkViewLoading() {\n        if (!get(this, 'loadedParams')) { return get(this, 'loadingClass'); }\n      }),\n\n      /**\n        Returns the application's main router from the container.\n\n        @private\n        @property router\n      **/\n      router: computed(function() {\n        var controller = get(this, 'controller');\n        if (controller && controller.container) {\n          return controller.container.lookup('router:main');\n        }\n      }),\n\n      /**\n        Event handler that invokes the link, activating the associated route.\n\n        @private\n        @method _invoke\n        @param {Event} event\n      */\n      _invoke: function(event) {\n        if (!isSimpleClick(event)) { return true; }\n\n        if (this.preventDefault !== false) {\n          \n            var targetAttribute = get(this, 'target');\n            if (!targetAttribute || targetAttribute === '_self') {\n              event.preventDefault();\n            }\n                  }\n\n        if (this.bubbles === false) { event.stopPropagation(); }\n\n        if (get(this, '_isDisabled')) { return false; }\n\n        if (get(this, 'loading')) {\n          Ember.Logger.warn(\"This link-to is in an inactive loading state because at least one of its parameters presently has a null/undefined value, or the provided route name is invalid.\");\n          return false;\n        }\n\n        \n          var targetAttribute2 = get(this, 'target');\n          if (targetAttribute2 && targetAttribute2 !== '_self') {\n            return false;\n          }\n        \n\n        var router = get(this, 'router');\n        var loadedParams = get(this, 'loadedParams');\n\n        var transition = router._doTransition(loadedParams.targetRouteName, loadedParams.models, loadedParams.queryParams);\n        if (get(this, 'replace')) {\n          transition.method('replace');\n        }\n\n        // Schedule eager URL update, but after we've given the transition\n        // a chance to synchronously redirect.\n        // We need to always generate the URL instead of using the href because\n        // the href will include any rootURL set, but the router expects a URL\n        // without it! Note that we don't use the first level router because it\n        // calls location.formatURL(), which also would add the rootURL!\n        var args = routeArgs(loadedParams.targetRouteName, loadedParams.models, transition.state.queryParams);\n        var url = router.router.generate.apply(router.router, args);\n\n        run.scheduleOnce('routerTransitions', this, this._eagerUpdateUrl, transition, url);\n      },\n\n      /**\n        @private\n        @method _eagerUpdateUrl\n        @param transition\n        @param href\n       */\n      _eagerUpdateUrl: function(transition, href) {\n        if (!transition.isActive || !transition.urlMethod) {\n          // transition was aborted, already ran to completion,\n          // or it has a null url-updated method.\n          return;\n        }\n\n        if (href.indexOf('#') === 0) {\n          href = href.slice(1);\n        }\n\n        // Re-use the routerjs hooks set up by the Ember router.\n        var routerjs = get(this, 'router.router');\n        if (transition.urlMethod === 'update') {\n          routerjs.updateURL(href);\n        } else if (transition.urlMethod === 'replace') {\n          routerjs.replaceURL(href);\n        }\n\n        // Prevent later update url refire.\n        transition.method(null);\n      },\n\n      /**\n        Computed property that returns an array of the\n        resolved parameters passed to the `link-to` helper,\n        e.g.:\n\n        ```hbs\n        {{link-to a b '123' c}}\n        ```\n\n        will generate a `resolvedParams` of:\n\n        ```js\n        [aObject, bObject, '123', cObject]\n        ```\n\n        @private\n        @property\n        @return {Array}\n       */\n      resolvedParams: computed('router.url', function() {\n        var parameters = this.parameters;\n        var options = parameters.options;\n        var types = options.types;\n        var data = options.data;\n        var targetRouteName, models;\n        var onlyQueryParamsSupplied = (parameters.params.length === 0);\n\n        if (onlyQueryParamsSupplied) {\n          var appController = this.container.lookup('controller:application');\n          targetRouteName = get(appController, 'currentRouteName');\n          models = [];\n        } else {\n          models = resolveParams(parameters.context, parameters.params, { types: types, data: data });\n          targetRouteName = models.shift();\n        }\n\n        var suppliedQueryParams = getResolvedQueryParams(this, targetRouteName);\n\n        return {\n          targetRouteName: targetRouteName,\n          models: models,\n          queryParams: suppliedQueryParams\n        };\n      }),\n\n      /**\n        Computed property that returns the current route name,\n        dynamic segments, and query params. Returns falsy if\n        for null/undefined params to indicate that the link view\n        is still in a loading state.\n\n        @private\n        @property\n        @return {Array} An array with the route name and any dynamic segments\n      **/\n      loadedParams: computed('resolvedParams', function computeLinkViewRouteArgs() {\n        var router = get(this, 'router');\n        if (!router) { return; }\n\n        var resolvedParams = get(this, 'resolvedParams');\n        var namedRoute = resolvedParams.targetRouteName;\n\n        if (!namedRoute) { return; }\n\n        Ember.assert(fmt(\"The attempt to link-to route '%@' failed. \" +\n                         \"The router did not find '%@' in its possible routes: '%@'\",\n                         [namedRoute, namedRoute, keys(router.router.recognizer.names).join(\"', '\")]),\n                         router.hasRoute(namedRoute));\n\n        if (!paramsAreLoaded(resolvedParams.models)) { return; }\n\n        return resolvedParams;\n      }),\n\n      queryParamsObject: null,\n\n      /**\n        Sets the element's `href` attribute to the url for\n        the `LinkView`'s targeted route.\n\n        If the `LinkView`'s `tagName` is changed to a value other\n        than `a`, this property will be ignored.\n\n        @property href\n      **/\n      href: computed('loadedParams', function computeLinkViewHref() {\n        if (get(this, 'tagName') !== 'a') { return; }\n\n        var router = get(this, 'router');\n        var loadedParams = get(this, 'loadedParams');\n\n        if (!loadedParams) {\n          return get(this, 'loadingHref');\n        }\n\n        var visibleQueryParams = {};\n        merge(visibleQueryParams, loadedParams.queryParams);\n        router._prepareQueryParams(loadedParams.targetRouteName, loadedParams.models, visibleQueryParams);\n\n        var args = routeArgs(loadedParams.targetRouteName, loadedParams.models, visibleQueryParams);\n        var result = router.generate.apply(router, args);\n        return result;\n      }),\n\n      /**\n        The default href value to use while a link-to is loading.\n        Only applies when tagName is 'a'\n\n        @property loadingHref\n        @type String\n        @default #\n      */\n      loadingHref: '#'\n    });\n\n    LinkView.toString = function() { return \"LinkView\"; };\n\n    \n      LinkView.reopen({\n        attributeBindings: ['target'],\n\n        /**\n          Sets the `target` attribute of the `LinkView`'s anchor element.\n\n          @property target\n          @default null\n        **/\n        target: null\n      });\n    \n\n    /**\n      The `{{link-to}}` helper renders a link to the supplied\n      `routeName` passing an optionally supplied model to the\n      route as its `model` context of the route. The block\n      for `{{link-to}}` becomes the innerHTML of the rendered\n      element:\n\n      ```handlebars\n      {{#link-to 'photoGallery'}}\n        Great Hamster Photos\n      {{/link-to}}\n      ```\n\n      ```html\n      <a href=\"/hamster-photos\">\n        Great Hamster Photos\n      </a>\n      ```\n\n      ### Supplying a tagName\n      By default `{{link-to}}` renders an `<a>` element. This can\n      be overridden for a single use of `{{link-to}}` by supplying\n      a `tagName` option:\n\n      ```handlebars\n      {{#link-to 'photoGallery' tagName=\"li\"}}\n        Great Hamster Photos\n      {{/link-to}}\n      ```\n\n      ```html\n      <li>\n        Great Hamster Photos\n      </li>\n      ```\n\n      To override this option for your entire application, see\n      \"Overriding Application-wide Defaults\".\n\n      ### Disabling the `link-to` helper\n      By default `{{link-to}}` is enabled.\n      any passed value to `disabled` helper property will disable the `link-to` helper.\n\n      static use: the `disabled` option:\n\n      ```handlebars\n      {{#link-to 'photoGallery' disabled=true}}\n        Great Hamster Photos\n      {{/link-to}}\n      ```\n\n      dynamic use: the `disabledWhen` option:\n\n      ```handlebars\n      {{#link-to 'photoGallery' disabledWhen=controller.someProperty}}\n        Great Hamster Photos\n      {{/link-to}}\n      ```\n\n      any passed value to `disabled` will disable it except `undefined`.\n      to ensure that only `true` disable the `link-to` helper you can\n      override the global behaviour of `Ember.LinkView`.\n\n      ```javascript\n      Ember.LinkView.reopen({\n        disabled: Ember.computed(function(key, value) {\n          if (value !== undefined) {\n            this.set('_isDisabled', value === true);\n          }\n          return value === true ? get(this, 'disabledClass') : false;\n        })\n      });\n      ```\n\n      see \"Overriding Application-wide Defaults\" for more.\n\n      ### Handling `href`\n      `{{link-to}}` will use your application's Router to\n      fill the element's `href` property with a url that\n      matches the path to the supplied `routeName` for your\n      routers's configured `Location` scheme, which defaults\n      to Ember.HashLocation.\n\n      ### Handling current route\n      `{{link-to}}` will apply a CSS class name of 'active'\n      when the application's current route matches\n      the supplied routeName. For example, if the application's\n      current route is 'photoGallery.recent' the following\n      use of `{{link-to}}`:\n\n      ```handlebars\n      {{#link-to 'photoGallery.recent'}}\n        Great Hamster Photos from the last week\n      {{/link-to}}\n      ```\n\n      will result in\n\n      ```html\n      <a href=\"/hamster-photos/this-week\" class=\"active\">\n        Great Hamster Photos\n      </a>\n      ```\n\n      The CSS class name used for active classes can be customized\n      for a single use of `{{link-to}}` by passing an `activeClass`\n      option:\n\n      ```handlebars\n      {{#link-to 'photoGallery.recent' activeClass=\"current-url\"}}\n        Great Hamster Photos from the last week\n      {{/link-to}}\n      ```\n\n      ```html\n      <a href=\"/hamster-photos/this-week\" class=\"current-url\">\n        Great Hamster Photos\n      </a>\n      ```\n\n      To override this option for your entire application, see\n      \"Overriding Application-wide Defaults\".\n\n      ### Supplying a model\n      An optional model argument can be used for routes whose\n      paths contain dynamic segments. This argument will become\n      the model context of the linked route:\n\n      ```javascript\n      App.Router.map(function() {\n        this.resource(\"photoGallery\", {path: \"hamster-photos/:photo_id\"});\n      });\n      ```\n\n      ```handlebars\n      {{#link-to 'photoGallery' aPhoto}}\n        {{aPhoto.title}}\n      {{/link-to}}\n      ```\n\n      ```html\n      <a href=\"/hamster-photos/42\">\n        Tomster\n      </a>\n      ```\n\n      ### Supplying multiple models\n      For deep-linking to route paths that contain multiple\n      dynamic segments, multiple model arguments can be used.\n      As the router transitions through the route path, each\n      supplied model argument will become the context for the\n      route with the dynamic segments:\n\n      ```javascript\n      App.Router.map(function() {\n        this.resource(\"photoGallery\", {path: \"hamster-photos/:photo_id\"}, function() {\n          this.route(\"comment\", {path: \"comments/:comment_id\"});\n        });\n      });\n      ```\n      This argument will become the model context of the linked route:\n\n      ```handlebars\n      {{#link-to 'photoGallery.comment' aPhoto comment}}\n        {{comment.body}}\n      {{/link-to}}\n      ```\n\n      ```html\n      <a href=\"/hamster-photos/42/comment/718\">\n        A+++ would snuggle again.\n      </a>\n      ```\n\n      ### Supplying an explicit dynamic segment value\n      If you don't have a model object available to pass to `{{link-to}}`,\n      an optional string or integer argument can be passed for routes whose\n      paths contain dynamic segments. This argument will become the value\n      of the dynamic segment:\n\n      ```javascript\n      App.Router.map(function() {\n        this.resource(\"photoGallery\", {path: \"hamster-photos/:photo_id\"});\n      });\n      ```\n\n      ```handlebars\n      {{#link-to 'photoGallery' aPhotoId}}\n        {{aPhoto.title}}\n      {{/link-to}}\n      ```\n\n      ```html\n      <a href=\"/hamster-photos/42\">\n        Tomster\n      </a>\n      ```\n\n      When transitioning into the linked route, the `model` hook will\n      be triggered with parameters including this passed identifier.\n\n      ### Allowing Default Action\n\n     By default the `{{link-to}}` helper prevents the default browser action\n     by calling `preventDefault()` as this sort of action bubbling is normally\n     handled internally and we do not want to take the browser to a new URL (for\n     example).\n\n     If you need to override this behavior specify `preventDefault=false` in\n     your template:\n\n      ```handlebars\n      {{#link-to 'photoGallery' aPhotoId preventDefault=false}}\n        {{aPhotoId.title}}\n      {{/link-to}}\n      ```\n\n      ### Overriding attributes\n      You can override any given property of the Ember.LinkView\n      that is generated by the `{{link-to}}` helper by passing\n      key/value pairs, like so:\n\n      ```handlebars\n      {{#link-to  aPhoto tagName='li' title='Following this link will change your life' classNames='pic sweet'}}\n        Uh-mazing!\n      {{/link-to}}\n      ```\n\n      See [Ember.LinkView](/api/classes/Ember.LinkView.html) for a\n      complete list of overrideable properties. Be sure to also\n      check out inherited properties of `LinkView`.\n\n      ### Overriding Application-wide Defaults\n      ``{{link-to}}`` creates an instance of Ember.LinkView\n      for rendering. To override options for your entire\n      application, reopen Ember.LinkView and supply the\n      desired values:\n\n      ``` javascript\n      Ember.LinkView.reopen({\n        activeClass: \"is-active\",\n        tagName: 'li'\n      })\n      ```\n\n      It is also possible to override the default event in\n      this manner:\n\n      ``` javascript\n      Ember.LinkView.reopen({\n        eventName: 'customEventName'\n      });\n      ```\n\n      @method link-to\n      @for Ember.Handlebars.helpers\n      @param {String} routeName\n      @param {Object} [context]*\n      @param [options] {Object} Handlebars key/value pairs of options, you can override any property of Ember.LinkView\n      @return {String} HTML string\n      @see {Ember.LinkView}\n    */\n    function linkToHelper(name) {\n      var options = slice.call(arguments, -1)[0];\n      var params = slice.call(arguments, 0, -1);\n      var hash = options.hash;\n\n      Ember.assert(\"You must provide one or more parameters to the link-to helper.\", params.length);\n\n      if (params[params.length - 1] instanceof QueryParams) {\n        hash.queryParamsObject = params.pop();\n      }\n\n      hash.disabledBinding = hash.disabledWhen;\n\n      if (!options.fn) {\n        var linkTitle = params.shift();\n        var linkType = options.types.shift();\n        var context = this;\n        if (linkType === 'ID') {\n          options.linkTextPath = linkTitle;\n          options.fn = function() {\n            return EmberHandlebars.getEscaped(context, linkTitle, options);\n          };\n        } else {\n          options.fn = function() {\n            return linkTitle;\n          };\n        }\n      }\n\n      hash.parameters = {\n        context: this,\n        options: options,\n        params: params\n      };\n\n      options.helperName = options.helperName || 'link-to';\n\n      return viewHelper.call(this, LinkView, options);\n    }\n\n    /**\n      @method query-params\n      @for Ember.Handlebars.helpers\n      @param {Object} hash takes a hash of query parameters\n      @return {String} HTML string\n    */\n    function queryParamsHelper(options) {\n      Ember.assert(fmt(\"The `query-params` helper only accepts hash parameters, e.g. (query-params queryParamPropertyName='%@') as opposed to just (query-params '%@')\", [options, options]), arguments.length === 1);\n\n      return QueryParams.create({\n        values: options.hash,\n        types: options.hashTypes\n      });\n    }\n\n    __exports__.queryParamsHelper = queryParamsHelper;/**\n      See [link-to](/api/classes/Ember.Handlebars.helpers.html#method_link-to)\n\n      @method linkTo\n      @for Ember.Handlebars.helpers\n      @deprecated\n      @param {String} routeName\n      @param {Object} [context]*\n      @return {String} HTML string\n    */\n    function deprecatedLinkToHelper() {\n      Ember.warn(\"The 'linkTo' view helper is deprecated in favor of 'link-to'\");\n      return linkToHelper.apply(this, arguments);\n    }\n\n    function getResolvedQueryParams(linkView, targetRouteName) {\n      var helperParameters = linkView.parameters;\n      var queryParamsObject = linkView.queryParamsObject;\n      var resolvedQueryParams = {};\n\n      if (!queryParamsObject) { return resolvedQueryParams; }\n      var rawParams = queryParamsObject.values;\n\n      for (var key in rawParams) {\n        if (!rawParams.hasOwnProperty(key)) { continue; }\n\n        var value = rawParams[key];\n        var type = queryParamsObject.types[key];\n\n        if (type === 'ID') {\n          var normalizedPath = getNormalizedPath(value, helperParameters);\n          value = EmberHandlebars.get(normalizedPath.root, normalizedPath.path, helperParameters.options);\n        }\n        resolvedQueryParams[key] = value;\n      }\n      return resolvedQueryParams;\n    }\n\n    function getNormalizedPath(path, helperParameters) {\n      return EmberHandlebars.normalizePath(helperParameters.context, path, helperParameters.options.data);\n    }\n\n    function paramsAreLoaded(params) {\n      for (var i = 0, len = params.length; i < len; ++i) {\n        var param = params[i];\n        if (param === null || typeof param === 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    function shallowEqual(a, b) {\n      var k;\n      for (k in a) {\n        if (a.hasOwnProperty(k) && a[k] !== b[k]) { return false; }\n      }\n      for (k in b) {\n        if (b.hasOwnProperty(k) && a[k] !== b[k]) { return false; }\n      }\n      return true;\n    }\n\n    __exports__.LinkView = LinkView;\n    __exports__.deprecatedLinkToHelper = deprecatedLinkToHelper;\n    __exports__.linkToHelper = linkToHelper;\n  });\nenifed(\"ember-routing-handlebars/helpers/outlet\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-runtime/system/lazy_load\",\"ember-views/views/container_view\",\"ember-handlebars/views/metamorph_view\",\"ember-handlebars/helpers/view\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // assert\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var onLoad = __dependency4__.onLoad;\n    var ContainerView = __dependency5__[\"default\"];\n    var _Metamorph = __dependency6__._Metamorph;\n    var viewHelper = __dependency7__.viewHelper;\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n      /**\n      @module ember\n      @submodule ember-routing\n      */\n\n    var OutletView = ContainerView.extend(_Metamorph);\n    __exports__.OutletView = OutletView;\n    /**\n      The `outlet` helper is a placeholder that the router will fill in with\n      the appropriate template based on the current state of the application.\n\n      ``` handlebars\n      {{outlet}}\n      ```\n\n      By default, a template based on Ember's naming conventions will be rendered\n      into the `outlet` (e.g. `App.PostsRoute` will render the `posts` template).\n\n      You can render a different template by using the `render()` method in the\n      route's `renderTemplate` hook. The following will render the `favoritePost`\n      template into the `outlet`.\n\n      ``` javascript\n      App.PostsRoute = Ember.Route.extend({\n        renderTemplate: function() {\n          this.render('favoritePost');\n        }\n      });\n      ```\n\n      You can create custom named outlets for more control.\n\n      ``` handlebars\n      {{outlet 'favoritePost'}}\n      {{outlet 'posts'}}\n      ```\n\n      Then you can define what template is rendered into each outlet in your\n      route.\n\n\n      ``` javascript\n      App.PostsRoute = Ember.Route.extend({\n        renderTemplate: function() {\n          this.render('favoritePost', { outlet: 'favoritePost' });\n          this.render('posts', { outlet: 'posts' });\n        }\n      });\n      ```\n\n      You can specify the view that the outlet uses to contain and manage the\n      templates rendered into it.\n\n      ``` handlebars\n      {{outlet view='sectionContainer'}}\n      ```\n\n      ``` javascript\n      App.SectionContainer = Ember.ContainerView.extend({\n        tagName: 'section',\n        classNames: ['special']\n      });\n      ```\n\n      @method outlet\n      @for Ember.Handlebars.helpers\n      @param {String} property the property on the controller\n        that holds the view for this outlet\n      @return {String} HTML string\n    */\n    function outletHelper(property, options) {\n      var outletSource;\n      var container;\n      var viewName;\n      var viewClass;\n      var viewFullName;\n\n      if (property && property.data && property.data.isRenderData) {\n        options = property;\n        property = 'main';\n      }\n\n      container = options.data.view.container;\n\n      outletSource = options.data.view;\n      while (!outletSource.get('template.isTop')) {\n        outletSource = outletSource.get('_parentView');\n      }\n\n      // provide controller override\n      viewName = options.hash.view;\n\n      if (viewName) {\n        viewFullName = 'view:' + viewName;\n        Ember.assert(\"Using a quoteless view parameter with {{outlet}} is not supported. Please update to quoted usage '{{outlet \\\"\" + viewName + \"\\\"}}.\", options.hashTypes.view !== 'ID');\n        Ember.assert(\"The view name you supplied '\" + viewName + \"' did not resolve to a view.\", container.has(viewFullName));\n      }\n\n      viewClass = viewName ? container.lookupFactory(viewFullName) : options.hash.viewClass || OutletView;\n\n      options.data.view.set('outletSource', outletSource);\n      options.hash.currentViewBinding = '_view.outletSource._outlets.' + property;\n\n      options.helperName = options.helperName || 'outlet';\n\n      return viewHelper.call(this, viewClass, options);\n    }\n\n    __exports__.outletHelper = outletHelper;\n  });\nenifed(\"ember-routing-handlebars/helpers/render\",\n  [\"ember-metal/core\",\"ember-metal/error\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-runtime/system/string\",\"ember-routing/system/generate_controller\",\"ember-handlebars/ext\",\"ember-handlebars/helpers/view\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // assert, deprecate\n    var EmberError = __dependency2__[\"default\"];\n    var get = __dependency3__.get;\n    var set = __dependency4__.set;\n    var camelize = __dependency5__.camelize;\n    var generateControllerFactory = __dependency6__.generateControllerFactory;\n    var generateController = __dependency6__[\"default\"];\n    var handlebarsGet = __dependency7__.handlebarsGet;\n    var ViewHelper = __dependency8__.ViewHelper;\n\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    /**\n      Calling ``{{render}}`` from within a template will insert another\n      template that matches the provided name. The inserted template will\n      access its properties on its own controller (rather than the controller\n      of the parent template).\n\n      If a view class with the same name exists, the view class also will be used.\n\n      Note: A given controller may only be used *once* in your app in this manner.\n      A singleton instance of the controller will be created for you.\n\n      Example:\n\n      ```javascript\n      App.NavigationController = Ember.Controller.extend({\n        who: \"world\"\n      });\n      ```\n\n      ```handlebars\n      <!-- navigation.hbs -->\n      Hello, {{who}}.\n      ```\n\n      ```handelbars\n      <!-- application.hbs -->\n      <h1>My great app</h1>\n      {{render \"navigation\"}}\n      ```\n\n      ```html\n      <h1>My great app</h1>\n      <div class='ember-view'>\n        Hello, world.\n      </div>\n      ```\n\n      Optionally you may provide a second argument: a property path\n      that will be bound to the `model` property of the controller.\n\n      If a `model` property path is specified, then a new instance of the\n      controller will be created and `{{render}}` can be used multiple times\n      with the same name.\n\n     For example if you had this `author` template.\n\n     ```handlebars\n    <div class=\"author\">\n    Written by {{firstName}} {{lastName}}.\n    Total Posts: {{postCount}}\n    </div>\n    ```\n\n    You could render it inside the `post` template using the `render` helper.\n\n    ```handlebars\n    <div class=\"post\">\n    <h1>{{title}}</h1>\n    <div>{{body}}</div>\n    {{render \"author\" author}}\n    </div>\n     ```\n\n      @method render\n      @for Ember.Handlebars.helpers\n      @param {String} name\n      @param {Object?} contextString\n      @param {Hash} options\n      @return {String} HTML string\n    */\n    __exports__[\"default\"] = function renderHelper(name, contextString, options) {\n      var length = arguments.length;\n      var contextProvided = length === 3;\n      var container, router, controller, view, context, lookupOptions;\n\n      container = (options || contextString).data.keywords.controller.container;\n      router = container.lookup('router:main');\n\n      if (length === 2) {\n        // use the singleton controller\n        options = contextString;\n        contextString = undefined;\n        Ember.assert(\"You can only use the {{render}} helper once without a model object as its second argument, as in {{render \\\"post\\\" post}}.\", !router || !router._lookupActiveView(name));\n      } else if (length === 3) {\n        // create a new controller\n        context = handlebarsGet(options.contexts[1], contextString, options);\n      } else {\n        throw new EmberError(\"You must pass a templateName to render\");\n      }\n\n      Ember.deprecate(\"Using a quoteless parameter with {{render}} is deprecated. Please update to quoted usage '{{render \\\"\" + name + \"\\\"}}.\", options.types[0] !== 'ID');\n\n      // # legacy namespace\n      name = name.replace(/\\//g, '.');\n      // \\ legacy slash as namespace support\n\n\n      view = container.lookup('view:' + name) || container.lookup('view:default');\n\n      // provide controller override\n      var controllerName = options.hash.controller || name;\n      var controllerFullName = 'controller:' + controllerName;\n\n      if (options.hash.controller) {\n        Ember.assert(\"The controller name you supplied '\" + controllerName + \"' did not resolve to a controller.\", container.has(controllerFullName));\n      }\n\n      var parentController = options.data.keywords.controller;\n\n      // choose name\n      if (length > 2) {\n        var factory = container.lookupFactory(controllerFullName) ||\n                      generateControllerFactory(container, controllerName, context);\n\n        controller = factory.create({\n          model: context,\n          parentController: parentController,\n          target: parentController\n        });\n\n        view.one('willDestroyElement', function() {\n          controller.destroy();\n        });\n      } else {\n        controller = container.lookup(controllerFullName) ||\n                     generateController(container, controllerName);\n\n        controller.setProperties({\n          target: parentController,\n          parentController: parentController\n        });\n      }\n\n      var root = options.contexts[1];\n\n      if (root) {\n        view.registerObserver(root, contextString, function() {\n          controller.set('model', handlebarsGet(root, contextString, options));\n        });\n      }\n\n      options.hash.viewName = camelize(name);\n\n      var templateName = 'template:' + name;\n      Ember.assert(\"You used `{{render '\" + name + \"'}}`, but '\" + name + \"' can not be found as either a template or a view.\", container.has(\"view:\" + name) || container.has(templateName) || options.fn);\n      options.hash.template = container.lookup(templateName);\n\n      options.hash.controller = controller;\n\n      if (router && !context) {\n        router._connectActiveView(name, view);\n      }\n\n      options.helperName = options.helperName || ('render \"' + name + '\"');\n\n      ViewHelper.instanceHelper(this, view, options);\n    }\n  });\nenifed(\"ember-routing-handlebars/helpers/shared\",\n  [\"ember-metal/property_get\",\"ember-metal/array\",\"ember-runtime/mixins/controller\",\"ember-handlebars/ext\",\"ember-metal/utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var get = __dependency1__.get;\n    var map = __dependency2__.map;\n    var ControllerMixin = __dependency3__[\"default\"];\n    var handlebarsResolve = __dependency4__.resolveParams;\n    var handlebarsGet = __dependency4__.handlebarsGet;\n    var typeOf = __dependency5__.typeOf;\n    var get = __dependency1__.get;\n\n    function routeArgs(targetRouteName, models, queryParams) {\n      var args = [];\n      if (typeOf(targetRouteName) === 'string') {\n        args.push('' + targetRouteName);\n      }\n      args.push.apply(args, models);\n      args.push({ queryParams: queryParams });\n      return args;\n    }\n\n    __exports__.routeArgs = routeArgs;function getActiveTargetName(router) {\n      var handlerInfos = router.activeTransition ?\n                         router.activeTransition.state.handlerInfos :\n                         router.state.handlerInfos;\n      return handlerInfos[handlerInfos.length - 1].name;\n    }\n\n    __exports__.getActiveTargetName = getActiveTargetName;function resolveParams(context, params, options) {\n      return map.call(resolvePaths(context, params, options), function(path, i) {\n        if (null === path) {\n          // Param was string/number, not a path, so just return raw string/number.\n          return params[i];\n        } else {\n          return handlebarsGet(context, path, options);\n        }\n      });\n    }\n\n    __exports__.resolveParams = resolveParams;function stashParamNames(router, handlerInfos) {\n      if (handlerInfos._namesStashed) { return; }\n\n      // This helper exists because router.js/route-recognizer.js awkwardly\n      // keeps separate a handlerInfo's list of parameter names depending\n      // on whether a URL transition or named transition is happening.\n      // Hopefully we can remove this in the future.\n      var targetRouteName = handlerInfos[handlerInfos.length-1].name;\n      var recogHandlers = router.router.recognizer.handlersFor(targetRouteName);\n      var dynamicParent = null;\n\n      for (var i = 0, len = handlerInfos.length; i < len; ++i) {\n        var handlerInfo = handlerInfos[i];\n        var names = recogHandlers[i].names;\n\n        if (names.length) {\n          dynamicParent = handlerInfo;\n        }\n\n        handlerInfo._names = names;\n\n        var route = handlerInfo.handler;\n        route._stashNames(handlerInfo, dynamicParent);\n      }\n\n      handlerInfos._namesStashed = true;\n    }\n\n    __exports__.stashParamNames = stashParamNames;function resolvePaths(context, params, options) {\n      var resolved = handlebarsResolve(context, params, options);\n      var types = options.types;\n\n      return map.call(resolved, function(object, i) {\n        if (types[i] === 'ID') {\n          return unwrap(object, params[i]);\n        } else {\n          return null;\n        }\n      });\n\n      function unwrap(object, path) {\n        if (path === 'controller') { return path; }\n\n        if (ControllerMixin.detect(object)) {\n          return unwrap(get(object, 'model'), path ? path + '.model' : 'model');\n        } else {\n          return path;\n        }\n      }\n    }\n\n    __exports__.resolvePaths = resolvePaths;\n  });\nenifed(\"ember-routing\",\n  [\"ember-handlebars\",\"ember-metal/core\",\"ember-routing/ext/run_loop\",\"ember-routing/ext/controller\",\"ember-routing/ext/view\",\"ember-routing/location/api\",\"ember-routing/location/none_location\",\"ember-routing/location/hash_location\",\"ember-routing/location/history_location\",\"ember-routing/location/auto_location\",\"ember-routing/system/generate_controller\",\"ember-routing/system/controller_for\",\"ember-routing/system/dsl\",\"ember-routing/system/router\",\"ember-routing/system/route\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __exports__) {\n    \"use strict\";\n    /**\n    Ember Routing\n\n    @module ember\n    @submodule ember-routing\n    @requires ember-views\n    */\n\n    var EmberHandlebars = __dependency1__[\"default\"];\n    var Ember = __dependency2__[\"default\"];\n\n    // ES6TODO: Cleanup modules with side-effects below\n\n    var EmberLocation = __dependency6__[\"default\"];\n    var NoneLocation = __dependency7__[\"default\"];\n    var HashLocation = __dependency8__[\"default\"];\n    var HistoryLocation = __dependency9__[\"default\"];\n    var AutoLocation = __dependency10__[\"default\"];\n\n    var generateControllerFactory = __dependency11__.generateControllerFactory;\n    var generateController = __dependency11__[\"default\"];\n    var controllerFor = __dependency12__[\"default\"];\n    var RouterDSL = __dependency13__[\"default\"];\n    var Router = __dependency14__[\"default\"];\n    var Route = __dependency15__[\"default\"];\n\n    Ember.Location = EmberLocation;\n    Ember.AutoLocation = AutoLocation;\n    Ember.HashLocation = HashLocation;\n    Ember.HistoryLocation = HistoryLocation;\n    Ember.NoneLocation = NoneLocation;\n\n    Ember.controllerFor = controllerFor;\n    Ember.generateControllerFactory = generateControllerFactory;\n    Ember.generateController = generateController;\n    Ember.RouterDSL = RouterDSL;\n    Ember.Router = Router;\n    Ember.Route = Route;\n\n    __exports__[\"default\"] = Ember;\n  });\nenifed(\"ember-routing/ext/controller\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/computed\",\"ember-metal/utils\",\"ember-metal/merge\",\"ember-metal/enumerable_utils\",\"ember-runtime/mixins/controller\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // FEATURES, deprecate\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var computed = __dependency4__.computed;\n    var typeOf = __dependency5__.typeOf;\n    var meta = __dependency5__.meta;\n    var merge = __dependency6__[\"default\"];\n    var map = __dependency7__.map;\n\n    var ControllerMixin = __dependency8__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    ControllerMixin.reopen({\n      concatenatedProperties: ['queryParams', '_pCacheMeta'],\n\n      init: function() {\n        this._super.apply(this, arguments);\n        listenForQueryParamChanges(this);\n      },\n\n      /**\n        @property queryParams\n        @public\n      */\n      queryParams: null,\n\n      /**\n        @property _qpDelegate\n        @private\n      */\n      _qpDelegate: null,\n\n      /**\n        @property _normalizedQueryParams\n        @private\n      */\n      _normalizedQueryParams: computed(function() {\n        var m = meta(this);\n        if (m.proto !== this) {\n          return get(m.proto, '_normalizedQueryParams');\n        }\n\n        var queryParams = get(this, 'queryParams');\n        if (queryParams._qpMap) {\n          return queryParams._qpMap;\n        }\n\n        var qpMap = queryParams._qpMap = {};\n\n        for (var i = 0, len = queryParams.length; i < len; ++i) {\n          accumulateQueryParamDescriptors(queryParams[i], qpMap);\n        }\n\n        return qpMap;\n      }),\n\n      /**\n        @property _cacheMeta\n        @private\n      */\n      _cacheMeta: computed(function() {\n        var m = meta(this);\n        if (m.proto !== this) {\n          return get(m.proto, '_cacheMeta');\n        }\n\n        var cacheMeta = {};\n        var qpMap = get(this, '_normalizedQueryParams');\n        for (var prop in qpMap) {\n          if (!qpMap.hasOwnProperty(prop)) { continue; }\n\n          var qp = qpMap[prop];\n          var scope = qp.scope;\n          var parts;\n\n          if (scope === 'controller') {\n            parts = [];\n          }\n\n          cacheMeta[prop] = {\n            parts: parts, // provided by route if 'model' scope\n            values: null, // provided by route\n            scope: scope,\n            prefix: \"\",\n            def: get(this, prop)\n          };\n        }\n\n        return cacheMeta;\n      }),\n\n      /**\n        @method _updateCacheParams\n        @private\n      */\n      _updateCacheParams: function(params) {\n        var cacheMeta = get(this, '_cacheMeta');\n        for (var prop in cacheMeta) {\n          if (!cacheMeta.hasOwnProperty(prop)) { continue; }\n          var propMeta = cacheMeta[prop];\n          propMeta.values = params;\n\n          var cacheKey = this._calculateCacheKey(propMeta.prefix, propMeta.parts, propMeta.values);\n          var cache = this._bucketCache;\n\n          if (cache) {\n            var value = cache.lookup(cacheKey, prop, propMeta.def);\n            set(this, prop, value);\n          }\n        }\n      },\n\n      /**\n        @method _qpChanged\n        @private\n      */\n      _qpChanged: function(controller, _prop) {\n        var prop = _prop.substr(0, _prop.length-3);\n        var cacheMeta = get(controller, '_cacheMeta');\n        var propCache = cacheMeta[prop];\n        var cacheKey = controller._calculateCacheKey(propCache.prefix || \"\", propCache.parts, propCache.values);\n        var value = get(controller, prop);\n\n        // 1. Update model-dep cache\n        var cache = this._bucketCache;\n        if (cache) {\n          controller._bucketCache.stash(cacheKey, prop, value);\n        }\n\n        // 2. Notify a delegate (e.g. to fire a qp transition)\n        var delegate = controller._qpDelegate;\n        if (delegate) {\n          delegate(controller, prop);\n        }\n      },\n\n      /**\n        @method _calculateCacheKey\n        @private\n      */\n      _calculateCacheKey: function(prefix, _parts, values) {\n        var parts = _parts || [], suffixes = \"\";\n        for (var i = 0, len = parts.length; i < len; ++i) {\n          var part = parts[i];\n          var value = get(values, part);\n          suffixes += \"::\" + part + \":\" + value;\n        }\n        return prefix + suffixes.replace(ALL_PERIODS_REGEX, '-');\n      },\n\n      /**\n        Transition the application into another route. The route may\n        be either a single route or route path:\n\n        ```javascript\n        aController.transitionToRoute('blogPosts');\n        aController.transitionToRoute('blogPosts.recentEntries');\n        ```\n\n        Optionally supply a model for the route in question. The model\n        will be serialized into the URL using the `serialize` hook of\n        the route:\n\n        ```javascript\n        aController.transitionToRoute('blogPost', aPost);\n        ```\n\n        If a literal is passed (such as a number or a string), it will\n        be treated as an identifier instead. In this case, the `model`\n        hook of the route will be triggered:\n\n        ```javascript\n        aController.transitionToRoute('blogPost', 1);\n        ```\n\n        Multiple models will be applied last to first recursively up the\n        resource tree.\n\n        ```javascript\n        App.Router.map(function() {\n          this.resource('blogPost', {path:':blogPostId'}, function(){\n            this.resource('blogComment', {path: ':blogCommentId'});\n          });\n        });\n\n        aController.transitionToRoute('blogComment', aPost, aComment);\n        aController.transitionToRoute('blogComment', 1, 13);\n        ```\n\n        It is also possible to pass a URL (a string that starts with a\n        `/`). This is intended for testing and debugging purposes and\n        should rarely be used in production code.\n\n        ```javascript\n        aController.transitionToRoute('/');\n        aController.transitionToRoute('/blog/post/1/comment/13');\n        ```\n\n        See also [replaceRoute](/api/classes/Ember.ControllerMixin.html#method_replaceRoute).\n\n        @param {String} name the name of the route or a URL\n        @param {...Object} models the model(s) or identifier(s) to be used\n        while transitioning to the route.\n        @for Ember.ControllerMixin\n        @method transitionToRoute\n      */\n      transitionToRoute: function() {\n        // target may be either another controller or a router\n        var target = get(this, 'target');\n        var method = target.transitionToRoute || target.transitionTo;\n        return method.apply(target, arguments);\n      },\n\n      /**\n        @deprecated\n        @for Ember.ControllerMixin\n        @method transitionTo\n      */\n      transitionTo: function() {\n        Ember.deprecate(\"transitionTo is deprecated. Please use transitionToRoute.\");\n        return this.transitionToRoute.apply(this, arguments);\n      },\n\n      /**\n        Transition into another route while replacing the current URL, if possible.\n        This will replace the current history entry instead of adding a new one.\n        Beside that, it is identical to `transitionToRoute` in all other respects.\n\n        ```javascript\n        aController.replaceRoute('blogPosts');\n        aController.replaceRoute('blogPosts.recentEntries');\n        ```\n\n        Optionally supply a model for the route in question. The model\n        will be serialized into the URL using the `serialize` hook of\n        the route:\n\n        ```javascript\n        aController.replaceRoute('blogPost', aPost);\n        ```\n\n        If a literal is passed (such as a number or a string), it will\n        be treated as an identifier instead. In this case, the `model`\n        hook of the route will be triggered:\n\n        ```javascript\n        aController.replaceRoute('blogPost', 1);\n        ```\n\n        Multiple models will be applied last to first recursively up the\n        resource tree.\n\n        ```javascript\n        App.Router.map(function() {\n          this.resource('blogPost', {path:':blogPostId'}, function(){\n            this.resource('blogComment', {path: ':blogCommentId'});\n          });\n        });\n\n        aController.replaceRoute('blogComment', aPost, aComment);\n        aController.replaceRoute('blogComment', 1, 13);\n        ```\n\n        It is also possible to pass a URL (a string that starts with a\n        `/`). This is intended for testing and debugging purposes and\n        should rarely be used in production code.\n\n        ```javascript\n        aController.replaceRoute('/');\n        aController.replaceRoute('/blog/post/1/comment/13');\n        ```\n\n        @param {String} name the name of the route or a URL\n        @param {...Object} models the model(s) or identifier(s) to be used\n        while transitioning to the route.\n        @for Ember.ControllerMixin\n        @method replaceRoute\n      */\n      replaceRoute: function() {\n        // target may be either another controller or a router\n        var target = get(this, 'target');\n        var method = target.replaceRoute || target.replaceWith;\n        return method.apply(target, arguments);\n      },\n\n      /**\n        @deprecated\n        @for Ember.ControllerMixin\n        @method replaceWith\n      */\n      replaceWith: function() {\n        Ember.deprecate(\"replaceWith is deprecated. Please use replaceRoute.\");\n        return this.replaceRoute.apply(this, arguments);\n      }\n    });\n\n    var ALL_PERIODS_REGEX = /\\./g;\n\n    function accumulateQueryParamDescriptors(_desc, accum) {\n      var desc = _desc, tmp;\n      if (typeOf(desc) === 'string') {\n        tmp = {};\n        tmp[desc] = { as: null };\n        desc = tmp;\n      }\n\n      for (var key in desc) {\n        if (!desc.hasOwnProperty(key)) { return; }\n\n        var singleDesc = desc[key];\n        if (typeOf(singleDesc) === 'string') {\n          singleDesc = { as: singleDesc };\n        }\n\n        tmp = accum[key] || { as: null, scope: 'model' };\n        merge(tmp, singleDesc);\n\n        accum[key] = tmp;\n      }\n    }\n\n    function listenForQueryParamChanges(controller) {\n      var qpMap = get(controller, '_normalizedQueryParams');\n      for (var prop in qpMap) {\n        if (!qpMap.hasOwnProperty(prop)) { continue; }\n        controller.addObserver(prop + '.[]', controller, controller._qpChanged);\n      }\n    }\n\n\n    __exports__[\"default\"] = ControllerMixin;\n  });\nenifed(\"ember-routing/ext/run_loop\",\n  [\"ember-metal/run_loop\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var run = __dependency1__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-views\n    */\n\n    // Add a new named queue after the 'actions' queue (where RSVP promises\n    // resolve), which is used in router transitions to prevent unnecessary\n    // loading state entry if all context promises resolve on the\n    // 'actions' queue first.\n\n    var queues = run.queues;\n    run._addQueue('routerTransitions', 'actions');\n  });\nenifed(\"ember-routing/ext/view\",\n  [\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/run_loop\",\"ember-views/views/view\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var get = __dependency1__.get;\n    var set = __dependency2__.set;\n    var run = __dependency3__[\"default\"];\n    var EmberView = __dependency4__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    EmberView.reopen({\n\n      /**\n        Sets the private `_outlets` object on the view.\n\n        @method init\n       */\n      init: function() {\n        set(this, '_outlets', {});\n        this._super();\n      },\n\n      /**\n        Manually fill any of a view's `{{outlet}}` areas with the\n        supplied view.\n\n        Example\n\n        ```javascript\n        var MyView = Ember.View.extend({\n          template: Ember.Handlebars.compile('Child view: {{outlet \"main\"}} ')\n        });\n        var myView = MyView.create();\n        myView.appendTo('body');\n        // The html for myView now looks like:\n        // <div id=\"ember228\" class=\"ember-view\">Child view: </div>\n\n        var FooView = Ember.View.extend({\n          template: Ember.Handlebars.compile('<h1>Foo</h1> ')\n        });\n        var fooView = FooView.create();\n        myView.connectOutlet('main', fooView);\n        // The html for myView now looks like:\n        // <div id=\"ember228\" class=\"ember-view\">Child view:\n        //   <div id=\"ember234\" class=\"ember-view\"><h1>Foo</h1> </div>\n        // </div>\n        ```\n        @method connectOutlet\n        @param  {String} outletName A unique name for the outlet\n        @param  {Object} view       An Ember.View\n       */\n      connectOutlet: function(outletName, view) {\n        if (this._pendingDisconnections) {\n          delete this._pendingDisconnections[outletName];\n        }\n\n        if (this._hasEquivalentView(outletName, view)) {\n          view.destroy();\n          return;\n        }\n\n        var outlets = get(this, '_outlets');\n        var container = get(this, 'container');\n        var router = container && container.lookup('router:main');\n        var renderedName = get(view, 'renderedName');\n\n        set(outlets, outletName, view);\n\n        if (router && renderedName) {\n          router._connectActiveView(renderedName, view);\n        }\n      },\n\n      /**\n        Determines if the view has already been created by checking if\n        the view has the same constructor, template, and context as the\n        view in the `_outlets` object.\n\n        @private\n        @method _hasEquivalentView\n        @param  {String} outletName The name of the outlet we are checking\n        @param  {Object} view       An Ember.View\n        @return {Boolean}\n       */\n      _hasEquivalentView: function(outletName, view) {\n        var existingView = get(this, '_outlets.'+outletName);\n        return existingView &&\n          existingView.constructor === view.constructor &&\n          existingView.get('template') === view.get('template') &&\n          existingView.get('context') === view.get('context');\n      },\n\n      /**\n        Removes an outlet from the view.\n\n        Example\n\n        ```javascript\n        var MyView = Ember.View.extend({\n          template: Ember.Handlebars.compile('Child view: {{outlet \"main\"}} ')\n        });\n        var myView = MyView.create();\n        myView.appendTo('body');\n        // myView's html:\n        // <div id=\"ember228\" class=\"ember-view\">Child view: </div>\n\n        var FooView = Ember.View.extend({\n          template: Ember.Handlebars.compile('<h1>Foo</h1> ')\n        });\n        var fooView = FooView.create();\n        myView.connectOutlet('main', fooView);\n        // myView's html:\n        // <div id=\"ember228\" class=\"ember-view\">Child view:\n        //   <div id=\"ember234\" class=\"ember-view\"><h1>Foo</h1> </div>\n        // </div>\n\n        myView.disconnectOutlet('main');\n        // myView's html:\n        // <div id=\"ember228\" class=\"ember-view\">Child view: </div>\n        ```\n\n        @method disconnectOutlet\n        @param  {String} outletName The name of the outlet to be removed\n       */\n      disconnectOutlet: function(outletName) {\n        if (!this._pendingDisconnections) {\n          this._pendingDisconnections = {};\n        }\n        this._pendingDisconnections[outletName] = true;\n        run.once(this, '_finishDisconnections');\n      },\n\n      /**\n        Gets an outlet that is pending disconnection and then\n        nullifys the object on the `_outlet` object.\n\n        @private\n        @method _finishDisconnections\n       */\n      _finishDisconnections: function() {\n        if (this.isDestroyed) return; // _outlets will be gone anyway\n        var outlets = get(this, '_outlets');\n        var pendingDisconnections = this._pendingDisconnections;\n        this._pendingDisconnections = null;\n\n        for (var outletName in pendingDisconnections) {\n          set(outlets, outletName, null);\n        }\n      }\n    });\n\n    __exports__[\"default\"] = EmberView;\n  });\nenifed(\"ember-routing/location/api\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // deprecate, assert\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    /**\n      Ember.Location returns an instance of the correct implementation of\n      the `location` API.\n\n      ## Implementations\n\n      You can pass an implementation name (`hash`, `history`, `none`) to force a\n      particular implementation to be used in your application.\n\n      ### HashLocation\n\n      Using `HashLocation` results in URLs with a `#` (hash sign) separating the\n      server side URL portion of the URL from the portion that is used by Ember.\n      This relies upon the `hashchange` event existing in the browser.\n\n      Example:\n\n      ```javascript\n      App.Router.map(function() {\n        this.resource('posts', function() {\n          this.route('new');\n        });\n      });\n\n      App.Router.reopen({\n        location: 'hash'\n      });\n      ```\n\n      This will result in a posts.new url of `/#/posts/new`.\n\n      ### HistoryLocation\n\n      Using `HistoryLocation` results in URLs that are indistinguishable from a\n      standard URL. This relies upon the browser's `history` API.\n\n      Example:\n\n      ```javascript\n      App.Router.map(function() {\n        this.resource('posts', function() {\n          this.route('new');\n        });\n      });\n\n      App.Router.reopen({\n        location: 'history'\n      });\n      ```\n\n      This will result in a posts.new url of `/posts/new`.\n\n      Keep in mind that your server must serve the Ember app at all the routes you\n      define.\n\n      ### AutoLocation\n\n      Using `AutoLocation`, the router will use the best Location class supported by\n      the browser it is running in.\n\n      Browsers that support the `history` API will use `HistoryLocation`, those that\n      do not, but still support the `hashchange` event will use `HashLocation`, and\n      in the rare case neither is supported will use `NoneLocation`.\n\n      Example:\n\n      ```javascript\n      App.Router.map(function() {\n        this.resource('posts', function() {\n          this.route('new');\n        });\n      });\n\n      App.Router.reopen({\n        location: 'auto'\n      });\n      ```\n\n      This will result in a posts.new url of `/posts/new` for modern browsers that\n      support the `history` api or `/#/posts/new` for older ones, like Internet\n      Explorer 9 and below.\n\n      When a user visits a link to your application, they will be automatically\n      upgraded or downgraded to the appropriate `Location` class, with the URL\n      transformed accordingly, if needed.\n\n      Keep in mind that since some of your users will use `HistoryLocation`, your\n      server must serve the Ember app at all the routes you define.\n\n      ### NoneLocation\n\n      Using `NoneLocation` causes Ember to not store the applications URL state\n      in the actual URL. This is generally used for testing purposes, and is one\n      of the changes made when calling `App.setupForTesting()`.\n\n      ## Location API\n\n      Each location implementation must provide the following methods:\n\n      * implementation: returns the string name used to reference the implementation.\n      * getURL: returns the current URL.\n      * setURL(path): sets the current URL.\n      * replaceURL(path): replace the current URL (optional).\n      * onUpdateURL(callback): triggers the callback when the URL changes.\n      * formatURL(url): formats `url` to be placed into `href` attribute.\n\n      Calling setURL or replaceURL will not trigger onUpdateURL callbacks.\n\n      @class Location\n      @namespace Ember\n      @static\n    */\n    __exports__[\"default\"] = {\n      /**\n       This is deprecated in favor of using the container to lookup the location\n       implementation as desired.\n\n       For example:\n\n       ```javascript\n       // Given a location registered as follows:\n       container.register('location:history-test', HistoryTestLocation);\n\n       // You could create a new instance via:\n       container.lookup('location:history-test');\n       ```\n\n        @method create\n        @param {Object} options\n        @return {Object} an instance of an implementation of the `location` API\n        @deprecated Use the container to lookup the location implementation that you\n        need.\n      */\n      create: function(options) {\n        var implementation = options && options.implementation;\n        Ember.assert(\"Ember.Location.create: you must specify a 'implementation' option\", !!implementation);\n\n        var implementationClass = this.implementations[implementation];\n        Ember.assert(\"Ember.Location.create: \" + implementation + \" is not a valid implementation\", !!implementationClass);\n\n        return implementationClass.create.apply(implementationClass, arguments);\n      },\n\n      /**\n       This is deprecated in favor of using the container to register the\n       location implementation as desired.\n\n       Example:\n\n       ```javascript\n       Application.initializer({\n        name: \"history-test-location\",\n\n        initialize: function(container, application) {\n          application.register('location:history-test', HistoryTestLocation);\n        }\n       });\n       ```\n\n       @method registerImplementation\n       @param {String} name\n       @param {Object} implementation of the `location` API\n       @deprecated Register your custom location implementation with the\n       container directly.\n      */\n      registerImplementation: function(name, implementation) {\n        Ember.deprecate('Using the Ember.Location.registerImplementation is no longer supported. Register your custom location implementation with the container instead.', false);\n\n        this.implementations[name] = implementation;\n      },\n\n      implementations: {},\n      _location: window.location,\n\n      /**\n        Returns the current `location.hash` by parsing location.href since browsers\n        inconsistently URL-decode `location.hash`.\n\n        https://bugzilla.mozilla.org/show_bug.cgi?id=483304\n\n        @private\n        @method getHash\n        @since 1.4.0\n      */\n      _getHash: function () {\n        // AutoLocation has it at _location, HashLocation at .location.\n        // Being nice and not changing\n        var href = (this._location || this.location).href;\n        var hashIndex = href.indexOf('#');\n\n        if (hashIndex === -1) {\n          return '';\n        } else {\n          return href.substr(hashIndex);\n        }\n      }\n    };\n  });\nenifed(\"ember-routing/location/auto_location\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-routing/location/api\",\"ember-routing/location/history_location\",\"ember-routing/location/hash_location\",\"ember-routing/location/none_location\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // FEATURES\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n\n    var EmberLocation = __dependency4__[\"default\"];\n    var HistoryLocation = __dependency5__[\"default\"];\n    var HashLocation = __dependency6__[\"default\"];\n    var NoneLocation = __dependency7__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    /**\n      Ember.AutoLocation will select the best location option based off browser\n      support with the priority order: history, hash, none.\n\n      Clean pushState paths accessed by hashchange-only browsers will be redirected\n      to the hash-equivalent and vice versa so future transitions are consistent.\n\n      Keep in mind that since some of your users will use `HistoryLocation`, your\n      server must serve the Ember app at all the routes you define.\n\n      @class AutoLocation\n      @namespace Ember\n      @static\n    */\n    __exports__[\"default\"] = {\n\n      /**\n        @private\n\n        This property is used by router:main to know whether to cancel the routing\n        setup process, which is needed while we redirect the browser.\n\n        @since 1.5.1\n        @property cancelRouterSetup\n        @default false\n      */\n      cancelRouterSetup: false,\n\n      /**\n        @private\n\n        Will be pre-pended to path upon state change.\n\n        @since 1.5.1\n        @property rootURL\n        @default '/'\n      */\n      rootURL: '/',\n\n      /**\n        @private\n\n        Attached for mocking in tests\n\n        @since 1.5.1\n        @property _window\n        @default window\n      */\n      _window: window,\n\n      /**\n        @private\n\n        Attached for mocking in tests\n\n        @property location\n        @default window.location\n      */\n      _location: window.location,\n\n      /**\n        @private\n\n        Attached for mocking in tests\n\n        @since 1.5.1\n        @property _history\n        @default window.history\n      */\n      _history: window.history,\n\n      /**\n        @private\n\n        Attached for mocking in tests\n\n        @since 1.5.1\n        @property _HistoryLocation\n        @default Ember.HistoryLocation\n      */\n      _HistoryLocation: HistoryLocation,\n\n      /**\n        @private\n\n        Attached for mocking in tests\n\n        @since 1.5.1\n        @property _HashLocation\n        @default Ember.HashLocation\n      */\n      _HashLocation: HashLocation,\n\n      /**\n        @private\n\n        Attached for mocking in tests\n\n        @since 1.5.1\n        @property _NoneLocation\n        @default Ember.NoneLocation\n      */\n      _NoneLocation: NoneLocation,\n\n      /**\n        @private\n\n        Returns location.origin or builds it if device doesn't support it.\n\n        @method _getOrigin\n      */\n      _getOrigin: function () {\n        var location = this._location;\n        var origin = location.origin;\n\n        // Older browsers, especially IE, don't have origin\n        if (!origin) {\n          origin = location.protocol + '//' + location.hostname;\n\n          if (location.port) {\n            origin += ':' + location.port;\n          }\n        }\n\n        return origin;\n      },\n\n      /**\n        @private\n\n        We assume that if the history object has a pushState method, the host should\n        support HistoryLocation.\n\n        @method _getSupportsHistory\n      */\n      _getSupportsHistory: function () {\n        // Boosted from Modernizr: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n        // The stock browser on Android 2.2 & 2.3 returns positive on history support\n        // Unfortunately support is really buggy and there is no clean way to detect\n        // these bugs, so we fall back to a user agent sniff :(\n        var userAgent = this._window.navigator.userAgent;\n\n        // We only want Android 2, stock browser, and not Chrome which identifies\n        // itself as 'Mobile Safari' as well\n        if (userAgent.indexOf('Android 2') !== -1 &&\n            userAgent.indexOf('Mobile Safari') !== -1 &&\n            userAgent.indexOf('Chrome') === -1) {\n          return false;\n        }\n\n        return !!(this._history && 'pushState' in this._history);\n      },\n\n      /**\n        @private\n\n        IE8 running in IE7 compatibility mode gives false positive, so we must also\n        check documentMode.\n\n        @method _getSupportsHashChange\n      */\n      _getSupportsHashChange: function () {\n        var _window = this._window;\n        var documentMode = _window.document.documentMode;\n\n        return ('onhashchange' in _window && (documentMode === undefined || documentMode > 7 ));\n      },\n\n      /**\n        @private\n\n        Redirects the browser using location.replace, prepending the locatin.origin\n        to prevent phishing attempts\n\n        @method _replacePath\n      */\n      _replacePath: function (path) {\n        this._location.replace(this._getOrigin() + path);\n      },\n\n      /**\n        @since 1.5.1\n        @private\n        @method _getRootURL\n      */\n      _getRootURL: function () {\n        return this.rootURL;\n      },\n\n      /**\n        @private\n\n        Returns the current `location.pathname`, normalized for IE inconsistencies.\n\n        @method _getPath\n      */\n      _getPath: function () {\n        var pathname = this._location.pathname;\n        // Various versions of IE/Opera don't always return a leading slash\n        if (pathname.charAt(0) !== '/') {\n          pathname = '/' + pathname;\n        }\n\n        return pathname;\n      },\n\n      /**\n        @private\n\n        Returns normalized location.hash as an alias to Ember.Location._getHash\n\n        @since 1.5.1\n        @method _getHash\n      */\n      _getHash: EmberLocation._getHash,\n\n      /**\n        @private\n\n        Returns location.search\n\n        @since 1.5.1\n        @method _getQuery\n      */\n      _getQuery: function () {\n        return this._location.search;\n      },\n\n      /**\n        @private\n\n        Returns the full pathname including query and hash\n\n        @method _getFullPath\n      */\n      _getFullPath: function () {\n        return this._getPath() + this._getQuery() + this._getHash();\n      },\n\n      /**\n        @private\n\n        Returns the current path as it should appear for HistoryLocation supported\n        browsers. This may very well differ from the real current path (e.g. if it\n        starts off as a hashed URL)\n\n        @method _getHistoryPath\n      */\n      _getHistoryPath: function () {\n        var rootURL = this._getRootURL();\n        var path = this._getPath();\n        var hash = this._getHash();\n        var query = this._getQuery();\n        var rootURLIndex = path.indexOf(rootURL);\n        var routeHash, hashParts;\n\n        Ember.assert('Path ' + path + ' does not start with the provided rootURL ' + rootURL, rootURLIndex === 0);\n\n        // By convention, Ember.js routes using HashLocation are required to start\n        // with `#/`. Anything else should NOT be considered a route and should\n        // be passed straight through, without transformation.\n        if (hash.substr(0, 2) === '#/') {\n          // There could be extra hash segments after the route\n          hashParts = hash.substr(1).split('#');\n          // The first one is always the route url\n          routeHash = hashParts.shift();\n\n          // If the path already has a trailing slash, remove the one\n          // from the hashed route so we don't double up.\n          if (path.slice(-1) === '/') {\n              routeHash = routeHash.substr(1);\n          }\n\n          // This is the \"expected\" final order\n          path += routeHash;\n          path += query;\n\n          if (hashParts.length) {\n            path += '#' + hashParts.join('#');\n          }\n        } else {\n          path += query;\n          path += hash;\n        }\n\n        return path;\n      },\n\n      /**\n        @private\n\n        Returns the current path as it should appear for HashLocation supported\n        browsers. This may very well differ from the real current path.\n\n        @method _getHashPath\n      */\n      _getHashPath: function () {\n        var rootURL = this._getRootURL();\n        var path = rootURL;\n        var historyPath = this._getHistoryPath();\n        var routePath = historyPath.substr(rootURL.length);\n\n        if (routePath !== '') {\n          if (routePath.charAt(0) !== '/') {\n            routePath = '/' + routePath;\n          }\n\n          path += '#' + routePath;\n        }\n\n        return path;\n      },\n\n      /**\n        Selects the best location option based off browser support and returns an\n        instance of that Location class.\n\n        @see Ember.AutoLocation\n        @method create\n      */\n      create: function (options) {\n        if (options && options.rootURL) {\n          Ember.assert('rootURL must end with a trailing forward slash e.g. \"/app/\"', options.rootURL.charAt(options.rootURL.length-1) === '/');\n          this.rootURL = options.rootURL;\n        }\n\n        var historyPath, hashPath;\n        var cancelRouterSetup = false;\n        var implementationClass = this._NoneLocation;\n        var currentPath = this._getFullPath();\n\n        if (this._getSupportsHistory()) {\n          historyPath = this._getHistoryPath();\n\n          // Since we support history paths, let's be sure we're using them else\n          // switch the location over to it.\n          if (currentPath === historyPath) {\n            implementationClass = this._HistoryLocation;\n          } else {\n            \n              if (currentPath.substr(0, 2) === '/#') {\n                this._history.replaceState({ path: historyPath }, null, historyPath);\n                implementationClass = this._HistoryLocation;\n              } else {\n                cancelRouterSetup = true;\n                this._replacePath(historyPath);\n              }\n                      }\n\n        } else if (this._getSupportsHashChange()) {\n          hashPath = this._getHashPath();\n\n          // Be sure we're using a hashed path, otherwise let's switch over it to so\n          // we start off clean and consistent. We'll count an index path with no\n          // hash as \"good enough\" as well.\n          if (currentPath === hashPath || (currentPath === '/' && hashPath === '/#/')) {\n            implementationClass = this._HashLocation;\n          } else {\n            // Our URL isn't in the expected hash-supported format, so we want to\n            // cancel the router setup and replace the URL to start off clean\n            cancelRouterSetup = true;\n            this._replacePath(hashPath);\n          }\n        }\n\n        var implementation = implementationClass.create.apply(implementationClass, arguments);\n\n        if (cancelRouterSetup) {\n          set(implementation, 'cancelRouterSetup', true);\n        }\n\n        return implementation;\n      }\n    };\n  });\nenifed(\"ember-routing/location/hash_location\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/run_loop\",\"ember-metal/utils\",\"ember-runtime/system/object\",\"ember-routing/location/api\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var run = __dependency4__[\"default\"];\n    var guidFor = __dependency5__.guidFor;\n\n    var EmberObject = __dependency6__[\"default\"];\n    var EmberLocation = __dependency7__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    /**\n      `Ember.HashLocation` implements the location API using the browser's\n      hash. At present, it relies on a `hashchange` event existing in the\n      browser.\n\n      @class HashLocation\n      @namespace Ember\n      @extends Ember.Object\n    */\n    __exports__[\"default\"] = EmberObject.extend({\n      implementation: 'hash',\n\n      init: function() {\n        set(this, 'location', get(this, '_location') || window.location);\n      },\n\n      /**\n        @private\n\n        Returns normalized location.hash\n\n        @since 1.5.1\n        @method getHash\n      */\n      getHash: EmberLocation._getHash,\n\n      /**\n        Returns the current `location.hash`, minus the '#' at the front.\n\n        @private\n        @method getURL\n      */\n      getURL: function() {\n        var path = this.getHash().substr(1);\n        Ember.deprecate('location.hash value is ambiguous. Support for this will be removed soon. When using location: \"hash|auto\" your hash paths MUST begin with a forward slash. e.g. #/' + path + ' NOT #' + path + '. See http://emberjs.com/guides/deprecations/#toc_location-hash-paths-must-now-include-a-forward-slash-e-g-foo-not-foo', path.length === 0 || path.charAt(0) === '/');\n        return path;\n      },\n\n      /**\n        Set the `location.hash` and remembers what was set. This prevents\n        `onUpdateURL` callbacks from triggering when the hash was set by\n        `HashLocation`.\n\n        @private\n        @method setURL\n        @param path {String}\n      */\n      setURL: function(path) {\n        get(this, 'location').hash = path;\n        set(this, 'lastSetURL', path);\n      },\n\n      /**\n        Uses location.replace to update the url without a page reload\n        or history modification.\n\n        @private\n        @method replaceURL\n        @param path {String}\n      */\n      replaceURL: function(path) {\n        get(this, 'location').replace('#' + path);\n        set(this, 'lastSetURL', path);\n      },\n\n      /**\n        Register a callback to be invoked when the hash changes. These\n        callbacks will execute when the user presses the back or forward\n        button, but not after `setURL` is invoked.\n\n        @private\n        @method onUpdateURL\n        @param callback {Function}\n      */\n      onUpdateURL: function(callback) {\n        var self = this;\n        var guid = guidFor(this);\n\n        Ember.$(window).on('hashchange.ember-location-'+guid, function() {\n          run(function() {\n            var path = self.getURL();\n            if (get(self, 'lastSetURL') === path) { return; }\n\n            set(self, 'lastSetURL', null);\n\n            callback(path);\n          });\n        });\n      },\n\n      /**\n        Given a URL, formats it to be placed into the page as part\n        of an element's `href` attribute.\n\n        This is used, for example, when using the {{action}} helper\n        to generate a URL based on an event.\n\n        @private\n        @method formatURL\n        @param url {String}\n      */\n      formatURL: function(url) {\n        return '#' + url;\n      },\n\n      /**\n        Cleans up the HashLocation event listener.\n\n        @private\n        @method willDestroy\n      */\n      willDestroy: function() {\n        var guid = guidFor(this);\n\n        Ember.$(window).off('hashchange.ember-location-'+guid);\n      }\n    });\n  });\nenifed(\"ember-routing/location/history_location\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-runtime/system/object\",\"ember-views/system/jquery\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // FEATURES\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var guidFor = __dependency4__.guidFor;\n\n    var EmberObject = __dependency5__[\"default\"];\n    var jQuery = __dependency6__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    var popstateFired = false;\n    var supportsHistoryState = window.history && 'state' in window.history;\n\n    /**\n      Ember.HistoryLocation implements the location API using the browser's\n      history.pushState API.\n\n      @class HistoryLocation\n      @namespace Ember\n      @extends Ember.Object\n    */\n    __exports__[\"default\"] = EmberObject.extend({\n      implementation: 'history',\n\n      init: function() {\n        set(this, 'location', get(this, 'location') || window.location);\n        set(this, 'baseURL', jQuery('base').attr('href') || '');\n      },\n\n      /**\n        Used to set state on first call to setURL\n\n        @private\n        @method initState\n      */\n      initState: function() {\n        set(this, 'history', get(this, 'history') || window.history);\n        this.replaceState(this.formatURL(this.getURL()));\n      },\n\n      /**\n        Will be pre-pended to path upon state change\n\n        @property rootURL\n        @default '/'\n      */\n      rootURL: '/',\n\n      /**\n        Returns the current `location.pathname` without `rootURL` or `baseURL`\n\n        @private\n        @method getURL\n        @return url {String}\n      */\n      getURL: function() {\n        var rootURL = get(this, 'rootURL');\n        var location = get(this, 'location');\n        var path = location.pathname;\n        var baseURL = get(this, 'baseURL');\n\n        rootURL = rootURL.replace(/\\/$/, '');\n        baseURL = baseURL.replace(/\\/$/, '');\n\n        var url = path.replace(baseURL, '').replace(rootURL, '');\n        var search = location.search || '';\n\n        url += search;\n\n        return url;\n      },\n\n      /**\n        Uses `history.pushState` to update the url without a page reload.\n\n        @private\n        @method setURL\n        @param path {String}\n      */\n      setURL: function(path) {\n        var state = this.getState();\n        path = this.formatURL(path);\n\n        if (!state || state.path !== path) {\n          this.pushState(path);\n        }\n      },\n\n      /**\n        Uses `history.replaceState` to update the url without a page reload\n        or history modification.\n\n        @private\n        @method replaceURL\n        @param path {String}\n      */\n      replaceURL: function(path) {\n        var state = this.getState();\n        path = this.formatURL(path);\n\n        if (!state || state.path !== path) {\n          this.replaceState(path);\n        }\n      },\n\n      /**\n       Get the current `history.state`. Checks for if a polyfill is\n       required and if so fetches this._historyState. The state returned\n       from getState may be null if an iframe has changed a window's\n       history.\n\n       @private\n       @method getState\n       @return state {Object}\n      */\n      getState: function() {\n        return supportsHistoryState ? get(this, 'history').state : this._historyState;\n      },\n\n      /**\n       Pushes a new state.\n\n       @private\n       @method pushState\n       @param path {String}\n      */\n      pushState: function(path) {\n        var state = { path: path };\n\n        get(this, 'history').pushState(state, null, path);\n\n        // store state if browser doesn't support `history.state`\n        if (!supportsHistoryState) {\n          this._historyState = state;\n        }\n\n        // used for webkit workaround\n        this._previousURL = this.getURL();\n      },\n\n      /**\n       Replaces the current state.\n\n       @private\n       @method replaceState\n       @param path {String}\n      */\n      replaceState: function(path) {\n        var state = { path: path };\n\n        get(this, 'history').replaceState(state, null, path);\n\n        // store state if browser doesn't support `history.state`\n        if (!supportsHistoryState) {\n          this._historyState = state;\n        }\n\n        // used for webkit workaround\n        this._previousURL = this.getURL();\n      },\n\n      /**\n        Register a callback to be invoked whenever the browser\n        history changes, including using forward and back buttons.\n\n        @private\n        @method onUpdateURL\n        @param callback {Function}\n      */\n      onUpdateURL: function(callback) {\n        var guid = guidFor(this);\n        var self = this;\n\n        jQuery(window).on('popstate.ember-location-'+guid, function(e) {\n          // Ignore initial page load popstate event in Chrome\n          if (!popstateFired) {\n            popstateFired = true;\n            if (self.getURL() === self._previousURL) { return; }\n          }\n          callback(self.getURL());\n        });\n      },\n\n      /**\n        Used when using `{{action}}` helper.  The url is always appended to the rootURL.\n\n        @private\n        @method formatURL\n        @param url {String}\n        @return formatted url {String}\n      */\n      formatURL: function(url) {\n        var rootURL = get(this, 'rootURL');\n        var baseURL = get(this, 'baseURL');\n\n        if (url !== '') {\n          rootURL = rootURL.replace(/\\/$/, '');\n          baseURL = baseURL.replace(/\\/$/, '');\n        } else if(baseURL.match(/^\\//) && rootURL.match(/^\\//)) {\n          baseURL = baseURL.replace(/\\/$/, '');\n        }\n\n        return baseURL + rootURL + url;\n      },\n\n      /**\n        Cleans up the HistoryLocation event listener.\n\n        @private\n        @method willDestroy\n      */\n      willDestroy: function() {\n        var guid = guidFor(this);\n\n        jQuery(window).off('popstate.ember-location-'+guid);\n      }\n    });\n  });\nenifed(\"ember-routing/location/none_location\",\n  [\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-runtime/system/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var get = __dependency1__.get;\n    var set = __dependency2__.set;\n    var EmberObject = __dependency3__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    /**\n      Ember.NoneLocation does not interact with the browser. It is useful for\n      testing, or when you need to manage state with your Router, but temporarily\n      don't want it to muck with the URL (for example when you embed your\n      application in a larger page).\n\n      @class NoneLocation\n      @namespace Ember\n      @extends Ember.Object\n    */\n    __exports__[\"default\"] = EmberObject.extend({\n      implementation: 'none',\n      path: '',\n\n      /**\n        Returns the current path.\n\n        @private\n        @method getURL\n        @return {String} path\n      */\n      getURL: function() {\n        return get(this, 'path');\n      },\n\n      /**\n        Set the path and remembers what was set. Using this method\n        to change the path will not invoke the `updateURL` callback.\n\n        @private\n        @method setURL\n        @param path {String}\n      */\n      setURL: function(path) {\n        set(this, 'path', path);\n      },\n\n      /**\n        Register a callback to be invoked when the path changes. These\n        callbacks will execute when the user presses the back or forward\n        button, but not after `setURL` is invoked.\n\n        @private\n        @method onUpdateURL\n        @param callback {Function}\n      */\n      onUpdateURL: function(callback) {\n        this.updateCallback = callback;\n      },\n\n      /**\n        Sets the path and calls the `updateURL` callback.\n\n        @private\n        @method handleURL\n        @param callback {Function}\n      */\n      handleURL: function(url) {\n        set(this, 'path', url);\n        this.updateCallback(url);\n      },\n\n      /**\n        Given a URL, formats it to be placed into the page as part\n        of an element's `href` attribute.\n\n        This is used, for example, when using the {{action}} helper\n        to generate a URL based on an event.\n\n        @private\n        @method formatURL\n        @param url {String}\n        @return {String} url\n      */\n      formatURL: function(url) {\n        // The return value is not overly meaningful, but we do not want to throw\n        // errors when test code renders templates containing {{action href=true}}\n        // helpers.\n        return url;\n      }\n    });\n  });\nenifed(\"ember-routing/system/cache\",\n  [\"ember-runtime/system/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EmberObject = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = EmberObject.extend({\n      init: function() {\n        this.cache = {};\n      },\n      has: function(bucketKey) {\n        return bucketKey in this.cache;\n      },\n      stash: function(bucketKey, key, value) {\n        var bucket = this.cache[bucketKey];\n        if (!bucket) {\n          bucket = this.cache[bucketKey] = {};\n        }\n        bucket[key] = value;\n      },\n      lookup: function(bucketKey, prop, defaultValue) {\n        var cache = this.cache;\n        if (!(bucketKey in cache)) {\n          return defaultValue;\n        }\n        var bucket = cache[bucketKey];\n        if (prop in bucket) {\n          return bucket[prop];\n        } else {\n          return defaultValue;\n        }\n      },\n      cache: null\n    });\n  });\nenifed(\"ember-routing/system/controller_for\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    /**\n\n      Finds a controller instance.\n\n      @for Ember\n      @method controllerFor\n      @private\n    */\n    __exports__[\"default\"] = function controllerFor(container, controllerName, lookupOptions) {\n      return container.lookup('controller:' + controllerName, lookupOptions);\n    }\n  });\nenifed(\"ember-routing/system/dsl\",\n  [\"ember-metal/core\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // FEATURES, assert\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    function DSL(name) {\n      this.parent = name;\n      this.matches = [];\n    }\n    __exports__[\"default\"] = DSL;\n\n    DSL.prototype = {\n      route: function(name, options, callback) {\n        if (arguments.length === 2 && typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        if (arguments.length === 1) {\n          options = {};\n        }\n\n        var type = options.resetNamespace === true ? 'resource' : 'route';\n        Ember.assert(\"'basic' cannot be used as a \" + type + \" name.\", name !== 'basic');\n\n\n        if (typeof options.path !== 'string') {\n          options.path = \"/\" + name;\n        }\n\n        if (canNest(this) && options.resetNamespace !== true) {\n          name = this.parent + \".\" + name;\n        }\n\n        if (callback) {\n          var dsl = new DSL(name);\n          route(dsl, 'loading');\n          route(dsl, 'error', { path: \"/_unused_dummy_error_path_route_\" + name + \"/:error\" });\n\n          if (callback) { callback.call(dsl); }\n\n          this.push(options.path, name, dsl.generate());\n        } else {\n          this.push(options.path, name, null);\n        }\n\n              },\n\n      push: function(url, name, callback) {\n        var parts = name.split('.');\n        if (url === \"\" || url === \"/\" || parts[parts.length-1] === \"index\") { this.explicitIndex = true; }\n\n        this.matches.push([url, name, callback]);\n      },\n\n      resource: function(name, options, callback) {\n        if (arguments.length === 2 && typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        if (arguments.length === 1) {\n          options = {};\n        }\n\n        options.resetNamespace = true;\n        this.route(name, options, callback);\n      },\n\n      generate: function() {\n        var dslMatches = this.matches;\n\n        if (!this.explicitIndex) {\n          route(this, \"index\", { path: \"/\" });\n        }\n\n        return function(match) {\n          for (var i=0, l=dslMatches.length; i<l; i++) {\n            var dslMatch = dslMatches[i];\n            var matchObj = match(dslMatch[0]).to(dslMatch[1], dslMatch[2]);\n          }\n        };\n      }\n    };\n\n    function canNest(dsl) {\n      return dsl.parent && dsl.parent !== 'application';\n    }\n\n    function route(dsl, name, options) {\n      Ember.assert(\"You must use `this.resource` to nest\", typeof options !== 'function');\n\n      options = options || {};\n\n      if (typeof options.path !== 'string') {\n        options.path = \"/\" + name;\n      }\n\n      if (canNest(dsl) && options.resetNamespace !== true) {\n        name = dsl.parent + \".\" + name;\n      }\n\n      dsl.push(options.path, name, null);\n    }\n\n    DSL.map = function(callback) {\n      var dsl = new DSL();\n      callback.call(dsl);\n      return dsl;\n    };\n  });\nenifed(\"ember-routing/system/generate_controller\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Logger\n    var get = __dependency2__.get;\n    var isArray = __dependency3__.isArray;\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    /**\n      Generates a controller factory\n\n      The type of the generated controller factory is derived\n      from the context. If the context is an array an array controller\n      is generated, if an object, an object controller otherwise, a basic\n      controller is generated.\n\n      You can customize your generated controllers by defining\n      `App.ObjectController` or `App.ArrayController`.\n\n      @for Ember\n      @method generateControllerFactory\n      @private\n    */\n\n    function generateControllerFactory(container, controllerName, context) {\n      var Factory, fullName, instance, name, factoryName, controllerType;\n\n      if (context && isArray(context)) {\n        controllerType = 'array';\n      } else if (context) {\n        controllerType = 'object';\n      } else {\n        controllerType = 'basic';\n      }\n\n      factoryName = 'controller:' + controllerType;\n\n      Factory = container.lookupFactory(factoryName).extend({\n        isGenerated: true,\n        toString: function() {\n          return \"(generated \" + controllerName + \" controller)\";\n        }\n      });\n\n      fullName = 'controller:' + controllerName;\n\n      container.register(fullName,  Factory);\n\n      return Factory;\n    }\n\n    __exports__.generateControllerFactory = generateControllerFactory;/**\n      Generates and instantiates a controller.\n\n      The type of the generated controller factory is derived\n      from the context. If the context is an array an array controller\n      is generated, if an object, an object controller otherwise, a basic\n      controller is generated.\n\n      @for Ember\n      @method generateController\n      @private\n      @since 1.3.0\n    */\n    __exports__[\"default\"] = function generateController(container, controllerName, context) {\n      generateControllerFactory(container, controllerName, context);\n      var fullName = 'controller:' + controllerName;\n      var instance = container.lookup(fullName);\n\n      if (get(instance, 'namespace.LOG_ACTIVE_GENERATION')) {\n        Ember.Logger.info(\"generated -> \" + fullName, { fullName: fullName });\n      }\n\n      return instance;\n    }\n  });\nenifed(\"ember-routing/system/route\",\n  [\"ember-metal/core\",\"ember-metal/error\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/get_properties\",\"ember-metal/enumerable_utils\",\"ember-metal/is_none\",\"ember-metal/computed\",\"ember-metal/merge\",\"ember-metal/utils\",\"ember-metal/run_loop\",\"ember-metal/keys\",\"ember-runtime/copy\",\"ember-runtime/system/string\",\"ember-runtime/system/object\",\"ember-runtime/mixins/action_handler\",\"ember-routing/system/generate_controller\",\"ember-routing-handlebars/helpers/shared\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __dependency16__, __dependency17__, __dependency18__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // FEATURES, K, A, deprecate, assert, Logger\n    var EmberError = __dependency2__[\"default\"];\n    var get = __dependency3__.get;\n    var set = __dependency4__.set;\n    var getProperties = __dependency5__[\"default\"];\n    var forEach = __dependency6__.forEach;\n    var replace = __dependency6__.replace;\n    var isNone = __dependency7__.isNone;\n    var computed = __dependency8__.computed;\n    var merge = __dependency9__[\"default\"];\n    var isArray = __dependency10__.isArray;\n    var typeOf = __dependency10__.typeOf;\n    var run = __dependency11__[\"default\"];\n    var keys = __dependency12__[\"default\"];\n    var copy = __dependency13__[\"default\"];\n    var classify = __dependency14__.classify;\n    var fmt = __dependency14__.fmt;\n    var EmberObject = __dependency15__[\"default\"];\n    var ActionHandler = __dependency16__[\"default\"];\n    var generateController = __dependency17__[\"default\"];\n    var stashParamNames = __dependency18__.stashParamNames;\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    /**\n      The `Ember.Route` class is used to define individual routes. Refer to\n      the [routing guide](http://emberjs.com/guides/routing/) for documentation.\n\n      @class Route\n      @namespace Ember\n      @extends Ember.Object\n      @uses Ember.ActionHandler\n    */\n    var Route = EmberObject.extend(ActionHandler, {\n      /**\n        Configuration hash for this route's queryParams. The possible\n        configuration options and their defaults are as follows\n        (assuming a query param whose URL key is `page`):\n\n        ```js\n        queryParams: {\n          page: {\n            // By default, controller query param properties don't\n            // cause a full transition when they are changed, but\n            // rather only cause the URL to update. Setting\n            // `refreshModel` to true will cause an \"in-place\"\n            // transition to occur, whereby the model hooks for\n            // this route (and any child routes) will re-fire, allowing\n            // you to reload models (e.g., from the server) using the\n            // updated query param values.\n            refreshModel: false,\n\n            // By default, changes to controller query param properties\n            // cause the URL to update via `pushState`, which means an\n            // item will be added to the browser's history, allowing\n            // you to use the back button to restore the app to the\n            // previous state before the query param property was changed.\n            // Setting `replace` to true will use `replaceState` (or its\n            // hash location equivalent), which causes no browser history\n            // item to be added. This options name and default value are\n            // the same as the `link-to` helper's `replace` option.\n            replace: false\n          }\n        }\n        ```\n\n        @property queryParams\n        @for Ember.Route\n        @type Hash\n      */\n      queryParams: {},\n\n      /**\n        @private\n\n        @property _qp\n      */\n      _qp: computed(function() {\n        var controllerName = this.controllerName || this.routeName;\n        var controllerClass = this.container.lookupFactory('controller:' + controllerName);\n\n        if (!controllerClass) {\n          return defaultQPMeta;\n        }\n\n        var controllerProto = controllerClass.proto();\n        var qpProps = get(controllerProto, '_normalizedQueryParams');\n        var cacheMeta = get(controllerProto, '_cacheMeta');\n\n        var qps = [], map = {}, self = this;\n        for (var propName in qpProps) {\n          if (!qpProps.hasOwnProperty(propName)) { continue; }\n\n          var desc = qpProps[propName];\n          var urlKey = desc.as || this.serializeQueryParamKey(propName);\n          var defaultValue = get(controllerProto, propName);\n\n          if (isArray(defaultValue)) {\n            defaultValue = Ember.A(defaultValue.slice());\n          }\n\n          var type = typeOf(defaultValue);\n          var defaultValueSerialized = this.serializeQueryParam(defaultValue, urlKey, type);\n          var fprop = controllerName + ':' + propName;\n          var qp = {\n            def: defaultValue,\n            sdef: defaultValueSerialized,\n            type: type,\n            urlKey: urlKey,\n            prop: propName,\n            fprop: fprop,\n            ctrl: controllerName,\n            cProto: controllerProto,\n            svalue: defaultValueSerialized,\n            cacheType: desc.scope,\n            route: this,\n            cacheMeta: cacheMeta[propName]\n          };\n\n          map[propName] = map[urlKey] = map[fprop] = qp;\n          qps.push(qp);\n        }\n\n        return {\n          qps: qps,\n          map: map,\n          states: {\n            active: function(controller, prop) {\n              return self._activeQPChanged(controller, map[prop]);\n            },\n            allowOverrides: function(controller, prop) {\n              return self._updatingQPChanged(controller, map[prop]);\n            },\n            changingKeys: function(controller, prop) {\n              return self._updateSerializedQPValue(controller, map[prop]);\n            }\n          }\n        };\n      }),\n\n      /**\n        @private\n\n        @property _names\n      */\n      _names: null,\n\n      /**\n        @private\n\n        @method _stashNames\n      */\n      _stashNames: function(_handlerInfo, dynamicParent) {\n        var handlerInfo = _handlerInfo;\n        if (this._names) { return; }\n        var names = this._names = handlerInfo._names;\n\n        if (!names.length) {\n          handlerInfo = dynamicParent;\n          names = handlerInfo && handlerInfo._names || [];\n        }\n\n        var qps = get(this, '_qp.qps');\n        var len = qps.length;\n\n        var namePaths = new Array(names.length);\n        for (var a = 0, nlen = names.length; a < nlen; ++a) {\n          namePaths[a] = handlerInfo.name + '.' + names[a];\n        }\n\n        for (var i = 0; i < len; ++i) {\n          var qp = qps[i];\n          var cacheMeta = qp.cacheMeta;\n          if (cacheMeta.scope === 'model') {\n            cacheMeta.parts = namePaths;\n          }\n          cacheMeta.prefix = qp.ctrl;\n        }\n      },\n\n      /**\n        @private\n\n        @property _updateSerializedQPValue\n      */\n      _updateSerializedQPValue: function(controller, qp) {\n        var value = get(controller, qp.prop);\n        qp.svalue = this.serializeQueryParam(value, qp.urlKey, qp.type);\n      },\n\n      /**\n        @private\n\n        @property _activeQPChanged\n      */\n      _activeQPChanged: function(controller, qp) {\n        var value = get(controller, qp.prop);\n        this.router._queuedQPChanges[qp.fprop] = value;\n        run.once(this, this._fireQueryParamTransition);\n      },\n\n      /**\n        @private\n        @method _updatingQPChanged\n      */\n      _updatingQPChanged: function(controller, qp) {\n        var router = this.router;\n        if (!router._qpUpdates) {\n          router._qpUpdates = {};\n        }\n        router._qpUpdates[qp.urlKey] = true;\n      },\n\n      mergedProperties: ['events', 'queryParams'],\n\n      /**\n        @method paramsFor\n      */\n      paramsFor: function(name) {\n        var route = this.container.lookup('route:' + name);\n\n        if (!route) {\n          return {};\n        }\n\n        var transition = this.router.router.activeTransition;\n        var state = transition ? transition.state : this.router.router.state;\n\n        var params = {};\n        merge(params, state.params[name]);\n        merge(params, getQueryParamsFor(route, state));\n\n        return params;\n      },\n\n      /**\n        @method serializeQueryParamKey\n      */\n      serializeQueryParamKey: function(controllerPropertyName) {\n        return controllerPropertyName;\n      },\n\n      /**\n        @method serializeQueryParam\n      */\n      serializeQueryParam: function(value, urlKey, defaultValueType) {\n        // urlKey isn't used here, but anyone overriding\n        // can use it to provide serialization specific\n        // to a certain query param.\n        if (defaultValueType === 'array') {\n          return JSON.stringify(value);\n        }\n        return '' + value;\n      },\n\n      /**\n        @method deserializeQueryParam\n      */\n      deserializeQueryParam: function(value, urlKey, defaultValueType) {\n        // urlKey isn't used here, but anyone overriding\n        // can use it to provide deserialization specific\n        // to a certain query param.\n\n        // Use the defaultValueType of the default value (the initial value assigned to a\n        // controller query param property), to intelligently deserialize and cast.\n        if (defaultValueType === 'boolean') {\n          return (value === 'true') ? true : false;\n        } else if (defaultValueType === 'number') {\n          return (Number(value)).valueOf();\n        } else if (defaultValueType === 'array') {\n          return Ember.A(JSON.parse(value));\n        }\n        return value;\n      },\n\n\n      /**\n        @private\n        @property _fireQueryParamTransition\n      */\n      _fireQueryParamTransition: function() {\n        this.transitionTo({ queryParams: this.router._queuedQPChanges });\n        this.router._queuedQPChanges = {};\n      },\n\n      /**\n        A hook you can use to reset controller values either when the model\n        changes or the route is exiting.\n\n        ```js\n        App.ArticlesRoute = Ember.Route.extend({\n          // ...\n\n          resetController: function (controller, isExiting, transition) {\n            if (isExiting) {\n              controller.set('page', 1);\n            }\n          }\n        });\n        ```\n\n        @method resetController\n        @param {Controller} controller instance\n        @param {Boolean} isExiting\n        @param {Object} transition\n        @since 1.7.0\n      */\n      resetController: Ember.K,\n\n      /**\n        @private\n\n        @method exit\n      */\n      exit: function() {\n        this.deactivate();\n        this.teardownViews();\n      },\n\n      /**\n        @private\n\n        @method _reset\n        @since 1.7.0\n      */\n      _reset: function(isExiting, transition) {\n        var controller = this.controller;\n\n        controller._qpDelegate = get(this, '_qp.states.inactive');\n\n        this.resetController(controller, isExiting, transition);\n      },\n\n      /**\n        @private\n\n        @method enter\n      */\n      enter: function() {\n        this.activate();\n      },\n\n      /**\n        The name of the view to use by default when rendering this routes template.\n\n        When rendering a template, the route will, by default, determine the\n        template and view to use from the name of the route itself. If you need to\n        define a specific view, set this property.\n\n        This is useful when multiple routes would benefit from using the same view\n        because it doesn't require a custom `renderTemplate` method. For example,\n        the following routes will all render using the `App.PostsListView` view:\n\n        ```js\n        var PostsList = Ember.Route.extend({\n          viewName: 'postsList'\n        });\n\n        App.PostsIndexRoute = PostsList.extend();\n        App.PostsArchivedRoute = PostsList.extend();\n        ```\n\n        @property viewName\n        @type String\n        @default null\n        @since 1.4.0\n      */\n      viewName: null,\n\n      /**\n        The name of the template to use by default when rendering this routes\n        template.\n\n        This is similar with `viewName`, but is useful when you just want a custom\n        template without a view.\n\n        ```js\n        var PostsList = Ember.Route.extend({\n          templateName: 'posts/list'\n        });\n\n        App.PostsIndexRoute = PostsList.extend();\n        App.PostsArchivedRoute = PostsList.extend();\n        ```\n\n        @property templateName\n        @type String\n        @default null\n        @since 1.4.0\n      */\n      templateName: null,\n\n      /**\n        The name of the controller to associate with this route.\n\n        By default, Ember will lookup a route's controller that matches the name\n        of the route (i.e. `App.PostController` for `App.PostRoute`). However,\n        if you would like to define a specific controller to use, you can do so\n        using this property.\n\n        This is useful in many ways, as the controller specified will be:\n\n        * passed to the `setupController` method.\n        * used as the controller for the view being rendered by the route.\n        * returned from a call to `controllerFor` for the route.\n\n        @property controllerName\n        @type String\n        @default null\n        @since 1.4.0\n      */\n      controllerName: null,\n\n      /**\n        The `willTransition` action is fired at the beginning of any\n        attempted transition with a `Transition` object as the sole\n        argument. This action can be used for aborting, redirecting,\n        or decorating the transition from the currently active routes.\n\n        A good example is preventing navigation when a form is\n        half-filled out:\n\n        ```js\n        App.ContactFormRoute = Ember.Route.extend({\n          actions: {\n            willTransition: function(transition) {\n              if (this.controller.get('userHasEnteredData')) {\n                this.controller.displayNavigationConfirm();\n                transition.abort();\n              }\n            }\n          }\n        });\n        ```\n\n        You can also redirect elsewhere by calling\n        `this.transitionTo('elsewhere')` from within `willTransition`.\n        Note that `willTransition` will not be fired for the\n        redirecting `transitionTo`, since `willTransition` doesn't\n        fire when there is already a transition underway. If you want\n        subsequent `willTransition` actions to fire for the redirecting\n        transition, you must first explicitly call\n        `transition.abort()`.\n\n        @event willTransition\n        @param {Transition} transition\n      */\n\n      /**\n        The `didTransition` action is fired after a transition has\n        successfully been completed. This occurs after the normal model\n        hooks (`beforeModel`, `model`, `afterModel`, `setupController`)\n        have resolved. The `didTransition` action has no arguments,\n        however, it can be useful for tracking page views or resetting\n        state on the controller.\n\n        ```js\n        App.LoginRoute = Ember.Route.extend({\n          actions: {\n            didTransition: function() {\n              this.controller.get('errors.base').clear();\n              return true; // Bubble the didTransition event\n            }\n          }\n        });\n        ```\n\n        @event didTransition\n        @since 1.2.0\n      */\n\n      /**\n        The `loading` action is fired on the route when a route's `model`\n        hook returns a promise that is not already resolved. The current\n        `Transition` object is the first parameter and the route that\n        triggered the loading event is the second parameter.\n\n        ```js\n        App.ApplicationRoute = Ember.Route.extend({\n          actions: {\n            loading: function(transition, route) {\n              var view = Ember.View.create({\n                classNames: ['app-loading']\n              })\n              .append();\n\n              this.router.one('didTransition', function () {\n                view.destroy();\n              });\n              return true; // Bubble the loading event\n            }\n          }\n        });\n        ```\n\n        @event loading\n        @param {Transition} transition\n        @param {Ember.Route} route The route that triggered the loading event\n        @since 1.2.0\n      */\n\n      /**\n        When attempting to transition into a route, any of the hooks\n        may return a promise that rejects, at which point an `error`\n        action will be fired on the partially-entered routes, allowing\n        for per-route error handling logic, or shared error handling\n        logic defined on a parent route.\n\n        Here is an example of an error handler that will be invoked\n        for rejected promises from the various hooks on the route,\n        as well as any unhandled errors from child routes:\n\n        ```js\n        App.AdminRoute = Ember.Route.extend({\n          beforeModel: function() {\n            return Ember.RSVP.reject(\"bad things!\");\n          },\n\n          actions: {\n            error: function(error, transition) {\n              // Assuming we got here due to the error in `beforeModel`,\n              // we can expect that error === \"bad things!\",\n              // but a promise model rejecting would also\n              // call this hook, as would any errors encountered\n              // in `afterModel`.\n\n              // The `error` hook is also provided the failed\n              // `transition`, which can be stored and later\n              // `.retry()`d if desired.\n\n              this.transitionTo('login');\n            }\n          }\n        });\n        ```\n\n        `error` actions that bubble up all the way to `ApplicationRoute`\n        will fire a default error handler that logs the error. You can\n        specify your own global default error handler by overriding the\n        `error` handler on `ApplicationRoute`:\n\n        ```js\n        App.ApplicationRoute = Ember.Route.extend({\n          actions: {\n            error: function(error, transition) {\n              this.controllerFor('banner').displayError(error.message);\n            }\n          }\n        });\n        ```\n        @event error\n        @param {Error} error\n        @param {Transition} transition\n      */\n\n      /**\n        The controller associated with this route.\n\n        Example\n\n        ```javascript\n        App.FormRoute = Ember.Route.extend({\n          actions: {\n            willTransition: function(transition) {\n              if (this.controller.get('userHasEnteredData') &&\n                  !confirm(\"Are you sure you want to abandon progress?\")) {\n                transition.abort();\n              } else {\n                // Bubble the `willTransition` action so that\n                // parent routes can decide whether or not to abort.\n                return true;\n              }\n            }\n          }\n        });\n        ```\n\n        @property controller\n        @type Ember.Controller\n        @since 1.6.0\n      */\n\n      _actions: {\n\n        queryParamsDidChange: function(changed, totalPresent, removed) {\n          var totalChanged = keys(changed).concat(keys(removed));\n          for (var i = 0, len = totalChanged.length; i < len; ++i) {\n            var urlKey = totalChanged[i];\n            var options = get(this.queryParams, urlKey) || {};\n            if (get(options, 'refreshModel')) {\n              this.refresh();\n            }\n          }\n\n          return true;\n        },\n\n        finalizeQueryParamChange: function(params, finalParams, transition) {\n          if (this.routeName !== 'application') { return true; }\n\n          // Transition object is absent for intermediate transitions.\n          if (!transition) { return; }\n\n          var handlerInfos = transition.state.handlerInfos;\n          var router = this.router;\n          var qpMeta = router._queryParamsFor(handlerInfos[handlerInfos.length-1].name);\n          var changes = router._qpUpdates;\n          var replaceUrl;\n\n          stashParamNames(router, handlerInfos);\n\n          for (var i = 0, len = qpMeta.qps.length; i < len; ++i) {\n            var qp = qpMeta.qps[i];\n            var route = qp.route;\n            var controller = route.controller;\n            var presentKey = qp.urlKey in params && qp.urlKey;\n\n            // Do a reverse lookup to see if the changed query\n            // param URL key corresponds to a QP property on\n            // this controller.\n            var value, svalue;\n            if (changes && qp.urlKey in changes) {\n              // Value updated in/before setupController\n              value = get(controller, qp.prop);\n              svalue = route.serializeQueryParam(value, qp.urlKey, qp.type);\n            } else {\n              if (presentKey) {\n                svalue = params[presentKey];\n                value = route.deserializeQueryParam(svalue, qp.urlKey, qp.type);\n              } else {\n                // No QP provided; use default value.\n                svalue = qp.sdef;\n                value = copyDefaultValue(qp.def);\n              }\n            }\n\n            controller._qpDelegate = get(this, '_qp.states.inactive');\n\n            var thisQueryParamChanged = (svalue !== qp.svalue);\n            if (thisQueryParamChanged) {\n              var options = get(route, 'queryParams.' + qp.urlKey) || {};\n\n              if (transition.queryParamsOnly && replaceUrl !== false) {\n                var replaceConfigValue = get(options, 'replace');\n                if (replaceConfigValue) {\n                  replaceUrl = true;\n                } else if (replaceConfigValue === false) {\n                  // Explicit pushState wins over any other replaceStates.\n                  replaceUrl = false;\n                }\n              }\n\n              set(controller, qp.prop, value);\n            }\n\n            // Stash current serialized value of controller.\n            qp.svalue = svalue;\n\n            var thisQueryParamHasDefaultValue = (qp.sdef === svalue);\n            if (!thisQueryParamHasDefaultValue) {\n              finalParams.push({\n                value: svalue,\n                visible: true,\n                key: presentKey || qp.urlKey\n              });\n            }\n          }\n\n          if (replaceUrl) {\n            transition.method('replace');\n          }\n\n          forEach(qpMeta.qps, function(qp) {\n            var routeQpMeta = get(qp.route, '_qp');\n            var finalizedController = qp.route.controller;\n            finalizedController._qpDelegate = get(routeQpMeta, 'states.active');\n          });\n\n          router._qpUpdates = null;\n        }\n      },\n\n      /**\n        @deprecated\n\n        Please use `actions` instead.\n        @method events\n      */\n      events: null,\n\n      /**\n        This hook is executed when the router completely exits this route. It is\n        not executed when the model for the route changes.\n\n        @method deactivate\n      */\n      deactivate: Ember.K,\n\n      /**\n        This hook is executed when the router enters the route. It is not executed\n        when the model for the route changes.\n\n        @method activate\n      */\n      activate: Ember.K,\n\n      /**\n        Transition the application into another route. The route may\n        be either a single route or route path:\n\n        ```javascript\n        this.transitionTo('blogPosts');\n        this.transitionTo('blogPosts.recentEntries');\n        ```\n\n        Optionally supply a model for the route in question. The model\n        will be serialized into the URL using the `serialize` hook of\n        the route:\n\n        ```javascript\n        this.transitionTo('blogPost', aPost);\n        ```\n\n        If a literal is passed (such as a number or a string), it will\n        be treated as an identifier instead. In this case, the `model`\n        hook of the route will be triggered:\n\n        ```javascript\n        this.transitionTo('blogPost', 1);\n        ```\n\n        Multiple models will be applied last to first recursively up the\n        resource tree.\n\n        ```javascript\n        App.Router.map(function() {\n          this.resource('blogPost', {path:':blogPostId'}, function(){\n            this.resource('blogComment', {path: ':blogCommentId'});\n          });\n        });\n\n        this.transitionTo('blogComment', aPost, aComment);\n        this.transitionTo('blogComment', 1, 13);\n        ```\n\n        It is also possible to pass a URL (a string that starts with a\n        `/`). This is intended for testing and debugging purposes and\n        should rarely be used in production code.\n\n        ```javascript\n        this.transitionTo('/');\n        this.transitionTo('/blog/post/1/comment/13');\n        ```\n\n        See also 'replaceWith'.\n\n        Simple Transition Example\n\n        ```javascript\n        App.Router.map(function() {\n          this.route(\"index\");\n          this.route(\"secret\");\n          this.route(\"fourOhFour\", { path: \"*:\"});\n        });\n\n        App.IndexRoute = Ember.Route.extend({\n          actions: {\n            moveToSecret: function(context){\n              if (authorized()){\n                this.transitionTo('secret', context);\n              }\n                this.transitionTo('fourOhFour');\n            }\n          }\n        });\n        ```\n\n        Transition to a nested route\n\n        ```javascript\n        App.Router.map(function() {\n          this.resource('articles', { path: '/articles' }, function() {\n            this.route('new');\n          });\n        });\n\n        App.IndexRoute = Ember.Route.extend({\n          actions: {\n            transitionToNewArticle: function() {\n              this.transitionTo('articles.new');\n            }\n          }\n        });\n        ```\n\n        Multiple Models Example\n\n        ```javascript\n        App.Router.map(function() {\n          this.route(\"index\");\n          this.resource('breakfast', {path:':breakfastId'}, function(){\n            this.resource('cereal', {path: ':cerealId'});\n          });\n        });\n\n        App.IndexRoute = Ember.Route.extend({\n          actions: {\n            moveToChocolateCereal: function(){\n              var cereal = { cerealId: \"ChocolateYumminess\"},\n                  breakfast = {breakfastId: \"CerealAndMilk\"};\n\n              this.transitionTo('cereal', breakfast, cereal);\n            }\n          }\n        });\n        ```\n\n        @method transitionTo\n        @param {String} name the name of the route or a URL\n        @param {...Object} models the model(s) or identifier(s) to be used while\n          transitioning to the route.\n        @return {Transition} the transition object associated with this\n          attempted transition\n      */\n      transitionTo: function(name, context) {\n        var router = this.router;\n        return router.transitionTo.apply(router, arguments);\n      },\n\n      /**\n        Perform a synchronous transition into another route without attempting\n        to resolve promises, update the URL, or abort any currently active\n        asynchronous transitions (i.e. regular transitions caused by\n        `transitionTo` or URL changes).\n\n        This method is handy for performing intermediate transitions on the\n        way to a final destination route, and is called internally by the\n        default implementations of the `error` and `loading` handlers.\n\n        @method intermediateTransitionTo\n        @param {String} name the name of the route\n        @param {...Object} models the model(s) to be used while transitioning\n        to the route.\n        @since 1.2.0\n       */\n      intermediateTransitionTo: function() {\n        var router = this.router;\n        router.intermediateTransitionTo.apply(router, arguments);\n      },\n\n      /**\n        Refresh the model on this route and any child routes, firing the\n        `beforeModel`, `model`, and `afterModel` hooks in a similar fashion\n        to how routes are entered when transitioning in from other route.\n        The current route params (e.g. `article_id`) will be passed in\n        to the respective model hooks, and if a different model is returned,\n        `setupController` and associated route hooks will re-fire as well.\n\n        An example usage of this method is re-querying the server for the\n        latest information using the same parameters as when the route\n        was first entered.\n\n        Note that this will cause `model` hooks to fire even on routes\n        that were provided a model object when the route was initially\n        entered.\n\n        @method refresh\n        @return {Transition} the transition object associated with this\n          attempted transition\n        @since 1.4.0\n       */\n      refresh: function() {\n        return this.router.router.refresh(this);\n      },\n\n      /**\n        Transition into another route while replacing the current URL, if possible.\n        This will replace the current history entry instead of adding a new one.\n        Beside that, it is identical to `transitionTo` in all other respects. See\n        'transitionTo' for additional information regarding multiple models.\n\n        Example\n\n        ```javascript\n        App.Router.map(function() {\n          this.route(\"index\");\n          this.route(\"secret\");\n        });\n\n        App.SecretRoute = Ember.Route.extend({\n          afterModel: function() {\n            if (!authorized()){\n              this.replaceWith('index');\n            }\n          }\n        });\n        ```\n\n        @method replaceWith\n        @param {String} name the name of the route or a URL\n        @param {...Object} models the model(s) or identifier(s) to be used while\n          transitioning to the route.\n        @return {Transition} the transition object associated with this\n          attempted transition\n      */\n      replaceWith: function() {\n        var router = this.router;\n        return router.replaceWith.apply(router, arguments);\n      },\n\n      /**\n        Sends an action to the router, which will delegate it to the currently\n        active route hierarchy per the bubbling rules explained under `actions`.\n\n        Example\n\n        ```javascript\n        App.Router.map(function() {\n          this.route(\"index\");\n        });\n\n        App.ApplicationRoute = Ember.Route.extend({\n          actions: {\n            track: function(arg) {\n              console.log(arg, 'was clicked');\n            }\n          }\n        });\n\n        App.IndexRoute = Ember.Route.extend({\n          actions: {\n            trackIfDebug: function(arg) {\n              if (debug) {\n                this.send('track', arg);\n              }\n            }\n          }\n        });\n        ```\n\n        @method send\n        @param {String} name the name of the action to trigger\n        @param {...*} args\n      */\n      send: function() {\n        return this.router.send.apply(this.router, arguments);\n      },\n\n      /**\n        This hook is the entry point for router.js\n\n        @private\n        @method setup\n      */\n      setup: function(context, transition) {\n        var controllerName = this.controllerName || this.routeName;\n        var controller = this.controllerFor(controllerName, true);\n\n        if (!controller) {\n          controller =  this.generateController(controllerName, context);\n        }\n\n        // Assign the route's controller so that it can more easily be\n        // referenced in action handlers\n        this.controller = controller;\n\n        if (this.setupControllers) {\n          Ember.deprecate(\"Ember.Route.setupControllers is deprecated. Please use Ember.Route.setupController(controller, model) instead.\");\n          this.setupControllers(controller, context);\n        } else {\n          var states = get(this, '_qp.states');\n          if (transition) {\n            // Update the model dep values used to calculate cache keys.\n            stashParamNames(this.router, transition.state.handlerInfos);\n            controller._qpDelegate = states.changingKeys;\n            controller._updateCacheParams(transition.params);\n          }\n          controller._qpDelegate = states.allowOverrides;\n\n          if (transition) {\n            var qpValues = getQueryParamsFor(this, transition.state);\n            controller.setProperties(qpValues);\n          }\n\n          this.setupController(controller, context, transition);\n        }\n\n        if (this.renderTemplates) {\n          Ember.deprecate(\"Ember.Route.renderTemplates is deprecated. Please use Ember.Route.renderTemplate(controller, model) instead.\");\n          this.renderTemplates(context);\n        } else {\n          this.renderTemplate(controller, context);\n        }\n      },\n\n      /**\n        This hook is the first of the route entry validation hooks\n        called when an attempt is made to transition into a route\n        or one of its children. It is called before `model` and\n        `afterModel`, and is appropriate for cases when:\n\n        1) A decision can be made to redirect elsewhere without\n           needing to resolve the model first.\n        2) Any async operations need to occur first before the\n           model is attempted to be resolved.\n\n        This hook is provided the current `transition` attempt\n        as a parameter, which can be used to `.abort()` the transition,\n        save it for a later `.retry()`, or retrieve values set\n        on it from a previous hook. You can also just call\n        `this.transitionTo` to another route to implicitly\n        abort the `transition`.\n\n        You can return a promise from this hook to pause the\n        transition until the promise resolves (or rejects). This could\n        be useful, for instance, for retrieving async code from\n        the server that is required to enter a route.\n\n        ```js\n        App.PostRoute = Ember.Route.extend({\n          beforeModel: function(transition) {\n            if (!App.Post) {\n              return Ember.$.getScript('/models/post.js');\n            }\n          }\n        });\n        ```\n\n        If `App.Post` doesn't exist in the above example,\n        `beforeModel` will use jQuery's `getScript`, which\n        returns a promise that resolves after the server has\n        successfully retrieved and executed the code from the\n        server. Note that if an error were to occur, it would\n        be passed to the `error` hook on `Ember.Route`, but\n        it's also possible to handle errors specific to\n        `beforeModel` right from within the hook (to distinguish\n        from the shared error handling behavior of the `error`\n        hook):\n\n        ```js\n        App.PostRoute = Ember.Route.extend({\n          beforeModel: function(transition) {\n            if (!App.Post) {\n              var self = this;\n              return Ember.$.getScript('post.js').then(null, function(e) {\n                self.transitionTo('help');\n\n                // Note that the above transitionTo will implicitly\n                // halt the transition. If you were to return\n                // nothing from this promise reject handler,\n                // according to promise semantics, that would\n                // convert the reject into a resolve and the\n                // transition would continue. To propagate the\n                // error so that it'd be handled by the `error`\n                // hook, you would have to either\n                return Ember.RSVP.reject(e);\n              });\n            }\n          }\n        });\n        ```\n\n        @method beforeModel\n        @param {Transition} transition\n        @param {Object} queryParams the active query params for this route\n        @return {Promise} if the value returned from this hook is\n          a promise, the transition will pause until the transition\n          resolves. Otherwise, non-promise return values are not\n          utilized in any way.\n      */\n      beforeModel: Ember.K,\n\n      /**\n        This hook is called after this route's model has resolved.\n        It follows identical async/promise semantics to `beforeModel`\n        but is provided the route's resolved model in addition to\n        the `transition`, and is therefore suited to performing\n        logic that can only take place after the model has already\n        resolved.\n\n        ```js\n        App.PostsRoute = Ember.Route.extend({\n          afterModel: function(posts, transition) {\n            if (posts.get('length') === 1) {\n              this.transitionTo('post.show', posts.get('firstObject'));\n            }\n          }\n        });\n        ```\n\n        Refer to documentation for `beforeModel` for a description\n        of transition-pausing semantics when a promise is returned\n        from this hook.\n\n        @method afterModel\n        @param {Object} resolvedModel the value returned from `model`,\n          or its resolved value if it was a promise\n        @param {Transition} transition\n        @param {Object} queryParams the active query params for this handler\n        @return {Promise} if the value returned from this hook is\n          a promise, the transition will pause until the transition\n          resolves. Otherwise, non-promise return values are not\n          utilized in any way.\n       */\n      afterModel: Ember.K,\n\n      /**\n        A hook you can implement to optionally redirect to another route.\n\n        If you call `this.transitionTo` from inside of this hook, this route\n        will not be entered in favor of the other hook.\n\n        `redirect` and `afterModel` behave very similarly and are\n        called almost at the same time, but they have an important\n        distinction in the case that, from one of these hooks, a\n        redirect into a child route of this route occurs: redirects\n        from `afterModel` essentially invalidate the current attempt\n        to enter this route, and will result in this route's `beforeModel`,\n        `model`, and `afterModel` hooks being fired again within\n        the new, redirecting transition. Redirects that occur within\n        the `redirect` hook, on the other hand, will _not_ cause\n        these hooks to be fired again the second time around; in\n        other words, by the time the `redirect` hook has been called,\n        both the resolved model and attempted entry into this route\n        are considered to be fully validated.\n\n        @method redirect\n        @param {Object} model the model for this route\n        @param {Transition} transition the transition object associated with the current transition\n      */\n      redirect: Ember.K,\n\n      /**\n        Called when the context is changed by router.js.\n\n        @private\n        @method contextDidChange\n      */\n      contextDidChange: function() {\n        this.currentModel = this.context;\n      },\n\n      /**\n        A hook you can implement to convert the URL into the model for\n        this route.\n\n        ```js\n        App.Router.map(function() {\n          this.resource('post', {path: '/posts/:post_id'});\n        });\n        ```\n\n        The model for the `post` route is `store.find('post', params.post_id)`.\n\n        By default, if your route has a dynamic segment ending in `_id`:\n\n        * The model class is determined from the segment (`post_id`'s\n          class is `App.Post`)\n        * The find method is called on the model class with the value of\n          the dynamic segment.\n\n        Note that for routes with dynamic segments, this hook is not always\n        executed. If the route is entered through a transition (e.g. when\n        using the `link-to` Handlebars helper or the `transitionTo` method\n        of routes), and a model context is already provided this hook\n        is not called.\n\n        A model context does not include a primitive string or number,\n        which does cause the model hook to be called.\n\n        Routes without dynamic segments will always execute the model hook.\n\n        ```js\n        // no dynamic segment, model hook always called\n        this.transitionTo('posts');\n\n        // model passed in, so model hook not called\n        thePost = store.find('post', 1);\n        this.transitionTo('post', thePost);\n\n        // integer passed in, model hook is called\n        this.transitionTo('post', 1);\n        ```\n\n\n        This hook follows the asynchronous/promise semantics\n        described in the documentation for `beforeModel`. In particular,\n        if a promise returned from `model` fails, the error will be\n        handled by the `error` hook on `Ember.Route`.\n\n        Example\n\n        ```js\n        App.PostRoute = Ember.Route.extend({\n          model: function(params) {\n            return this.store.find('post', params.post_id);\n          }\n        });\n        ```\n\n        @method model\n        @param {Object} params the parameters extracted from the URL\n        @param {Transition} transition\n        @param {Object} queryParams the query params for this route\n        @return {Object|Promise} the model for this route. If\n          a promise is returned, the transition will pause until\n          the promise resolves, and the resolved value of the promise\n          will be used as the model for this route.\n      */\n      model: function(params, transition) {\n        var match, name, sawParams, value;\n\n        var queryParams = get(this, '_qp.map');\n\n        for (var prop in params) {\n          if (prop === 'queryParams' || (queryParams && prop in queryParams)) {\n            continue;\n          }\n\n          if (match = prop.match(/^(.*)_id$/)) {\n            name = match[1];\n            value = params[prop];\n          }\n          sawParams = true;\n        }\n\n        if (!name && sawParams) { return copy(params); }\n        else if (!name) {\n          if (transition.resolveIndex < 1) { return; }\n\n          var parentModel = transition.state.handlerInfos[transition.resolveIndex-1].context;\n\n          return parentModel;\n        }\n\n        return this.findModel(name, value);\n      },\n\n      /**\n        @private\n        @method deserialize\n        @param {Object} params the parameters extracted from the URL\n        @param {Transition} transition\n        @return {Object|Promise} the model for this route.\n\n        Router.js hook.\n       */\n      deserialize: function(params, transition) {\n        return this.model(this.paramsFor(this.routeName), transition);\n      },\n\n      /**\n\n        @method findModel\n        @param {String} type the model type\n        @param {Object} value the value passed to find\n      */\n      findModel: function(){\n        var store = get(this, 'store');\n        return store.find.apply(store, arguments);\n      },\n\n      /**\n        Store property provides a hook for data persistence libraries to inject themselves.\n\n        By default, this store property provides the exact same functionality previously\n        in the model hook.\n\n        Currently, the required interface is:\n\n        `store.find(modelName, findArguments)`\n\n        @method store\n        @param {Object} store\n      */\n      store: computed(function(){\n        var container = this.container;\n        var routeName = this.routeName;\n        var namespace = get(this, 'router.namespace');\n\n        return {\n          find: function(name, value) {\n            var modelClass = container.lookupFactory('model:' + name);\n\n            Ember.assert(\"You used the dynamic segment \" + name + \"_id in your route \" +\n                         routeName + \", but \" + namespace + \".\" + classify(name) +\n                         \" did not exist and you did not override your route's `model` \" +\n                         \"hook.\", modelClass);\n\n            if (!modelClass) { return; }\n\n            Ember.assert(classify(name) + ' has no method `find`.', typeof modelClass.find === 'function');\n\n            return modelClass.find(value);\n          }\n        };\n      }),\n\n      /**\n        A hook you can implement to convert the route's model into parameters\n        for the URL.\n\n        ```js\n        App.Router.map(function() {\n          this.resource('post', {path: '/posts/:post_id'});\n        });\n\n        App.PostRoute = Ember.Route.extend({\n          model: function(params) {\n            // the server returns `{ id: 12 }`\n            return jQuery.getJSON(\"/posts/\" + params.post_id);\n          },\n\n          serialize: function(model) {\n            // this will make the URL `/posts/12`\n            return { post_id: model.id };\n          }\n        });\n        ```\n\n        The default `serialize` method will insert the model's `id` into the\n        route's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.\n        If the route has multiple dynamic segments or does not contain '_id', `serialize`\n        will return `Ember.getProperties(model, params)`\n\n        This method is called when `transitionTo` is called with a context\n        in order to populate the URL.\n\n        @method serialize\n        @param {Object} model the route's model\n        @param {Array} params an Array of parameter names for the current\n          route (in the example, `['post_id']`.\n        @return {Object} the serialized parameters\n      */\n      serialize: function(model, params) {\n        if (params.length < 1) { return; }\n        if (!model) { return; }\n\n        var name = params[0], object = {};\n\n        if (/_id$/.test(name) && params.length === 1) {\n          object[name] = get(model, \"id\");\n        } else {\n          object = getProperties(model, params);\n        }\n\n        return object;\n      },\n\n      /**\n        A hook you can use to setup the controller for the current route.\n\n        This method is called with the controller for the current route and the\n        model supplied by the `model` hook.\n\n        By default, the `setupController` hook sets the `model` property of\n        the controller to the `model`.\n\n        If you implement the `setupController` hook in your Route, it will\n        prevent this default behavior. If you want to preserve that behavior\n        when implementing your `setupController` function, make sure to call\n        `_super`:\n\n        ```js\n        App.PhotosRoute = Ember.Route.extend({\n          model: function() {\n            return this.store.find('photo');\n          },\n\n          setupController: function (controller, model) {\n            // Call _super for default behavior\n            this._super(controller, model);\n            // Implement your custom setup after\n            this.controllerFor('application').set('showingPhotos', true);\n          }\n        });\n        ```\n\n        This means that your template will get a proxy for the model as its\n        context, and you can act as though the model itself was the context.\n\n        The provided controller will be one resolved based on the name\n        of this route.\n\n        If no explicit controller is defined, Ember will automatically create\n        an appropriate controller for the model.\n\n        * if the model is an `Ember.Array` (including record arrays from Ember\n          Data), the controller is an `Ember.ArrayController`.\n        * otherwise, the controller is an `Ember.ObjectController`.\n\n        As an example, consider the router:\n\n        ```js\n        App.Router.map(function() {\n          this.resource('post', {path: '/posts/:post_id'});\n        });\n        ```\n\n        For the `post` route, a controller named `App.PostController` would\n        be used if it is defined. If it is not defined, an `Ember.ObjectController`\n        instance would be used.\n\n        Example\n\n        ```js\n        App.PostRoute = Ember.Route.extend({\n          setupController: function(controller, model) {\n            controller.set('model', model);\n          }\n        });\n        ```\n\n        @method setupController\n        @param {Controller} controller instance\n        @param {Object} model\n      */\n      setupController: function(controller, context, transition) {\n        if (controller && (context !== undefined)) {\n          set(controller, 'model', context);\n        }\n      },\n\n      /**\n        Returns the controller for a particular route or name.\n\n        The controller instance must already have been created, either through entering the\n        associated route or using `generateController`.\n\n        ```js\n        App.PostRoute = Ember.Route.extend({\n          setupController: function(controller, post) {\n            this._super(controller, post);\n            this.controllerFor('posts').set('currentPost', post);\n          }\n        });\n        ```\n\n        @method controllerFor\n        @param {String} name the name of the route or controller\n        @return {Ember.Controller}\n      */\n      controllerFor: function(name, _skipAssert) {\n        var container = this.container;\n        var route = container.lookup('route:'+name);\n        var controller;\n\n        if (route && route.controllerName) {\n          name = route.controllerName;\n        }\n\n        controller = container.lookup('controller:' + name);\n\n        // NOTE: We're specifically checking that skipAssert is true, because according\n        //   to the old API the second parameter was model. We do not want people who\n        //   passed a model to skip the assertion.\n        Ember.assert(\"The controller named '\"+name+\"' could not be found. Make sure \" +\n                     \"that this route exists and has already been entered at least \" +\n                     \"once. If you are accessing a controller not associated with a \" +\n                     \"route, make sure the controller class is explicitly defined.\",\n                     controller || _skipAssert === true);\n\n        return controller;\n      },\n\n      /**\n        Generates a controller for a route.\n\n        If the optional model is passed then the controller type is determined automatically,\n        e.g., an ArrayController for arrays.\n\n        Example\n\n        ```js\n        App.PostRoute = Ember.Route.extend({\n          setupController: function(controller, post) {\n            this._super(controller, post);\n            this.generateController('posts', post);\n          }\n        });\n        ```\n\n        @method generateController\n        @param {String} name the name of the controller\n        @param {Object} model the model to infer the type of the controller (optional)\n      */\n      generateController: function(name, model) {\n        var container = this.container;\n\n        model = model || this.modelFor(name);\n\n        return generateController(container, name, model);\n      },\n\n      /**\n        Returns the model of a parent (or any ancestor) route\n        in a route hierarchy.  During a transition, all routes\n        must resolve a model object, and if a route\n        needs access to a parent route's model in order to\n        resolve a model (or just reuse the model from a parent),\n        it can call `this.modelFor(theNameOfParentRoute)` to\n        retrieve it.\n\n        Example\n\n        ```js\n        App.Router.map(function() {\n            this.resource('post', { path: '/post/:post_id' }, function() {\n                this.resource('comments');\n            });\n        });\n\n        App.CommentsRoute = Ember.Route.extend({\n            afterModel: function() {\n                this.set('post', this.modelFor('post'));\n            }\n        });\n        ```\n\n        @method modelFor\n        @param {String} name the name of the route\n        @return {Object} the model object\n      */\n      modelFor: function(name) {\n        var route = this.container.lookup('route:' + name);\n        var transition = this.router ? this.router.router.activeTransition : null;\n\n        // If we are mid-transition, we want to try and look up\n        // resolved parent contexts on the current transitionEvent.\n        if (transition) {\n          var modelLookupName = (route && route.routeName) || name;\n          if (transition.resolvedModels.hasOwnProperty(modelLookupName)) {\n            return transition.resolvedModels[modelLookupName];\n          }\n        }\n\n        return route && route.currentModel;\n      },\n\n      /**\n        A hook you can use to render the template for the current route.\n\n        This method is called with the controller for the current route and the\n        model supplied by the `model` hook. By default, it renders the route's\n        template, configured with the controller for the route.\n\n        This method can be overridden to set up and render additional or\n        alternative templates.\n\n        ```js\n        App.PostsRoute = Ember.Route.extend({\n          renderTemplate: function(controller, model) {\n            var favController = this.controllerFor('favoritePost');\n\n            // Render the `favoritePost` template into\n            // the outlet `posts`, and display the `favoritePost`\n            // controller.\n            this.render('favoritePost', {\n              outlet: 'posts',\n              controller: favController\n            });\n          }\n        });\n        ```\n\n        @method renderTemplate\n        @param {Object} controller the route's controller\n        @param {Object} model the route's model\n      */\n      renderTemplate: function(controller, model) {\n        this.render();\n      },\n\n      /**\n        `render` is used to render a template into a region of another template\n        (indicated by an `{{outlet}}`). `render` is used both during the entry\n        phase of routing (via the `renderTemplate` hook) and later in response to\n        user interaction.\n\n        For example, given the following minimal router and templates:\n\n        ```js\n        Router.map(function() {\n          this.resource('photos');\n        });\n        ```\n\n        ```handlebars\n        <!-- application.hbs -->\n        <div class='something-in-the-app-hbs'>\n          {{outlet \"anOutletName\"}}\n        </div>\n        ```\n\n        ```handlebars\n        <!-- photos.hbs -->\n        <h1>Photos</h1>\n        ```\n\n        You can render `photos.hbs` into the `\"anOutletName\"` outlet of\n        `application.hbs` by calling `render`:\n\n        ```js\n        // posts route\n        Ember.Route.extend({\n          renderTemplate: function(){\n            this.render('photos', {\n              into: 'application',\n              outlet: 'anOutletName'\n            })\n          }\n        });\n        ```\n\n        `render` additionally allows you to supply which `view`, `controller`, and\n        `model` objects should be loaded and associated with the rendered template.\n\n\n        ```js\n        // posts route\n        Ember.Route.extend({\n          renderTemplate: function(controller, model){\n            this.render('posts', {    // the template to render, referenced by name\n              into: 'application',    // the template to render into, referenced by name\n              outlet: 'anOutletName', // the outlet inside `options.template` to render into.\n              view: 'aViewName',      // the view to use for this template, referenced by name\n              controller: 'someControllerName', // the controller to use for this template, referenced by name\n              model: model            // the model to set on `options.controller`.\n            })\n          }\n        });\n        ```\n\n        The string values provided for the template name, view, and controller\n        will eventually pass through to the resolver for lookup. See\n        Ember.Resolver for how these are mapped to JavaScript objects in your\n        application.\n\n        Not all options need to be passed to `render`. Default values will be used\n        based on the name of the route specified in the router or the Route's\n        `controllerName`, `viewName` and and `templateName` properties.\n\n        For example:\n\n        ```js\n        // router\n        Router.map(function() {\n          this.route('index');\n          this.resource('post', {path: '/posts/:post_id'});\n        });\n        ```\n\n        ```js\n        // post route\n        PostRoute = App.Route.extend({\n          renderTemplate: function() {\n            this.render(); // all defaults apply\n          }\n        });\n        ```\n\n        The name of the `PostRoute`, defined by the router, is `post`.\n\n        The following equivalent default options will be applied when\n        the Route calls `render`:\n\n        ```js\n        //\n        this.render('post', {  // the template name associated with 'post' Route\n          into: 'application', // the parent route to 'post' Route\n          outlet: 'main',      // {{outlet}} and {{outlet 'main' are synonymous}},\n          view: 'post',        // the view associated with the 'post' Route\n          controller: 'post',  // the controller associated with the 'post' Route\n        })\n        ```\n\n        By default the controller's `model` will be the route's model, so it does not\n        need to be passed unless you wish to change which model is being used.\n\n        @method render\n        @param {String} name the name of the template to render\n        @param {Object} [options] the options\n        @param {String} [options.into] the template to render into,\n                        referenced by name. Defaults to the parent template\n        @param {String} [options.outlet] the outlet inside `options.template` to render into.\n                        Defaults to 'main'\n        @param {String} [options.controller] the controller to use for this template,\n                        referenced by name. Defaults to the Route's paired controller\n        @param {String} [options.model] the model object to set on `options.controller`\n                        Defaults to the return value of the Route's model hook\n      */\n      render: function(name, options) {\n        Ember.assert(\"The name in the given arguments is undefined\", arguments.length > 0 ? !isNone(arguments[0]) : true);\n\n        var namePassed = typeof name === 'string' && !!name;\n\n        if (typeof name === 'object' && !options) {\n          options = name;\n          name = this.routeName;\n        }\n\n        options = options || {};\n        options.namePassed = namePassed;\n\n        var templateName;\n\n        if (name) {\n          name = name.replace(/\\//g, '.');\n          templateName = name;\n        } else {\n          name = this.routeName;\n          templateName = this.templateName || name;\n        }\n\n        var viewName = options.view || namePassed && name || this.viewName || name;\n\n        var container = this.container;\n        var view = container.lookup('view:' + viewName);\n        var template = view ? view.get('template') : null;\n\n        if (!template) {\n          template = container.lookup('template:' + templateName);\n        }\n\n        if (!view && !template) {\n          Ember.assert(\"Could not find \\\"\" + name + \"\\\" template or view.\", Ember.isEmpty(arguments[0]));\n          if (get(this.router, 'namespace.LOG_VIEW_LOOKUPS')) {\n            Ember.Logger.info(\"Could not find \\\"\" + name + \"\\\" template or view. Nothing will be rendered\", { fullName: 'template:' + name });\n          }\n          return;\n        }\n\n        options = normalizeOptions(this, name, template, options);\n        view = setupView(view, container, options);\n\n        if (options.outlet === 'main') { this.lastRenderedTemplate = name; }\n\n        appendView(this, view, options);\n      },\n\n      /**\n        Disconnects a view that has been rendered into an outlet.\n\n        You may pass any or all of the following options to `disconnectOutlet`:\n\n        * `outlet`: the name of the outlet to clear (default: 'main')\n        * `parentView`: the name of the view containing the outlet to clear\n           (default: the view rendered by the parent route)\n\n        Example:\n\n        ```js\n        App.ApplicationRoute = App.Route.extend({\n          actions: {\n            showModal: function(evt) {\n              this.render(evt.modalName, {\n                outlet: 'modal',\n                into: 'application'\n              });\n            },\n            hideModal: function(evt) {\n              this.disconnectOutlet({\n                outlet: 'modal',\n                parentView: 'application'\n              });\n            }\n          }\n        });\n        ```\n\n        Alternatively, you can pass the `outlet` name directly as a string.\n\n        Example:\n\n        ```js\n        hideModal: function(evt) {\n          this.disconnectOutlet('modal');\n        }\n        ```\n\n        @method disconnectOutlet\n        @param {Object|String} options the options hash or outlet name\n      */\n      disconnectOutlet: function(options) {\n        if (!options || typeof options === \"string\") {\n          var outletName = options;\n          options = {};\n          options.outlet = outletName;\n        }\n        options.parentView = options.parentView ? options.parentView.replace(/\\//g, '.') : parentTemplate(this);\n        options.outlet = options.outlet || 'main';\n\n        var parentView = this.router._lookupActiveView(options.parentView);\n        if (parentView) { parentView.disconnectOutlet(options.outlet); }\n      },\n\n      willDestroy: function() {\n        this.teardownViews();\n      },\n\n      /**\n        @private\n\n        @method teardownViews\n      */\n      teardownViews: function() {\n        // Tear down the top level view\n        if (this.teardownTopLevelView) { this.teardownTopLevelView(); }\n\n        // Tear down any outlets rendered with 'into'\n        var teardownOutletViews = this.teardownOutletViews || [];\n        forEach(teardownOutletViews, function(teardownOutletView) {\n          teardownOutletView();\n        });\n\n        delete this.teardownTopLevelView;\n        delete this.teardownOutletViews;\n        delete this.lastRenderedTemplate;\n      }\n    });\n\n    var defaultQPMeta = {\n      qps: [],\n      map: {},\n      states: {}\n    };\n\n    function parentRoute(route) {\n      var handlerInfo = handlerInfoFor(route, route.router.router.state.handlerInfos, -1);\n      return handlerInfo && handlerInfo.handler;\n    }\n\n    function handlerInfoFor(route, handlerInfos, _offset) {\n      if (!handlerInfos) { return; }\n\n      var offset = _offset || 0, current;\n      for (var i=0, l=handlerInfos.length; i<l; i++) {\n        current = handlerInfos[i].handler;\n        if (current === route) { return handlerInfos[i+offset]; }\n      }\n    }\n\n    function parentTemplate(route) {\n      var parent = parentRoute(route), template;\n\n      if (!parent) { return; }\n\n      if (template = parent.lastRenderedTemplate) {\n        return template;\n      } else {\n        return parentTemplate(parent);\n      }\n    }\n\n    function normalizeOptions(route, name, template, options) {\n      options = options || {};\n      options.into = options.into ? options.into.replace(/\\//g, '.') : parentTemplate(route);\n      options.outlet = options.outlet || 'main';\n      options.name = name;\n      options.template = template;\n      options.LOG_VIEW_LOOKUPS = get(route.router, 'namespace.LOG_VIEW_LOOKUPS');\n\n      Ember.assert(\"An outlet (\"+options.outlet+\") was specified but was not found.\", options.outlet === 'main' || options.into);\n\n      var controller = options.controller;\n      var model = options.model;\n      var namedController;\n\n      if (options.controller) {\n        controller = options.controller;\n      } else if (options.namePassed) {\n        controller = route.container.lookup('controller:' + name) || route.controllerName || route.routeName;\n      } else {\n        controller = route.controllerName || route.container.lookup('controller:' + name);\n      }\n\n      if (typeof controller === 'string') {\n        var controllerName = controller;\n        controller = route.container.lookup('controller:' + controllerName);\n        if (!controller) {\n          throw new EmberError(\"You passed `controller: '\" + controllerName + \"'` into the `render` method, but no such controller could be found.\");\n        }\n      }\n\n      if (model) {\n        controller.set('model', model);\n      }\n\n      options.controller = controller;\n\n      return options;\n    }\n\n    function setupView(view, container, options) {\n      if (view) {\n        if (options.LOG_VIEW_LOOKUPS) {\n          Ember.Logger.info(\"Rendering \" + options.name + \" with \" + view, { fullName: 'view:' + options.name });\n        }\n      } else {\n        var defaultView = options.into ? 'view:default' : 'view:toplevel';\n        view = container.lookup(defaultView);\n        if (options.LOG_VIEW_LOOKUPS) {\n          Ember.Logger.info(\"Rendering \" + options.name + \" with default view \" + view, { fullName: 'view:' + options.name });\n        }\n      }\n\n      if (!get(view, 'templateName')) {\n        set(view, 'template', options.template);\n\n        set(view, '_debugTemplateName', options.name);\n      }\n\n      set(view, 'renderedName', options.name);\n      set(view, 'controller', options.controller);\n\n      return view;\n    }\n\n    function appendView(route, view, options) {\n      if (options.into) {\n        var parentView = route.router._lookupActiveView(options.into);\n        var teardownOutletView = generateOutletTeardown(parentView, options.outlet);\n        if (!route.teardownOutletViews) { route.teardownOutletViews = []; }\n        replace(route.teardownOutletViews, 0, 0, [teardownOutletView]);\n        parentView.connectOutlet(options.outlet, view);\n      } else {\n        var rootElement = get(route, 'router.namespace.rootElement');\n        // tear down view if one is already rendered\n        if (route.teardownTopLevelView) {\n          route.teardownTopLevelView();\n        }\n        route.router._connectActiveView(options.name, view);\n        route.teardownTopLevelView = generateTopLevelTeardown(view);\n        view.appendTo(rootElement);\n      }\n    }\n\n    function generateTopLevelTeardown(view) {\n      return function() { view.destroy(); };\n    }\n\n    function generateOutletTeardown(parentView, outlet) {\n      return function() { parentView.disconnectOutlet(outlet); };\n    }\n\n    function getFullQueryParams(router, state) {\n      if (state.fullQueryParams) { return state.fullQueryParams; }\n\n      state.fullQueryParams = {};\n      merge(state.fullQueryParams, state.queryParams);\n\n      var targetRouteName = state.handlerInfos[state.handlerInfos.length-1].name;\n      router._deserializeQueryParams(targetRouteName, state.fullQueryParams);\n      return state.fullQueryParams;\n    }\n\n    function getQueryParamsFor(route, state) {\n      state.queryParamsFor = state.queryParamsFor || {};\n      var name = route.routeName;\n\n      if (state.queryParamsFor[name]) { return state.queryParamsFor[name]; }\n\n      var fullQueryParams = getFullQueryParams(route.router, state);\n\n      var params = state.queryParamsFor[name] = {};\n\n      // Copy over all the query params for this route/controller into params hash.\n      var qpMeta = get(route, '_qp');\n      var qps = qpMeta.qps;\n      for (var i = 0, len = qps.length; i < len; ++i) {\n        // Put deserialized qp on params hash.\n        var qp = qps[i];\n\n        var qpValueWasPassedIn = (qp.prop in fullQueryParams);\n        params[qp.prop] = qpValueWasPassedIn ?\n                          fullQueryParams[qp.prop] :\n                          copyDefaultValue(qp.def);\n      }\n\n      return params;\n    }\n\n    function copyDefaultValue(value) {\n      if (isArray(value)) {\n        return Ember.A(value.slice());\n      }\n      return value;\n    }\n\n    __exports__[\"default\"] = Route;\n  });\nenifed(\"ember-routing/system/router\",\n  [\"ember-metal/core\",\"ember-metal/error\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/properties\",\"ember-metal/computed\",\"ember-metal/merge\",\"ember-metal/run_loop\",\"ember-metal/enumerable_utils\",\"ember-runtime/system/string\",\"ember-runtime/system/object\",\"ember-runtime/mixins/evented\",\"ember-routing/system/dsl\",\"ember-views/views/view\",\"ember-routing/location/api\",\"ember-handlebars/views/metamorph_view\",\"ember-routing-handlebars/helpers/shared\",\"ember-metal/platform\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __dependency16__, __dependency17__, __dependency18__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // FEATURES, Logger, K, assert\n    var EmberError = __dependency2__[\"default\"];\n    var get = __dependency3__.get;\n    var set = __dependency4__.set;\n    var defineProperty = __dependency5__.defineProperty;\n    var computed = __dependency6__.computed;\n    var merge = __dependency7__[\"default\"];\n    var run = __dependency8__[\"default\"];\n    var forEach = __dependency9__.forEach;\n\n    var fmt = __dependency10__.fmt;\n    var EmberObject = __dependency11__[\"default\"];\n    var Evented = __dependency12__[\"default\"];\n    var EmberRouterDSL = __dependency13__[\"default\"];\n    var EmberView = __dependency14__[\"default\"];\n    var EmberLocation = __dependency15__[\"default\"];\n    var _MetamorphView = __dependency16__[\"default\"];\n    var routeArgs = __dependency17__.routeArgs;\n    var getActiveTargetName = __dependency17__.getActiveTargetName;\n    var stashParamNames = __dependency17__.stashParamNames;\n    var create = __dependency18__.create;\n\n    /**\n    @module ember\n    @submodule ember-routing\n    */\n\n    // // side effect of loading some Ember globals, for now\n    // requireModule(\"ember-handlebars\");\n    // requireModule(\"ember-runtime\");\n    // requireModule(\"ember-views\");\n\n    var Router = requireModule(\"router\")['default'];\n    var Transition = requireModule(\"router/transition\").Transition;\n\n    var slice = [].slice;\n\n    /**\n      The `Ember.Router` class manages the application state and URLs. Refer to\n      the [routing guide](http://emberjs.com/guides/routing/) for documentation.\n\n      @class Router\n      @namespace Ember\n      @extends Ember.Object\n    */\n    var EmberRouter = EmberObject.extend(Evented, {\n      /**\n        The `location` property determines the type of URL's that your\n        application will use.\n\n        The following location types are currently available:\n\n        * `hash`\n        * `history`\n        * `none`\n\n        @property location\n        @default 'hash'\n        @see {Ember.Location}\n      */\n      location: 'hash',\n\n      /**\n       Represents the URL of the root of the application, often '/'. This prefix is\n       assumed on all routes defined on this router.\n\n       @property rootURL\n       @default '/'\n      */\n      rootURL: '/',\n\n      init: function() {\n        this.router = this.constructor.router || this.constructor.map(Ember.K);\n        this._activeViews = {};\n        this._setupLocation();\n        this._qpCache = {};\n        this._queuedQPChanges = {};\n\n        if (get(this, 'namespace.LOG_TRANSITIONS_INTERNAL')) {\n          this.router.log = Ember.Logger.debug;\n        }\n      },\n\n      /**\n        Represents the current URL.\n\n        @method url\n        @return {String} The current URL.\n      */\n      url: computed(function() {\n        return get(this, 'location').getURL();\n      }),\n\n      /**\n        Initializes the current router instance and sets up the change handling\n        event listeners used by the instances `location` implementation.\n\n        A property named `initialURL` will be used to determine the initial URL.\n        If no value is found `/` will be used.\n\n        @method startRouting\n        @private\n      */\n      startRouting: function() {\n        this.router = this.router || this.constructor.map(Ember.K);\n\n        var router = this.router;\n        var location = get(this, 'location');\n        var container = this.container;\n        var self = this;\n        var initialURL = get(this, 'initialURL');\n\n        // Allow the Location class to cancel the router setup while it refreshes\n        // the page\n        if (get(location, 'cancelRouterSetup')) {\n          return;\n        }\n\n        this._setupRouter(router, location);\n\n        container.register('view:default', _MetamorphView);\n        container.register('view:toplevel', EmberView.extend());\n\n        location.onUpdateURL(function(url) {\n          self.handleURL(url);\n        });\n\n        if (typeof initialURL === \"undefined\") {\n          initialURL = location.getURL();\n        }\n\n        this.handleURL(initialURL);\n      },\n\n      /**\n        Handles updating the paths and notifying any listeners of the URL\n        change.\n\n        Triggers the router level `didTransition` hook.\n\n        @method didTransition\n        @private\n        @since 1.2.0\n      */\n      didTransition: function(infos) {\n        updatePaths(this);\n\n        this._cancelLoadingEvent();\n\n        this.notifyPropertyChange('url');\n\n        // Put this in the runloop so url will be accurate. Seems\n        // less surprising than didTransition being out of sync.\n        run.once(this, this.trigger, 'didTransition');\n\n        if (get(this, 'namespace').LOG_TRANSITIONS) {\n          Ember.Logger.log(\"Transitioned into '\" + EmberRouter._routePath(infos) + \"'\");\n        }\n      },\n\n      handleURL: function(url) {\n        return this._doURLTransition('handleURL', url);\n      },\n\n      _doURLTransition: function(routerJsMethod, url) {\n        var transition = this.router[routerJsMethod](url || '/');\n        listenForTransitionErrors(transition);\n        return transition;\n      },\n\n      transitionTo: function() {\n        var args = slice.call(arguments), queryParams;\n        if (resemblesURL(args[0])) {\n          return this._doURLTransition('transitionTo', args[0]);\n        }\n\n        var possibleQueryParams = args[args.length-1];\n        if (possibleQueryParams && possibleQueryParams.hasOwnProperty('queryParams')) {\n          queryParams = args.pop().queryParams;\n        } else {\n          queryParams = {};\n        }\n\n        var targetRouteName = args.shift();\n        return this._doTransition(targetRouteName, args, queryParams);\n      },\n\n      intermediateTransitionTo: function() {\n        this.router.intermediateTransitionTo.apply(this.router, arguments);\n\n        updatePaths(this);\n\n        var infos = this.router.currentHandlerInfos;\n        if (get(this, 'namespace').LOG_TRANSITIONS) {\n          Ember.Logger.log(\"Intermediate-transitioned into '\" + EmberRouter._routePath(infos) + \"'\");\n        }\n      },\n\n      replaceWith: function() {\n        return this.transitionTo.apply(this, arguments).method('replace');\n      },\n\n      generate: function() {\n        var url = this.router.generate.apply(this.router, arguments);\n        return this.location.formatURL(url);\n      },\n\n      /**\n        Determines if the supplied route is currently active.\n\n        @method isActive\n        @param routeName\n        @return {Boolean}\n        @private\n      */\n      isActive: function(routeName) {\n        var router = this.router;\n        return router.isActive.apply(router, arguments);\n      },\n\n      /**\n        An alternative form of `isActive` that doesn't require\n        manual concatenation of the arguments into a single\n        array.\n\n        @method isActiveIntent\n        @param routeName\n        @param models\n        @param queryParams\n        @return {Boolean}\n        @private\n        @since 1.7.0\n      */\n      isActiveIntent: function(routeName, models, queryParams) {\n        var router = this.router;\n        return router.isActive.apply(router, arguments);\n      },\n\n      send: function(name, context) {\n        this.router.trigger.apply(this.router, arguments);\n      },\n\n      /**\n        Does this router instance have the given route.\n\n        @method hasRoute\n        @return {Boolean}\n        @private\n      */\n      hasRoute: function(route) {\n        return this.router.hasRoute(route);\n      },\n\n      /**\n        Resets the state of the router by clearing the current route\n        handlers and deactivating them.\n\n        @private\n        @method reset\n       */\n      reset: function() {\n        this.router.reset();\n      },\n\n      _lookupActiveView: function(templateName) {\n        var active = this._activeViews[templateName];\n        return active && active[0];\n      },\n\n      _connectActiveView: function(templateName, view) {\n        var existing = this._activeViews[templateName];\n\n        if (existing) {\n          existing[0].off('willDestroyElement', this, existing[1]);\n        }\n\n        function disconnectActiveView() {\n          delete this._activeViews[templateName];\n        }\n\n        this._activeViews[templateName] = [view, disconnectActiveView];\n        view.one('willDestroyElement', this, disconnectActiveView);\n      },\n\n      _setupLocation: function() {\n        var location = get(this, 'location');\n        var rootURL = get(this, 'rootURL');\n\n        if (rootURL && this.container && !this.container.has('-location-setting:root-url')) {\n          this.container.register('-location-setting:root-url', rootURL, { instantiate: false });\n        }\n\n        if ('string' === typeof location && this.container) {\n          var resolvedLocation = this.container.lookup('location:' + location);\n\n          if ('undefined' !== typeof resolvedLocation) {\n            location = set(this, 'location', resolvedLocation);\n          } else {\n            // Allow for deprecated registration of custom location API's\n            var options = {implementation: location};\n\n            location = set(this, 'location', EmberLocation.create(options));\n          }\n        }\n\n        if (location !== null && typeof location === 'object') {\n          if (rootURL && typeof rootURL === 'string') {\n            location.rootURL = rootURL;\n          }\n\n          // ensure that initState is called AFTER the rootURL is set on\n          // the location instance\n          if (typeof location.initState === 'function') {\n            location.initState();\n          }\n        }\n      },\n\n      _getHandlerFunction: function() {\n        var seen = {}, container = this.container;\n        var DefaultRoute = container.lookupFactory('route:basic');\n        var self = this;\n\n        return function(name) {\n          var routeName = 'route:' + name;\n          var handler = container.lookup(routeName);\n\n          if (seen[name]) { return handler; }\n\n          seen[name] = true;\n\n          if (!handler) {\n            container.register(routeName, DefaultRoute.extend());\n            handler = container.lookup(routeName);\n\n            if (get(self, 'namespace.LOG_ACTIVE_GENERATION')) {\n              Ember.Logger.info(\"generated -> \" + routeName, { fullName: routeName });\n            }\n          }\n\n          handler.routeName = name;\n          return handler;\n        };\n      },\n\n      _setupRouter: function(router, location) {\n        var lastURL, emberRouter = this;\n\n        router.getHandler = this._getHandlerFunction();\n\n        var doUpdateURL = function() {\n          location.setURL(lastURL);\n        };\n\n        router.updateURL = function(path) {\n          lastURL = path;\n          run.once(doUpdateURL);\n        };\n\n        if (location.replaceURL) {\n          var doReplaceURL = function() {\n            location.replaceURL(lastURL);\n          };\n\n          router.replaceURL = function(path) {\n            lastURL = path;\n            run.once(doReplaceURL);\n          };\n        }\n\n        router.didTransition = function(infos) {\n          emberRouter.didTransition(infos);\n        };\n      },\n\n      _serializeQueryParams: function(targetRouteName, queryParams) {\n        var groupedByUrlKey = {};\n\n        forEachQueryParam(this, targetRouteName, queryParams, function(key, value, qp) {\n          var urlKey = qp.urlKey;\n          if (!groupedByUrlKey[urlKey]) {\n            groupedByUrlKey[urlKey] = [];\n          }\n          groupedByUrlKey[urlKey].push({\n            qp: qp,\n            value: value\n          });\n          delete queryParams[key];\n        });\n\n        for (var key in groupedByUrlKey) {\n          var qps = groupedByUrlKey[key];\n          if (qps.length > 1) {\n            var qp0 = qps[0].qp, qp1=qps[1].qp;\n            Ember.assert(fmt(\"You're not allowed to have more than one controller property map to the same query param key, but both `%@` and `%@` map to `%@`. You can fix this by mapping one of the controller properties to a different query param key via the `as` config option, e.g. `%@: { as: 'other-%@' }`\", [qp0.fprop, qp1.fprop, qp0.urlKey, qp0.prop, qp0.prop]), false);\n          }\n          var qp = qps[0].qp;\n          queryParams[qp.urlKey] = qp.route.serializeQueryParam(qps[0].value, qp.urlKey, qp.type);\n        }\n      },\n\n      _deserializeQueryParams: function(targetRouteName, queryParams) {\n        forEachQueryParam(this, targetRouteName, queryParams, function(key, value, qp) {\n          delete queryParams[key];\n          queryParams[qp.prop] = qp.route.deserializeQueryParam(value, qp.urlKey, qp.type);\n        });\n      },\n\n      _pruneDefaultQueryParamValues: function(targetRouteName, queryParams) {\n        var qps = this._queryParamsFor(targetRouteName);\n        for (var key in queryParams) {\n          var qp = qps.map[key];\n          if (qp && qp.sdef === queryParams[key]) {\n            delete queryParams[key];\n          }\n        }\n      },\n\n      _doTransition: function(_targetRouteName, models, _queryParams) {\n        var targetRouteName = _targetRouteName || getActiveTargetName(this.router);\n        Ember.assert(\"The route \" + targetRouteName + \" was not found\", targetRouteName && this.router.hasRoute(targetRouteName));\n\n        var queryParams = {};\n        merge(queryParams, _queryParams);\n        this._prepareQueryParams(targetRouteName, models, queryParams);\n\n        var transitionArgs = routeArgs(targetRouteName, models, queryParams);\n        var transitionPromise = this.router.transitionTo.apply(this.router, transitionArgs);\n\n        listenForTransitionErrors(transitionPromise);\n\n        return transitionPromise;\n      },\n\n      _prepareQueryParams: function(targetRouteName, models, queryParams) {\n        this._hydrateUnsuppliedQueryParams(targetRouteName, models, queryParams);\n        this._serializeQueryParams(targetRouteName, queryParams);\n        this._pruneDefaultQueryParamValues(targetRouteName, queryParams);\n      },\n\n      /**\n        Returns a merged query params meta object for a given route.\n        Useful for asking a route what its known query params are.\n       */\n      _queryParamsFor: function(leafRouteName) {\n        if (this._qpCache[leafRouteName]) {\n          return this._qpCache[leafRouteName];\n        }\n\n        var map = {}, qps = [], qpCache = this._qpCache[leafRouteName] = {\n          map: map,\n          qps: qps\n        };\n\n        var routerjs = this.router;\n        var recogHandlerInfos = routerjs.recognizer.handlersFor(leafRouteName);\n\n        for (var i = 0, len = recogHandlerInfos.length; i < len; ++i) {\n          var recogHandler = recogHandlerInfos[i];\n          var route = routerjs.getHandler(recogHandler.handler);\n          var qpMeta = get(route, '_qp');\n\n          if (!qpMeta) { continue; }\n\n          merge(map, qpMeta.map);\n          qps.push.apply(qps, qpMeta.qps);\n        }\n\n        return {\n          qps: qps,\n          map: map\n        };\n      },\n\n      /*\n        becomeResolved: function(payload, resolvedContext) {\n          var params = this.serialize(resolvedContext);\n\n          if (payload) {\n            this.stashResolvedModel(payload, resolvedContext);\n            payload.params = payload.params || {};\n            payload.params[this.name] = params;\n          }\n\n          return this.factory('resolved', {\n            context: resolvedContext,\n            name: this.name,\n            handler: this.handler,\n            params: params\n          });\n        },\n      */\n\n      _hydrateUnsuppliedQueryParams: function(leafRouteName, contexts, queryParams) {\n        var state = calculatePostTransitionState(this, leafRouteName, contexts);\n        var handlerInfos = state.handlerInfos;\n        var appCache = this._bucketCache;\n\n        stashParamNames(this, handlerInfos);\n\n        for (var i = 0, len = handlerInfos.length; i < len; ++i) {\n          var route = handlerInfos[i].handler;\n          var qpMeta = get(route, '_qp');\n\n          for (var j = 0, qpLen = qpMeta.qps.length; j < qpLen; ++j) {\n            var qp = qpMeta.qps[j];\n            var presentProp = qp.prop in queryParams  && qp.prop ||\n                              qp.fprop in queryParams && qp.fprop;\n\n            if (presentProp) {\n              if (presentProp !== qp.fprop) {\n                queryParams[qp.fprop] = queryParams[presentProp];\n                delete queryParams[presentProp];\n              }\n            } else {\n              var controllerProto = qp.cProto;\n              var cacheMeta = get(controllerProto, '_cacheMeta');\n\n              var cacheKey = controllerProto._calculateCacheKey(qp.ctrl, cacheMeta[qp.prop].parts, state.params);\n              queryParams[qp.fprop] = appCache.lookup(cacheKey, qp.prop, qp.def);\n            }\n          }\n        }\n      },\n\n      _scheduleLoadingEvent: function(transition, originRoute) {\n        this._cancelLoadingEvent();\n        this._loadingStateTimer = run.scheduleOnce('routerTransitions', this, '_fireLoadingEvent', transition, originRoute);\n      },\n\n      _fireLoadingEvent: function(transition, originRoute) {\n        if (!this.router.activeTransition) {\n          // Don't fire an event if we've since moved on from\n          // the transition that put us in a loading state.\n          return;\n        }\n\n        transition.trigger(true, 'loading', transition, originRoute);\n      },\n\n      _cancelLoadingEvent: function () {\n        if (this._loadingStateTimer) {\n          run.cancel(this._loadingStateTimer);\n        }\n        this._loadingStateTimer = null;\n      }\n    });\n\n    /*\n      Helper function for iterating root-ward, starting\n      from (but not including) the provided `originRoute`.\n\n      Returns true if the last callback fired requested\n      to bubble upward.\n\n      @private\n     */\n    function forEachRouteAbove(originRoute, transition, callback) {\n      var handlerInfos = transition.state.handlerInfos;\n      var originRouteFound = false;\n      var handlerInfo, route;\n\n      for (var i = handlerInfos.length - 1; i >= 0; --i) {\n        handlerInfo = handlerInfos[i];\n        route = handlerInfo.handler;\n\n        if (!originRouteFound) {\n          if (originRoute === route) {\n            originRouteFound = true;\n          }\n          continue;\n        }\n\n        if (callback(route, handlerInfos[i + 1].handler) !== true) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    // These get invoked when an action bubbles above ApplicationRoute\n    // and are not meant to be overridable.\n    var defaultActionHandlers = {\n\n      willResolveModel: function(transition, originRoute) {\n        originRoute.router._scheduleLoadingEvent(transition, originRoute);\n      },\n\n      error: function(error, transition, originRoute) {\n        // Attempt to find an appropriate error substate to enter.\n        var router = originRoute.router;\n\n        var tryTopLevel = forEachRouteAbove(originRoute, transition, function(route, childRoute) {\n          var childErrorRouteName = findChildRouteName(route, childRoute, 'error');\n          if (childErrorRouteName) {\n            router.intermediateTransitionTo(childErrorRouteName, error);\n            return;\n          }\n          return true;\n        });\n\n        if (tryTopLevel) {\n          // Check for top-level error state to enter.\n          if (routeHasBeenDefined(originRoute.router, 'application_error')) {\n            router.intermediateTransitionTo('application_error', error);\n            return;\n          }\n        }\n\n        logError(error, 'Error while processing route: ' + transition.targetName);\n      },\n\n      loading: function(transition, originRoute) {\n        // Attempt to find an appropriate loading substate to enter.\n        var router = originRoute.router;\n\n        var tryTopLevel = forEachRouteAbove(originRoute, transition, function(route, childRoute) {\n          var childLoadingRouteName = findChildRouteName(route, childRoute, 'loading');\n\n          if (childLoadingRouteName) {\n            router.intermediateTransitionTo(childLoadingRouteName);\n            return;\n          }\n\n          // Don't bubble above pivot route.\n          if (transition.pivotHandler !== route) {\n            return true;\n          }\n        });\n\n        if (tryTopLevel) {\n          // Check for top-level loading state to enter.\n          if (routeHasBeenDefined(originRoute.router, 'application_loading')) {\n            router.intermediateTransitionTo('application_loading');\n            return;\n          }\n        }\n      }\n    };\n\n    function logError(error, initialMessage) {\n      var errorArgs = [];\n\n      if (initialMessage) { errorArgs.push(initialMessage); }\n\n      if (error) {\n        if (error.message) { errorArgs.push(error.message); }\n        if (error.stack)   { errorArgs.push(error.stack); }\n\n        if (typeof error === \"string\") { errorArgs.push(error); }\n      }\n\n      Ember.Logger.error.apply(this, errorArgs);\n    }\n\n    function findChildRouteName(parentRoute, originatingChildRoute, name) {\n      var router = parentRoute.router;\n      var childName;\n      var targetChildRouteName = originatingChildRoute.routeName.split('.').pop();\n      var namespace = parentRoute.routeName === 'application' ? '' : parentRoute.routeName + '.';\n\n      \n      // Second, try general loading state, e.g. 'loading'\n      childName = namespace + name;\n      if (routeHasBeenDefined(router, childName)) {\n        return childName;\n      }\n    }\n\n    function routeHasBeenDefined(router, name) {\n      var container = router.container;\n      return router.hasRoute(name) &&\n             (container.has('template:' + name) || container.has('route:' + name));\n    }\n\n    function triggerEvent(handlerInfos, ignoreFailure, args) {\n      var name = args.shift();\n\n      if (!handlerInfos) {\n        if (ignoreFailure) { return; }\n        throw new EmberError(\"Can't trigger action '\" + name + \"' because your app hasn't finished transitioning into its first route. To trigger an action on destination routes during a transition, you can call `.send()` on the `Transition` object passed to the `model/beforeModel/afterModel` hooks.\");\n      }\n\n      var eventWasHandled = false;\n      var handlerInfo, handler;\n\n      for (var i = handlerInfos.length - 1; i >= 0; i--) {\n        handlerInfo = handlerInfos[i];\n        handler = handlerInfo.handler;\n\n        if (handler._actions && handler._actions[name]) {\n          if (handler._actions[name].apply(handler, args) === true) {\n            eventWasHandled = true;\n          } else {\n            return;\n          }\n        }\n      }\n\n      if (defaultActionHandlers[name]) {\n        defaultActionHandlers[name].apply(null, args);\n        return;\n      }\n\n      if (!eventWasHandled && !ignoreFailure) {\n        throw new EmberError(\"Nothing handled the action '\" + name + \"'. If you did handle the action, this error can be caused by returning true from an action handler in a controller, causing the action to bubble.\");\n      }\n    }\n\n    function calculatePostTransitionState(emberRouter, leafRouteName, contexts) {\n      var routerjs = emberRouter.router;\n      var state = routerjs.applyIntent(leafRouteName, contexts);\n      var handlerInfos = state.handlerInfos;\n      var params = state.params;\n\n      for (var i = 0, len = handlerInfos.length; i < len; ++i) {\n        var handlerInfo = handlerInfos[i];\n        if (!handlerInfo.isResolved) {\n          handlerInfo = handlerInfo.becomeResolved(null, handlerInfo.context);\n        }\n        params[handlerInfo.name] = handlerInfo.params;\n      }\n      return state;\n    }\n\n    function updatePaths(router) {\n      var appController = router.container.lookup('controller:application');\n\n      if (!appController) {\n        // appController might not exist when top-level loading/error\n        // substates have been entered since ApplicationRoute hasn't\n        // actually been entered at that point.\n        return;\n      }\n\n      var infos = router.router.currentHandlerInfos;\n      var path = EmberRouter._routePath(infos);\n\n      if (!('currentPath' in appController)) {\n        defineProperty(appController, 'currentPath');\n      }\n\n      set(appController, 'currentPath', path);\n\n      if (!('currentRouteName' in appController)) {\n        defineProperty(appController, 'currentRouteName');\n      }\n\n      set(appController, 'currentRouteName', infos[infos.length - 1].name);\n    }\n\n    EmberRouter.reopenClass({\n      router: null,\n\n      /**\n        The `Router.map` function allows you to define mappings from URLs to routes\n        and resources in your application. These mappings are defined within the\n        supplied callback function using `this.resource` and `this.route`.\n\n        ```javascript\n        App.Router.map(function({\n          this.route('about');\n          this.resource('article');\n        }));\n        ```\n\n        For more detailed examples please see\n        [the guides](http://emberjs.com/guides/routing/defining-your-routes/).\n\n        @method map\n        @param callback\n      */\n      map: function(callback) {\n        var router = this.router;\n        if (!router) {\n          router = new Router();\n\n          \n            router._triggerWillChangeContext = Ember.K;\n            router._triggerWillLeave = Ember.K;\n          \n\n          router.callbacks = [];\n          router.triggerEvent = triggerEvent;\n          this.reopenClass({ router: router });\n        }\n\n        var dsl = EmberRouterDSL.map(function() {\n          this.resource('application', { path: \"/\" }, function() {\n            for (var i=0; i < router.callbacks.length; i++) {\n              router.callbacks[i].call(this);\n            }\n            callback.call(this);\n          });\n        });\n\n        router.callbacks.push(callback);\n        router.map(dsl.generate());\n        return router;\n      },\n\n      _routePath: function(handlerInfos) {\n        var path = [];\n\n        // We have to handle coalescing resource names that\n        // are prefixed with their parent's names, e.g.\n        // ['foo', 'foo.bar.baz'] => 'foo.bar.baz', not 'foo.foo.bar.baz'\n\n        function intersectionMatches(a1, a2) {\n          for (var i = 0, len = a1.length; i < len; ++i) {\n            if (a1[i] !== a2[i]) {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        var name, nameParts, oldNameParts;\n        for (var i=1, l=handlerInfos.length; i<l; i++) {\n          name = handlerInfos[i].name;\n          nameParts = name.split(\".\");\n          oldNameParts = slice.call(path);\n\n          while (oldNameParts.length) {\n            if (intersectionMatches(oldNameParts, nameParts)) {\n              break;\n            }\n            oldNameParts.shift();\n          }\n\n          path.push.apply(path, nameParts.slice(oldNameParts.length));\n        }\n\n        return path.join(\".\");\n      }\n    });\n\n    function listenForTransitionErrors(transition) {\n      transition.then(null, function(error) {\n        if (!error || !error.name) { return; }\n\n        if (error.name === \"UnrecognizedURLError\") {\n          Ember.assert(\"The URL '\" + error.message + \"' did not match any routes in your application\");\n        }\n        return error;\n      }, 'Ember: Process errors from Router');\n    }\n\n    function resemblesURL(str) {\n      return typeof str === 'string' && ( str === '' || str.charAt(0) === '/');\n    }\n\n    function forEachQueryParam(router, targetRouteName, queryParams, callback) {\n      var qpCache = router._queryParamsFor(targetRouteName);\n      var qps = qpCache.qps;\n\n      for (var key in queryParams) {\n        if (!queryParams.hasOwnProperty(key)) { continue; }\n        var value = queryParams[key];\n        var qp = qpCache.map[key];\n\n        if (qp) {\n          callback(key, value, qp);\n        }\n      }\n    }\n\n    __exports__[\"default\"] = EmberRouter;\n  });\nenifed(\"ember-runtime\",\n  [\"ember-metal\",\"ember-runtime/core\",\"ember-runtime/compare\",\"ember-runtime/copy\",\"ember-runtime/system/namespace\",\"ember-runtime/system/object\",\"ember-runtime/system/tracked_array\",\"ember-runtime/system/subarray\",\"ember-runtime/system/container\",\"ember-runtime/system/application\",\"ember-runtime/system/array_proxy\",\"ember-runtime/system/object_proxy\",\"ember-runtime/system/core_object\",\"ember-runtime/system/each_proxy\",\"ember-runtime/system/native_array\",\"ember-runtime/system/set\",\"ember-runtime/system/string\",\"ember-runtime/system/deferred\",\"ember-runtime/system/lazy_load\",\"ember-runtime/mixins/array\",\"ember-runtime/mixins/comparable\",\"ember-runtime/mixins/copyable\",\"ember-runtime/mixins/enumerable\",\"ember-runtime/mixins/freezable\",\"ember-runtime/mixins/-proxy\",\"ember-runtime/mixins/observable\",\"ember-runtime/mixins/action_handler\",\"ember-runtime/mixins/deferred\",\"ember-runtime/mixins/mutable_enumerable\",\"ember-runtime/mixins/mutable_array\",\"ember-runtime/mixins/target_action_support\",\"ember-runtime/mixins/evented\",\"ember-runtime/mixins/promise_proxy\",\"ember-runtime/mixins/sortable\",\"ember-runtime/computed/array_computed\",\"ember-runtime/computed/reduce_computed\",\"ember-runtime/computed/reduce_computed_macros\",\"ember-runtime/controllers/array_controller\",\"ember-runtime/controllers/object_controller\",\"ember-runtime/controllers/controller\",\"ember-runtime/mixins/controller\",\"ember-runtime/ext/rsvp\",\"ember-runtime/ext/string\",\"ember-runtime/ext/function\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __dependency16__, __dependency17__, __dependency18__, __dependency19__, __dependency20__, __dependency21__, __dependency22__, __dependency23__, __dependency24__, __dependency25__, __dependency26__, __dependency27__, __dependency28__, __dependency29__, __dependency30__, __dependency31__, __dependency32__, __dependency33__, __dependency34__, __dependency35__, __dependency36__, __dependency37__, __dependency38__, __dependency39__, __dependency40__, __dependency41__, __dependency42__, __dependency43__, __dependency44__, __exports__) {\n    \"use strict\";\n    /**\n    Ember Runtime\n\n    @module ember\n    @submodule ember-runtime\n    @requires ember-metal\n    */\n\n    // BEGIN IMPORTS\n    var Ember = __dependency1__[\"default\"];\n    var isEqual = __dependency2__.isEqual;\n    var compare = __dependency3__[\"default\"];\n    var copy = __dependency4__[\"default\"];\n\n    var Namespace = __dependency5__[\"default\"];\n    var EmberObject = __dependency6__[\"default\"];\n    var TrackedArray = __dependency7__[\"default\"];\n    var SubArray = __dependency8__[\"default\"];\n    var Container = __dependency9__[\"default\"];\n    var Application = __dependency10__[\"default\"];\n    var ArrayProxy = __dependency11__[\"default\"];\n    var ObjectProxy = __dependency12__[\"default\"];\n    var CoreObject = __dependency13__[\"default\"];\n    var EachArray = __dependency14__.EachArray;\n    var EachProxy = __dependency14__.EachProxy;\n\n    var NativeArray = __dependency15__[\"default\"];\n    var Set = __dependency16__[\"default\"];\n    var EmberStringUtils = __dependency17__[\"default\"];\n    var Deferred = __dependency18__[\"default\"];\n    var onLoad = __dependency19__.onLoad;\n    var runLoadHooks = __dependency19__.runLoadHooks;\n\n    var EmberArray = __dependency20__[\"default\"];\n    var Comparable = __dependency21__[\"default\"];\n    var Copyable = __dependency22__[\"default\"];\n    var Enumerable = __dependency23__[\"default\"];\n    var Freezable = __dependency24__.Freezable;\n    var FROZEN_ERROR = __dependency24__.FROZEN_ERROR;\n    var _ProxyMixin = __dependency25__[\"default\"];\n\n    var Observable = __dependency26__[\"default\"];\n    var ActionHandler = __dependency27__[\"default\"];\n    var DeferredMixin = __dependency28__[\"default\"];\n    var MutableEnumerable = __dependency29__[\"default\"];\n    var MutableArray = __dependency30__[\"default\"];\n    var TargetActionSupport = __dependency31__[\"default\"];\n    var Evented = __dependency32__[\"default\"];\n    var PromiseProxyMixin = __dependency33__[\"default\"];\n    var SortableMixin = __dependency34__[\"default\"];\n    var arrayComputed = __dependency35__.arrayComputed;\n    var ArrayComputedProperty = __dependency35__.ArrayComputedProperty;\n\n    var reduceComputed = __dependency36__.reduceComputed;\n    var ReduceComputedProperty = __dependency36__.ReduceComputedProperty;\n\n    var sum = __dependency37__.sum;\n    var min = __dependency37__.min;\n    var max = __dependency37__.max;\n    var map = __dependency37__.map;\n    var sort = __dependency37__.sort;\n    var setDiff = __dependency37__.setDiff;\n    var mapBy = __dependency37__.mapBy;\n    var mapProperty = __dependency37__.mapProperty;\n    var filter = __dependency37__.filter;\n    var filterBy = __dependency37__.filterBy;\n    var filterProperty = __dependency37__.filterProperty;\n    var uniq = __dependency37__.uniq;\n    var union = __dependency37__.union;\n    var intersect = __dependency37__.intersect;\n\n    var ArrayController = __dependency38__[\"default\"];\n    var ObjectController = __dependency39__[\"default\"];\n    var Controller = __dependency40__[\"default\"];\n    var ControllerMixin = __dependency41__[\"default\"];\n\n    var RSVP = __dependency42__[\"default\"];\n        // just for side effect of extending Ember.RSVP\n      // just for side effect of extending String.prototype\n    // just for side effect of extending Function.prototype\n    // END IMPORTS\n\n    // BEGIN EXPORTS\n    Ember.compare = compare;\n    Ember.copy = copy;\n    Ember.isEqual = isEqual;\n\n    Ember.Array = EmberArray;\n\n    Ember.Comparable = Comparable;\n    Ember.Copyable = Copyable;\n\n    Ember.SortableMixin = SortableMixin;\n\n    Ember.Freezable = Freezable;\n    Ember.FROZEN_ERROR = FROZEN_ERROR;\n\n    Ember.DeferredMixin = DeferredMixin;\n\n    Ember.MutableEnumerable = MutableEnumerable;\n    Ember.MutableArray = MutableArray;\n\n    Ember.TargetActionSupport = TargetActionSupport;\n    Ember.Evented = Evented;\n\n    Ember.PromiseProxyMixin = PromiseProxyMixin;\n\n    Ember.Observable = Observable;\n\n    Ember.arrayComputed = arrayComputed;\n    Ember.ArrayComputedProperty = ArrayComputedProperty;\n    Ember.reduceComputed = reduceComputed;\n    Ember.ReduceComputedProperty = ReduceComputedProperty;\n\n    // ES6TODO: this seems a less than ideal way/place to add properties to Ember.computed\n    var EmComputed = Ember.computed;\n\n    EmComputed.sum = sum;\n    EmComputed.min = min;\n    EmComputed.max = max;\n    EmComputed.map = map;\n    EmComputed.sort = sort;\n    EmComputed.setDiff = setDiff;\n    EmComputed.mapBy = mapBy;\n    EmComputed.mapProperty = mapProperty;\n    EmComputed.filter = filter;\n    EmComputed.filterBy = filterBy;\n    EmComputed.filterProperty = filterProperty;\n    EmComputed.uniq = uniq;\n    EmComputed.union = union;\n    EmComputed.intersect = intersect;\n\n    Ember.String = EmberStringUtils;\n    Ember.Object = EmberObject;\n    Ember.TrackedArray = TrackedArray;\n    Ember.SubArray = SubArray;\n    Ember.Container = Container;\n    Ember.Namespace = Namespace;\n    Ember.Enumerable = Enumerable;\n    Ember.ArrayProxy = ArrayProxy;\n    Ember.ObjectProxy = ObjectProxy;\n    Ember.ActionHandler = ActionHandler;\n    Ember.CoreObject = CoreObject;\n    Ember.EachArray = EachArray;\n    Ember.EachProxy = EachProxy;\n    Ember.NativeArray = NativeArray;\n    // ES6TODO: Currently we must rely on the global from ember-metal/core to avoid circular deps\n    // Ember.A = A;\n    Ember.Set = Set;\n    Ember.Deferred = Deferred;\n    Ember.onLoad = onLoad;\n    Ember.runLoadHooks = runLoadHooks;\n\n    Ember.ArrayController = ArrayController;\n    Ember.ObjectController = ObjectController;\n    Ember.Controller = Controller;\n    Ember.ControllerMixin = ControllerMixin;\n\n    Ember._ProxyMixin = _ProxyMixin;\n\n    Ember.RSVP = RSVP;\n    // END EXPORTS\n\n    __exports__[\"default\"] = Ember;\n  });\nenifed(\"ember-runtime/compare\",\n  [\"ember-metal/utils\",\"ember-runtime/mixins/comparable\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var typeOf = __dependency1__.typeOf;\n    var Comparable = __dependency2__[\"default\"];\n\n    var TYPE_ORDER = {\n      'undefined': 0,\n      'null': 1,\n      'boolean': 2,\n      'number': 3,\n      'string': 4,\n      'array': 5,\n      'object': 6,\n      'instance': 7,\n      'function': 8,\n      'class': 9,\n      'date': 10\n    };\n\n    //\n    // the spaceship operator\n    //\n    function spaceship(a, b) {\n      var diff = a - b;\n      return (diff > 0) - (diff < 0);\n    }\n\n    /**\n     This will compare two javascript values of possibly different types.\n     It will tell you which one is greater than the other by returning:\n\n      - -1 if the first is smaller than the second,\n      - 0 if both are equal,\n      - 1 if the first is greater than the second.\n\n     The order is calculated based on `Ember.ORDER_DEFINITION`, if types are different.\n     In case they have the same type an appropriate comparison for this type is made.\n\n      ```javascript\n      Ember.compare('hello', 'hello');  // 0\n      Ember.compare('abc', 'dfg');      // -1\n      Ember.compare(2, 1);              // 1\n      ```\n\n     @method compare\n     @for Ember\n     @param {Object} v First value to compare\n     @param {Object} w Second value to compare\n     @return {Number} -1 if v < w, 0 if v = w and 1 if v > w.\n    */\n    __exports__[\"default\"] = function compare(v, w) {\n      if (v === w) {\n        return 0;\n      }\n\n      var type1 = typeOf(v);\n      var type2 = typeOf(w);\n\n      if (Comparable) {\n        if (type1 ==='instance' && Comparable.detect(v.constructor)) {\n          return v.constructor.compare(v, w);\n        }\n\n        if (type2 === 'instance' && Comparable.detect(w.constructor)) {\n          return 1 - w.constructor.compare(w, v);\n        }\n      }\n\n      var res = spaceship(TYPE_ORDER[type1], TYPE_ORDER[type2]);\n      if (res !== 0) {\n        return res;\n      }\n\n      // types are equal - so we have to check values now\n      switch (type1) {\n        case 'boolean':\n        case 'number':\n          return spaceship(v,w);\n\n        case 'string':\n          return spaceship(v.localeCompare(w), 0);\n\n        case 'array':\n          var vLen = v.length;\n          var wLen = w.length;\n          var len = Math.min(vLen, wLen);\n\n          for (var i = 0; i < len; i++) {\n            var r = compare(v[i], w[i]);\n            if (r !== 0) {\n              return r;\n            }\n          }\n\n          // all elements are equal now\n          // shorter array should be ordered first\n          return spaceship(vLen, wLen);\n\n        case 'instance':\n          if (Comparable && Comparable.detect(v)) {\n            return v.compare(v, w);\n          }\n          return 0;\n\n        case 'date':\n          return spaceship(v.getTime(), w.getTime());\n\n        default:\n          return 0;\n      }\n    }\n  });\nenifed(\"ember-runtime/computed/array_computed\",\n  [\"ember-metal/core\",\"ember-runtime/computed/reduce_computed\",\"ember-metal/enumerable_utils\",\"ember-metal/platform\",\"ember-metal/observer\",\"ember-metal/error\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var reduceComputed = __dependency2__.reduceComputed;\n    var ReduceComputedProperty = __dependency2__.ReduceComputedProperty;\n    var forEach = __dependency3__.forEach;\n    var o_create = __dependency4__.create;\n    var addObserver = __dependency5__.addObserver;\n    var EmberError = __dependency6__[\"default\"];\n\n    var a_slice = [].slice;\n\n    function ArrayComputedProperty() {\n      var cp = this;\n\n      ReduceComputedProperty.apply(this, arguments);\n\n      this.func = (function(reduceFunc) {\n        return function (propertyName) {\n          if (!cp._hasInstanceMeta(this, propertyName)) {\n            // When we recompute an array computed property, we need already\n            // retrieved arrays to be updated; we can't simply empty the cache and\n            // hope the array is re-retrieved.\n            forEach(cp._dependentKeys, function(dependentKey) {\n              addObserver(this, dependentKey, function() {\n                cp.recomputeOnce.call(this, propertyName);\n              });\n            }, this);\n          }\n\n          return reduceFunc.apply(this, arguments);\n        };\n      })(this.func);\n\n      return this;\n    }\n\n    ArrayComputedProperty.prototype = o_create(ReduceComputedProperty.prototype);\n\n    ArrayComputedProperty.prototype.initialValue = function () {\n      return Ember.A();\n    };\n\n    ArrayComputedProperty.prototype.resetValue = function (array) {\n      array.clear();\n      return array;\n    };\n\n    // This is a stopgap to keep the reference counts correct with lazy CPs.\n    ArrayComputedProperty.prototype.didChange = function (obj, keyName) {\n      return;\n    };\n\n    /**\n      Creates a computed property which operates on dependent arrays and\n      is updated with \"one at a time\" semantics. When items are added or\n      removed from the dependent array(s) an array computed only operates\n      on the change instead of re-evaluating the entire array. This should\n      return an array, if you'd like to use \"one at a time\" semantics and\n      compute some value other then an array look at\n      `Ember.reduceComputed`.\n\n      If there are more than one arguments the first arguments are\n      considered to be dependent property keys. The last argument is\n      required to be an options object. The options object can have the\n      following three properties.\n\n      `initialize` - An optional initialize function. Typically this will be used\n      to set up state on the instanceMeta object.\n\n      `removedItem` - A function that is called each time an element is\n      removed from the array.\n\n      `addedItem` - A function that is called each time an element is\n      added to the array.\n\n\n      The `initialize` function has the following signature:\n\n      ```javascript\n      function(array, changeMeta, instanceMeta)\n      ```\n\n      `array` - The initial value of the arrayComputed, an empty array.\n\n      `changeMeta` - An object which contains meta information about the\n      computed. It contains the following properties:\n\n         - `property` the computed property\n         - `propertyName` the name of the property on the object\n\n      `instanceMeta` - An object that can be used to store meta\n      information needed for calculating your computed. For example a\n      unique computed might use this to store the number of times a given\n      element is found in the dependent array.\n\n\n      The `removedItem` and `addedItem` functions both have the following signature:\n\n      ```javascript\n      function(accumulatedValue, item, changeMeta, instanceMeta)\n      ```\n\n      `accumulatedValue` - The value returned from the last time\n      `removedItem` or `addedItem` was called or an empty array.\n\n      `item` - the element added or removed from the array\n\n      `changeMeta` - An object which contains meta information about the\n      change. It contains the following properties:\n\n        - `property` the computed property\n        - `propertyName` the name of the property on the object\n        - `index` the index of the added or removed item\n        - `item` the added or removed item: this is exactly the same as\n          the second arg\n        - `arrayChanged` the array that triggered the change. Can be\n          useful when depending on multiple arrays.\n\n      For property changes triggered on an item property change (when\n      depKey is something like `someArray.@each.someProperty`),\n      `changeMeta` will also contain the following property:\n\n        - `previousValues` an object whose keys are the properties that changed on\n        the item, and whose values are the item's previous values.\n\n      `previousValues` is important Ember coalesces item property changes via\n      Ember.run.once. This means that by the time removedItem gets called, item has\n      the new values, but you may need the previous value (eg for sorting &\n      filtering).\n\n      `instanceMeta` - An object that can be used to store meta\n      information needed for calculating your computed. For example a\n      unique computed might use this to store the number of times a given\n      element is found in the dependent array.\n\n      The `removedItem` and `addedItem` functions should return the accumulated\n      value. It is acceptable to not return anything (ie return undefined)\n      to invalidate the computation. This is generally not a good idea for\n      arrayComputed but it's used in eg max and min.\n\n      Example\n\n      ```javascript\n      Ember.computed.map = function(dependentKey, callback) {\n        var options = {\n          addedItem: function(array, item, changeMeta, instanceMeta) {\n            var mapped = callback(item);\n            array.insertAt(changeMeta.index, mapped);\n            return array;\n          },\n          removedItem: function(array, item, changeMeta, instanceMeta) {\n            array.removeAt(changeMeta.index, 1);\n            return array;\n          }\n        };\n\n        return Ember.arrayComputed(dependentKey, options);\n      };\n      ```\n\n      @method arrayComputed\n      @for Ember\n      @param {String} [dependentKeys*]\n      @param {Object} options\n      @return {Ember.ComputedProperty}\n    */\n    function arrayComputed (options) {\n      var args;\n\n      if (arguments.length > 1) {\n        args = a_slice.call(arguments, 0, -1);\n        options = a_slice.call(arguments, -1)[0];\n      }\n\n      if (typeof options !== 'object') {\n        throw new EmberError('Array Computed Property declared without an options hash');\n      }\n\n      var cp = new ArrayComputedProperty(options);\n\n      if (args) {\n        cp.property.apply(cp, args);\n      }\n\n      return cp;\n    }\n\n    __exports__.arrayComputed = arrayComputed;\n    __exports__.ArrayComputedProperty = ArrayComputedProperty;\n  });\nenifed(\"ember-runtime/computed/reduce_computed\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-metal/error\",\"ember-metal/property_events\",\"ember-metal/expand_properties\",\"ember-metal/observer\",\"ember-metal/computed\",\"ember-metal/platform\",\"ember-metal/enumerable_utils\",\"ember-runtime/system/tracked_array\",\"ember-runtime/mixins/array\",\"ember-metal/run_loop\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert\n    var e_get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var guidFor = __dependency4__.guidFor;\n    var metaFor = __dependency4__.meta;\n    var EmberError = __dependency5__[\"default\"];\n    var propertyWillChange = __dependency6__.propertyWillChange;\n    var propertyDidChange = __dependency6__.propertyDidChange;\n    var expandProperties = __dependency7__[\"default\"];\n    var addObserver = __dependency8__.addObserver;\n    var observersFor = __dependency8__.observersFor;\n    var removeObserver = __dependency8__.removeObserver;\n    var addBeforeObserver = __dependency8__.addBeforeObserver;\n    var removeBeforeObserver = __dependency8__.removeBeforeObserver;\n    var ComputedProperty = __dependency9__.ComputedProperty;\n    var cacheFor = __dependency9__.cacheFor;\n    var o_create = __dependency10__.create;\n    var forEach = __dependency11__.forEach;\n    var TrackedArray = __dependency12__[\"default\"];\n    var EmberArray = __dependency13__[\"default\"];\n    var run = __dependency14__[\"default\"];\n    var isArray = __dependency4__.isArray;\n\n    var cacheSet = cacheFor.set;\n    var cacheGet = cacheFor.get;\n    var cacheRemove = cacheFor.remove;\n    var a_slice = [].slice;\n    // Here we explicitly don't allow `@each.foo`; it would require some special\n    // testing, but there's no particular reason why it should be disallowed.\n    var eachPropertyPattern = /^(.*)\\.@each\\.(.*)/;\n    var doubleEachPropertyPattern = /(.*\\.@each){2,}/;\n    var arrayBracketPattern = /\\.\\[\\]$/;\n\n    function get(obj, key) {\n      if (key === '@this') {\n        return obj;\n      }\n\n      return e_get(obj, key);\n    }\n\n    /*\n      Tracks changes to dependent arrays, as well as to properties of items in\n      dependent arrays.\n\n      @class DependentArraysObserver\n    */\n    function DependentArraysObserver(callbacks, cp, instanceMeta, context, propertyName, sugarMeta) {\n      // user specified callbacks for `addedItem` and `removedItem`\n      this.callbacks = callbacks;\n\n      // the computed property: remember these are shared across instances\n      this.cp = cp;\n\n      // the ReduceComputedPropertyInstanceMeta this DependentArraysObserver is\n      // associated with\n      this.instanceMeta = instanceMeta;\n\n      // A map of array guids to dependentKeys, for the given context.  We track\n      // this because we want to set up the computed property potentially before the\n      // dependent array even exists, but when the array observer fires, we lack\n      // enough context to know what to update: we can recover that context by\n      // getting the dependentKey.\n      this.dependentKeysByGuid = {};\n\n      // a map of dependent array guids -> TrackedArray instances.  We use\n      // this to lazily recompute indexes for item property observers.\n      this.trackedArraysByGuid = {};\n\n      // We suspend observers to ignore replacements from `reset` when totally\n      // recomputing.  Unfortunately we cannot properly suspend the observers\n      // because we only have the key; instead we make the observers no-ops\n      this.suspended = false;\n\n      // This is used to coalesce item changes from property observers within a\n      // single item.\n      this.changedItems = {};\n      // This is used to coalesce item changes for multiple items that depend on\n      // some shared state.\n      this.changedItemCount = 0;\n    }\n\n    function ItemPropertyObserverContext (dependentArray, index, trackedArray) {\n      Ember.assert('Internal error: trackedArray is null or undefined', trackedArray);\n\n      this.dependentArray = dependentArray;\n      this.index = index;\n      this.item = dependentArray.objectAt(index);\n      this.trackedArray = trackedArray;\n      this.beforeObserver = null;\n      this.observer = null;\n      this.destroyed = false;\n    }\n\n    DependentArraysObserver.prototype = {\n      setValue: function (newValue) {\n        this.instanceMeta.setValue(newValue, true);\n      },\n\n      getValue: function () {\n        return this.instanceMeta.getValue();\n      },\n\n      setupObservers: function (dependentArray, dependentKey) {\n        this.dependentKeysByGuid[guidFor(dependentArray)] = dependentKey;\n\n        dependentArray.addArrayObserver(this, {\n          willChange: 'dependentArrayWillChange',\n          didChange: 'dependentArrayDidChange'\n        });\n\n        if (this.cp._itemPropertyKeys[dependentKey]) {\n          this.setupPropertyObservers(dependentKey, this.cp._itemPropertyKeys[dependentKey]);\n        }\n      },\n\n      teardownObservers: function (dependentArray, dependentKey) {\n        var itemPropertyKeys = this.cp._itemPropertyKeys[dependentKey] || [];\n\n        delete this.dependentKeysByGuid[guidFor(dependentArray)];\n\n        this.teardownPropertyObservers(dependentKey, itemPropertyKeys);\n\n        dependentArray.removeArrayObserver(this, {\n          willChange: 'dependentArrayWillChange',\n          didChange: 'dependentArrayDidChange'\n        });\n      },\n\n      suspendArrayObservers: function (callback, binding) {\n        var oldSuspended = this.suspended;\n        this.suspended = true;\n        callback.call(binding);\n        this.suspended = oldSuspended;\n      },\n\n      setupPropertyObservers: function (dependentKey, itemPropertyKeys) {\n        var dependentArray = get(this.instanceMeta.context, dependentKey);\n        var length = get(dependentArray, 'length');\n        var observerContexts = new Array(length);\n\n        this.resetTransformations(dependentKey, observerContexts);\n\n        forEach(dependentArray, function (item, index) {\n          var observerContext = this.createPropertyObserverContext(dependentArray, index, this.trackedArraysByGuid[dependentKey]);\n          observerContexts[index] = observerContext;\n\n          forEach(itemPropertyKeys, function (propertyKey) {\n            addBeforeObserver(item, propertyKey, this, observerContext.beforeObserver);\n            addObserver(item, propertyKey, this, observerContext.observer);\n          }, this);\n        }, this);\n      },\n\n      teardownPropertyObservers: function (dependentKey, itemPropertyKeys) {\n        var dependentArrayObserver = this;\n        var trackedArray = this.trackedArraysByGuid[dependentKey];\n        var beforeObserver, observer, item;\n\n        if (!trackedArray) { return; }\n\n        trackedArray.apply(function (observerContexts, offset, operation) {\n          if (operation === TrackedArray.DELETE) { return; }\n\n          forEach(observerContexts, function (observerContext) {\n            observerContext.destroyed = true;\n            beforeObserver = observerContext.beforeObserver;\n            observer = observerContext.observer;\n            item = observerContext.item;\n\n            forEach(itemPropertyKeys, function (propertyKey) {\n              removeBeforeObserver(item, propertyKey, dependentArrayObserver, beforeObserver);\n              removeObserver(item, propertyKey, dependentArrayObserver, observer);\n            });\n          });\n        });\n      },\n\n      createPropertyObserverContext: function (dependentArray, index, trackedArray) {\n        var observerContext = new ItemPropertyObserverContext(dependentArray, index, trackedArray);\n\n        this.createPropertyObserver(observerContext);\n\n        return observerContext;\n      },\n\n      createPropertyObserver: function (observerContext) {\n        var dependentArrayObserver = this;\n\n        observerContext.beforeObserver = function (obj, keyName) {\n          return dependentArrayObserver.itemPropertyWillChange(obj, keyName, observerContext.dependentArray, observerContext);\n        };\n\n        observerContext.observer = function (obj, keyName) {\n          return dependentArrayObserver.itemPropertyDidChange(obj, keyName, observerContext.dependentArray, observerContext);\n        };\n      },\n\n      resetTransformations: function (dependentKey, observerContexts) {\n        this.trackedArraysByGuid[dependentKey] = new TrackedArray(observerContexts);\n      },\n\n      trackAdd: function (dependentKey, index, newItems) {\n        var trackedArray = this.trackedArraysByGuid[dependentKey];\n\n        if (trackedArray) {\n          trackedArray.addItems(index, newItems);\n        }\n      },\n\n      trackRemove: function (dependentKey, index, removedCount) {\n        var trackedArray = this.trackedArraysByGuid[dependentKey];\n\n        if (trackedArray) {\n          return trackedArray.removeItems(index, removedCount);\n        }\n\n        return [];\n      },\n\n      updateIndexes: function (trackedArray, array) {\n        var length = get(array, 'length');\n        // OPTIMIZE: we could stop updating once we hit the object whose observer\n        // fired; ie partially apply the transformations\n        trackedArray.apply(function (observerContexts, offset, operation, operationIndex) {\n          // we don't even have observer contexts for removed items, even if we did,\n          // they no longer have any index in the array\n          if (operation === TrackedArray.DELETE) { return; }\n          if (operationIndex === 0 && operation === TrackedArray.RETAIN && observerContexts.length === length && offset === 0) {\n            // If we update many items we don't want to walk the array each time: we\n            // only need to update the indexes at most once per run loop.\n            return;\n          }\n\n          forEach(observerContexts, function (context, index) {\n            context.index = index + offset;\n          });\n        });\n      },\n\n      dependentArrayWillChange: function (dependentArray, index, removedCount, addedCount) {\n        if (this.suspended) { return; }\n\n        var removedItem = this.callbacks.removedItem;\n        var changeMeta;\n        var guid = guidFor(dependentArray);\n        var dependentKey = this.dependentKeysByGuid[guid];\n        var itemPropertyKeys = this.cp._itemPropertyKeys[dependentKey] || [];\n        var length = get(dependentArray, 'length');\n        var normalizedIndex = normalizeIndex(index, length, 0);\n        var normalizedRemoveCount = normalizeRemoveCount(normalizedIndex, length, removedCount);\n        var item, itemIndex, sliceIndex, observerContexts;\n\n        observerContexts = this.trackRemove(dependentKey, normalizedIndex, normalizedRemoveCount);\n\n        function removeObservers(propertyKey) {\n          observerContexts[sliceIndex].destroyed = true;\n          removeBeforeObserver(item, propertyKey, this, observerContexts[sliceIndex].beforeObserver);\n          removeObserver(item, propertyKey, this, observerContexts[sliceIndex].observer);\n        }\n\n        for (sliceIndex = normalizedRemoveCount - 1; sliceIndex >= 0; --sliceIndex) {\n          itemIndex = normalizedIndex + sliceIndex;\n          if (itemIndex >= length) { break; }\n\n          item = dependentArray.objectAt(itemIndex);\n\n          forEach(itemPropertyKeys, removeObservers, this);\n\n          changeMeta = new ChangeMeta(dependentArray, item, itemIndex, this.instanceMeta.propertyName, this.cp, normalizedRemoveCount);\n          this.setValue(removedItem.call(\n            this.instanceMeta.context, this.getValue(), item, changeMeta, this.instanceMeta.sugarMeta));\n        }\n        this.callbacks.flushedChanges.call(this.instanceMeta.context, this.getValue(), this.instanceMeta.sugarMeta);\n      },\n\n      dependentArrayDidChange: function (dependentArray, index, removedCount, addedCount) {\n        if (this.suspended) { return; }\n\n        var addedItem = this.callbacks.addedItem;\n        var guid = guidFor(dependentArray);\n        var dependentKey = this.dependentKeysByGuid[guid];\n        var observerContexts = new Array(addedCount);\n        var itemPropertyKeys = this.cp._itemPropertyKeys[dependentKey];\n        var length = get(dependentArray, 'length');\n        var normalizedIndex = normalizeIndex(index, length, addedCount);\n        var endIndex = normalizedIndex + addedCount;\n        var changeMeta, observerContext;\n\n        forEach(dependentArray.slice(normalizedIndex, endIndex), function (item, sliceIndex) {\n          if (itemPropertyKeys) {\n            observerContext = this.createPropertyObserverContext(dependentArray, normalizedIndex + sliceIndex,\n              this.trackedArraysByGuid[dependentKey]);\n            observerContexts[sliceIndex] = observerContext;\n\n            forEach(itemPropertyKeys, function (propertyKey) {\n              addBeforeObserver(item, propertyKey, this, observerContext.beforeObserver);\n              addObserver(item, propertyKey, this, observerContext.observer);\n            }, this);\n          }\n\n          changeMeta = new ChangeMeta(dependentArray, item, normalizedIndex + sliceIndex, this.instanceMeta.propertyName, this.cp, addedCount);\n          this.setValue(addedItem.call(\n            this.instanceMeta.context, this.getValue(), item, changeMeta, this.instanceMeta.sugarMeta));\n        }, this);\n        this.callbacks.flushedChanges.call(this.instanceMeta.context, this.getValue(), this.instanceMeta.sugarMeta);\n        this.trackAdd(dependentKey, normalizedIndex, observerContexts);\n      },\n\n      itemPropertyWillChange: function (obj, keyName, array, observerContext) {\n        var guid = guidFor(obj);\n\n        if (!this.changedItems[guid]) {\n          this.changedItems[guid] = {\n            array: array,\n            observerContext: observerContext,\n            obj: obj,\n            previousValues: {}\n          };\n        }\n\n        ++this.changedItemCount;\n        this.changedItems[guid].previousValues[keyName] = get(obj, keyName);\n      },\n\n      itemPropertyDidChange: function (obj, keyName, array, observerContext) {\n        if (--this.changedItemCount === 0) {\n          this.flushChanges();\n        }\n      },\n\n      flushChanges: function () {\n        var changedItems = this.changedItems;\n        var key, c, changeMeta;\n\n        for (key in changedItems) {\n          c = changedItems[key];\n          if (c.observerContext.destroyed) { continue; }\n\n          this.updateIndexes(c.observerContext.trackedArray, c.observerContext.dependentArray);\n\n          changeMeta = new ChangeMeta(c.array, c.obj, c.observerContext.index, this.instanceMeta.propertyName, this.cp, changedItems.length, c.previousValues);\n          this.setValue(\n            this.callbacks.removedItem.call(this.instanceMeta.context, this.getValue(), c.obj, changeMeta, this.instanceMeta.sugarMeta));\n          this.setValue(\n            this.callbacks.addedItem.call(this.instanceMeta.context, this.getValue(), c.obj, changeMeta, this.instanceMeta.sugarMeta));\n        }\n\n        this.changedItems = {};\n        this.callbacks.flushedChanges.call(this.instanceMeta.context, this.getValue(), this.instanceMeta.sugarMeta);\n      }\n    };\n\n    function normalizeIndex(index, length, newItemsOffset) {\n      if (index < 0) {\n        return Math.max(0, length + index);\n      } else if (index < length) {\n        return index;\n      } else /* index > length */ {\n        return Math.min(length - newItemsOffset, index);\n      }\n    }\n\n    function normalizeRemoveCount(index, length, removedCount) {\n      return Math.min(removedCount, length - index);\n    }\n\n    function ChangeMeta(dependentArray, item, index, propertyName, property, changedCount, previousValues){\n      this.arrayChanged = dependentArray;\n      this.index = index;\n      this.item = item;\n      this.propertyName = propertyName;\n      this.property = property;\n      this.changedCount = changedCount;\n\n      if (previousValues) {\n        // previous values only available for item property changes\n        this.previousValues = previousValues;\n      }\n    }\n\n    function addItems(dependentArray, callbacks, cp, propertyName, meta) {\n      forEach(dependentArray, function (item, index) {\n        meta.setValue( callbacks.addedItem.call(\n          this, meta.getValue(), item, new ChangeMeta(dependentArray, item, index, propertyName, cp, dependentArray.length), meta.sugarMeta));\n      }, this);\n      callbacks.flushedChanges.call(this, meta.getValue(), meta.sugarMeta);\n    }\n\n    function reset(cp, propertyName) {\n      var callbacks = cp._callbacks();\n      var hadMeta = cp._hasInstanceMeta(this, propertyName);\n      var meta = cp._instanceMeta(this, propertyName);\n\n      if (hadMeta) { meta.setValue(cp.resetValue(meta.getValue())); }\n\n      if (cp.options.initialize) {\n        cp.options.initialize.call(this, meta.getValue(), {\n          property: cp,\n          propertyName: propertyName\n        }, meta.sugarMeta);\n      }\n    }\n\n    function partiallyRecomputeFor(obj, dependentKey) {\n      if (arrayBracketPattern.test(dependentKey)) {\n        return false;\n      }\n\n      var value = get(obj, dependentKey);\n      return EmberArray.detect(value);\n    }\n\n    function ReduceComputedPropertyInstanceMeta(context, propertyName, initialValue) {\n      this.context = context;\n      this.propertyName = propertyName;\n      this.cache = metaFor(context).cache;\n      this.dependentArrays = {};\n      this.sugarMeta = {};\n      this.initialValue = initialValue;\n    }\n\n    ReduceComputedPropertyInstanceMeta.prototype = {\n      getValue: function () {\n        var value = cacheGet(this.cache, this.propertyName);\n\n        if (value !== undefined) {\n          return value;\n        } else {\n          return this.initialValue;\n        }\n      },\n\n      setValue: function(newValue, triggerObservers) {\n        // This lets sugars force a recomputation, handy for very simple\n        // implementations of eg max.\n        if (newValue === cacheGet(this.cache, this.propertyName)) {\n          return;\n        }\n\n        if (triggerObservers) {\n          propertyWillChange(this.context, this.propertyName);\n        }\n\n        if (newValue === undefined) {\n          cacheRemove(this.cache, this.propertyName);\n        } else {\n          cacheSet(this.cache, this.propertyName, newValue);\n        }\n\n        if (triggerObservers) {\n          propertyDidChange(this.context, this.propertyName);\n        }\n      }\n    };\n\n    /**\n      A computed property whose dependent keys are arrays and which is updated with\n      \"one at a time\" semantics.\n\n      @class ReduceComputedProperty\n      @namespace Ember\n      @extends Ember.ComputedProperty\n      @constructor\n    */\n\n    __exports__.ReduceComputedProperty = ReduceComputedProperty;\n    // TODO: default export\n\n    function ReduceComputedProperty(options) {\n      var cp = this;\n\n      this.options = options;\n      this._dependentKeys = null;\n      // A map of dependentKey -> [itemProperty, ...] that tracks what properties of\n      // items in the array we must track to update this property.\n      this._itemPropertyKeys = {};\n      this._previousItemPropertyKeys = {};\n\n      this.readOnly();\n      this.cacheable();\n\n      this.recomputeOnce = function(propertyName) {\n        // What we really want to do is coalesce by <cp, propertyName>.\n        // We need a form of `scheduleOnce` that accepts an arbitrary token to\n        // coalesce by, in addition to the target and method.\n        run.once(this, recompute, propertyName);\n      };\n\n      var recompute = function(propertyName) {\n        var dependentKeys = cp._dependentKeys;\n        var meta = cp._instanceMeta(this, propertyName);\n        var callbacks = cp._callbacks();\n\n        reset.call(this, cp, propertyName);\n\n        meta.dependentArraysObserver.suspendArrayObservers(function () {\n          forEach(cp._dependentKeys, function (dependentKey) {\n            Ember.assert(\n              'dependent array ' + dependentKey + ' must be an `Ember.Array`.  ' +\n              'If you are not extending arrays, you will need to wrap native arrays with `Ember.A`',\n              !(isArray(get(this, dependentKey)) && !EmberArray.detect(get(this, dependentKey))));\n\n            if (!partiallyRecomputeFor(this, dependentKey)) { return; }\n\n            var dependentArray = get(this, dependentKey);\n            var previousDependentArray = meta.dependentArrays[dependentKey];\n\n            if (dependentArray === previousDependentArray) {\n              // The array may be the same, but our item property keys may have\n              // changed, so we set them up again.  We can't easily tell if they've\n              // changed: the array may be the same object, but with different\n              // contents.\n              if (cp._previousItemPropertyKeys[dependentKey]) {\n                delete cp._previousItemPropertyKeys[dependentKey];\n                meta.dependentArraysObserver.setupPropertyObservers(dependentKey, cp._itemPropertyKeys[dependentKey]);\n              }\n            } else {\n              meta.dependentArrays[dependentKey] = dependentArray;\n\n              if (previousDependentArray) {\n                meta.dependentArraysObserver.teardownObservers(previousDependentArray, dependentKey);\n              }\n\n              if (dependentArray) {\n                meta.dependentArraysObserver.setupObservers(dependentArray, dependentKey);\n              }\n            }\n          }, this);\n        }, this);\n\n        forEach(cp._dependentKeys, function(dependentKey) {\n          if (!partiallyRecomputeFor(this, dependentKey)) { return; }\n\n          var dependentArray = get(this, dependentKey);\n\n          if (dependentArray) {\n            addItems.call(this, dependentArray, callbacks, cp, propertyName, meta);\n          }\n        }, this);\n      };\n\n\n      this.func = function (propertyName) {\n        Ember.assert('Computed reduce values require at least one dependent key', cp._dependentKeys);\n\n        recompute.call(this, propertyName);\n\n        return cp._instanceMeta(this, propertyName).getValue();\n      };\n    }\n\n    ReduceComputedProperty.prototype = o_create(ComputedProperty.prototype);\n\n    function defaultCallback(computedValue) {\n      return computedValue;\n    }\n\n    ReduceComputedProperty.prototype._callbacks = function () {\n      if (!this.callbacks) {\n        var options = this.options;\n\n        this.callbacks = {\n          removedItem: options.removedItem || defaultCallback,\n          addedItem: options.addedItem || defaultCallback,\n          flushedChanges: options.flushedChanges || defaultCallback\n        };\n      }\n\n      return this.callbacks;\n    };\n\n    ReduceComputedProperty.prototype._hasInstanceMeta = function (context, propertyName) {\n      return !!metaFor(context).cacheMeta[propertyName];\n    };\n\n    ReduceComputedProperty.prototype._instanceMeta = function (context, propertyName) {\n      var cacheMeta = metaFor(context).cacheMeta;\n      var meta = cacheMeta[propertyName];\n\n      if (!meta) {\n        meta = cacheMeta[propertyName] = new ReduceComputedPropertyInstanceMeta(context, propertyName, this.initialValue());\n        meta.dependentArraysObserver = new DependentArraysObserver(this._callbacks(), this, meta, context, propertyName, meta.sugarMeta);\n      }\n\n      return meta;\n    };\n\n    ReduceComputedProperty.prototype.initialValue = function () {\n      if (typeof this.options.initialValue === 'function') {\n        return this.options.initialValue();\n      }\n      else {\n        return this.options.initialValue;\n      }\n    };\n\n    ReduceComputedProperty.prototype.resetValue = function (value) {\n      return this.initialValue();\n    };\n\n    ReduceComputedProperty.prototype.itemPropertyKey = function (dependentArrayKey, itemPropertyKey) {\n      this._itemPropertyKeys[dependentArrayKey] = this._itemPropertyKeys[dependentArrayKey] || [];\n      this._itemPropertyKeys[dependentArrayKey].push(itemPropertyKey);\n    };\n\n    ReduceComputedProperty.prototype.clearItemPropertyKeys = function (dependentArrayKey) {\n      if (this._itemPropertyKeys[dependentArrayKey]) {\n        this._previousItemPropertyKeys[dependentArrayKey] = this._itemPropertyKeys[dependentArrayKey];\n        this._itemPropertyKeys[dependentArrayKey] = [];\n      }\n    };\n\n    ReduceComputedProperty.prototype.property = function () {\n      var cp = this;\n      var args = a_slice.call(arguments);\n      var propertyArgs = {};\n      var match, dependentArrayKey, itemPropertyKey;\n\n      forEach(args, function (dependentKey) {\n        if (doubleEachPropertyPattern.test(dependentKey)) {\n          throw new EmberError('Nested @each properties not supported: ' + dependentKey);\n        } else if (match = eachPropertyPattern.exec(dependentKey)) {\n          dependentArrayKey = match[1];\n\n          var itemPropertyKeyPattern = match[2];\n          var addItemPropertyKey = function (itemPropertyKey) {\n            cp.itemPropertyKey(dependentArrayKey, itemPropertyKey);\n          };\n\n          expandProperties(itemPropertyKeyPattern, addItemPropertyKey);\n          propertyArgs[guidFor(dependentArrayKey)] = dependentArrayKey;\n        } else {\n          propertyArgs[guidFor(dependentKey)] = dependentKey;\n        }\n      });\n\n      var propertyArgsToArray = [];\n      for (var guid in propertyArgs) {\n        propertyArgsToArray.push(propertyArgs[guid]);\n      }\n\n      return ComputedProperty.prototype.property.apply(this, propertyArgsToArray);\n    };\n\n    /**\n      Creates a computed property which operates on dependent arrays and\n      is updated with \"one at a time\" semantics. When items are added or\n      removed from the dependent array(s) a reduce computed only operates\n      on the change instead of re-evaluating the entire array.\n\n      If there are more than one arguments the first arguments are\n      considered to be dependent property keys. The last argument is\n      required to be an options object. The options object can have the\n      following four properties:\n\n      `initialValue` - A value or function that will be used as the initial\n      value for the computed. If this property is a function the result of calling\n      the function will be used as the initial value. This property is required.\n\n      `initialize` - An optional initialize function. Typically this will be used\n      to set up state on the instanceMeta object.\n\n      `removedItem` - A function that is called each time an element is removed\n      from the array.\n\n      `addedItem` - A function that is called each time an element is added to\n      the array.\n\n\n      The `initialize` function has the following signature:\n\n      ```javascript\n      function(initialValue, changeMeta, instanceMeta)\n      ```\n\n      `initialValue` - The value of the `initialValue` property from the\n      options object.\n\n      `changeMeta` - An object which contains meta information about the\n      computed. It contains the following properties:\n\n         - `property` the computed property\n         - `propertyName` the name of the property on the object\n\n      `instanceMeta` - An object that can be used to store meta\n      information needed for calculating your computed. For example a\n      unique computed might use this to store the number of times a given\n      element is found in the dependent array.\n\n\n      The `removedItem` and `addedItem` functions both have the following signature:\n\n      ```javascript\n      function(accumulatedValue, item, changeMeta, instanceMeta)\n      ```\n\n      `accumulatedValue` - The value returned from the last time\n      `removedItem` or `addedItem` was called or `initialValue`.\n\n      `item` - the element added or removed from the array\n\n      `changeMeta` - An object which contains meta information about the\n      change. It contains the following properties:\n\n        - `property` the computed property\n        - `propertyName` the name of the property on the object\n        - `index` the index of the added or removed item\n        - `item` the added or removed item: this is exactly the same as\n          the second arg\n        - `arrayChanged` the array that triggered the change. Can be\n          useful when depending on multiple arrays.\n\n      For property changes triggered on an item property change (when\n      depKey is something like `someArray.@each.someProperty`),\n      `changeMeta` will also contain the following property:\n\n        - `previousValues` an object whose keys are the properties that changed on\n        the item, and whose values are the item's previous values.\n\n      `previousValues` is important Ember coalesces item property changes via\n      Ember.run.once. This means that by the time removedItem gets called, item has\n      the new values, but you may need the previous value (eg for sorting &\n      filtering).\n\n      `instanceMeta` - An object that can be used to store meta\n      information needed for calculating your computed. For example a\n      unique computed might use this to store the number of times a given\n      element is found in the dependent array.\n\n      The `removedItem` and `addedItem` functions should return the accumulated\n      value. It is acceptable to not return anything (ie return undefined)\n      to invalidate the computation. This is generally not a good idea for\n      arrayComputed but it's used in eg max and min.\n\n      Note that observers will be fired if either of these functions return a value\n      that differs from the accumulated value.  When returning an object that\n      mutates in response to array changes, for example an array that maps\n      everything from some other array (see `Ember.computed.map`), it is usually\n      important that the *same* array be returned to avoid accidentally triggering observers.\n\n      Example\n\n      ```javascript\n      Ember.computed.max = function(dependentKey) {\n        return Ember.reduceComputed(dependentKey, {\n          initialValue: -Infinity,\n\n          addedItem: function(accumulatedValue, item, changeMeta, instanceMeta) {\n            return Math.max(accumulatedValue, item);\n          },\n\n          removedItem: function(accumulatedValue, item, changeMeta, instanceMeta) {\n            if (item < accumulatedValue) {\n              return accumulatedValue;\n            }\n          }\n        });\n      };\n      ```\n\n      Dependent keys may refer to `@this` to observe changes to the object itself,\n      which must be array-like, rather than a property of the object.  This is\n      mostly useful for array proxies, to ensure objects are retrieved via\n      `objectAtContent`.  This is how you could sort items by properties defined on an item controller.\n\n      Example\n\n      ```javascript\n      App.PeopleController = Ember.ArrayController.extend({\n        itemController: 'person',\n\n        sortedPeople: Ember.computed.sort('@this.@each.reversedName', function(personA, personB) {\n          // `reversedName` isn't defined on Person, but we have access to it via\n          // the item controller App.PersonController.  If we'd used\n          // `content.@each.reversedName` above, we would be getting the objects\n          // directly and not have access to `reversedName`.\n          //\n          var reversedNameA = get(personA, 'reversedName');\n          var reversedNameB = get(personB, 'reversedName');\n\n          return Ember.compare(reversedNameA, reversedNameB);\n        })\n      });\n\n      App.PersonController = Ember.ObjectController.extend({\n        reversedName: function() {\n          return reverse(get(this, 'name'));\n        }.property('name')\n      });\n      ```\n\n      Dependent keys whose values are not arrays are treated as regular\n      dependencies: when they change, the computed property is completely\n      recalculated.  It is sometimes useful to have dependent arrays with similar\n      semantics.  Dependent keys which end in `.[]` do not use \"one at a time\"\n      semantics.  When an item is added or removed from such a dependency, the\n      computed property is completely recomputed.\n\n      When the computed property is completely recomputed, the `accumulatedValue`\n      is discarded, it starts with `initialValue` again, and each item is passed\n      to `addedItem` in turn.\n\n      Example\n\n      ```javascript\n      Ember.Object.extend({\n        // When `string` is changed, `computed` is completely recomputed.\n        string: 'a string',\n\n        // When an item is added to `array`, `addedItem` is called.\n        array: [],\n\n        // When an item is added to `anotherArray`, `computed` is completely\n        // recomputed.\n        anotherArray: [],\n\n        computed: Ember.reduceComputed('string', 'array', 'anotherArray.[]', {\n          addedItem: addedItemCallback,\n          removedItem: removedItemCallback\n        })\n      });\n      ```\n\n      @method reduceComputed\n      @for Ember\n      @param {String} [dependentKeys*]\n      @param {Object} options\n      @return {Ember.ComputedProperty}\n    */\n    function reduceComputed(options) {\n      var args;\n\n      if (arguments.length > 1) {\n        args = a_slice.call(arguments, 0, -1);\n        options = a_slice.call(arguments, -1)[0];\n      }\n\n      if (typeof options !== 'object') {\n        throw new EmberError('Reduce Computed Property declared without an options hash');\n      }\n\n      if (!('initialValue' in options)) {\n        throw new EmberError('Reduce Computed Property declared without an initial value');\n      }\n\n      var cp = new ReduceComputedProperty(options);\n\n      if (args) {\n        cp.property.apply(cp, args);\n      }\n\n      return cp;\n    }\n\n    __exports__.reduceComputed = reduceComputed;\n  });\nenifed(\"ember-runtime/computed/reduce_computed_macros\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-metal/error\",\"ember-metal/enumerable_utils\",\"ember-metal/run_loop\",\"ember-metal/observer\",\"ember-runtime/computed/array_computed\",\"ember-runtime/computed/reduce_computed\",\"ember-runtime/system/subarray\",\"ember-metal/keys\",\"ember-runtime/compare\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var isArray = __dependency4__.isArray;\n    var guidFor = __dependency4__.guidFor;\n    var EmberError = __dependency5__[\"default\"];\n    var forEach = __dependency6__.forEach;\n    var run = __dependency7__[\"default\"];\n    var addObserver = __dependency8__.addObserver;\n    var arrayComputed = __dependency9__.arrayComputed;\n    var reduceComputed = __dependency10__.reduceComputed;\n    var SubArray = __dependency11__[\"default\"];\n    var keys = __dependency12__[\"default\"];\n    var compare = __dependency13__[\"default\"];\n\n    var a_slice = [].slice;\n\n    /**\n     A computed property that returns the sum of the value\n     in the dependent array.\n\n     @method computed.sum\n     @for Ember\n     @param {String} dependentKey\n     @return {Ember.ComputedProperty} computes the sum of all values in the dependentKey's array\n     @since 1.4.0\n    */\n\n    function sum(dependentKey){\n      return reduceComputed(dependentKey, {\n        initialValue: 0,\n\n        addedItem: function(accumulatedValue, item, changeMeta, instanceMeta){\n          return accumulatedValue + item;\n        },\n\n        removedItem: function(accumulatedValue, item, changeMeta, instanceMeta){\n          return accumulatedValue - item;\n        }\n      });\n    }\n\n    __exports__.sum = sum;/**\n      A computed property that calculates the maximum value in the\n      dependent array. This will return `-Infinity` when the dependent\n      array is empty.\n\n      ```javascript\n      var Person = Ember.Object.extend({\n        childAges: Ember.computed.mapBy('children', 'age'),\n        maxChildAge: Ember.computed.max('childAges')\n      });\n\n      var lordByron = Person.create({ children: [] });\n\n      lordByron.get('maxChildAge'); // -Infinity\n      lordByron.get('children').pushObject({\n        name: 'Augusta Ada Byron', age: 7\n      });\n      lordByron.get('maxChildAge'); // 7\n      lordByron.get('children').pushObjects([{\n        name: 'Allegra Byron',\n        age: 5\n      }, {\n        name: 'Elizabeth Medora Leigh',\n        age: 8\n      }]);\n      lordByron.get('maxChildAge'); // 8\n      ```\n\n      @method computed.max\n      @for Ember\n      @param {String} dependentKey\n      @return {Ember.ComputedProperty} computes the largest value in the dependentKey's array\n    */\n    function max(dependentKey) {\n      return reduceComputed(dependentKey, {\n        initialValue: -Infinity,\n\n        addedItem: function (accumulatedValue, item, changeMeta, instanceMeta) {\n          return Math.max(accumulatedValue, item);\n        },\n\n        removedItem: function (accumulatedValue, item, changeMeta, instanceMeta) {\n          if (item < accumulatedValue) {\n            return accumulatedValue;\n          }\n        }\n      });\n    }\n\n    __exports__.max = max;/**\n      A computed property that calculates the minimum value in the\n      dependent array. This will return `Infinity` when the dependent\n      array is empty.\n\n      ```javascript\n      var Person = Ember.Object.extend({\n        childAges: Ember.computed.mapBy('children', 'age'),\n        minChildAge: Ember.computed.min('childAges')\n      });\n\n      var lordByron = Person.create({ children: [] });\n\n      lordByron.get('minChildAge'); // Infinity\n      lordByron.get('children').pushObject({\n        name: 'Augusta Ada Byron', age: 7\n      });\n      lordByron.get('minChildAge'); // 7\n      lordByron.get('children').pushObjects([{\n        name: 'Allegra Byron',\n        age: 5\n      }, {\n        name: 'Elizabeth Medora Leigh',\n        age: 8\n      }]);\n      lordByron.get('minChildAge'); // 5\n      ```\n\n      @method computed.min\n      @for Ember\n      @param {String} dependentKey\n      @return {Ember.ComputedProperty} computes the smallest value in the dependentKey's array\n    */\n    function min(dependentKey) {\n      return reduceComputed(dependentKey, {\n        initialValue: Infinity,\n\n        addedItem: function (accumulatedValue, item, changeMeta, instanceMeta) {\n          return Math.min(accumulatedValue, item);\n        },\n\n        removedItem: function (accumulatedValue, item, changeMeta, instanceMeta) {\n          if (item > accumulatedValue) {\n            return accumulatedValue;\n          }\n        }\n      });\n    }\n\n    __exports__.min = min;/**\n      Returns an array mapped via the callback\n\n      The callback method you provide should have the following signature.\n      `item` is the current item in the iteration.\n      `index` is the integer index of the current item in the iteration.\n\n      ```javascript\n      function(item, index);\n      ```\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        excitingChores: Ember.computed.map('chores', function(chore, index) {\n          return chore.toUpperCase() + '!';\n        })\n      });\n\n      var hamster = Hamster.create({\n        chores: ['clean', 'write more unit tests']\n      });\n\n      hamster.get('excitingChores'); // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n      ```\n\n      @method computed.map\n      @for Ember\n      @param {String} dependentKey\n      @param {Function} callback\n      @return {Ember.ComputedProperty} an array mapped via the callback\n    */\n    function map(dependentKey, callback) {\n      var options = {\n        addedItem: function(array, item, changeMeta, instanceMeta) {\n          var mapped = callback.call(this, item, changeMeta.index);\n          array.insertAt(changeMeta.index, mapped);\n          return array;\n        },\n        removedItem: function(array, item, changeMeta, instanceMeta) {\n          array.removeAt(changeMeta.index, 1);\n          return array;\n        }\n      };\n\n      return arrayComputed(dependentKey, options);\n    }\n\n    __exports__.map = map;/**\n      Returns an array mapped to the specified key.\n\n      ```javascript\n      var Person = Ember.Object.extend({\n        childAges: Ember.computed.mapBy('children', 'age')\n      });\n\n      var lordByron = Person.create({ children: [] });\n\n      lordByron.get('childAges'); // []\n      lordByron.get('children').pushObject({ name: 'Augusta Ada Byron', age: 7 });\n      lordByron.get('childAges'); // [7]\n      lordByron.get('children').pushObjects([{\n        name: 'Allegra Byron',\n        age: 5\n      }, {\n        name: 'Elizabeth Medora Leigh',\n        age: 8\n      }]);\n      lordByron.get('childAges'); // [7, 5, 8]\n      ```\n\n      @method computed.mapBy\n      @for Ember\n      @param {String} dependentKey\n      @param {String} propertyKey\n      @return {Ember.ComputedProperty} an array mapped to the specified key\n    */\n    function mapBy (dependentKey, propertyKey) {\n      var callback = function(item) { return get(item, propertyKey); };\n      return map(dependentKey + '.@each.' + propertyKey, callback);\n    }\n\n    __exports__.mapBy = mapBy;/**\n      @method computed.mapProperty\n      @for Ember\n      @deprecated Use `Ember.computed.mapBy` instead\n      @param dependentKey\n      @param propertyKey\n    */\n    var mapProperty = mapBy;\n    __exports__.mapProperty = mapProperty;\n    /**\n      Filters the array by the callback.\n\n      The callback method you provide should have the following signature.\n      `item` is the current item in the iteration.\n      `index` is the integer index of the current item in the iteration.\n\n      ```javascript\n      function(item, index);\n      ```\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        remainingChores: Ember.computed.filter('chores', function(chore, index) {\n          return !chore.done;\n        })\n      });\n\n      var hamster = Hamster.create({\n        chores: [\n          { name: 'cook', done: true },\n          { name: 'clean', done: true },\n          { name: 'write more unit tests', done: false }\n        ]\n      });\n\n      hamster.get('remainingChores'); // [{name: 'write more unit tests', done: false}]\n      ```\n\n      @method computed.filter\n      @for Ember\n      @param {String} dependentKey\n      @param {Function} callback\n      @return {Ember.ComputedProperty} the filtered array\n    */\n    function filter(dependentKey, callback) {\n      var options = {\n        initialize: function (array, changeMeta, instanceMeta) {\n          instanceMeta.filteredArrayIndexes = new SubArray();\n        },\n\n        addedItem: function (array, item, changeMeta, instanceMeta) {\n          var match = !!callback.call(this, item, changeMeta.index);\n          var filterIndex = instanceMeta.filteredArrayIndexes.addItem(changeMeta.index, match);\n\n          if (match) {\n            array.insertAt(filterIndex, item);\n          }\n\n          return array;\n        },\n\n        removedItem: function(array, item, changeMeta, instanceMeta) {\n          var filterIndex = instanceMeta.filteredArrayIndexes.removeItem(changeMeta.index);\n\n          if (filterIndex > -1) {\n            array.removeAt(filterIndex);\n          }\n\n          return array;\n        }\n      };\n\n      return arrayComputed(dependentKey, options);\n    }\n\n    __exports__.filter = filter;/**\n      Filters the array by the property and value\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        remainingChores: Ember.computed.filterBy('chores', 'done', false)\n      });\n\n      var hamster = Hamster.create({\n        chores: [\n          { name: 'cook', done: true },\n          { name: 'clean', done: true },\n          { name: 'write more unit tests', done: false }\n        ]\n      });\n\n      hamster.get('remainingChores'); // [{ name: 'write more unit tests', done: false }]\n      ```\n\n      @method computed.filterBy\n      @for Ember\n      @param {String} dependentKey\n      @param {String} propertyKey\n      @param {*} value\n      @return {Ember.ComputedProperty} the filtered array\n    */\n    function filterBy (dependentKey, propertyKey, value) {\n      var callback;\n\n      if (arguments.length === 2) {\n        callback = function(item) {\n          return get(item, propertyKey);\n        };\n      } else {\n        callback = function(item) {\n          return get(item, propertyKey) === value;\n        };\n      }\n\n      return filter(dependentKey + '.@each.' + propertyKey, callback);\n    }\n\n    __exports__.filterBy = filterBy;/**\n      @method computed.filterProperty\n      @for Ember\n      @param dependentKey\n      @param propertyKey\n      @param value\n      @deprecated Use `Ember.computed.filterBy` instead\n    */\n    var filterProperty = filterBy;\n    __exports__.filterProperty = filterProperty;\n    /**\n      A computed property which returns a new array with all the unique\n      elements from one or more dependent arrays.\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        uniqueFruits: Ember.computed.uniq('fruits')\n      });\n\n      var hamster = Hamster.create({\n        fruits: [\n          'banana',\n          'grape',\n          'kale',\n          'banana'\n        ]\n      });\n\n      hamster.get('uniqueFruits'); // ['banana', 'grape', 'kale']\n      ```\n\n      @method computed.uniq\n      @for Ember\n      @param {String} propertyKey*\n      @return {Ember.ComputedProperty} computes a new array with all the\n      unique elements from the dependent array\n    */\n    function uniq() {\n      var args = a_slice.call(arguments);\n\n      args.push({\n        initialize: function(array, changeMeta, instanceMeta) {\n          instanceMeta.itemCounts = {};\n        },\n\n        addedItem: function(array, item, changeMeta, instanceMeta) {\n          var guid = guidFor(item);\n\n          if (!instanceMeta.itemCounts[guid]) {\n            instanceMeta.itemCounts[guid] = 1;\n            array.pushObject(item);\n          } else {\n            ++instanceMeta.itemCounts[guid];\n          }\n          return array;\n        },\n\n        removedItem: function(array, item, _, instanceMeta) {\n          var guid = guidFor(item);\n          var itemCounts = instanceMeta.itemCounts;\n\n          if (--itemCounts[guid] === 0) {\n            array.removeObject(item);\n          }\n\n          return array;\n        }\n      });\n\n      return arrayComputed.apply(null, args);\n    }\n\n    __exports__.uniq = uniq;/**\n      Alias for [Ember.computed.uniq](/api/#method_computed_uniq).\n\n      @method computed.union\n      @for Ember\n      @param {String} propertyKey*\n      @return {Ember.ComputedProperty} computes a new array with all the\n      unique elements from the dependent array\n    */\n    var union = uniq;\n    __exports__.union = union;\n    /**\n      A computed property which returns a new array with all the duplicated\n      elements from two or more dependent arrays.\n\n      Example\n\n      ```javascript\n      var obj = Ember.Object.createWithMixins({\n        adaFriends: ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],\n        charlesFriends: ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock'],\n        friendsInCommon: Ember.computed.intersect('adaFriends', 'charlesFriends')\n      });\n\n      obj.get('friendsInCommon'); // ['William King', 'Mary Somerville']\n      ```\n\n      @method computed.intersect\n      @for Ember\n      @param {String} propertyKey*\n      @return {Ember.ComputedProperty} computes a new array with all the\n      duplicated elements from the dependent arrays\n    */\n    function intersect() {\n      var args = a_slice.call(arguments);\n\n      args.push({\n        initialize: function (array, changeMeta, instanceMeta) {\n          instanceMeta.itemCounts = {};\n        },\n\n        addedItem: function(array, item, changeMeta, instanceMeta) {\n          var itemGuid = guidFor(item);\n          var dependentGuid = guidFor(changeMeta.arrayChanged);\n          var numberOfDependentArrays = changeMeta.property._dependentKeys.length;\n          var itemCounts = instanceMeta.itemCounts;\n\n          if (!itemCounts[itemGuid]) {\n            itemCounts[itemGuid] = {};\n          }\n\n          if (itemCounts[itemGuid][dependentGuid] === undefined) {\n            itemCounts[itemGuid][dependentGuid] = 0;\n          }\n\n          if (++itemCounts[itemGuid][dependentGuid] === 1 &&\n              numberOfDependentArrays === keys(itemCounts[itemGuid]).length) {\n            array.addObject(item);\n          }\n\n          return array;\n        },\n\n        removedItem: function(array, item, changeMeta, instanceMeta) {\n          var itemGuid = guidFor(item);\n          var dependentGuid = guidFor(changeMeta.arrayChanged);\n          var numberOfDependentArrays = changeMeta.property._dependentKeys.length;\n          var numberOfArraysItemAppearsIn;\n          var itemCounts = instanceMeta.itemCounts;\n\n          if (itemCounts[itemGuid][dependentGuid] === undefined) {\n            itemCounts[itemGuid][dependentGuid] = 0;\n          }\n\n          if (--itemCounts[itemGuid][dependentGuid] === 0) {\n            delete itemCounts[itemGuid][dependentGuid];\n            numberOfArraysItemAppearsIn = keys(itemCounts[itemGuid]).length;\n\n            if (numberOfArraysItemAppearsIn === 0) {\n              delete itemCounts[itemGuid];\n            }\n\n            array.removeObject(item);\n          }\n\n          return array;\n        }\n      });\n\n      return arrayComputed.apply(null, args);\n    }\n\n    __exports__.intersect = intersect;/**\n      A computed property which returns a new array with all the\n      properties from the first dependent array that are not in the second\n      dependent array.\n\n      Example\n\n      ```javascript\n      var Hamster = Ember.Object.extend({\n        likes: ['banana', 'grape', 'kale'],\n        wants: Ember.computed.setDiff('likes', 'fruits')\n      });\n\n      var hamster = Hamster.create({\n        fruits: [\n          'grape',\n          'kale',\n        ]\n      });\n\n      hamster.get('wants'); // ['banana']\n      ```\n\n      @method computed.setDiff\n      @for Ember\n      @param {String} setAProperty\n      @param {String} setBProperty\n      @return {Ember.ComputedProperty} computes a new array with all the\n      items from the first dependent array that are not in the second\n      dependent array\n    */\n    function setDiff(setAProperty, setBProperty) {\n      if (arguments.length !== 2) {\n        throw new EmberError('setDiff requires exactly two dependent arrays.');\n      }\n\n      return arrayComputed(setAProperty, setBProperty, {\n        addedItem: function (array, item, changeMeta, instanceMeta) {\n          var setA = get(this, setAProperty);\n          var setB = get(this, setBProperty);\n\n          if (changeMeta.arrayChanged === setA) {\n            if (!setB.contains(item)) {\n              array.addObject(item);\n            }\n          } else {\n            array.removeObject(item);\n          }\n\n          return array;\n        },\n\n        removedItem: function (array, item, changeMeta, instanceMeta) {\n          var setA = get(this, setAProperty);\n          var setB = get(this, setBProperty);\n\n          if (changeMeta.arrayChanged === setB) {\n            if (setA.contains(item)) {\n              array.addObject(item);\n            }\n          } else {\n            array.removeObject(item);\n          }\n\n          return array;\n        }\n      });\n    }\n\n    __exports__.setDiff = setDiff;function binarySearch(array, item, low, high) {\n      var mid, midItem, res, guidMid, guidItem;\n\n      if (arguments.length < 4) {\n        high = get(array, 'length');\n      }\n\n      if (arguments.length < 3) {\n        low = 0;\n      }\n\n      if (low === high) {\n        return low;\n      }\n\n      mid = low + Math.floor((high - low) / 2);\n      midItem = array.objectAt(mid);\n\n      guidMid = guidFor(midItem);\n      guidItem = guidFor(item);\n\n      if (guidMid === guidItem) {\n        return mid;\n      }\n\n      res = this.order(midItem, item);\n\n      if (res === 0) {\n        res = guidMid < guidItem ? -1 : 1;\n      }\n\n\n      if (res < 0) {\n        return this.binarySearch(array, item, mid+1, high);\n      } else if (res > 0) {\n        return this.binarySearch(array, item, low, mid);\n      }\n\n      return mid;\n    }\n\n\n    /**\n      A computed property which returns a new array with all the\n      properties from the first dependent array sorted based on a property\n      or sort function.\n\n      The callback method you provide should have the following signature:\n\n      ```javascript\n      function(itemA, itemB);\n      ```\n\n      - `itemA` the first item to compare.\n      - `itemB` the second item to compare.\n\n      This function should return negative number (e.g. `-1`) when `itemA` should come before\n      `itemB`. It should return positive number (e.g. `1`) when `itemA` should come after\n      `itemB`. If the `itemA` and `itemB` are equal this function should return `0`.\n\n      Therefore, if this function is comparing some numeric values, simple `itemA - itemB` or\n      `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used instead of series of `if`.\n\n      Example\n\n      ```javascript\n      var ToDoList = Ember.Object.extend({\n        // using standard ascending sort\n        todosSorting: ['name'],\n        sortedTodos: Ember.computed.sort('todos', 'todosSorting'),\n\n        // using descending sort\n        todosSortingDesc: ['name:desc'],\n        sortedTodosDesc: Ember.computed.sort('todos', 'todosSortingDesc'),\n\n        // using a custom sort function\n        priorityTodos: Ember.computed.sort('todos', function(a, b){\n          if (a.priority > b.priority) {\n            return 1;\n          } else if (a.priority < b.priority) {\n            return -1;\n          }\n\n          return 0;\n        })\n      });\n\n      var todoList = ToDoList.create({todos: [\n        { name: 'Unit Test', priority: 2 },\n        { name: 'Documentation', priority: 3 },\n        { name: 'Release', priority: 1 }\n      ]});\n\n      todoList.get('sortedTodos');      // [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]\n      todoList.get('sortedTodosDesc');  // [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]\n      todoList.get('priorityTodos');    // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]\n      ```\n\n      @method computed.sort\n      @for Ember\n      @param {String} dependentKey\n      @param {String or Function} sortDefinition a dependent key to an\n      array of sort properties (add `:desc` to the arrays sort properties to sort descending) or a function to use when sorting\n      @return {Ember.ComputedProperty} computes a new sorted array based\n      on the sort property array or callback function\n    */\n    function sort(itemsKey, sortDefinition) {\n      Ember.assert('Ember.computed.sort requires two arguments: an array key to sort and ' +\n        'either a sort properties key or sort function', arguments.length === 2);\n\n      if (typeof sortDefinition === 'function') {\n        return customSort(itemsKey, sortDefinition);\n      } else {\n        return propertySort(itemsKey, sortDefinition);\n      }\n    }\n\n    __exports__.sort = sort;function customSort(itemsKey, comparator) {\n      return arrayComputed(itemsKey, {\n        initialize: function (array, changeMeta, instanceMeta) {\n          instanceMeta.order = comparator;\n          instanceMeta.binarySearch = binarySearch;\n          instanceMeta.waitingInsertions = [];\n          instanceMeta.insertWaiting = function() {\n            var index, item;\n            var waiting = instanceMeta.waitingInsertions;\n            instanceMeta.waitingInsertions = [];\n            for (var i=0; i<waiting.length; i++) {\n              item = waiting[i];\n              index = instanceMeta.binarySearch(array, item);\n              array.insertAt(index, item);\n            }\n          };\n          instanceMeta.insertLater = function(item) {\n            this.waitingInsertions.push(item);\n          };\n        },\n\n        addedItem: function (array, item, changeMeta, instanceMeta) {\n          instanceMeta.insertLater(item);\n          return array;\n        },\n\n        removedItem: function (array, item, changeMeta, instanceMeta) {\n          array.removeObject(item);\n          return array;\n        },\n\n        flushedChanges: function(array, instanceMeta) {\n          instanceMeta.insertWaiting();\n        }\n      });\n    }\n\n    function propertySort(itemsKey, sortPropertiesKey) {\n      return arrayComputed(itemsKey, {\n        initialize: function (array, changeMeta, instanceMeta) {\n          function setupSortProperties() {\n            var sortPropertyDefinitions = get(this, sortPropertiesKey);\n            var sortProperties = instanceMeta.sortProperties = [];\n            var sortPropertyAscending = instanceMeta.sortPropertyAscending = {};\n            var sortProperty, idx, asc;\n\n            Ember.assert('Cannot sort: \\'' + sortPropertiesKey + '\\' is not an array.',\n                         isArray(sortPropertyDefinitions));\n\n            changeMeta.property.clearItemPropertyKeys(itemsKey);\n\n            forEach(sortPropertyDefinitions, function (sortPropertyDefinition) {\n              if ((idx = sortPropertyDefinition.indexOf(':')) !== -1) {\n                sortProperty = sortPropertyDefinition.substring(0, idx);\n                asc = sortPropertyDefinition.substring(idx+1).toLowerCase() !== 'desc';\n              } else {\n                sortProperty = sortPropertyDefinition;\n                asc = true;\n              }\n\n              sortProperties.push(sortProperty);\n              sortPropertyAscending[sortProperty] = asc;\n              changeMeta.property.itemPropertyKey(itemsKey, sortProperty);\n            });\n\n            sortPropertyDefinitions.addObserver('@each', this, updateSortPropertiesOnce);\n          }\n\n          function updateSortPropertiesOnce() {\n            run.once(this, updateSortProperties, changeMeta.propertyName);\n          }\n\n          function updateSortProperties(propertyName) {\n            setupSortProperties.call(this);\n            changeMeta.property.recomputeOnce.call(this, propertyName);\n          }\n\n          addObserver(this, sortPropertiesKey, updateSortPropertiesOnce);\n          setupSortProperties.call(this);\n\n          instanceMeta.order = function (itemA, itemB) {\n            var sortProperty, result, asc;\n            var keyA = this.keyFor(itemA);\n            var keyB = this.keyFor(itemB);\n\n            for (var i = 0; i < this.sortProperties.length; ++i) {\n              sortProperty = this.sortProperties[i];\n\n              result = compare(keyA[sortProperty], keyB[sortProperty]);\n\n              if (result !== 0) {\n                asc = this.sortPropertyAscending[sortProperty];\n                return asc ? result : (-1 * result);\n              }\n            }\n\n            return 0;\n          };\n\n          instanceMeta.binarySearch = binarySearch;\n          setupKeyCache(instanceMeta);\n        },\n\n        addedItem: function (array, item, changeMeta, instanceMeta) {\n          var index = instanceMeta.binarySearch(array, item);\n          array.insertAt(index, item);\n          return array;\n        },\n\n        removedItem: function (array, item, changeMeta, instanceMeta) {\n          var index = instanceMeta.binarySearch(array, item);\n          array.removeAt(index);\n          instanceMeta.dropKeyFor(item);\n          return array;\n        }\n      });\n    }\n\n    function setupKeyCache(instanceMeta) {\n      instanceMeta.keyFor = function(item) {\n        var guid = guidFor(item);\n        if (this.keyCache[guid]) {\n          return this.keyCache[guid];\n        }\n        var sortProperty;\n        var key = {};\n        for (var i = 0; i < this.sortProperties.length; ++i) {\n          sortProperty = this.sortProperties[i];\n          key[sortProperty] = get(item, sortProperty);\n        }\n        return this.keyCache[guid] = key;\n      };\n\n      instanceMeta.dropKeyFor = function(item) {\n        var guid = guidFor(item);\n        this.keyCache[guid] = null;\n      };\n\n      instanceMeta.keyCache = {};\n    }\n  });\nenifed(\"ember-runtime/controllers/array_controller\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/enumerable_utils\",\"ember-runtime/system/array_proxy\",\"ember-runtime/mixins/sortable\",\"ember-runtime/mixins/controller\",\"ember-metal/computed\",\"ember-metal/error\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var forEach = __dependency4__.forEach;\n    var replace = __dependency4__.replace;\n    var ArrayProxy = __dependency5__[\"default\"];\n    var SortableMixin = __dependency6__[\"default\"];\n    var ControllerMixin = __dependency7__[\"default\"];\n    var computed = __dependency8__.computed;\n    var EmberError = __dependency9__[\"default\"];\n\n\n    /**\n      `Ember.ArrayController` provides a way for you to publish a collection of\n      objects so that you can easily bind to the collection from a Handlebars\n      `#each` helper, an `Ember.CollectionView`, or other controllers.\n\n      The advantage of using an `ArrayController` is that you only have to set up\n      your view bindings once; to change what's displayed, simply swap out the\n      `model` property on the controller.\n\n      For example, imagine you wanted to display a list of items fetched via an XHR\n      request. Create an `Ember.ArrayController` and set its `model` property:\n\n      ```javascript\n      MyApp.listController = Ember.ArrayController.create();\n\n      $.get('people.json', function(data) {\n        MyApp.listController.set('model', data);\n      });\n      ```\n\n      Then, create a view that binds to your new controller:\n\n      ```handlebars\n      {{#each MyApp.listController}}\n        {{firstName}} {{lastName}}\n      {{/each}}\n      ```\n\n      Although you are binding to the controller, the behavior of this controller\n      is to pass through any methods or properties to the underlying array. This\n      capability comes from `Ember.ArrayProxy`, which this class inherits from.\n\n      Sometimes you want to display computed properties within the body of an\n      `#each` helper that depend on the underlying items in `model`, but are not\n      present on those items.   To do this, set `itemController` to the name of a\n      controller (probably an `ObjectController`) that will wrap each individual item.\n\n      For example:\n\n      ```handlebars\n      {{#each post in controller}}\n        <li>{{post.title}} ({{post.titleLength}} characters)</li>\n      {{/each}}\n      ```\n\n      ```javascript\n      App.PostsController = Ember.ArrayController.extend({\n        itemController: 'post'\n      });\n\n      App.PostController = Ember.ObjectController.extend({\n        // the `title` property will be proxied to the underlying post.\n        titleLength: function() {\n          return this.get('title').length;\n        }.property('title')\n      });\n      ```\n\n      In some cases it is helpful to return a different `itemController` depending\n      on the particular item.  Subclasses can do this by overriding\n      `lookupItemController`.\n\n      For example:\n\n      ```javascript\n      App.MyArrayController = Ember.ArrayController.extend({\n        lookupItemController: function( object ) {\n          if (object.get('isSpecial')) {\n            return \"special\"; // use App.SpecialController\n          } else {\n            return \"regular\"; // use App.RegularController\n          }\n        }\n      });\n      ```\n\n      The itemController instances will have a `parentController` property set to\n      the `ArrayController` instance.\n\n      @class ArrayController\n      @namespace Ember\n      @extends Ember.ArrayProxy\n      @uses Ember.SortableMixin\n      @uses Ember.ControllerMixin\n    */\n\n    __exports__[\"default\"] = ArrayProxy.extend(ControllerMixin, SortableMixin, {\n\n      /**\n        The controller used to wrap items, if any. If the value is a string, it will\n        be used to lookup the container for the controller. As an alternative, you\n        can also provide a controller class as the value.\n\n        For example:\n\n        ```javascript\n        App.MyArrayController = Ember.ArrayController.extend({\n          itemController: Ember.ObjectController.extend({\n            //Item Controller Implementation\n          })\n        });\n        ```\n\n        @property itemController\n        @type String | Ember.Controller\n        @default null\n      */\n      itemController: null,\n\n      /**\n        Return the name of the controller to wrap items, or `null` if items should\n        be returned directly.  The default implementation simply returns the\n        `itemController` property, but subclasses can override this method to return\n        different controllers for different objects.\n\n        For example:\n\n        ```javascript\n        App.MyArrayController = Ember.ArrayController.extend({\n          lookupItemController: function( object ) {\n            if (object.get('isSpecial')) {\n              return \"special\"; // use App.SpecialController\n            } else {\n              return \"regular\"; // use App.RegularController\n            }\n          }\n        });\n        ```\n\n        @method lookupItemController\n        @param {Object} object\n        @return {String}\n      */\n      lookupItemController: function(object) {\n        return get(this, 'itemController');\n      },\n\n      objectAtContent: function(idx) {\n        var length = get(this, 'length');\n        var arrangedContent = get(this, 'arrangedContent');\n        var object = arrangedContent && arrangedContent.objectAt(idx);\n        var controllerClass;\n\n        if (idx >= 0 && idx < length) {\n          controllerClass = this.lookupItemController(object);\n\n          if (controllerClass) {\n            return this.controllerAt(idx, object, controllerClass);\n          }\n        }\n\n        // When `controllerClass` is falsy, we have not opted in to using item\n        // controllers, so return the object directly.\n\n        // When the index is out of range, we want to return the \"out of range\"\n        // value, whatever that might be.  Rather than make assumptions\n        // (e.g. guessing `null` or `undefined`) we defer this to `arrangedContent`.\n        return object;\n      },\n\n      arrangedContentDidChange: function() {\n        this._super();\n        this._resetSubControllers();\n      },\n\n      arrayContentDidChange: function(idx, removedCnt, addedCnt) {\n        var subControllers = this._subControllers;\n\n        if (subControllers.length) {\n          var subControllersToRemove = subControllers.slice(idx, idx + removedCnt);\n\n          forEach(subControllersToRemove, function(subController) {\n            if (subController) {\n              subController.destroy();\n            }\n          });\n\n          replace(subControllers, idx, removedCnt, new Array(addedCnt));\n        }\n\n        // The shadow array of subcontrollers must be updated before we trigger\n        // observers, otherwise observers will get the wrong subcontainer when\n        // calling `objectAt`\n        this._super(idx, removedCnt, addedCnt);\n      },\n\n      init: function() {\n        this._super();\n        this._subControllers = [];\n      },\n\n      model: computed(function () {\n        return Ember.A();\n      }),\n\n      /**\n       * Flag to mark as being \"virtual\". Used to keep this instance\n       * from participating in the parentController hierarchy.\n       *\n       * @private\n       * @property _isVirtual\n       * @type Boolean\n       */\n      _isVirtual: false,\n\n      controllerAt: function(idx, object, controllerClass) {\n        var container = get(this, 'container');\n        var subControllers = this._subControllers;\n        var fullName, subController, subControllerFactory, parentController, options;\n\n        if (subControllers.length > idx) {\n          subController = subControllers[idx];\n\n          if (subController) {\n            return subController;\n          }\n        }\n\n        if (this._isVirtual) {\n          parentController = get(this, 'parentController');\n        } else {\n          parentController = this;\n        }\n\n        \n          fullName = 'controller:' + controllerClass;\n\n          if (!container.has(fullName)) {\n            throw new EmberError('Could not resolve itemController: \"' + controllerClass + '\"');\n          }\n\n          subController = container.lookupFactory(fullName).create({\n            target: parentController,\n            parentController: parentController,\n            model: object\n          });\n        \n\n        subControllers[idx] = subController;\n\n        return subController;\n      },\n\n      _subControllers: null,\n\n      _resetSubControllers: function() {\n        var controller;\n        var subControllers = this._subControllers;\n\n        if (subControllers.length) {\n          for (var i = 0, length = subControllers.length; length > i; i++) {\n            controller = subControllers[i];\n\n            if (controller) {\n              controller.destroy();\n            }\n          }\n\n          subControllers.length = 0;\n        }\n      },\n\n      willDestroy: function() {\n        this._resetSubControllers();\n        this._super();\n      }\n    });\n  });\nenifed(\"ember-runtime/controllers/controller\",\n  [\"ember-runtime/system/object\",\"ember-runtime/mixins/controller\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var EmberObject = __dependency1__[\"default\"];\n    var Mixin = __dependency2__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    /**\n      @class Controller\n      @namespace Ember\n      @extends Ember.Object\n      @uses Ember.ControllerMixin\n    */\n    __exports__[\"default\"] = EmberObject.extend(Mixin);\n  });\nenifed(\"ember-runtime/controllers/object_controller\",\n  [\"ember-runtime/mixins/controller\",\"ember-runtime/system/object_proxy\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ControllerMixin = __dependency1__[\"default\"];\n    var ObjectProxy = __dependency2__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    /**\n      `Ember.ObjectController` is part of Ember's Controller layer. It is intended\n      to wrap a single object, proxying unhandled attempts to `get` and `set` to the underlying\n      model object, and to forward unhandled action attempts to its `target`.\n\n      `Ember.ObjectController` derives this functionality from its superclass\n      `Ember.ObjectProxy` and the `Ember.ControllerMixin` mixin.\n\n      @class ObjectController\n      @namespace Ember\n      @extends Ember.ObjectProxy\n      @uses Ember.ControllerMixin\n    **/\n    __exports__[\"default\"] = ObjectProxy.extend(ControllerMixin);\n  });\nenifed(\"ember-runtime/copy\",\n  [\"ember-metal/enumerable_utils\",\"ember-metal/utils\",\"ember-runtime/system/object\",\"ember-runtime/mixins/copyable\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var indexOf = __dependency1__.indexOf;\n    var typeOf = __dependency2__.typeOf;\n    var EmberObject = __dependency3__[\"default\"];\n    var Copyable = __dependency4__[\"default\"];\n\n    function _copy(obj, deep, seen, copies) {\n      var ret, loc, key;\n\n      // primitive data types are immutable, just return them.\n      if (typeof obj !== 'object' || obj === null) {\n        return obj;\n      }\n\n      // avoid cyclical loops\n      if (deep && (loc = indexOf(seen, obj)) >= 0) {\n        return copies[loc];\n      }\n\n      Ember.assert('Cannot clone an Ember.Object that does not implement Ember.Copyable',\n        !(obj instanceof EmberObject) || (Copyable && Copyable.detect(obj)));\n\n      // IMPORTANT: this specific test will detect a native array only. Any other\n      // object will need to implement Copyable.\n      if (typeOf(obj) === 'array') {\n        ret = obj.slice();\n\n        if (deep) {\n          loc = ret.length;\n\n          while (--loc >= 0) {\n            ret[loc] = _copy(ret[loc], deep, seen, copies);\n          }\n        }\n      } else if (Copyable && Copyable.detect(obj)) {\n        ret = obj.copy(deep, seen, copies);\n      } else if (obj instanceof Date) {\n        ret = new Date(obj.getTime());\n      } else {\n        ret = {};\n\n        for (key in obj) {\n          // support Null prototype\n          if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n            continue;\n          }\n\n          // Prevents browsers that don't respect non-enumerability from\n          // copying internal Ember properties\n          if (key.substring(0, 2) === '__') {\n            continue;\n          }\n\n          ret[key] = deep ? _copy(obj[key], deep, seen, copies) : obj[key];\n        }\n      }\n\n      if (deep) {\n        seen.push(obj);\n        copies.push(ret);\n      }\n\n      return ret;\n    }\n\n    /**\n      Creates a clone of the passed object. This function can take just about\n      any type of object and create a clone of it, including primitive values\n      (which are not actually cloned because they are immutable).\n\n      If the passed object implements the `clone()` method, then this function\n      will simply call that method and return the result.\n\n      @method copy\n      @for Ember\n      @param {Object} obj The object to clone\n      @param {Boolean} deep If true, a deep copy of the object is made\n      @return {Object} The cloned object\n    */\n    __exports__[\"default\"] = function copy(obj, deep) {\n      // fast paths\n      if ('object' !== typeof obj || obj === null) {\n        return obj; // can't copy primitives\n      }\n\n      if (Copyable && Copyable.detect(obj)) {\n        return obj.copy(deep);\n      }\n\n      return _copy(obj, deep, deep ? [] : null, deep ? [] : null);\n    }\n  });\nenifed(\"ember-runtime/core\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    /**\n      Compares two objects, returning true if they are logically equal. This is\n      a deeper comparison than a simple triple equal. For sets it will compare the\n      internal objects. For any other object that implements `isEqual()` it will\n      respect that method.\n\n      ```javascript\n      Ember.isEqual('hello', 'hello');  // true\n      Ember.isEqual(1, 2);              // false\n      Ember.isEqual([4, 2], [4, 2]);    // false\n      ```\n\n      @method isEqual\n      @for Ember\n      @param {Object} a first object to compare\n      @param {Object} b second object to compare\n      @return {Boolean}\n    */\n    var isEqual = function isEqual(a, b) {\n      if (a && typeof a.isEqual === 'function') {\n        return a.isEqual(b);\n      }\n\n      if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime();\n      }\n\n      return a === b;\n    };\n    __exports__.isEqual = isEqual;\n  });\nenifed(\"ember-runtime/ext/function\",\n  [\"ember-metal/core\",\"ember-metal/expand_properties\",\"ember-metal/computed\",\"ember-metal/mixin\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.EXTEND_PROTOTYPES, Ember.assert\n    var expandProperties = __dependency2__[\"default\"];\n    var computed = __dependency3__.computed;\n    var observer = __dependency4__.observer;\n\n    var a_slice = Array.prototype.slice;\n    var FunctionPrototype = Function.prototype;\n\n    if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Function) {\n\n      /**\n        The `property` extension of Javascript's Function prototype is available\n        when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\n        `true`, which is the default.\n\n        Computed properties allow you to treat a function like a property:\n\n        ```javascript\n        MyApp.President = Ember.Object.extend({\n          firstName: '',\n          lastName:  '',\n\n          fullName: function() {\n            return this.get('firstName') + ' ' + this.get('lastName');\n          }.property() // Call this flag to mark the function as a property\n        });\n\n        var president = MyApp.President.create({\n          firstName: 'Barack',\n          lastName: 'Obama'\n        });\n\n        president.get('fullName'); // 'Barack Obama'\n        ```\n\n        Treating a function like a property is useful because they can work with\n        bindings, just like any other property.\n\n        Many computed properties have dependencies on other properties. For\n        example, in the above example, the `fullName` property depends on\n        `firstName` and `lastName` to determine its value. You can tell Ember\n        about these dependencies like this:\n\n        ```javascript\n        MyApp.President = Ember.Object.extend({\n          firstName: '',\n          lastName:  '',\n\n          fullName: function() {\n            return this.get('firstName') + ' ' + this.get('lastName');\n\n            // Tell Ember.js that this computed property depends on firstName\n            // and lastName\n          }.property('firstName', 'lastName')\n        });\n        ```\n\n        Make sure you list these dependencies so Ember knows when to update\n        bindings that connect to a computed property. Changing a dependency\n        will not immediately trigger an update of the computed property, but\n        will instead clear the cache so that it is updated when the next `get`\n        is called on the property.\n\n        See [Ember.ComputedProperty](/api/classes/Ember.ComputedProperty.html), [Ember.computed](/api/#method_computed).\n\n        @method property\n        @for Function\n      */\n      FunctionPrototype.property = function () {\n        var ret = computed(this);\n        // ComputedProperty.prototype.property expands properties; no need for us to\n        // do so here.\n        return ret.property.apply(ret, arguments);\n      };\n\n      /**\n        The `observes` extension of Javascript's Function prototype is available\n        when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\n        true, which is the default.\n\n        You can observe property changes simply by adding the `observes`\n        call to the end of your method declarations in classes that you write.\n        For example:\n\n        ```javascript\n        Ember.Object.extend({\n          valueObserver: function() {\n            // Executes whenever the \"value\" property changes\n          }.observes('value')\n        });\n        ```\n\n        In the future this method may become asynchronous. If you want to ensure\n        synchronous behavior, use `observesImmediately`.\n\n        See `Ember.observer`.\n\n        @method observes\n        @for Function\n      */\n      FunctionPrototype.observes = function() {\n        var length = arguments.length;\n        var args = new Array(length);\n        for (var x = 0; x < length; x++) {\n          args[x] = arguments[x];\n        }\n        return observer.apply(this, args.concat(this));\n      };\n\n      /**\n        The `observesImmediately` extension of Javascript's Function prototype is\n        available when `Ember.EXTEND_PROTOTYPES` or\n        `Ember.EXTEND_PROTOTYPES.Function` is true, which is the default.\n\n        You can observe property changes simply by adding the `observesImmediately`\n        call to the end of your method declarations in classes that you write.\n        For example:\n\n        ```javascript\n        Ember.Object.extend({\n          valueObserver: function() {\n            // Executes immediately after the \"value\" property changes\n          }.observesImmediately('value')\n        });\n        ```\n\n        In the future, `observes` may become asynchronous. In this event,\n        `observesImmediately` will maintain the synchronous behavior.\n\n        See `Ember.immediateObserver`.\n\n        @method observesImmediately\n        @for Function\n      */\n      FunctionPrototype.observesImmediately = function () {\n        for (var i = 0, l = arguments.length; i < l; i++) {\n          var arg = arguments[i];\n          Ember.assert('Immediate observers must observe internal properties only, ' +\n            'not properties on other objects.', arg.indexOf('.') === -1);\n        }\n\n        // observes handles property expansion\n        return this.observes.apply(this, arguments);\n      };\n\n      /**\n        The `observesBefore` extension of Javascript's Function prototype is\n        available when `Ember.EXTEND_PROTOTYPES` or\n        `Ember.EXTEND_PROTOTYPES.Function` is true, which is the default.\n\n        You can get notified when a property change is about to happen by\n        by adding the `observesBefore` call to the end of your method\n        declarations in classes that you write. For example:\n\n        ```javascript\n        Ember.Object.extend({\n          valueObserver: function() {\n            // Executes whenever the \"value\" property is about to change\n          }.observesBefore('value')\n        });\n        ```\n\n        See `Ember.beforeObserver`.\n\n        @method observesBefore\n        @for Function\n      */\n      FunctionPrototype.observesBefore = function () {\n        var watched = [];\n        var addWatchedProperty = function (obs) {\n          watched.push(obs);\n        };\n\n        for (var i = 0, l = arguments.length; i < l; ++i) {\n          expandProperties(arguments[i], addWatchedProperty);\n        }\n\n        this.__ember_observesBefore__ = watched;\n\n        return this;\n      };\n\n      /**\n        The `on` extension of Javascript's Function prototype is available\n        when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\n        true, which is the default.\n\n        You can listen for events simply by adding the `on` call to the end of\n        your method declarations in classes or mixins that you write. For example:\n\n        ```javascript\n        Ember.Mixin.create({\n          doSomethingWithElement: function() {\n            // Executes whenever the \"didInsertElement\" event fires\n          }.on('didInsertElement')\n        });\n        ```\n\n        See `Ember.on`.\n\n        @method on\n        @for Function\n      */\n      FunctionPrototype.on = function () {\n        var events = a_slice.call(arguments);\n        this.__ember_listens__ = events;\n\n        return this;\n      };\n    }\n  });\nenifed(\"ember-runtime/ext/rsvp\",\n  [\"ember-metal/core\",\"ember-metal/logger\",\"ember-metal/run_loop\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    /* globals RSVP:true */\n\n    var Ember = __dependency1__[\"default\"];\n    var Logger = __dependency2__[\"default\"];\n    var run = __dependency3__[\"default\"];\n\n    var RSVP = requireModule('rsvp');\n    var testModuleName = 'ember-testing/test';\n    var Test;\n\n    var asyncStart = function() {\n      if (Ember.Test && Ember.Test.adapter) {\n        Ember.Test.adapter.asyncStart();\n      }\n    };\n\n    var asyncEnd = function() {\n      if (Ember.Test && Ember.Test.adapter) {\n        Ember.Test.adapter.asyncEnd();\n      }\n    };\n\n    RSVP.configure('async', function(callback, promise) {\n      var async = !run.currentRunLoop;\n\n      if (Ember.testing && async) { asyncStart(); }\n\n      run.backburner.schedule('actions', function(){\n        if (Ember.testing && async) { asyncEnd(); }\n        callback(promise);\n      });\n    });\n\n    RSVP.Promise.prototype.fail = function(callback, label){\n      Ember.deprecate('RSVP.Promise.fail has been renamed as RSVP.Promise.catch');\n      return this['catch'](callback, label);\n    };\n\n    RSVP.onerrorDefault = function (error) {\n      if (error instanceof Error) {\n        if (Ember.testing) {\n          // ES6TODO: remove when possible\n          if (!Test && Ember.__loader.registry[testModuleName]) {\n            Test = requireModule(testModuleName)['default'];\n          }\n\n          if (Test && Test.adapter) {\n            Test.adapter.exception(error);\n          } else {\n            throw error;\n          }\n        } else if (Ember.onerror) {\n          Ember.onerror(error);\n        } else {\n          Logger.error(error.stack);\n          Ember.assert(error, false);\n        }\n      }\n    };\n\n    RSVP.on('error', RSVP.onerrorDefault);\n\n    __exports__[\"default\"] = RSVP;\n  });\nenifed(\"ember-runtime/ext/string\",\n  [\"ember-metal/core\",\"ember-runtime/system/string\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.EXTEND_PROTOTYPES, Ember.assert, Ember.FEATURES\n    var fmt = __dependency2__.fmt;\n    var w = __dependency2__.w;\n    var loc = __dependency2__.loc;\n    var camelize = __dependency2__.camelize;\n    var decamelize = __dependency2__.decamelize;\n    var dasherize = __dependency2__.dasherize;\n    var underscore = __dependency2__.underscore;\n    var capitalize = __dependency2__.capitalize;\n    var classify = __dependency2__.classify;\n\n    var StringPrototype = String.prototype;\n\n    if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.String) {\n\n      /**\n        See [Ember.String.fmt](/api/classes/Ember.String.html#method_fmt).\n\n        @method fmt\n        @for String\n      */\n      StringPrototype.fmt = function () {\n        return fmt(this, arguments);\n      };\n\n      /**\n        See [Ember.String.w](/api/classes/Ember.String.html#method_w).\n\n        @method w\n        @for String\n      */\n      StringPrototype.w = function () {\n        return w(this);\n      };\n\n      /**\n        See [Ember.String.loc](/api/classes/Ember.String.html#method_loc).\n\n        @method loc\n        @for String\n      */\n      StringPrototype.loc = function () {\n        return loc(this, arguments);\n      };\n\n      /**\n        See [Ember.String.camelize](/api/classes/Ember.String.html#method_camelize).\n\n        @method camelize\n        @for String\n      */\n      StringPrototype.camelize = function () {\n        return camelize(this);\n      };\n\n      /**\n        See [Ember.String.decamelize](/api/classes/Ember.String.html#method_decamelize).\n\n        @method decamelize\n        @for String\n      */\n      StringPrototype.decamelize = function () {\n        return decamelize(this);\n      };\n\n      /**\n        See [Ember.String.dasherize](/api/classes/Ember.String.html#method_dasherize).\n\n        @method dasherize\n        @for String\n      */\n      StringPrototype.dasherize = function () {\n        return dasherize(this);\n      };\n\n      /**\n        See [Ember.String.underscore](/api/classes/Ember.String.html#method_underscore).\n\n        @method underscore\n        @for String\n      */\n      StringPrototype.underscore = function () {\n        return underscore(this);\n      };\n\n      /**\n        See [Ember.String.classify](/api/classes/Ember.String.html#method_classify).\n\n        @method classify\n        @for String\n      */\n      StringPrototype.classify = function () {\n        return classify(this);\n      };\n\n      /**\n        See [Ember.String.capitalize](/api/classes/Ember.String.html#method_capitalize).\n\n        @method capitalize\n        @for String\n      */\n      StringPrototype.capitalize = function () {\n        return capitalize(this);\n      };\n    }\n  });\nenifed(\"ember-runtime/mixins/-proxy\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-metal/observer\",\"ember-metal/property_events\",\"ember-metal/computed\",\"ember-metal/properties\",\"ember-metal/mixin\",\"ember-runtime/system/string\",\"ember-runtime/system/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var meta = __dependency4__.meta;\n    var addObserver = __dependency5__.addObserver;\n    var removeObserver = __dependency5__.removeObserver;\n    var addBeforeObserver = __dependency5__.addBeforeObserver;\n    var removeBeforeObserver = __dependency5__.removeBeforeObserver;\n    var propertyWillChange = __dependency6__.propertyWillChange;\n    var propertyDidChange = __dependency6__.propertyDidChange;\n    var computed = __dependency7__.computed;\n    var defineProperty = __dependency8__.defineProperty;\n    var Mixin = __dependency9__.Mixin;\n    var observer = __dependency9__.observer;\n    var fmt = __dependency10__.fmt;\n    var EmberObject = __dependency11__[\"default\"];\n\n    function contentPropertyWillChange(content, contentKey) {\n      var key = contentKey.slice(8); // remove \"content.\"\n      if (key in this) { return; }  // if shadowed in proxy\n      propertyWillChange(this, key);\n    }\n\n    function contentPropertyDidChange(content, contentKey) {\n      var key = contentKey.slice(8); // remove \"content.\"\n      if (key in this) { return; } // if shadowed in proxy\n      propertyDidChange(this, key);\n    }\n\n    /**\n      `Ember.ProxyMixin` forwards all properties not defined by the proxy itself\n      to a proxied `content` object.  See Ember.ObjectProxy for more details.\n\n      @class ProxyMixin\n      @namespace Ember\n    */\n    __exports__[\"default\"] = Mixin.create({\n      /**\n        The object whose properties will be forwarded.\n\n        @property content\n        @type Ember.Object\n        @default null\n      */\n      content: null,\n      _contentDidChange: observer('content', function() {\n        Ember.assert(\"Can't set Proxy's content to itself\", get(this, 'content') !== this);\n      }),\n\n      isTruthy: computed.bool('content'),\n\n      _debugContainerKey: null,\n\n      willWatchProperty: function (key) {\n        var contentKey = 'content.' + key;\n        addBeforeObserver(this, contentKey, null, contentPropertyWillChange);\n        addObserver(this, contentKey, null, contentPropertyDidChange);\n      },\n\n      didUnwatchProperty: function (key) {\n        var contentKey = 'content.' + key;\n        removeBeforeObserver(this, contentKey, null, contentPropertyWillChange);\n        removeObserver(this, contentKey, null, contentPropertyDidChange);\n      },\n\n      unknownProperty: function (key) {\n        var content = get(this, 'content');\n        if (content) {\n          return get(content, key);\n        }\n      },\n\n      setUnknownProperty: function (key, value) {\n        var m = meta(this);\n        if (m.proto === this) {\n          // if marked as prototype then just defineProperty\n          // rather than delegate\n          defineProperty(this, key, null, value);\n          return value;\n        }\n\n        var content = get(this, 'content');\n        Ember.assert(fmt(\"Cannot delegate set('%@', %@) to the 'content' property of object proxy %@: its 'content' is undefined.\", [key, value, this]), content);\n        return set(content, key, value);\n      }\n\n    });\n  });\nenifed(\"ember-runtime/mixins/action_handler\",\n  [\"ember-metal/merge\",\"ember-metal/mixin\",\"ember-metal/property_get\",\"ember-metal/utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n    var merge = __dependency1__[\"default\"];\n    var Mixin = __dependency2__.Mixin;\n    var get = __dependency3__.get;\n    var typeOf = __dependency4__.typeOf;\n\n    /**\n      The `Ember.ActionHandler` mixin implements support for moving an `actions`\n      property to an `_actions` property at extend time, and adding `_actions`\n      to the object's mergedProperties list.\n\n      `Ember.ActionHandler` is available on some familiar classes including\n      `Ember.Route`, `Ember.View`, `Ember.Component`, and controllers such as\n      `Ember.Controller` and `Ember.ObjectController`.\n      (Internally the mixin is used by `Ember.CoreView`, `Ember.ControllerMixin`,\n      and `Ember.Route` and available to the above classes through\n      inheritance.)\n\n      @class ActionHandler\n      @namespace Ember\n    */\n    var ActionHandler = Mixin.create({\n      mergedProperties: ['_actions'],\n\n      /**\n        The collection of functions, keyed by name, available on this\n        `ActionHandler` as action targets.\n\n        These functions will be invoked when a matching `{{action}}` is triggered\n        from within a template and the application's current route is this route.\n\n        Actions can also be invoked from other parts of your application\n        via `ActionHandler#send`.\n\n        The `actions` hash will inherit action handlers from\n        the `actions` hash defined on extended parent classes\n        or mixins rather than just replace the entire hash, e.g.:\n\n        ```js\n        App.CanDisplayBanner = Ember.Mixin.create({\n          actions: {\n            displayBanner: function(msg) {\n              // ...\n            }\n          }\n        });\n\n        App.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n          actions: {\n            playMusic: function() {\n              // ...\n            }\n          }\n        });\n\n        // `WelcomeRoute`, when active, will be able to respond\n        // to both actions, since the actions hash is merged rather\n        // then replaced when extending mixins / parent classes.\n        this.send('displayBanner');\n        this.send('playMusic');\n        ```\n\n        Within a Controller, Route, View or Component's action handler,\n        the value of the `this` context is the Controller, Route, View or\n        Component object:\n\n        ```js\n        App.SongRoute = Ember.Route.extend({\n          actions: {\n            myAction: function() {\n              this.controllerFor(\"song\");\n              this.transitionTo(\"other.route\");\n              ...\n            }\n          }\n        });\n        ```\n\n        It is also possible to call `this._super()` from within an\n        action handler if it overrides a handler defined on a parent\n        class or mixin:\n\n        Take for example the following routes:\n\n        ```js\n        App.DebugRoute = Ember.Mixin.create({\n          actions: {\n            debugRouteInformation: function() {\n              console.debug(\"trololo\");\n            }\n          }\n        });\n\n        App.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n          actions: {\n            debugRouteInformation: function() {\n              // also call the debugRouteInformation of mixed in App.DebugRoute\n              this._super();\n\n              // show additional annoyance\n              window.alert(...);\n            }\n          }\n        });\n        ```\n\n        ## Bubbling\n\n        By default, an action will stop bubbling once a handler defined\n        on the `actions` hash handles it. To continue bubbling the action,\n        you must return `true` from the handler:\n\n        ```js\n        App.Router.map(function() {\n          this.resource(\"album\", function() {\n            this.route(\"song\");\n          });\n        });\n\n        App.AlbumRoute = Ember.Route.extend({\n          actions: {\n            startPlaying: function() {\n            }\n          }\n        });\n\n        App.AlbumSongRoute = Ember.Route.extend({\n          actions: {\n            startPlaying: function() {\n              // ...\n\n              if (actionShouldAlsoBeTriggeredOnParentRoute) {\n                return true;\n              }\n            }\n          }\n        });\n        ```\n\n        @property actions\n        @type Hash\n        @default null\n      */\n\n      /**\n        Moves `actions` to `_actions` at extend time. Note that this currently\n        modifies the mixin themselves, which is technically dubious but\n        is practically of little consequence. This may change in the future.\n\n        @private\n        @method willMergeMixin\n      */\n      willMergeMixin: function(props) {\n        var hashName;\n\n        if (!props._actions) {\n          Ember.assert(\"'actions' should not be a function\", typeof(props.actions) !== 'function');\n\n          if (typeOf(props.actions) === 'object') {\n            hashName = 'actions';\n          } else if (typeOf(props.events) === 'object') {\n            Ember.deprecate('Action handlers contained in an `events` object are deprecated in favor of putting them in an `actions` object', false);\n            hashName = 'events';\n          }\n\n          if (hashName) {\n            props._actions = merge(props._actions || {}, props[hashName]);\n          }\n\n          delete props[hashName];\n        }\n      },\n\n      /**\n        Triggers a named action on the `ActionHandler`. Any parameters\n        supplied after the `actionName` string will be passed as arguments\n        to the action target function.\n\n        If the `ActionHandler` has its `target` property set, actions may\n        bubble to the `target`. Bubbling happens when an `actionName` can\n        not be found in the `ActionHandler`'s `actions` hash or if the\n        action target function returns `true`.\n\n        Example\n\n        ```js\n        App.WelcomeRoute = Ember.Route.extend({\n          actions: {\n            playTheme: function() {\n               this.send('playMusic', 'theme.mp3');\n            },\n            playMusic: function(track) {\n              // ...\n            }\n          }\n        });\n        ```\n\n        @method send\n        @param {String} actionName The action to trigger\n        @param {*} context a context to send with the action\n      */\n      send: function(actionName) {\n        var args = [].slice.call(arguments, 1);\n        var target;\n\n        if (this._actions && this._actions[actionName]) {\n          if (this._actions[actionName].apply(this, args) === true) {\n            // handler returned true, so this action will bubble\n          } else {\n            return;\n          }\n        }\n\n        if (target = get(this, 'target')) {\n          Ember.assert(\"The `target` for \" + this + \" (\" + target + \") does not have a `send` method\", typeof target.send === 'function');\n          target.send.apply(target, arguments);\n        }\n      }\n    });\n\n    __exports__[\"default\"] = ActionHandler;\n  });\nenifed(\"ember-runtime/mixins/array\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/computed\",\"ember-metal/is_none\",\"ember-runtime/mixins/enumerable\",\"ember-metal/enumerable_utils\",\"ember-metal/mixin\",\"ember-metal/property_events\",\"ember-metal/events\",\"ember-metal/watching\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    // ..........................................................\n    // HELPERS\n    //\n    var Ember = __dependency1__[\"default\"];\n    // ES6TODO: Ember.A\n    var get = __dependency2__.get;\n    var computed = __dependency3__.computed;\n    var cacheFor = __dependency3__.cacheFor;\n    var isNone = __dependency4__.isNone;\n    var none = __dependency4__.none;\n    var Enumerable = __dependency5__[\"default\"];\n    var map = __dependency6__.map;\n    var Mixin = __dependency7__.Mixin;\n    var required = __dependency7__.required;\n    var propertyWillChange = __dependency8__.propertyWillChange;\n    var propertyDidChange = __dependency8__.propertyDidChange;\n    var addListener = __dependency9__.addListener;\n    var removeListener = __dependency9__.removeListener;\n    var sendEvent = __dependency9__.sendEvent;\n    var hasListeners = __dependency9__.hasListeners;\n    var isWatching = __dependency10__.isWatching;\n\n    function arrayObserversHelper(obj, target, opts, operation, notify) {\n      var willChange = (opts && opts.willChange) || 'arrayWillChange';\n      var didChange  = (opts && opts.didChange) || 'arrayDidChange';\n      var hasObservers = get(obj, 'hasArrayObservers');\n\n      if (hasObservers === notify) {\n        propertyWillChange(obj, 'hasArrayObservers');\n      }\n\n      operation(obj, '@array:before', target, willChange);\n      operation(obj, '@array:change', target, didChange);\n\n      if (hasObservers === notify) {\n        propertyDidChange(obj, 'hasArrayObservers');\n      }\n\n      return obj;\n    }\n\n    // ..........................................................\n    // ARRAY\n    //\n    /**\n      This mixin implements Observer-friendly Array-like behavior. It is not a\n      concrete implementation, but it can be used up by other classes that want\n      to appear like arrays.\n\n      For example, ArrayProxy and ArrayController are both concrete classes that can\n      be instantiated to implement array-like behavior. Both of these classes use\n      the Array Mixin by way of the MutableArray mixin, which allows observable\n      changes to be made to the underlying array.\n\n      Unlike `Ember.Enumerable,` this mixin defines methods specifically for\n      collections that provide index-ordered access to their contents. When you\n      are designing code that needs to accept any kind of Array-like object, you\n      should use these methods instead of Array primitives because these will\n      properly notify observers of changes to the array.\n\n      Although these methods are efficient, they do add a layer of indirection to\n      your application so it is a good idea to use them only when you need the\n      flexibility of using both true JavaScript arrays and \"virtual\" arrays such\n      as controllers and collections.\n\n      You can use the methods defined in this module to access and modify array\n      contents in a KVO-friendly way. You can also be notified whenever the\n      membership of an array changes by using `.observes('myArray.[]')`.\n\n      To support `Ember.Array` in your own class, you must override two\n      primitives to use it: `replace()` and `objectAt()`.\n\n      Note that the Ember.Array mixin also incorporates the `Ember.Enumerable`\n      mixin. All `Ember.Array`-like objects are also enumerable.\n\n      @class Array\n      @namespace Ember\n      @uses Ember.Enumerable\n      @since Ember 0.9.0\n    */\n    __exports__[\"default\"] = Mixin.create(Enumerable, {\n\n      /**\n        Your array must support the `length` property. Your replace methods should\n        set this property whenever it changes.\n\n        @property {Number} length\n      */\n      length: required(),\n\n      /**\n        Returns the object at the given `index`. If the given `index` is negative\n        or is greater or equal than the array length, returns `undefined`.\n\n        This is one of the primitives you must implement to support `Ember.Array`.\n        If your object supports retrieving the value of an array item using `get()`\n        (i.e. `myArray.get(0)`), then you do not need to implement this method\n        yourself.\n\n        ```javascript\n        var arr = ['a', 'b', 'c', 'd'];\n\n        arr.objectAt(0);   // 'a'\n        arr.objectAt(3);   // 'd'\n        arr.objectAt(-1);  // undefined\n        arr.objectAt(4);   // undefined\n        arr.objectAt(5);   // undefined\n        ```\n\n        @method objectAt\n        @param {Number} idx The index of the item to return.\n        @return {*} item at index or undefined\n      */\n      objectAt: function(idx) {\n        if (idx < 0 || idx >= get(this, 'length')) {\n          return undefined;\n        }\n\n        return get(this, idx);\n      },\n\n      /**\n        This returns the objects at the specified indexes, using `objectAt`.\n\n        ```javascript\n        var arr = ['a', 'b', 'c', 'd'];\n\n        arr.objectsAt([0, 1, 2]);  // ['a', 'b', 'c']\n        arr.objectsAt([2, 3, 4]);  // ['c', 'd', undefined]\n        ```\n\n        @method objectsAt\n        @param {Array} indexes An array of indexes of items to return.\n        @return {Array}\n       */\n      objectsAt: function(indexes) {\n        var self = this;\n\n        return map(indexes, function(idx) {\n          return self.objectAt(idx);\n        });\n      },\n\n      // overrides Ember.Enumerable version\n      nextObject: function(idx) {\n        return this.objectAt(idx);\n      },\n\n      /**\n        This is the handler for the special array content property. If you get\n        this property, it will return this. If you set this property to a new\n        array, it will replace the current content.\n\n        This property overrides the default property defined in `Ember.Enumerable`.\n\n        @property []\n        @return this\n      */\n      '[]': computed(function(key, value) {\n        if (value !== undefined) {\n          this.replace(0, get(this, 'length'), value);\n        }\n\n        return this;\n      }),\n\n      firstObject: computed(function() {\n        return this.objectAt(0);\n      }),\n\n      lastObject: computed(function() {\n        return this.objectAt(get(this, 'length') - 1);\n      }),\n\n      // optimized version from Enumerable\n      contains: function(obj) {\n        return this.indexOf(obj) >= 0;\n      },\n\n      // Add any extra methods to Ember.Array that are native to the built-in Array.\n      /**\n        Returns a new array that is a slice of the receiver. This implementation\n        uses the observable array methods to retrieve the objects for the new\n        slice.\n\n        ```javascript\n        var arr = ['red', 'green', 'blue'];\n\n        arr.slice(0);       // ['red', 'green', 'blue']\n        arr.slice(0, 2);    // ['red', 'green']\n        arr.slice(1, 100);  // ['green', 'blue']\n        ```\n\n        @method slice\n        @param {Integer} beginIndex (Optional) index to begin slicing from.\n        @param {Integer} endIndex (Optional) index to end the slice at (but not included).\n        @return {Array} New array with specified slice\n      */\n      slice: function(beginIndex, endIndex) {\n        var ret = Ember.A();\n        var length = get(this, 'length');\n\n        if (isNone(beginIndex)) {\n          beginIndex = 0;\n        }\n\n        if (isNone(endIndex) || (endIndex > length)) {\n          endIndex = length;\n        }\n\n        if (beginIndex < 0) {\n          beginIndex = length + beginIndex;\n        }\n\n        if (endIndex < 0) {\n          endIndex = length + endIndex;\n        }\n\n        while (beginIndex < endIndex) {\n          ret[ret.length] = this.objectAt(beginIndex++);\n        }\n\n        return ret;\n      },\n\n      /**\n        Returns the index of the given object's first occurrence.\n        If no `startAt` argument is given, the starting location to\n        search is 0. If it's negative, will count backward from\n        the end of the array. Returns -1 if no match is found.\n\n        ```javascript\n        var arr = ['a', 'b', 'c', 'd', 'a'];\n\n        arr.indexOf('a');       //  0\n        arr.indexOf('z');       // -1\n        arr.indexOf('a', 2);    //  4\n        arr.indexOf('a', -1);   //  4\n        arr.indexOf('b', 3);    // -1\n        arr.indexOf('a', 100);  // -1\n        ```\n\n        @method indexOf\n        @param {Object} object the item to search for\n        @param {Number} startAt optional starting location to search, default 0\n        @return {Number} index or -1 if not found\n      */\n      indexOf: function(object, startAt) {\n        var len = get(this, 'length');\n        var idx;\n\n        if (startAt === undefined) {\n          startAt = 0;\n        }\n\n        if (startAt < 0) {\n          startAt += len;\n        }\n\n        for (idx = startAt; idx < len; idx++) {\n          if (this.objectAt(idx) === object) {\n            return idx;\n          }\n        }\n\n        return -1;\n      },\n\n      /**\n        Returns the index of the given object's last occurrence.\n        If no `startAt` argument is given, the search starts from\n        the last position. If it's negative, will count backward\n        from the end of the array. Returns -1 if no match is found.\n\n        ```javascript\n        var arr = ['a', 'b', 'c', 'd', 'a'];\n\n        arr.lastIndexOf('a');       //  4\n        arr.lastIndexOf('z');       // -1\n        arr.lastIndexOf('a', 2);    //  0\n        arr.lastIndexOf('a', -1);   //  4\n        arr.lastIndexOf('b', 3);    //  1\n        arr.lastIndexOf('a', 100);  //  4\n        ```\n\n        @method lastIndexOf\n        @param {Object} object the item to search for\n        @param {Number} startAt optional starting location to search, default 0\n        @return {Number} index or -1 if not found\n      */\n      lastIndexOf: function(object, startAt) {\n        var len = get(this, 'length');\n        var idx;\n\n        if (startAt === undefined || startAt >= len) {\n          startAt = len-1;\n        }\n\n        if (startAt < 0) {\n          startAt += len;\n        }\n\n        for (idx = startAt; idx >= 0; idx--) {\n          if (this.objectAt(idx) === object) {\n            return idx;\n          }\n        }\n\n        return -1;\n      },\n\n      // ..........................................................\n      // ARRAY OBSERVERS\n      //\n\n      /**\n        Adds an array observer to the receiving array. The array observer object\n        normally must implement two methods:\n\n        * `arrayWillChange(observedObj, start, removeCount, addCount)` - This method will be\n          called just before the array is modified.\n        * `arrayDidChange(observedObj, start, removeCount, addCount)` - This method will be\n          called just after the array is modified.\n\n        Both callbacks will be passed the observed object, starting index of the\n        change as well a a count of the items to be removed and added. You can use\n        these callbacks to optionally inspect the array during the change, clear\n        caches, or do any other bookkeeping necessary.\n\n        In addition to passing a target, you can also include an options hash\n        which you can use to override the method names that will be invoked on the\n        target.\n\n        @method addArrayObserver\n        @param {Object} target The observer object.\n        @param {Hash} opts Optional hash of configuration options including\n          `willChange` and `didChange` option.\n        @return {Ember.Array} receiver\n      */\n\n      addArrayObserver: function(target, opts) {\n        return arrayObserversHelper(this, target, opts, addListener, false);\n      },\n\n      /**\n        Removes an array observer from the object if the observer is current\n        registered. Calling this method multiple times with the same object will\n        have no effect.\n\n        @method removeArrayObserver\n        @param {Object} target The object observing the array.\n        @param {Hash} opts Optional hash of configuration options including\n          `willChange` and `didChange` option.\n        @return {Ember.Array} receiver\n      */\n      removeArrayObserver: function(target, opts) {\n        return arrayObserversHelper(this, target, opts, removeListener, true);\n      },\n\n      /**\n        Becomes true whenever the array currently has observers watching changes\n        on the array.\n\n        @property {Boolean} hasArrayObservers\n      */\n      hasArrayObservers: computed(function() {\n        return hasListeners(this, '@array:change') || hasListeners(this, '@array:before');\n      }),\n\n      /**\n        If you are implementing an object that supports `Ember.Array`, call this\n        method just before the array content changes to notify any observers and\n        invalidate any related properties. Pass the starting index of the change\n        as well as a delta of the amounts to change.\n\n        @method arrayContentWillChange\n        @param {Number} startIdx The starting index in the array that will change.\n        @param {Number} removeAmt The number of items that will be removed. If you\n          pass `null` assumes 0\n        @param {Number} addAmt The number of items that will be added. If you\n          pass `null` assumes 0.\n        @return {Ember.Array} receiver\n      */\n      arrayContentWillChange: function(startIdx, removeAmt, addAmt) {\n        var removing, lim;\n\n        // if no args are passed assume everything changes\n        if (startIdx === undefined) {\n          startIdx = 0;\n          removeAmt = addAmt = -1;\n        } else {\n          if (removeAmt === undefined) {\n            removeAmt = -1;\n          }\n\n          if (addAmt === undefined) {\n            addAmt = -1;\n          }\n        }\n\n        // Make sure the @each proxy is set up if anyone is observing @each\n        if (isWatching(this, '@each')) {\n          get(this, '@each');\n        }\n\n        sendEvent(this, '@array:before', [this, startIdx, removeAmt, addAmt]);\n\n        if (startIdx >= 0 && removeAmt >= 0 && get(this, 'hasEnumerableObservers')) {\n          removing = [];\n          lim = startIdx + removeAmt;\n\n          for (var idx = startIdx; idx < lim; idx++) {\n            removing.push(this.objectAt(idx));\n          }\n        } else {\n          removing = removeAmt;\n        }\n\n        this.enumerableContentWillChange(removing, addAmt);\n\n        return this;\n      },\n\n      /**\n        If you are implementing an object that supports `Ember.Array`, call this\n        method just after the array content changes to notify any observers and\n        invalidate any related properties. Pass the starting index of the change\n        as well as a delta of the amounts to change.\n\n        @method arrayContentDidChange\n        @param {Number} startIdx The starting index in the array that did change.\n        @param {Number} removeAmt The number of items that were removed. If you\n          pass `null` assumes 0\n        @param {Number} addAmt The number of items that were added. If you\n          pass `null` assumes 0.\n        @return {Ember.Array} receiver\n      */\n      arrayContentDidChange: function(startIdx, removeAmt, addAmt) {\n        var adding, lim;\n\n        // if no args are passed assume everything changes\n        if (startIdx === undefined) {\n          startIdx = 0;\n          removeAmt = addAmt = -1;\n        } else {\n          if (removeAmt === undefined) {\n            removeAmt = -1;\n          }\n\n          if (addAmt === undefined) {\n            addAmt = -1;\n          }\n        }\n\n        if (startIdx >= 0 && addAmt >= 0 && get(this, 'hasEnumerableObservers')) {\n          adding = [];\n          lim = startIdx + addAmt;\n\n          for (var idx = startIdx; idx < lim; idx++) {\n            adding.push(this.objectAt(idx));\n          }\n        } else {\n          adding = addAmt;\n        }\n\n        this.enumerableContentDidChange(removeAmt, adding);\n        sendEvent(this, '@array:change', [this, startIdx, removeAmt, addAmt]);\n\n        var length = get(this, 'length');\n        var cachedFirst = cacheFor(this, 'firstObject');\n        var cachedLast = cacheFor(this, 'lastObject');\n\n        if (this.objectAt(0) !== cachedFirst) {\n          propertyWillChange(this, 'firstObject');\n          propertyDidChange(this, 'firstObject');\n        }\n\n        if (this.objectAt(length-1) !== cachedLast) {\n          propertyWillChange(this, 'lastObject');\n          propertyDidChange(this, 'lastObject');\n        }\n\n        return this;\n      },\n\n      // ..........................................................\n      // ENUMERATED PROPERTIES\n      //\n\n      /**\n        Returns a special object that can be used to observe individual properties\n        on the array. Just get an equivalent property on this object and it will\n        return an enumerable that maps automatically to the named key on the\n        member objects.\n\n        If you merely want to watch for any items being added or removed to the array,\n        use the `[]` property instead of `@each`.\n\n        @property @each\n      */\n      '@each': computed(function() {\n        if (!this.__each) {\n          // ES6TODO: GRRRRR\n          var EachProxy = requireModule('ember-runtime/system/each_proxy')['EachProxy'];\n\n          this.__each = new EachProxy(this);\n        }\n\n        return this.__each;\n      })\n    });\n  });\nenifed(\"ember-runtime/mixins/comparable\",\n  [\"ember-metal/mixin\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Mixin = __dependency1__.Mixin;\n    var required = __dependency1__.required;\n\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    /**\n      Implements some standard methods for comparing objects. Add this mixin to\n      any class you create that can compare its instances.\n\n      You should implement the `compare()` method.\n\n      @class Comparable\n      @namespace Ember\n      @since Ember 0.9\n    */\n    __exports__[\"default\"] = Mixin.create({\n\n      /**\n        Override to return the result of the comparison of the two parameters. The\n        compare method should return:\n\n        - `-1` if `a < b`\n        - `0` if `a == b`\n        - `1` if `a > b`\n\n        Default implementation raises an exception.\n\n        @method compare\n        @param a {Object} the first object to compare\n        @param b {Object} the second object to compare\n        @return {Integer} the result of the comparison\n      */\n      compare: required(Function)\n    });\n  });\nenifed(\"ember-runtime/mixins/controller\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-runtime/system/object\",\"ember-metal/mixin\",\"ember-metal/computed\",\"ember-runtime/mixins/action_handler\",\"ember-runtime/mixins/controller_content_model_alias_deprecation\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert, Ember.deprecate\n    var get = __dependency2__.get;\n    var EmberObject = __dependency3__[\"default\"];\n    var Mixin = __dependency4__.Mixin;\n    var computed = __dependency5__.computed;\n    var ActionHandler = __dependency6__[\"default\"];\n    var ControllerContentModelAliasDeprecation = __dependency7__[\"default\"];\n\n    /**\n      `Ember.ControllerMixin` provides a standard interface for all classes that\n      compose Ember's controller layer: `Ember.Controller`,\n      `Ember.ArrayController`, and `Ember.ObjectController`.\n\n      @class ControllerMixin\n      @namespace Ember\n      @uses Ember.ActionHandler\n    */\n    __exports__[\"default\"] = Mixin.create(ActionHandler, ControllerContentModelAliasDeprecation, {\n      /* ducktype as a controller */\n      isController: true,\n\n      /**\n        The object to which actions from the view should be sent.\n\n        For example, when a Handlebars template uses the `{{action}}` helper,\n        it will attempt to send the action to the view's controller's `target`.\n\n        By default, the value of the target property is set to the router, and\n        is injected when a controller is instantiated. This injection is defined\n        in Ember.Application#buildContainer, and is applied as part of the\n        applications initialization process. It can also be set after a controller\n        has been instantiated, for instance when using the render helper in a\n        template, or when a controller is used as an `itemController`. In most\n        cases the `target` property will automatically be set to the logical\n        consumer of actions for the controller.\n\n        @property target\n        @default null\n      */\n      target: null,\n\n      container: null,\n\n      parentController: null,\n\n      store: null,\n\n      /**\n        The controller's current model. When retrieving or modifying a controller's\n        model, this property should be used instead of the `content` property.\n\n        @property model\n        @public\n       */\n      model: null,\n\n      /**\n        @private\n       */\n      content: computed.alias('model')\n\n    });\n  });\nenifed(\"ember-runtime/mixins/controller_content_model_alias_deprecation\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/mixin\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.deprecate\n    var get = __dependency2__.get;\n    var Mixin = __dependency3__.Mixin;\n\n    /**\n      The ControllerContentModelAliasDeprecation mixin is used to provide a useful\n      deprecation warning when specifying `content` directly on a `Ember.Controller`\n      (without also specifying `model`).\n\n      Ember versions prior to 1.7 used `model` as an alias of `content`, but due to\n      much confusion this alias was reversed (so `content` is now an alias of `model).\n\n      This change reduces many caveats with model/content, and also sets a\n      simple ground rule: Never set a controllers content, rather always set\n      it's model and ember will do the right thing.\n\n\n      `Ember.ControllerContentModelAliasDeprecation` is used internally by Ember in\n      `Ember.Controller`.\n\n      @class ControllerContentModelAliasDeprecation\n      @namespace Ember\n      @private\n      @since 1.7.0\n    */\n    __exports__[\"default\"] = Mixin.create({\n      /**\n        @private\n\n        Moves `content` to `model`  at extend time if a `model` is not also specified.\n\n        Note that this currently modifies the mixin themselves, which is technically\n        dubious but is practically of little consequence. This may change in the\n        future.\n\n        @method willMergeMixin\n        @since 1.4.0\n      */\n      willMergeMixin: function(props) {\n        // Calling super is only OK here since we KNOW that\n        // there is another Mixin loaded first.\n        this._super.apply(this, arguments);\n\n        var modelSpecified = !!props.model;\n\n        if (props.content && !modelSpecified) {\n          props.model = props.content;\n          delete props['content'];\n\n          Ember.deprecate('Do not specify `content` on a Controller, use `model` instead.', false);\n        }\n      }\n    });\n  });\nenifed(\"ember-runtime/mixins/copyable\",\n  [\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/mixin\",\"ember-runtime/mixins/freezable\",\"ember-runtime/system/string\",\"ember-metal/error\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n\n    var get = __dependency1__.get;\n    var set = __dependency2__.set;\n    var required = __dependency3__.required;\n    var Freezable = __dependency4__.Freezable;\n    var Mixin = __dependency3__.Mixin;\n    var fmt = __dependency5__.fmt;\n    var EmberError = __dependency6__[\"default\"];\n\n\n    /**\n      Implements some standard methods for copying an object. Add this mixin to\n      any object you create that can create a copy of itself. This mixin is\n      added automatically to the built-in array.\n\n      You should generally implement the `copy()` method to return a copy of the\n      receiver.\n\n      Note that `frozenCopy()` will only work if you also implement\n      `Ember.Freezable`.\n\n      @class Copyable\n      @namespace Ember\n      @since Ember 0.9\n    */\n    __exports__[\"default\"] = Mixin.create({\n      /**\n        Override to return a copy of the receiver. Default implementation raises\n        an exception.\n\n        @method copy\n        @param {Boolean} deep if `true`, a deep copy of the object should be made\n        @return {Object} copy of receiver\n      */\n      copy: required(Function),\n\n      /**\n        If the object implements `Ember.Freezable`, then this will return a new\n        copy if the object is not frozen and the receiver if the object is frozen.\n\n        Raises an exception if you try to call this method on a object that does\n        not support freezing.\n\n        You should use this method whenever you want a copy of a freezable object\n        since a freezable object can simply return itself without actually\n        consuming more memory.\n\n        @method frozenCopy\n        @return {Object} copy of receiver or receiver\n      */\n      frozenCopy: function() {\n        if (Freezable && Freezable.detect(this)) {\n          return get(this, 'isFrozen') ? this : this.copy().freeze();\n        } else {\n          throw new EmberError(fmt(\"%@ does not support freezing\", [this]));\n        }\n      }\n    });\n  });\nenifed(\"ember-runtime/mixins/deferred\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/mixin\",\"ember-metal/computed\",\"ember-runtime/ext/rsvp\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.FEATURES, Ember.Test\n    var get = __dependency2__.get;\n    var Mixin = __dependency3__.Mixin;\n    var computed = __dependency4__.computed;\n    var RSVP = __dependency5__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n\n    /**\n      @class Deferred\n      @namespace Ember\n     */\n    __exports__[\"default\"] = Mixin.create({\n      /**\n        Add handlers to be called when the Deferred object is resolved or rejected.\n\n        @method then\n        @param {Function} resolve a callback function to be called when done\n        @param {Function} reject  a callback function to be called when failed\n      */\n      then: function(resolve, reject, label) {\n        var deferred, promise, entity;\n\n        entity = this;\n        deferred = get(this, '_deferred');\n        promise = deferred.promise;\n\n        function fulfillmentHandler(fulfillment) {\n          if (fulfillment === promise) {\n            return resolve(entity);\n          } else {\n            return resolve(fulfillment);\n          }\n        }\n\n        return promise.then(resolve && fulfillmentHandler, reject, label);\n      },\n\n      /**\n        Resolve a Deferred object and call any `doneCallbacks` with the given args.\n\n        @method resolve\n      */\n      resolve: function(value) {\n        var deferred, promise;\n\n        deferred = get(this, '_deferred');\n        promise = deferred.promise;\n\n        if (value === this) {\n          deferred.resolve(promise);\n        } else {\n          deferred.resolve(value);\n        }\n      },\n\n      /**\n        Reject a Deferred object and call any `failCallbacks` with the given args.\n\n        @method reject\n      */\n      reject: function(value) {\n        get(this, '_deferred').reject(value);\n      },\n\n      _deferred: computed(function() {\n        Ember.deprecate('Usage of Ember.DeferredMixin or Ember.Deferred is deprecated.', this._suppressDeferredDeprecation);\n\n        return RSVP.defer('Ember: DeferredMixin - ' + this);\n      })\n    });\n  });\nenifed(\"ember-runtime/mixins/enumerable\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-metal/mixin\",\"ember-metal/enumerable_utils\",\"ember-metal/computed\",\"ember-metal/property_events\",\"ember-metal/events\",\"ember-runtime/compare\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    // ..........................................................\n    // HELPERS\n    //\n\n    var Ember = __dependency1__[\"default\"];\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var apply = __dependency4__.apply;\n    var Mixin = __dependency5__.Mixin;\n    var required = __dependency5__.required;\n    var aliasMethod = __dependency5__.aliasMethod;\n    var indexOf = __dependency6__.indexOf;\n    var computed = __dependency7__.computed;\n    var propertyWillChange = __dependency8__.propertyWillChange;\n    var propertyDidChange = __dependency8__.propertyDidChange;\n    var addListener = __dependency9__.addListener;\n    var removeListener = __dependency9__.removeListener;\n    var sendEvent = __dependency9__.sendEvent;\n    var hasListeners = __dependency9__.hasListeners;\n    var compare = __dependency10__[\"default\"];\n\n    var a_slice = Array.prototype.slice;\n\n    var contexts = [];\n\n    function popCtx() {\n      return contexts.length===0 ? {} : contexts.pop();\n    }\n\n    function pushCtx(ctx) {\n      contexts.push(ctx);\n      return null;\n    }\n\n    function iter(key, value) {\n      var valueProvided = arguments.length === 2;\n\n      function i(item) {\n        var cur = get(item, key);\n        return valueProvided ? value===cur : !!cur;\n      }\n\n      return i;\n    }\n\n    /**\n      This mixin defines the common interface implemented by enumerable objects\n      in Ember. Most of these methods follow the standard Array iteration\n      API defined up to JavaScript 1.8 (excluding language-specific features that\n      cannot be emulated in older versions of JavaScript).\n\n      This mixin is applied automatically to the Array class on page load, so you\n      can use any of these methods on simple arrays. If Array already implements\n      one of these methods, the mixin will not override them.\n\n      ## Writing Your Own Enumerable\n\n      To make your own custom class enumerable, you need two items:\n\n      1. You must have a length property. This property should change whenever\n         the number of items in your enumerable object changes. If you use this\n         with an `Ember.Object` subclass, you should be sure to change the length\n         property using `set().`\n\n      2. You must implement `nextObject().` See documentation.\n\n      Once you have these two methods implemented, apply the `Ember.Enumerable` mixin\n      to your class and you will be able to enumerate the contents of your object\n      like any other collection.\n\n      ## Using Ember Enumeration with Other Libraries\n\n      Many other libraries provide some kind of iterator or enumeration like\n      facility. This is often where the most common API conflicts occur.\n      Ember's API is designed to be as friendly as possible with other\n      libraries by implementing only methods that mostly correspond to the\n      JavaScript 1.8 API.\n\n      @class Enumerable\n      @namespace Ember\n      @since Ember 0.9\n    */\n    __exports__[\"default\"] = Mixin.create({\n\n      /**\n        Implement this method to make your class enumerable.\n\n        This method will be call repeatedly during enumeration. The index value\n        will always begin with 0 and increment monotonically. You don't have to\n        rely on the index value to determine what object to return, but you should\n        always check the value and start from the beginning when you see the\n        requested index is 0.\n\n        The `previousObject` is the object that was returned from the last call\n        to `nextObject` for the current iteration. This is a useful way to\n        manage iteration if you are tracing a linked list, for example.\n\n        Finally the context parameter will always contain a hash you can use as\n        a \"scratchpad\" to maintain any other state you need in order to iterate\n        properly. The context object is reused and is not reset between\n        iterations so make sure you setup the context with a fresh state whenever\n        the index parameter is 0.\n\n        Generally iterators will continue to call `nextObject` until the index\n        reaches the your current length-1. If you run out of data before this\n        time for some reason, you should simply return undefined.\n\n        The default implementation of this method simply looks up the index.\n        This works great on any Array-like objects.\n\n        @method nextObject\n        @param {Number} index the current index of the iteration\n        @param {Object} previousObject the value returned by the last call to\n          `nextObject`.\n        @param {Object} context a context object you can use to maintain state.\n        @return {Object} the next object in the iteration or undefined\n      */\n      nextObject: required(Function),\n\n      /**\n        Helper method returns the first object from a collection. This is usually\n        used by bindings and other parts of the framework to extract a single\n        object if the enumerable contains only one item.\n\n        If you override this method, you should implement it so that it will\n        always return the same value each time it is called. If your enumerable\n        contains only one object, this method should always return that object.\n        If your enumerable is empty, this method should return `undefined`.\n\n        ```javascript\n        var arr = [\"a\", \"b\", \"c\"];\n        arr.get('firstObject');  // \"a\"\n\n        var arr = [];\n        arr.get('firstObject');  // undefined\n        ```\n\n        @property firstObject\n        @return {Object} the object or undefined\n      */\n      firstObject: computed('[]', function() {\n        if (get(this, 'length')===0) return undefined ;\n\n        // handle generic enumerables\n        var context = popCtx(), ret;\n        ret = this.nextObject(0, null, context);\n        pushCtx(context);\n        return ret;\n      }),\n\n      /**\n        Helper method returns the last object from a collection. If your enumerable\n        contains only one object, this method should always return that object.\n        If your enumerable is empty, this method should return `undefined`.\n\n        ```javascript\n        var arr = [\"a\", \"b\", \"c\"];\n        arr.get('lastObject');  // \"c\"\n\n        var arr = [];\n        arr.get('lastObject');  // undefined\n        ```\n\n        @property lastObject\n        @return {Object} the last object or undefined\n      */\n      lastObject: computed('[]', function() {\n        var len = get(this, 'length');\n        if (len===0) return undefined ;\n        var context = popCtx(), idx=0, cur, last = null;\n        do {\n          last = cur;\n          cur = this.nextObject(idx++, last, context);\n        } while (cur !== undefined);\n        pushCtx(context);\n        return last;\n      }),\n\n      /**\n        Returns `true` if the passed object can be found in the receiver. The\n        default version will iterate through the enumerable until the object\n        is found. You may want to override this with a more efficient version.\n\n        ```javascript\n        var arr = [\"a\", \"b\", \"c\"];\n        arr.contains(\"a\"); // true\n        arr.contains(\"z\"); // false\n        ```\n\n        @method contains\n        @param {Object} obj The object to search for.\n        @return {Boolean} `true` if object is found in enumerable.\n      */\n      contains: function(obj) {\n        return this.find(function(item) { return item===obj; }) !== undefined;\n      },\n\n      /**\n        Iterates through the enumerable, calling the passed function on each\n        item. This method corresponds to the `forEach()` method defined in\n        JavaScript 1.6.\n\n        The callback method you provide should have the following signature (all\n        parameters are optional):\n\n        ```javascript\n        function(item, index, enumerable);\n        ```\n\n        - `item` is the current item in the iteration.\n        - `index` is the current index in the iteration.\n        - `enumerable` is the enumerable object itself.\n\n        Note that in addition to a callback, you can also pass an optional target\n        object that will be set as `this` on the context. This is a good way\n        to give your iterator function access to the current object.\n\n        @method forEach\n        @param {Function} callback The callback to execute\n        @param {Object} [target] The target object to use\n        @return {Object} receiver\n      */\n      forEach: function(callback, target) {\n        if (typeof callback !== 'function') throw new TypeError() ;\n        var len = get(this, 'length'), last = null, context = popCtx();\n\n        if (target === undefined) target = null;\n\n        for(var idx=0;idx<len;idx++) {\n          var next = this.nextObject(idx, last, context) ;\n          callback.call(target, next, idx, this);\n          last = next ;\n        }\n        last = null ;\n        context = pushCtx(context);\n        return this ;\n      },\n\n      /**\n        Alias for `mapBy`\n\n        @method getEach\n        @param {String} key name of the property\n        @return {Array} The mapped array.\n      */\n      getEach: function(key) {\n        return this.mapBy(key);\n      },\n\n      /**\n        Sets the value on the named property for each member. This is more\n        efficient than using other methods defined on this helper. If the object\n        implements Ember.Observable, the value will be changed to `set(),` otherwise\n        it will be set directly. `null` objects are skipped.\n\n        @method setEach\n        @param {String} key The key to set\n        @param {Object} value The object to set\n        @return {Object} receiver\n      */\n      setEach: function(key, value) {\n        return this.forEach(function(item) {\n          set(item, key, value);\n        });\n      },\n\n      /**\n        Maps all of the items in the enumeration to another value, returning\n        a new array. This method corresponds to `map()` defined in JavaScript 1.6.\n\n        The callback method you provide should have the following signature (all\n        parameters are optional):\n\n        ```javascript\n        function(item, index, enumerable);\n        ```\n\n        - `item` is the current item in the iteration.\n        - `index` is the current index in the iteration.\n        - `enumerable` is the enumerable object itself.\n\n        It should return the mapped value.\n\n        Note that in addition to a callback, you can also pass an optional target\n        object that will be set as `this` on the context. This is a good way\n        to give your iterator function access to the current object.\n\n        @method map\n        @param {Function} callback The callback to execute\n        @param {Object} [target] The target object to use\n        @return {Array} The mapped array.\n      */\n      map: function(callback, target) {\n        var ret = Ember.A();\n        this.forEach(function(x, idx, i) {\n          ret[idx] = callback.call(target, x, idx,i);\n        });\n        return ret ;\n      },\n\n      /**\n        Similar to map, this specialized function returns the value of the named\n        property on all items in the enumeration.\n\n        @method mapBy\n        @param {String} key name of the property\n        @return {Array} The mapped array.\n      */\n      mapBy: function(key) {\n        return this.map(function(next) {\n          return get(next, key);\n        });\n      },\n\n      /**\n        Similar to map, this specialized function returns the value of the named\n        property on all items in the enumeration.\n\n        @method mapProperty\n        @param {String} key name of the property\n        @return {Array} The mapped array.\n        @deprecated Use `mapBy` instead\n      */\n\n      mapProperty: aliasMethod('mapBy'),\n\n      /**\n        Returns an array with all of the items in the enumeration that the passed\n        function returns true for. This method corresponds to `filter()` defined in\n        JavaScript 1.6.\n\n        The callback method you provide should have the following signature (all\n        parameters are optional):\n\n        ```javascript\n        function(item, index, enumerable);\n        ```\n\n        - `item` is the current item in the iteration.\n        - `index` is the current index in the iteration.\n        - `enumerable` is the enumerable object itself.\n\n        It should return `true` to include the item in the results, `false`\n        otherwise.\n\n        Note that in addition to a callback, you can also pass an optional target\n        object that will be set as `this` on the context. This is a good way\n        to give your iterator function access to the current object.\n\n        @method filter\n        @param {Function} callback The callback to execute\n        @param {Object} [target] The target object to use\n        @return {Array} A filtered array.\n      */\n      filter: function(callback, target) {\n        var ret = Ember.A();\n        this.forEach(function(x, idx, i) {\n          if (callback.call(target, x, idx, i)) ret.push(x);\n        });\n        return ret ;\n      },\n\n      /**\n        Returns an array with all of the items in the enumeration where the passed\n        function returns false for. This method is the inverse of filter().\n\n        The callback method you provide should have the following signature (all\n        parameters are optional):\n\n        ```javascript\n        function(item, index, enumerable);\n        ```\n\n        - *item* is the current item in the iteration.\n        - *index* is the current index in the iteration\n        - *enumerable* is the enumerable object itself.\n\n        It should return the a falsey value to include the item in the results.\n\n        Note that in addition to a callback, you can also pass an optional target\n        object that will be set as \"this\" on the context. This is a good way\n        to give your iterator function access to the current object.\n\n        @method reject\n        @param {Function} callback The callback to execute\n        @param {Object} [target] The target object to use\n        @return {Array} A rejected array.\n       */\n      reject: function(callback, target) {\n        return this.filter(function() {\n          return !(apply(target, callback, arguments));\n        });\n      },\n\n      /**\n        Returns an array with just the items with the matched property. You\n        can pass an optional second argument with the target value. Otherwise\n        this will match any property that evaluates to `true`.\n\n        @method filterBy\n        @param {String} key the property to test\n        @param {*} [value] optional value to test against.\n        @return {Array} filtered array\n      */\n      filterBy: function(key, value) {\n        return this.filter(apply(this, iter, arguments));\n      },\n\n      /**\n        Returns an array with just the items with the matched property. You\n        can pass an optional second argument with the target value. Otherwise\n        this will match any property that evaluates to `true`.\n\n        @method filterProperty\n        @param {String} key the property to test\n        @param {String} [value] optional value to test against.\n        @return {Array} filtered array\n        @deprecated Use `filterBy` instead\n      */\n      filterProperty: aliasMethod('filterBy'),\n\n      /**\n        Returns an array with the items that do not have truthy values for\n        key.  You can pass an optional second argument with the target value.  Otherwise\n        this will match any property that evaluates to false.\n\n        @method rejectBy\n        @param {String} key the property to test\n        @param {String} [value] optional value to test against.\n        @return {Array} rejected array\n      */\n      rejectBy: function(key, value) {\n        var exactValue = function(item) { return get(item, key) === value; };\n        var hasValue = function(item) { return !!get(item, key); };\n        var use = (arguments.length === 2 ? exactValue : hasValue);\n\n        return this.reject(use);\n      },\n\n      /**\n        Returns an array with the items that do not have truthy values for\n        key.  You can pass an optional second argument with the target value.  Otherwise\n        this will match any property that evaluates to false.\n\n        @method rejectProperty\n        @param {String} key the property to test\n        @param {String} [value] optional value to test against.\n        @return {Array} rejected array\n        @deprecated Use `rejectBy` instead\n      */\n      rejectProperty: aliasMethod('rejectBy'),\n\n      /**\n        Returns the first item in the array for which the callback returns true.\n        This method works similar to the `filter()` method defined in JavaScript 1.6\n        except that it will stop working on the array once a match is found.\n\n        The callback method you provide should have the following signature (all\n        parameters are optional):\n\n        ```javascript\n        function(item, index, enumerable);\n        ```\n\n        - `item` is the current item in the iteration.\n        - `index` is the current index in the iteration.\n        - `enumerable` is the enumerable object itself.\n\n        It should return the `true` to include the item in the results, `false`\n        otherwise.\n\n        Note that in addition to a callback, you can also pass an optional target\n        object that will be set as `this` on the context. This is a good way\n        to give your iterator function access to the current object.\n\n        @method find\n        @param {Function} callback The callback to execute\n        @param {Object} [target] The target object to use\n        @return {Object} Found item or `undefined`.\n      */\n      find: function(callback, target) {\n        var len = get(this, 'length') ;\n        if (target === undefined) target = null;\n\n        var last = null, next, found = false, ret ;\n        var context = popCtx();\n        for(var idx=0;idx<len && !found;idx++) {\n          next = this.nextObject(idx, last, context) ;\n          if (found = callback.call(target, next, idx, this)) ret = next ;\n          last = next ;\n        }\n        next = last = null ;\n        context = pushCtx(context);\n        return ret ;\n      },\n\n      /**\n        Returns the first item with a property matching the passed value. You\n        can pass an optional second argument with the target value. Otherwise\n        this will match any property that evaluates to `true`.\n\n        This method works much like the more generic `find()` method.\n\n        @method findBy\n        @param {String} key the property to test\n        @param {String} [value] optional value to test against.\n        @return {Object} found item or `undefined`\n      */\n      findBy: function(key, value) {\n        return this.find(apply(this, iter, arguments));\n      },\n\n      /**\n        Returns the first item with a property matching the passed value. You\n        can pass an optional second argument with the target value. Otherwise\n        this will match any property that evaluates to `true`.\n\n        This method works much like the more generic `find()` method.\n\n        @method findProperty\n        @param {String} key the property to test\n        @param {String} [value] optional value to test against.\n        @return {Object} found item or `undefined`\n        @deprecated Use `findBy` instead\n      */\n      findProperty: aliasMethod('findBy'),\n\n      /**\n        Returns `true` if the passed function returns true for every item in the\n        enumeration. This corresponds with the `every()` method in JavaScript 1.6.\n\n        The callback method you provide should have the following signature (all\n        parameters are optional):\n\n        ```javascript\n        function(item, index, enumerable);\n        ```\n\n        - `item` is the current item in the iteration.\n        - `index` is the current index in the iteration.\n        - `enumerable` is the enumerable object itself.\n\n        It should return the `true` or `false`.\n\n        Note that in addition to a callback, you can also pass an optional target\n        object that will be set as `this` on the context. This is a good way\n        to give your iterator function access to the current object.\n\n        Example Usage:\n\n        ```javascript\n        if (people.every(isEngineer)) { Paychecks.addBigBonus(); }\n        ```\n\n        @method every\n        @param {Function} callback The callback to execute\n        @param {Object} [target] The target object to use\n        @return {Boolean}\n      */\n      every: function(callback, target) {\n        return !this.find(function(x, idx, i) {\n          return !callback.call(target, x, idx, i);\n        });\n      },\n\n      /**\n        @method everyBy\n        @param {String} key the property to test\n        @param {String} [value] optional value to test against.\n        @deprecated Use `isEvery` instead\n        @return {Boolean}\n      */\n      everyBy: aliasMethod('isEvery'),\n\n      /**\n        @method everyProperty\n        @param {String} key the property to test\n        @param {String} [value] optional value to test against.\n        @deprecated Use `isEvery` instead\n        @return {Boolean}\n      */\n      everyProperty: aliasMethod('isEvery'),\n\n      /**\n        Returns `true` if the passed property resolves to `true` for all items in\n        the enumerable. This method is often simpler/faster than using a callback.\n\n        @method isEvery\n        @param {String} key the property to test\n        @param {String} [value] optional value to test against.\n        @return {Boolean}\n        @since 1.3.0\n      */\n      isEvery: function(key, value) {\n        return this.every(apply(this, iter, arguments));\n      },\n\n      /**\n        Returns `true` if the passed function returns true for any item in the\n        enumeration. This corresponds with the `some()` method in JavaScript 1.6.\n\n        The callback method you provide should have the following signature (all\n        parameters are optional):\n\n        ```javascript\n        function(item, index, enumerable);\n        ```\n\n        - `item` is the current item in the iteration.\n        - `index` is the current index in the iteration.\n        - `enumerable` is the enumerable object itself.\n\n        It should return the `true` to include the item in the results, `false`\n        otherwise.\n\n        Note that in addition to a callback, you can also pass an optional target\n        object that will be set as `this` on the context. This is a good way\n        to give your iterator function access to the current object.\n\n        Usage Example:\n\n        ```javascript\n        if (people.any(isManager)) { Paychecks.addBiggerBonus(); }\n        ```\n\n        @method any\n        @param {Function} callback The callback to execute\n        @param {Object} [target] The target object to use\n        @return {Boolean} `true` if the passed function returns `true` for any item\n      */\n      any: function(callback, target) {\n        var len     = get(this, 'length');\n        var context = popCtx();\n        var found   = false;\n        var last    = null;\n        var next, idx;\n\n        if (target === undefined) { target = null; }\n\n        for (idx = 0; idx < len && !found; idx++) {\n          next  = this.nextObject(idx, last, context);\n          found = callback.call(target, next, idx, this);\n          last  = next;\n        }\n\n        next = last = null;\n        context = pushCtx(context);\n        return found;\n      },\n\n      /**\n        Returns `true` if the passed function returns true for any item in the\n        enumeration. This corresponds with the `some()` method in JavaScript 1.6.\n\n        The callback method you provide should have the following signature (all\n        parameters are optional):\n\n        ```javascript\n        function(item, index, enumerable);\n        ```\n\n        - `item` is the current item in the iteration.\n        - `index` is the current index in the iteration.\n        - `enumerable` is the enumerable object itself.\n\n        It should return the `true` to include the item in the results, `false`\n        otherwise.\n\n        Note that in addition to a callback, you can also pass an optional target\n        object that will be set as `this` on the context. This is a good way\n        to give your iterator function access to the current object.\n\n        Usage Example:\n\n        ```javascript\n        if (people.some(isManager)) { Paychecks.addBiggerBonus(); }\n        ```\n\n        @method some\n        @param {Function} callback The callback to execute\n        @param {Object} [target] The target object to use\n        @return {Boolean} `true` if the passed function returns `true` for any item\n        @deprecated Use `any` instead\n      */\n      some: aliasMethod('any'),\n\n      /**\n        Returns `true` if the passed property resolves to `true` for any item in\n        the enumerable. This method is often simpler/faster than using a callback.\n\n        @method isAny\n        @param {String} key the property to test\n        @param {String} [value] optional value to test against.\n        @return {Boolean} `true` if the passed function returns `true` for any item\n        @since 1.3.0\n      */\n      isAny: function(key, value) {\n        return this.any(apply(this, iter, arguments));\n      },\n\n      /**\n        @method anyBy\n        @param {String} key the property to test\n        @param {String} [value] optional value to test against.\n        @return {Boolean} `true` if the passed function returns `true` for any item\n        @deprecated Use `isAny` instead\n      */\n      anyBy: aliasMethod('isAny'),\n\n      /**\n        @method someProperty\n        @param {String} key the property to test\n        @param {String} [value] optional value to test against.\n        @return {Boolean} `true` if the passed function returns `true` for any item\n        @deprecated Use `isAny` instead\n      */\n      someProperty: aliasMethod('isAny'),\n\n      /**\n        This will combine the values of the enumerator into a single value. It\n        is a useful way to collect a summary value from an enumeration. This\n        corresponds to the `reduce()` method defined in JavaScript 1.8.\n\n        The callback method you provide should have the following signature (all\n        parameters are optional):\n\n        ```javascript\n        function(previousValue, item, index, enumerable);\n        ```\n\n        - `previousValue` is the value returned by the last call to the iterator.\n        - `item` is the current item in the iteration.\n        - `index` is the current index in the iteration.\n        - `enumerable` is the enumerable object itself.\n\n        Return the new cumulative value.\n\n        In addition to the callback you can also pass an `initialValue`. An error\n        will be raised if you do not pass an initial value and the enumerator is\n        empty.\n\n        Note that unlike the other methods, this method does not allow you to\n        pass a target object to set as this for the callback. It's part of the\n        spec. Sorry.\n\n        @method reduce\n        @param {Function} callback The callback to execute\n        @param {Object} initialValue Initial value for the reduce\n        @param {String} reducerProperty internal use only.\n        @return {Object} The reduced value.\n      */\n      reduce: function(callback, initialValue, reducerProperty) {\n        if (typeof callback !== \"function\") { throw new TypeError(); }\n\n        var ret = initialValue;\n\n        this.forEach(function(item, i) {\n          ret = callback(ret, item, i, this, reducerProperty);\n        }, this);\n\n        return ret;\n      },\n\n      /**\n        Invokes the named method on every object in the receiver that\n        implements it. This method corresponds to the implementation in\n        Prototype 1.6.\n\n        @method invoke\n        @param {String} methodName the name of the method\n        @param {Object...} args optional arguments to pass as well.\n        @return {Array} return values from calling invoke.\n      */\n      invoke: function(methodName) {\n        var args, ret = Ember.A();\n        if (arguments.length>1) args = a_slice.call(arguments, 1);\n\n        this.forEach(function(x, idx) {\n          var method = x && x[methodName];\n          if ('function' === typeof method) {\n            ret[idx] = args ? apply(x, method, args) : x[methodName]();\n          }\n        }, this);\n\n        return ret;\n      },\n\n      /**\n        Simply converts the enumerable into a genuine array. The order is not\n        guaranteed. Corresponds to the method implemented by Prototype.\n\n        @method toArray\n        @return {Array} the enumerable as an array.\n      */\n      toArray: function() {\n        var ret = Ember.A();\n        this.forEach(function(o, idx) { ret[idx] = o; });\n        return ret;\n      },\n\n      /**\n        Returns a copy of the array with all null and undefined elements removed.\n\n        ```javascript\n        var arr = [\"a\", null, \"c\", undefined];\n        arr.compact();  // [\"a\", \"c\"]\n        ```\n\n        @method compact\n        @return {Array} the array without null and undefined elements.\n      */\n      compact: function() {\n        return this.filter(function(value) { return value != null; });\n      },\n\n      /**\n        Returns a new enumerable that excludes the passed value. The default\n        implementation returns an array regardless of the receiver type unless\n        the receiver does not contain the value.\n\n        ```javascript\n        var arr = [\"a\", \"b\", \"a\", \"c\"];\n        arr.without(\"a\");  // [\"b\", \"c\"]\n        ```\n\n        @method without\n        @param {Object} value\n        @return {Ember.Enumerable}\n      */\n      without: function(value) {\n        if (!this.contains(value)) return this; // nothing to do\n        var ret = Ember.A();\n        this.forEach(function(k) {\n          if (k !== value) ret[ret.length] = k;\n        }) ;\n        return ret ;\n      },\n\n      /**\n        Returns a new enumerable that contains only unique values. The default\n        implementation returns an array regardless of the receiver type.\n\n        ```javascript\n        var arr = [\"a\", \"a\", \"b\", \"b\"];\n        arr.uniq();  // [\"a\", \"b\"]\n        ```\n\n        @method uniq\n        @return {Ember.Enumerable}\n      */\n      uniq: function() {\n        var ret = Ember.A();\n        this.forEach(function(k) {\n          if (indexOf(ret, k)<0) ret.push(k);\n        });\n        return ret;\n      },\n\n      /**\n        This property will trigger anytime the enumerable's content changes.\n        You can observe this property to be notified of changes to the enumerables\n        content.\n\n        For plain enumerables, this property is read only. `Array` overrides\n        this method.\n\n        @property []\n        @type Array\n        @return this\n      */\n      '[]': computed(function(key, value) {\n        return this;\n      }),\n\n      // ..........................................................\n      // ENUMERABLE OBSERVERS\n      //\n\n      /**\n        Registers an enumerable observer. Must implement `Ember.EnumerableObserver`\n        mixin.\n\n        @method addEnumerableObserver\n        @param {Object} target\n        @param {Hash} [opts]\n        @return this\n      */\n      addEnumerableObserver: function(target, opts) {\n        var willChange = (opts && opts.willChange) || 'enumerableWillChange';\n        var didChange  = (opts && opts.didChange) || 'enumerableDidChange';\n        var hasObservers = get(this, 'hasEnumerableObservers');\n\n        if (!hasObservers) propertyWillChange(this, 'hasEnumerableObservers');\n        addListener(this, '@enumerable:before', target, willChange);\n        addListener(this, '@enumerable:change', target, didChange);\n        if (!hasObservers) propertyDidChange(this, 'hasEnumerableObservers');\n        return this;\n      },\n\n      /**\n        Removes a registered enumerable observer.\n\n        @method removeEnumerableObserver\n        @param {Object} target\n        @param {Hash} [opts]\n        @return this\n      */\n      removeEnumerableObserver: function(target, opts) {\n        var willChange = (opts && opts.willChange) || 'enumerableWillChange';\n        var didChange  = (opts && opts.didChange) || 'enumerableDidChange';\n\n        var hasObservers = get(this, 'hasEnumerableObservers');\n        if (hasObservers) propertyWillChange(this, 'hasEnumerableObservers');\n        removeListener(this, '@enumerable:before', target, willChange);\n        removeListener(this, '@enumerable:change', target, didChange);\n        if (hasObservers) propertyDidChange(this, 'hasEnumerableObservers');\n        return this;\n      },\n\n      /**\n        Becomes true whenever the array currently has observers watching changes\n        on the array.\n\n        @property hasEnumerableObservers\n        @type Boolean\n      */\n      hasEnumerableObservers: computed(function() {\n        return hasListeners(this, '@enumerable:change') || hasListeners(this, '@enumerable:before');\n      }),\n\n\n      /**\n        Invoke this method just before the contents of your enumerable will\n        change. You can either omit the parameters completely or pass the objects\n        to be removed or added if available or just a count.\n\n        @method enumerableContentWillChange\n        @param {Ember.Enumerable|Number} removing An enumerable of the objects to\n          be removed or the number of items to be removed.\n        @param {Ember.Enumerable|Number} adding An enumerable of the objects to be\n          added or the number of items to be added.\n        @chainable\n      */\n      enumerableContentWillChange: function(removing, adding) {\n\n        var removeCnt, addCnt, hasDelta;\n\n        if ('number' === typeof removing) removeCnt = removing;\n        else if (removing) removeCnt = get(removing, 'length');\n        else removeCnt = removing = -1;\n\n        if ('number' === typeof adding) addCnt = adding;\n        else if (adding) addCnt = get(adding,'length');\n        else addCnt = adding = -1;\n\n        hasDelta = addCnt<0 || removeCnt<0 || addCnt-removeCnt!==0;\n\n        if (removing === -1) removing = null;\n        if (adding   === -1) adding   = null;\n\n        propertyWillChange(this, '[]');\n        if (hasDelta) propertyWillChange(this, 'length');\n        sendEvent(this, '@enumerable:before', [this, removing, adding]);\n\n        return this;\n      },\n\n      /**\n        Invoke this method when the contents of your enumerable has changed.\n        This will notify any observers watching for content changes. If you are\n        implementing an ordered enumerable (such as an array), also pass the\n        start and end values where the content changed so that it can be used to\n        notify range observers.\n\n        @method enumerableContentDidChange\n        @param {Ember.Enumerable|Number} removing An enumerable of the objects to\n          be removed or the number of items to be removed.\n        @param {Ember.Enumerable|Number} adding  An enumerable of the objects to\n          be added or the number of items to be added.\n        @chainable\n      */\n      enumerableContentDidChange: function(removing, adding) {\n        var removeCnt, addCnt, hasDelta;\n\n        if ('number' === typeof removing) removeCnt = removing;\n        else if (removing) removeCnt = get(removing, 'length');\n        else removeCnt = removing = -1;\n\n        if ('number' === typeof adding) addCnt = adding;\n        else if (adding) addCnt = get(adding, 'length');\n        else addCnt = adding = -1;\n\n        hasDelta = addCnt<0 || removeCnt<0 || addCnt-removeCnt!==0;\n\n        if (removing === -1) removing = null;\n        if (adding   === -1) adding   = null;\n\n        sendEvent(this, '@enumerable:change', [this, removing, adding]);\n        if (hasDelta) propertyDidChange(this, 'length');\n        propertyDidChange(this, '[]');\n\n        return this ;\n      },\n\n      /**\n        Converts the enumerable into an array and sorts by the keys\n        specified in the argument.\n\n        You may provide multiple arguments to sort by multiple properties.\n\n        @method sortBy\n        @param {String} property name(s) to sort on\n        @return {Array} The sorted array.\n        @since 1.2.0\n        */\n      sortBy: function() {\n        var sortKeys = arguments;\n        return this.toArray().sort(function(a, b){\n          for(var i = 0; i < sortKeys.length; i++) {\n            var key = sortKeys[i];\n            var propA = get(a, key);\n            var propB = get(b, key);\n            // return 1 or -1 else continue to the next sortKey\n            var compareValue = compare(propA, propB);\n            if (compareValue) { return compareValue; }\n          }\n          return 0;\n        });\n      }\n    });\n  });\nenifed(\"ember-runtime/mixins/evented\",\n  [\"ember-metal/mixin\",\"ember-metal/events\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Mixin = __dependency1__.Mixin;\n    var addListener = __dependency2__.addListener;\n    var removeListener = __dependency2__.removeListener;\n    var hasListeners = __dependency2__.hasListeners;\n    var sendEvent = __dependency2__.sendEvent;\n\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    /**\n      This mixin allows for Ember objects to subscribe to and emit events.\n\n      ```javascript\n      App.Person = Ember.Object.extend(Ember.Evented, {\n        greet: function() {\n          // ...\n          this.trigger('greet');\n        }\n      });\n\n      var person = App.Person.create();\n\n      person.on('greet', function() {\n        console.log('Our person has greeted');\n      });\n\n      person.greet();\n\n      // outputs: 'Our person has greeted'\n      ```\n\n      You can also chain multiple event subscriptions:\n\n      ```javascript\n      person.on('greet', function() {\n        console.log('Our person has greeted');\n      }).one('greet', function() {\n        console.log('Offer one-time special');\n      }).off('event', this, forgetThis);\n      ```\n\n      @class Evented\n      @namespace Ember\n     */\n    __exports__[\"default\"] = Mixin.create({\n\n      /**\n       Subscribes to a named event with given function.\n\n       ```javascript\n       person.on('didLoad', function() {\n         // fired once the person has loaded\n       });\n       ```\n\n       An optional target can be passed in as the 2nd argument that will\n       be set as the \"this\" for the callback. This is a good way to give your\n       function access to the object triggering the event. When the target\n       parameter is used the callback becomes the third argument.\n\n       @method on\n       @param {String} name The name of the event\n       @param {Object} [target] The \"this\" binding for the callback\n       @param {Function} method The callback to execute\n       @return this\n      */\n      on: function(name, target, method) {\n        addListener(this, name, target, method);\n        return this;\n      },\n\n      /**\n        Subscribes a function to a named event and then cancels the subscription\n        after the first time the event is triggered. It is good to use ``one`` when\n        you only care about the first time an event has taken place.\n\n        This function takes an optional 2nd argument that will become the \"this\"\n        value for the callback. If this argument is passed then the 3rd argument\n        becomes the function.\n\n        @method one\n        @param {String} name The name of the event\n        @param {Object} [target] The \"this\" binding for the callback\n        @param {Function} method The callback to execute\n        @return this\n      */\n      one: function(name, target, method) {\n        if (!method) {\n          method = target;\n          target = null;\n        }\n\n        addListener(this, name, target, method, true);\n        return this;\n      },\n\n      /**\n        Triggers a named event for the object. Any additional arguments\n        will be passed as parameters to the functions that are subscribed to the\n        event.\n\n        ```javascript\n        person.on('didEat', function(food) {\n          console.log('person ate some ' + food);\n        });\n\n        person.trigger('didEat', 'broccoli');\n\n        // outputs: person ate some broccoli\n        ```\n        @method trigger\n        @param {String} name The name of the event\n        @param {Object...} args Optional arguments to pass on\n      */\n      trigger: function(name) {\n        var length = arguments.length;\n        var args = new Array(length - 1);\n\n        for (var i = 1; i < length; i++) {\n          args[i - 1] = arguments[i];\n        }\n\n        sendEvent(this, name, args);\n      },\n\n      /**\n        Cancels subscription for given name, target, and method.\n\n        @method off\n        @param {String} name The name of the event\n        @param {Object} target The target of the subscription\n        @param {Function} method The function of the subscription\n        @return this\n      */\n      off: function(name, target, method) {\n        removeListener(this, name, target, method);\n        return this;\n      },\n\n      /**\n        Checks to see if object has any subscriptions for named event.\n\n        @method has\n        @param {String} name The name of the event\n        @return {Boolean} does the object have a subscription for event\n       */\n      has: function(name) {\n        return hasListeners(this, name);\n      }\n    });\n  });\nenifed(\"ember-runtime/mixins/freezable\",\n  [\"ember-metal/mixin\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    var Mixin = __dependency1__.Mixin;\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n\n    /**\n      The `Ember.Freezable` mixin implements some basic methods for marking an\n      object as frozen. Once an object is frozen it should be read only. No changes\n      may be made the internal state of the object.\n\n      ## Enforcement\n\n      To fully support freezing in your subclass, you must include this mixin and\n      override any method that might alter any property on the object to instead\n      raise an exception. You can check the state of an object by checking the\n      `isFrozen` property.\n\n      Although future versions of JavaScript may support language-level freezing\n      object objects, that is not the case today. Even if an object is freezable,\n      it is still technically possible to modify the object, even though it could\n      break other parts of your application that do not expect a frozen object to\n      change. It is, therefore, very important that you always respect the\n      `isFrozen` property on all freezable objects.\n\n      ## Example Usage\n\n      The example below shows a simple object that implement the `Ember.Freezable`\n      protocol.\n\n      ```javascript\n      Contact = Ember.Object.extend(Ember.Freezable, {\n        firstName: null,\n        lastName: null,\n\n        // swaps the names\n        swapNames: function() {\n          if (this.get('isFrozen')) throw Ember.FROZEN_ERROR;\n          var tmp = this.get('firstName');\n          this.set('firstName', this.get('lastName'));\n          this.set('lastName', tmp);\n          return this;\n        }\n\n      });\n\n      c = Contact.create({ firstName: \"John\", lastName: \"Doe\" });\n      c.swapNames();  // returns c\n      c.freeze();\n      c.swapNames();  // EXCEPTION\n      ```\n\n      ## Copying\n\n      Usually the `Ember.Freezable` protocol is implemented in cooperation with the\n      `Ember.Copyable` protocol, which defines a `frozenCopy()` method that will\n      return a frozen object, if the object implements this method as well.\n\n      @class Freezable\n      @namespace Ember\n      @since Ember 0.9\n    */\n    var Freezable = Mixin.create({\n\n      /**\n        Set to `true` when the object is frozen. Use this property to detect\n        whether your object is frozen or not.\n\n        @property isFrozen\n        @type Boolean\n      */\n      isFrozen: false,\n\n      /**\n        Freezes the object. Once this method has been called the object should\n        no longer allow any properties to be edited.\n\n        @method freeze\n        @return {Object} receiver\n      */\n      freeze: function() {\n        if (get(this, 'isFrozen')) return this;\n        set(this, 'isFrozen', true);\n        return this;\n      }\n\n    });\n    __exports__.Freezable = Freezable;\n    var FROZEN_ERROR = \"Frozen object cannot be modified.\";\n    __exports__.FROZEN_ERROR = FROZEN_ERROR;\n  });\nenifed(\"ember-runtime/mixins/mutable_array\",\n  [\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-metal/error\",\"ember-metal/mixin\",\"ember-runtime/mixins/array\",\"ember-runtime/mixins/mutable_enumerable\",\"ember-runtime/mixins/enumerable\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n\n    // require('ember-runtime/mixins/array');\n    // require('ember-runtime/mixins/mutable_enumerable');\n\n    // ..........................................................\n    // CONSTANTS\n    //\n\n    var OUT_OF_RANGE_EXCEPTION = \"Index out of range\";\n    var EMPTY = [];\n\n    // ..........................................................\n    // HELPERS\n    //\n\n    var get = __dependency1__.get;\n    var set = __dependency2__.set;\n    var isArray = __dependency3__.isArray;\n    var EmberError = __dependency4__[\"default\"];\n    var Mixin = __dependency5__.Mixin;\n    var required = __dependency5__.required;\n    var EmberArray = __dependency6__[\"default\"];\n    var MutableEnumerable = __dependency7__[\"default\"];\n    var Enumerable = __dependency8__[\"default\"];\n    /**\n      This mixin defines the API for modifying array-like objects. These methods\n      can be applied only to a collection that keeps its items in an ordered set.\n      It builds upon the Array mixin and adds methods to modify the array.\n      Concrete implementations of this class include ArrayProxy and ArrayController.\n\n      It is important to use the methods in this class to modify arrays so that\n      changes are observable. This allows the binding system in Ember to function\n      correctly.\n\n\n      Note that an Array can change even if it does not implement this mixin.\n      For example, one might implement a SparseArray that cannot be directly\n      modified, but if its underlying enumerable changes, it will change also.\n\n      @class MutableArray\n      @namespace Ember\n      @uses Ember.Array\n      @uses Ember.MutableEnumerable\n    */\n    __exports__[\"default\"] = Mixin.create(EmberArray, MutableEnumerable, {\n\n      /**\n        __Required.__ You must implement this method to apply this mixin.\n\n        This is one of the primitives you must implement to support `Ember.Array`.\n        You should replace amt objects started at idx with the objects in the\n        passed array. You should also call `this.enumerableContentDidChange()`\n\n        @method replace\n        @param {Number} idx Starting index in the array to replace. If\n          idx >= length, then append to the end of the array.\n        @param {Number} amt Number of elements that should be removed from\n          the array, starting at *idx*.\n        @param {Array} objects An array of zero or more objects that should be\n          inserted into the array at *idx*\n      */\n      replace: required(),\n\n      /**\n        Remove all elements from the array. This is useful if you\n        want to reuse an existing array without having to recreate it.\n\n        ```javascript\n        var colors = [\"red\", \"green\", \"blue\"];\n        color.length();   //  3\n        colors.clear();   //  []\n        colors.length();  //  0\n        ```\n\n        @method clear\n        @return {Ember.Array} An empty Array.\n      */\n      clear: function () {\n        var len = get(this, 'length');\n        if (len === 0) return this;\n        this.replace(0, len, EMPTY);\n        return this;\n      },\n\n      /**\n        This will use the primitive `replace()` method to insert an object at the\n        specified index.\n\n        ```javascript\n        var colors = [\"red\", \"green\", \"blue\"];\n        colors.insertAt(2, \"yellow\");  // [\"red\", \"green\", \"yellow\", \"blue\"]\n        colors.insertAt(5, \"orange\");  // Error: Index out of range\n        ```\n\n        @method insertAt\n        @param {Number} idx index of insert the object at.\n        @param {Object} object object to insert\n        @return {Ember.Array} receiver\n      */\n      insertAt: function(idx, object) {\n        if (idx > get(this, 'length')) throw new EmberError(OUT_OF_RANGE_EXCEPTION);\n        this.replace(idx, 0, [object]);\n        return this;\n      },\n\n      /**\n        Remove an object at the specified index using the `replace()` primitive\n        method. You can pass either a single index, or a start and a length.\n\n        If you pass a start and length that is beyond the\n        length this method will throw an `OUT_OF_RANGE_EXCEPTION`.\n\n        ```javascript\n        var colors = [\"red\", \"green\", \"blue\", \"yellow\", \"orange\"];\n        colors.removeAt(0);     // [\"green\", \"blue\", \"yellow\", \"orange\"]\n        colors.removeAt(2, 2);  // [\"green\", \"blue\"]\n        colors.removeAt(4, 2);  // Error: Index out of range\n        ```\n\n        @method removeAt\n        @param {Number} start index, start of range\n        @param {Number} len length of passing range\n        @return {Ember.Array} receiver\n      */\n      removeAt: function(start, len) {\n        if ('number' === typeof start) {\n\n          if ((start < 0) || (start >= get(this, 'length'))) {\n            throw new EmberError(OUT_OF_RANGE_EXCEPTION);\n          }\n\n          // fast case\n          if (len === undefined) len = 1;\n          this.replace(start, len, EMPTY);\n        }\n\n        return this;\n      },\n\n      /**\n        Push the object onto the end of the array. Works just like `push()` but it\n        is KVO-compliant.\n\n        ```javascript\n        var colors = [\"red\", \"green\"];\n        colors.pushObject(\"black\");     // [\"red\", \"green\", \"black\"]\n        colors.pushObject([\"yellow\"]);  // [\"red\", \"green\", [\"yellow\"]]\n        ```\n\n        @method pushObject\n        @param {*} obj object to push\n        @return object same object passed as a param\n      */\n      pushObject: function(obj) {\n        this.insertAt(get(this, 'length'), obj);\n        return obj;\n      },\n\n      /**\n        Add the objects in the passed numerable to the end of the array. Defers\n        notifying observers of the change until all objects are added.\n\n        ```javascript\n        var colors = [\"red\"];\n        colors.pushObjects([\"yellow\", \"orange\"]);  // [\"red\", \"yellow\", \"orange\"]\n        ```\n\n        @method pushObjects\n        @param {Ember.Enumerable} objects the objects to add\n        @return {Ember.Array} receiver\n      */\n      pushObjects: function(objects) {\n        if (!(Enumerable.detect(objects) || isArray(objects))) {\n          throw new TypeError(\"Must pass Ember.Enumerable to Ember.MutableArray#pushObjects\");\n        }\n        this.replace(get(this, 'length'), 0, objects);\n        return this;\n      },\n\n      /**\n        Pop object from array or nil if none are left. Works just like `pop()` but\n        it is KVO-compliant.\n\n        ```javascript\n        var colors = [\"red\", \"green\", \"blue\"];\n        colors.popObject();   // \"blue\"\n        console.log(colors);  // [\"red\", \"green\"]\n        ```\n\n        @method popObject\n        @return object\n      */\n      popObject: function() {\n        var len = get(this, 'length');\n        if (len === 0) return null;\n\n        var ret = this.objectAt(len-1);\n        this.removeAt(len-1, 1);\n        return ret;\n      },\n\n      /**\n        Shift an object from start of array or nil if none are left. Works just\n        like `shift()` but it is KVO-compliant.\n\n        ```javascript\n        var colors = [\"red\", \"green\", \"blue\"];\n        colors.shiftObject();  // \"red\"\n        console.log(colors);   // [\"green\", \"blue\"]\n        ```\n\n        @method shiftObject\n        @return object\n      */\n      shiftObject: function() {\n        if (get(this, 'length') === 0) return null;\n        var ret = this.objectAt(0);\n        this.removeAt(0);\n        return ret;\n      },\n\n      /**\n        Unshift an object to start of array. Works just like `unshift()` but it is\n        KVO-compliant.\n\n        ```javascript\n        var colors = [\"red\"];\n        colors.unshiftObject(\"yellow\");    // [\"yellow\", \"red\"]\n        colors.unshiftObject([\"black\"]);   // [[\"black\"], \"yellow\", \"red\"]\n        ```\n\n        @method unshiftObject\n        @param {*} obj object to unshift\n        @return object same object passed as a param\n      */\n      unshiftObject: function(obj) {\n        this.insertAt(0, obj);\n        return obj;\n      },\n\n      /**\n        Adds the named objects to the beginning of the array. Defers notifying\n        observers until all objects have been added.\n\n        ```javascript\n        var colors = [\"red\"];\n        colors.unshiftObjects([\"black\", \"white\"]);   // [\"black\", \"white\", \"red\"]\n        colors.unshiftObjects(\"yellow\"); // Type Error: 'undefined' is not a function\n        ```\n\n        @method unshiftObjects\n        @param {Ember.Enumerable} objects the objects to add\n        @return {Ember.Array} receiver\n      */\n      unshiftObjects: function(objects) {\n        this.replace(0, 0, objects);\n        return this;\n      },\n\n      /**\n        Reverse objects in the array. Works just like `reverse()` but it is\n        KVO-compliant.\n\n        @method reverseObjects\n        @return {Ember.Array} receiver\n       */\n      reverseObjects: function() {\n        var len = get(this, 'length');\n        if (len === 0) return this;\n        var objects = this.toArray().reverse();\n        this.replace(0, len, objects);\n        return this;\n      },\n\n      /**\n        Replace all the receiver's content with content of the argument.\n        If argument is an empty array receiver will be cleared.\n\n        ```javascript\n        var colors = [\"red\", \"green\", \"blue\"];\n        colors.setObjects([\"black\", \"white\"]);  // [\"black\", \"white\"]\n        colors.setObjects([]);                  // []\n        ```\n\n        @method setObjects\n        @param {Ember.Array} objects array whose content will be used for replacing\n            the content of the receiver\n        @return {Ember.Array} receiver with the new content\n       */\n      setObjects: function(objects) {\n        if (objects.length === 0) return this.clear();\n\n        var len = get(this, 'length');\n        this.replace(0, len, objects);\n        return this;\n      },\n\n      // ..........................................................\n      // IMPLEMENT Ember.MutableEnumerable\n      //\n\n      /**\n        Remove all occurances of an object in the array.\n\n        ```javascript\n        var cities = [\"Chicago\", \"Berlin\", \"Lima\", \"Chicago\"];\n        cities.removeObject(\"Chicago\");  // [\"Berlin\", \"Lima\"]\n        cities.removeObject(\"Lima\");     // [\"Berlin\"]\n        cities.removeObject(\"Tokyo\")     // [\"Berlin\"]\n        ```\n\n        @method removeObject\n        @param {*} obj object to remove\n        @return {Ember.Array} receiver\n      */\n      removeObject: function(obj) {\n        var loc = get(this, 'length') || 0;\n        while(--loc >= 0) {\n          var curObject = this.objectAt(loc);\n          if (curObject === obj) this.removeAt(loc);\n        }\n        return this;\n      },\n\n      /**\n        Push the object onto the end of the array if it is not already\n        present in the array.\n\n        ```javascript\n        var cities = [\"Chicago\", \"Berlin\"];\n        cities.addObject(\"Lima\");    // [\"Chicago\", \"Berlin\", \"Lima\"]\n        cities.addObject(\"Berlin\");  // [\"Chicago\", \"Berlin\", \"Lima\"]\n        ```\n\n        @method addObject\n        @param {*} obj object to add, if not already present\n        @return {Ember.Array} receiver\n      */\n      addObject: function(obj) {\n        if (!this.contains(obj)) this.pushObject(obj);\n        return this;\n      }\n\n    });\n  });\nenifed(\"ember-runtime/mixins/mutable_enumerable\",\n  [\"ember-metal/enumerable_utils\",\"ember-runtime/mixins/enumerable\",\"ember-metal/mixin\",\"ember-metal/property_events\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var forEach = __dependency1__.forEach;\n    var Enumerable = __dependency2__[\"default\"];\n    var Mixin = __dependency3__.Mixin;\n    var required = __dependency3__.required;\n    var beginPropertyChanges = __dependency4__.beginPropertyChanges;\n    var endPropertyChanges = __dependency4__.endPropertyChanges;\n\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    /**\n      This mixin defines the API for modifying generic enumerables. These methods\n      can be applied to an object regardless of whether it is ordered or\n      unordered.\n\n      Note that an Enumerable can change even if it does not implement this mixin.\n      For example, a MappedEnumerable cannot be directly modified but if its\n      underlying enumerable changes, it will change also.\n\n      ## Adding Objects\n\n      To add an object to an enumerable, use the `addObject()` method. This\n      method will only add the object to the enumerable if the object is not\n      already present and is of a type supported by the enumerable.\n\n      ```javascript\n      set.addObject(contact);\n      ```\n\n      ## Removing Objects\n\n      To remove an object from an enumerable, use the `removeObject()` method. This\n      will only remove the object if it is present in the enumerable, otherwise\n      this method has no effect.\n\n      ```javascript\n      set.removeObject(contact);\n      ```\n\n      ## Implementing In Your Own Code\n\n      If you are implementing an object and want to support this API, just include\n      this mixin in your class and implement the required methods. In your unit\n      tests, be sure to apply the Ember.MutableEnumerableTests to your object.\n\n      @class MutableEnumerable\n      @namespace Ember\n      @uses Ember.Enumerable\n    */\n    __exports__[\"default\"] = Mixin.create(Enumerable, {\n\n      /**\n        __Required.__ You must implement this method to apply this mixin.\n\n        Attempts to add the passed object to the receiver if the object is not\n        already present in the collection. If the object is present, this method\n        has no effect.\n\n        If the passed object is of a type not supported by the receiver,\n        then this method should raise an exception.\n\n        @method addObject\n        @param {Object} object The object to add to the enumerable.\n        @return {Object} the passed object\n      */\n      addObject: required(Function),\n\n      /**\n        Adds each object in the passed enumerable to the receiver.\n\n        @method addObjects\n        @param {Ember.Enumerable} objects the objects to add.\n        @return {Object} receiver\n      */\n      addObjects: function(objects) {\n        beginPropertyChanges(this);\n        forEach(objects, function(obj) { this.addObject(obj); }, this);\n        endPropertyChanges(this);\n        return this;\n      },\n\n      /**\n        __Required.__ You must implement this method to apply this mixin.\n\n        Attempts to remove the passed object from the receiver collection if the\n        object is present in the collection. If the object is not present,\n        this method has no effect.\n\n        If the passed object is of a type not supported by the receiver,\n        then this method should raise an exception.\n\n        @method removeObject\n        @param {Object} object The object to remove from the enumerable.\n        @return {Object} the passed object\n      */\n      removeObject: required(Function),\n\n\n      /**\n        Removes each object in the passed enumerable from the receiver.\n\n        @method removeObjects\n        @param {Ember.Enumerable} objects the objects to remove\n        @return {Object} receiver\n      */\n      removeObjects: function(objects) {\n        beginPropertyChanges(this);\n        for (var i = objects.length - 1; i >= 0; i--) {\n          this.removeObject(objects[i]);\n        }\n        endPropertyChanges(this);\n        return this;\n      }\n    });\n  });\nenifed(\"ember-runtime/mixins/observable\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-metal/get_properties\",\"ember-metal/set_properties\",\"ember-metal/mixin\",\"ember-metal/events\",\"ember-metal/property_events\",\"ember-metal/observer\",\"ember-metal/computed\",\"ember-metal/is_none\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert\n\n    var get = __dependency2__.get;\n    var getWithDefault = __dependency2__.getWithDefault;\n    var set = __dependency3__.set;\n    var apply = __dependency4__.apply;\n    var getProperties = __dependency5__[\"default\"];\n    var setProperties = __dependency6__[\"default\"];\n    var Mixin = __dependency7__.Mixin;\n    var hasListeners = __dependency8__.hasListeners;\n    var beginPropertyChanges = __dependency9__.beginPropertyChanges;\n    var propertyWillChange = __dependency9__.propertyWillChange;\n    var propertyDidChange = __dependency9__.propertyDidChange;\n    var endPropertyChanges = __dependency9__.endPropertyChanges;\n    var addObserver = __dependency10__.addObserver;\n    var addBeforeObserver = __dependency10__.addBeforeObserver;\n    var removeObserver = __dependency10__.removeObserver;\n    var observersFor = __dependency10__.observersFor;\n    var cacheFor = __dependency11__.cacheFor;\n    var isNone = __dependency12__.isNone;\n\n\n    var slice = Array.prototype.slice;\n    /**\n      ## Overview\n\n      This mixin provides properties and property observing functionality, core\n      features of the Ember object model.\n\n      Properties and observers allow one object to observe changes to a\n      property on another object. This is one of the fundamental ways that\n      models, controllers and views communicate with each other in an Ember\n      application.\n\n      Any object that has this mixin applied can be used in observer\n      operations. That includes `Ember.Object` and most objects you will\n      interact with as you write your Ember application.\n\n      Note that you will not generally apply this mixin to classes yourself,\n      but you will use the features provided by this module frequently, so it\n      is important to understand how to use it.\n\n      ## Using `get()` and `set()`\n\n      Because of Ember's support for bindings and observers, you will always\n      access properties using the get method, and set properties using the\n      set method. This allows the observing objects to be notified and\n      computed properties to be handled properly.\n\n      More documentation about `get` and `set` are below.\n\n      ## Observing Property Changes\n\n      You typically observe property changes simply by adding the `observes`\n      call to the end of your method declarations in classes that you write.\n      For example:\n\n      ```javascript\n      Ember.Object.extend({\n        valueObserver: function() {\n          // Executes whenever the \"value\" property changes\n        }.observes('value')\n      });\n      ```\n\n      Although this is the most common way to add an observer, this capability\n      is actually built into the `Ember.Object` class on top of two methods\n      defined in this mixin: `addObserver` and `removeObserver`. You can use\n      these two methods to add and remove observers yourself if you need to\n      do so at runtime.\n\n      To add an observer for a property, call:\n\n      ```javascript\n      object.addObserver('propertyKey', targetObject, targetAction)\n      ```\n\n      This will call the `targetAction` method on the `targetObject` whenever\n      the value of the `propertyKey` changes.\n\n      Note that if `propertyKey` is a computed property, the observer will be\n      called when any of the property dependencies are changed, even if the\n      resulting value of the computed property is unchanged. This is necessary\n      because computed properties are not computed until `get` is called.\n\n      @class Observable\n      @namespace Ember\n    */\n    __exports__[\"default\"] = Mixin.create({\n\n      /**\n        Retrieves the value of a property from the object.\n\n        This method is usually similar to using `object[keyName]` or `object.keyName`,\n        however it supports both computed properties and the unknownProperty\n        handler.\n\n        Because `get` unifies the syntax for accessing all these kinds\n        of properties, it can make many refactorings easier, such as replacing a\n        simple property with a computed property, or vice versa.\n\n        ### Computed Properties\n\n        Computed properties are methods defined with the `property` modifier\n        declared at the end, such as:\n\n        ```javascript\n        fullName: function() {\n          return this.get('firstName') + ' ' + this.get('lastName');\n        }.property('firstName', 'lastName')\n        ```\n\n        When you call `get` on a computed property, the function will be\n        called and the return value will be returned instead of the function\n        itself.\n\n        ### Unknown Properties\n\n        Likewise, if you try to call `get` on a property whose value is\n        `undefined`, the `unknownProperty()` method will be called on the object.\n        If this method returns any value other than `undefined`, it will be returned\n        instead. This allows you to implement \"virtual\" properties that are\n        not defined upfront.\n\n        @method get\n        @param {String} keyName The property to retrieve\n        @return {Object} The property value or undefined.\n      */\n      get: function(keyName) {\n        return get(this, keyName);\n      },\n\n      /**\n        To get the values of multiple properties at once, call `getProperties`\n        with a list of strings or an array:\n\n        ```javascript\n        record.getProperties('firstName', 'lastName', 'zipCode');\n        // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n        ```\n\n        is equivalent to:\n\n        ```javascript\n        record.getProperties(['firstName', 'lastName', 'zipCode']);\n        // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n        ```\n\n        @method getProperties\n        @param {String...|Array} list of keys to get\n        @return {Hash}\n      */\n      getProperties: function() {\n        return apply(null, getProperties, [this].concat(slice.call(arguments)));\n      },\n\n      /**\n        Sets the provided key or path to the value.\n\n        This method is generally very similar to calling `object[key] = value` or\n        `object.key = value`, except that it provides support for computed\n        properties, the `setUnknownProperty()` method and property observers.\n\n        ### Computed Properties\n\n        If you try to set a value on a key that has a computed property handler\n        defined (see the `get()` method for an example), then `set()` will call\n        that method, passing both the value and key instead of simply changing\n        the value itself. This is useful for those times when you need to\n        implement a property that is composed of one or more member\n        properties.\n\n        ### Unknown Properties\n\n        If you try to set a value on a key that is undefined in the target\n        object, then the `setUnknownProperty()` handler will be called instead. This\n        gives you an opportunity to implement complex \"virtual\" properties that\n        are not predefined on the object. If `setUnknownProperty()` returns\n        undefined, then `set()` will simply set the value on the object.\n\n        ### Property Observers\n\n        In addition to changing the property, `set()` will also register a property\n        change with the object. Unless you have placed this call inside of a\n        `beginPropertyChanges()` and `endPropertyChanges(),` any \"local\" observers\n        (i.e. observer methods declared on the same object), will be called\n        immediately. Any \"remote\" observers (i.e. observer methods declared on\n        another object) will be placed in a queue and called at a later time in a\n        coalesced manner.\n\n        ### Chaining\n\n        In addition to property changes, `set()` returns the value of the object\n        itself so you can do chaining like this:\n\n        ```javascript\n        record.set('firstName', 'Charles').set('lastName', 'Jolley');\n        ```\n\n        @method set\n        @param {String} keyName The property to set\n        @param {Object} value The value to set or `null`.\n        @return {Ember.Observable}\n      */\n      set: function(keyName, value) {\n        set(this, keyName, value);\n        return this;\n      },\n\n\n      /**\n        Sets a list of properties at once. These properties are set inside\n        a single `beginPropertyChanges` and `endPropertyChanges` batch, so\n        observers will be buffered.\n\n        ```javascript\n        record.setProperties({ firstName: 'Charles', lastName: 'Jolley' });\n        ```\n\n        @method setProperties\n        @param {Hash} hash the hash of keys and values to set\n        @return {Ember.Observable}\n      */\n      setProperties: function(hash) {\n        return setProperties(this, hash);\n      },\n\n      /**\n        Begins a grouping of property changes.\n\n        You can use this method to group property changes so that notifications\n        will not be sent until the changes are finished. If you plan to make a\n        large number of changes to an object at one time, you should call this\n        method at the beginning of the changes to begin deferring change\n        notifications. When you are done making changes, call\n        `endPropertyChanges()` to deliver the deferred change notifications and end\n        deferring.\n\n        @method beginPropertyChanges\n        @return {Ember.Observable}\n      */\n      beginPropertyChanges: function() {\n        beginPropertyChanges();\n        return this;\n      },\n\n      /**\n        Ends a grouping of property changes.\n\n        You can use this method to group property changes so that notifications\n        will not be sent until the changes are finished. If you plan to make a\n        large number of changes to an object at one time, you should call\n        `beginPropertyChanges()` at the beginning of the changes to defer change\n        notifications. When you are done making changes, call this method to\n        deliver the deferred change notifications and end deferring.\n\n        @method endPropertyChanges\n        @return {Ember.Observable}\n      */\n      endPropertyChanges: function() {\n        endPropertyChanges();\n        return this;\n      },\n\n      /**\n        Notify the observer system that a property is about to change.\n\n        Sometimes you need to change a value directly or indirectly without\n        actually calling `get()` or `set()` on it. In this case, you can use this\n        method and `propertyDidChange()` instead. Calling these two methods\n        together will notify all observers that the property has potentially\n        changed value.\n\n        Note that you must always call `propertyWillChange` and `propertyDidChange`\n        as a pair. If you do not, it may get the property change groups out of\n        order and cause notifications to be delivered more often than you would\n        like.\n\n        @method propertyWillChange\n        @param {String} keyName The property key that is about to change.\n        @return {Ember.Observable}\n      */\n      propertyWillChange: function(keyName) {\n        propertyWillChange(this, keyName);\n        return this;\n      },\n\n      /**\n        Notify the observer system that a property has just changed.\n\n        Sometimes you need to change a value directly or indirectly without\n        actually calling `get()` or `set()` on it. In this case, you can use this\n        method and `propertyWillChange()` instead. Calling these two methods\n        together will notify all observers that the property has potentially\n        changed value.\n\n        Note that you must always call `propertyWillChange` and `propertyDidChange`\n        as a pair. If you do not, it may get the property change groups out of\n        order and cause notifications to be delivered more often than you would\n        like.\n\n        @method propertyDidChange\n        @param {String} keyName The property key that has just changed.\n        @return {Ember.Observable}\n      */\n      propertyDidChange: function(keyName) {\n        propertyDidChange(this, keyName);\n        return this;\n      },\n\n      /**\n        Convenience method to call `propertyWillChange` and `propertyDidChange` in\n        succession.\n\n        @method notifyPropertyChange\n        @param {String} keyName The property key to be notified about.\n        @return {Ember.Observable}\n      */\n      notifyPropertyChange: function(keyName) {\n        this.propertyWillChange(keyName);\n        this.propertyDidChange(keyName);\n        return this;\n      },\n\n      addBeforeObserver: function(key, target, method) {\n        addBeforeObserver(this, key, target, method);\n      },\n\n      /**\n        Adds an observer on a property.\n\n        This is the core method used to register an observer for a property.\n\n        Once you call this method, any time the key's value is set, your observer\n        will be notified. Note that the observers are triggered any time the\n        value is set, regardless of whether it has actually changed. Your\n        observer should be prepared to handle that.\n\n        You can also pass an optional context parameter to this method. The\n        context will be passed to your observer method whenever it is triggered.\n        Note that if you add the same target/method pair on a key multiple times\n        with different context parameters, your observer will only be called once\n        with the last context you passed.\n\n        ### Observer Methods\n\n        Observer methods you pass should generally have the following signature if\n        you do not pass a `context` parameter:\n\n        ```javascript\n        fooDidChange: function(sender, key, value, rev) { };\n        ```\n\n        The sender is the object that changed. The key is the property that\n        changes. The value property is currently reserved and unused. The rev\n        is the last property revision of the object when it changed, which you can\n        use to detect if the key value has really changed or not.\n\n        If you pass a `context` parameter, the context will be passed before the\n        revision like so:\n\n        ```javascript\n        fooDidChange: function(sender, key, value, context, rev) { };\n        ```\n\n        Usually you will not need the value, context or revision parameters at\n        the end. In this case, it is common to write observer methods that take\n        only a sender and key value as parameters or, if you aren't interested in\n        any of these values, to write an observer that has no parameters at all.\n\n        @method addObserver\n        @param {String} key The key to observer\n        @param {Object} target The target object to invoke\n        @param {String|Function} method The method to invoke.\n      */\n      addObserver: function(key, target, method) {\n        addObserver(this, key, target, method);\n      },\n\n      /**\n        Remove an observer you have previously registered on this object. Pass\n        the same key, target, and method you passed to `addObserver()` and your\n        target will no longer receive notifications.\n\n        @method removeObserver\n        @param {String} key The key to observer\n        @param {Object} target The target object to invoke\n        @param {String|Function} method The method to invoke.\n      */\n      removeObserver: function(key, target, method) {\n        removeObserver(this, key, target, method);\n      },\n\n      /**\n        Returns `true` if the object currently has observers registered for a\n        particular key. You can use this method to potentially defer performing\n        an expensive action until someone begins observing a particular property\n        on the object.\n\n        @method hasObserverFor\n        @param {String} key Key to check\n        @return {Boolean}\n      */\n      hasObserverFor: function(key) {\n        return hasListeners(this, key+':change');\n      },\n\n      /**\n        Retrieves the value of a property, or a default value in the case that the\n        property returns `undefined`.\n\n        ```javascript\n        person.getWithDefault('lastName', 'Doe');\n        ```\n\n        @method getWithDefault\n        @param {String} keyName The name of the property to retrieve\n        @param {Object} defaultValue The value to return if the property value is undefined\n        @return {Object} The property value or the defaultValue.\n      */\n      getWithDefault: function(keyName, defaultValue) {\n        return getWithDefault(this, keyName, defaultValue);\n      },\n\n      /**\n        Set the value of a property to the current value plus some amount.\n\n        ```javascript\n        person.incrementProperty('age');\n        team.incrementProperty('score', 2);\n        ```\n\n        @method incrementProperty\n        @param {String} keyName The name of the property to increment\n        @param {Number} increment The amount to increment by. Defaults to 1\n        @return {Number} The new property value\n      */\n      incrementProperty: function(keyName, increment) {\n        if (isNone(increment)) { increment = 1; }\n        Ember.assert(\"Must pass a numeric value to incrementProperty\", (!isNaN(parseFloat(increment)) && isFinite(increment)));\n        set(this, keyName, (parseFloat(get(this, keyName)) || 0) + increment);\n        return get(this, keyName);\n      },\n\n      /**\n        Set the value of a property to the current value minus some amount.\n\n        ```javascript\n        player.decrementProperty('lives');\n        orc.decrementProperty('health', 5);\n        ```\n\n        @method decrementProperty\n        @param {String} keyName The name of the property to decrement\n        @param {Number} decrement The amount to decrement by. Defaults to 1\n        @return {Number} The new property value\n      */\n      decrementProperty: function(keyName, decrement) {\n        if (isNone(decrement)) { decrement = 1; }\n        Ember.assert(\"Must pass a numeric value to decrementProperty\", (!isNaN(parseFloat(decrement)) && isFinite(decrement)));\n        set(this, keyName, (get(this, keyName) || 0) - decrement);\n        return get(this, keyName);\n      },\n\n      /**\n        Set the value of a boolean property to the opposite of it's\n        current value.\n\n        ```javascript\n        starship.toggleProperty('warpDriveEngaged');\n        ```\n\n        @method toggleProperty\n        @param {String} keyName The name of the property to toggle\n        @return {Object} The new property value\n      */\n      toggleProperty: function(keyName) {\n        set(this, keyName, !get(this, keyName));\n        return get(this, keyName);\n      },\n\n      /**\n        Returns the cached value of a computed property, if it exists.\n        This allows you to inspect the value of a computed property\n        without accidentally invoking it if it is intended to be\n        generated lazily.\n\n        @method cacheFor\n        @param {String} keyName\n        @return {Object} The cached value of the computed property, if any\n      */\n      cacheFor: function(keyName) {\n        return cacheFor(this, keyName);\n      },\n\n      // intended for debugging purposes\n      observersForKey: function(keyName) {\n        return observersFor(this, keyName);\n      }\n    });\n  });\nenifed(\"ember-runtime/mixins/promise_proxy\",\n  [\"ember-metal/property_get\",\"ember-metal/set_properties\",\"ember-metal/computed\",\"ember-metal/mixin\",\"ember-metal/error\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var get = __dependency1__.get;\n    var setProperties = __dependency2__[\"default\"];\n    var computed = __dependency3__.computed;\n    var Mixin = __dependency4__.Mixin;\n    var EmberError = __dependency5__[\"default\"];\n\n    var not = computed.not;\n    var or = computed.or;\n\n    /**\n      @module ember\n      @submodule ember-runtime\n     */\n\n    function tap(proxy, promise) {\n      setProperties(proxy, {\n        isFulfilled: false,\n        isRejected: false\n      });\n\n      return promise.then(function(value) {\n        setProperties(proxy, {\n          content: value,\n          isFulfilled: true\n        });\n        return value;\n      }, function(reason) {\n        setProperties(proxy, {\n          reason: reason,\n          isRejected: true\n        });\n        throw reason;\n      }, \"Ember: PromiseProxy\");\n    }\n\n    /**\n      A low level mixin making ObjectProxy, ObjectController or ArrayController's promise aware.\n\n      ```javascript\n      var ObjectPromiseController = Ember.ObjectController.extend(Ember.PromiseProxyMixin);\n\n      var controller = ObjectPromiseController.create({\n        promise: $.getJSON('/some/remote/data.json')\n      });\n\n      controller.then(function(json){\n         // the json\n      }, function(reason) {\n         // the reason why you have no json\n      });\n      ```\n\n      the controller has bindable attributes which\n      track the promises life cycle\n\n      ```javascript\n      controller.get('isPending')   //=> true\n      controller.get('isSettled')  //=> false\n      controller.get('isRejected')  //=> false\n      controller.get('isFulfilled') //=> false\n      ```\n\n      When the the $.getJSON completes, and the promise is fulfilled\n      with json, the life cycle attributes will update accordingly.\n\n      ```javascript\n      controller.get('isPending')   //=> false\n      controller.get('isSettled')   //=> true\n      controller.get('isRejected')  //=> false\n      controller.get('isFulfilled') //=> true\n      ```\n\n      As the controller is an ObjectController, and the json now its content,\n      all the json properties will be available directly from the controller.\n\n      ```javascript\n      // Assuming the following json:\n      {\n        firstName: 'Stefan',\n        lastName: 'Penner'\n      }\n\n      // both properties will accessible on the controller\n      controller.get('firstName') //=> 'Stefan'\n      controller.get('lastName')  //=> 'Penner'\n      ```\n\n      If the controller is backing a template, the attributes are\n      bindable from within that template\n\n      ```handlebars\n      {{#if isPending}}\n        loading...\n      {{else}}\n        firstName: {{firstName}}\n        lastName: {{lastName}}\n      {{/if}}\n      ```\n      @class Ember.PromiseProxyMixin\n    */\n    __exports__[\"default\"] = Mixin.create({\n      /**\n        If the proxied promise is rejected this will contain the reason\n        provided.\n\n        @property reason\n        @default null\n      */\n      reason:  null,\n\n      /**\n        Once the proxied promise has settled this will become `false`.\n\n        @property isPending\n        @default true\n      */\n      isPending:  not('isSettled').readOnly(),\n\n      /**\n        Once the proxied promise has settled this will become `true`.\n\n        @property isSettled\n        @default false\n      */\n      isSettled:  or('isRejected', 'isFulfilled').readOnly(),\n\n      /**\n        Will become `true` if the proxied promise is rejected.\n\n        @property isRejected\n        @default false\n      */\n      isRejected:  false,\n\n      /**\n        Will become `true` if the proxied promise is fulfilled.\n\n        @property isFulfilled\n        @default false\n      */\n      isFulfilled: false,\n\n      /**\n        The promise whose fulfillment value is being proxied by this object.\n\n        This property must be specified upon creation, and should not be\n        changed once created.\n\n        Example:\n\n        ```javascript\n        Ember.ObjectController.extend(Ember.PromiseProxyMixin).create({\n          promise: <thenable>\n        });\n        ```\n\n        @property promise\n      */\n      promise: computed(function(key, promise) {\n        if (arguments.length === 2) {\n          return tap(this, promise);\n        } else {\n          throw new EmberError(\"PromiseProxy's promise must be set\");\n        }\n      }),\n\n      /**\n        An alias to the proxied promise's `then`.\n\n        See RSVP.Promise.then.\n\n        @method then\n        @param {Function} callback\n        @return {RSVP.Promise}\n      */\n      then: promiseAlias('then'),\n\n      /**\n        An alias to the proxied promise's `catch`.\n\n        See RSVP.Promise.catch.\n\n        @method catch\n        @param {Function} callback\n        @return {RSVP.Promise}\n        @since 1.3.0\n      */\n      'catch': promiseAlias('catch'),\n\n      /**\n        An alias to the proxied promise's `finally`.\n\n        See RSVP.Promise.finally.\n\n        @method finally\n        @param {Function} callback\n        @return {RSVP.Promise}\n        @since 1.3.0\n      */\n      'finally': promiseAlias('finally')\n\n    });\n\n    function promiseAlias(name) {\n      return function () {\n        var promise = get(this, 'promise');\n        return promise[name].apply(promise, arguments);\n      };\n    }\n  });\nenifed(\"ember-runtime/mixins/sortable\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/enumerable_utils\",\"ember-metal/mixin\",\"ember-runtime/mixins/mutable_enumerable\",\"ember-runtime/compare\",\"ember-metal/observer\",\"ember-metal/computed\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert, Ember.A\n\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var forEach = __dependency4__.forEach;\n    var Mixin = __dependency5__.Mixin;\n    var MutableEnumerable = __dependency6__[\"default\"];\n    var compare = __dependency7__[\"default\"];\n    var addObserver = __dependency8__.addObserver;\n    var removeObserver = __dependency8__.removeObserver;\n    var computed = __dependency9__.computed;\n    var beforeObserver = __dependency5__.beforeObserver;\n    var observer = __dependency5__.observer;\n    //ES6TODO: should we access these directly from their package or from how thier exposed in ember-metal?\n\n    /**\n      `Ember.SortableMixin` provides a standard interface for array proxies\n      to specify a sort order and maintain this sorting when objects are added,\n      removed, or updated without changing the implicit order of their underlying\n      modelarray:\n\n      ```javascript\n      songs = [\n        {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'},\n        {trackNumber: 2, title: 'Back in the U.S.S.R.'},\n        {trackNumber: 3, title: 'Glass Onion'},\n      ];\n\n      songsController = Ember.ArrayController.create({\n        model: songs,\n        sortProperties: ['trackNumber'],\n        sortAscending: true\n      });\n\n      songsController.get('firstObject');  // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\n      songsController.addObject({trackNumber: 1, title: 'Dear Prudence'});\n      songsController.get('firstObject');  // {trackNumber: 1, title: 'Dear Prudence'}\n      ```\n\n      If you add or remove the properties to sort by or change the sort direction the model\n      sort order will be automatically updated.\n\n      ```javascript\n      songsController.set('sortProperties', ['title']);\n      songsController.get('firstObject'); // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\n      songsController.toggleProperty('sortAscending');\n      songsController.get('firstObject'); // {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'}\n      ```\n\n      SortableMixin works by sorting the arrangedContent array, which is the array that\n      arrayProxy displays. Due to the fact that the underlying 'content' array is not changed, that\n      array will not display the sorted list:\n\n       ```javascript\n      songsController.get('content').get('firstObject'); // Returns the unsorted original content\n      songsController.get('firstObject'); // Returns the sorted content.\n      ```\n\n      Although the sorted content can also be accessed through the arrangedContent property,\n      it is preferable to use the proxied class and not the arrangedContent array directly.\n\n      @class SortableMixin\n      @namespace Ember\n      @uses Ember.MutableEnumerable\n    */\n    __exports__[\"default\"] = Mixin.create(MutableEnumerable, {\n\n      /**\n        Specifies which properties dictate the arrangedContent's sort order.\n\n        When specifying multiple properties the sorting will use properties\n        from the `sortProperties` array prioritized from first to last.\n\n        @property {Array} sortProperties\n      */\n      sortProperties: null,\n\n      /**\n        Specifies the arrangedContent's sort direction.\n        Sorts the content in ascending order by default. Set to `false` to\n        use descending order.\n\n        @property {Boolean} sortAscending\n        @default true\n      */\n      sortAscending: true,\n\n      /**\n        The function used to compare two values. You can override this if you\n        want to do custom comparisons. Functions must be of the type expected by\n        Array#sort, i.e.\n          return 0 if the two parameters are equal,\n          return a negative value if the first parameter is smaller than the second or\n          return a positive value otherwise:\n\n        ```javascript\n        function(x,y) { // These are assumed to be integers\n          if (x === y)\n            return 0;\n          return x < y ? -1 : 1;\n        }\n        ```\n\n        @property sortFunction\n        @type {Function}\n        @default Ember.compare\n      */\n      sortFunction: compare,\n\n      orderBy: function(item1, item2) {\n        var result = 0;\n        var sortProperties = get(this, 'sortProperties');\n        var sortAscending = get(this, 'sortAscending');\n        var sortFunction = get(this, 'sortFunction');\n\n        Ember.assert(\"you need to define `sortProperties`\", !!sortProperties);\n\n        forEach(sortProperties, function(propertyName) {\n          if (result === 0) {\n            result = sortFunction.call(this, get(item1, propertyName), get(item2, propertyName));\n            if ((result !== 0) && !sortAscending) {\n              result = (-1) * result;\n            }\n          }\n        }, this);\n\n        return result;\n      },\n\n      destroy: function() {\n        var content = get(this, 'content');\n        var sortProperties = get(this, 'sortProperties');\n\n        if (content && sortProperties) {\n          forEach(content, function(item) {\n            forEach(sortProperties, function(sortProperty) {\n              removeObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');\n            }, this);\n          }, this);\n        }\n\n        return this._super();\n      },\n\n      isSorted: computed.notEmpty('sortProperties'),\n\n      /**\n        Overrides the default arrangedContent from arrayProxy in order to sort by sortFunction.\n        Also sets up observers for each sortProperty on each item in the content Array.\n\n        @property arrangedContent\n      */\n\n      arrangedContent: computed('content', 'sortProperties.@each', function(key, value) {\n        var content = get(this, 'content');\n        var isSorted = get(this, 'isSorted');\n        var sortProperties = get(this, 'sortProperties');\n        var self = this;\n\n        if (content && isSorted) {\n          content = content.slice();\n          content.sort(function(item1, item2) {\n            return self.orderBy(item1, item2);\n          });\n          forEach(content, function(item) {\n            forEach(sortProperties, function(sortProperty) {\n              addObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');\n            }, this);\n          }, this);\n          return Ember.A(content);\n        }\n\n        return content;\n      }),\n\n      _contentWillChange: beforeObserver('content', function() {\n        var content = get(this, 'content');\n        var sortProperties = get(this, 'sortProperties');\n\n        if (content && sortProperties) {\n          forEach(content, function(item) {\n            forEach(sortProperties, function(sortProperty) {\n              removeObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');\n            }, this);\n          }, this);\n        }\n\n        this._super();\n      }),\n\n      sortPropertiesWillChange: beforeObserver('sortProperties', function() {\n        this._lastSortAscending = undefined;\n      }),\n\n      sortPropertiesDidChange: observer('sortProperties', function() {\n        this._lastSortAscending = undefined;\n      }),\n\n      sortAscendingWillChange: beforeObserver('sortAscending', function() {\n        this._lastSortAscending = get(this, 'sortAscending');\n      }),\n\n      sortAscendingDidChange: observer('sortAscending', function() {\n        if (this._lastSortAscending !== undefined && get(this, 'sortAscending') !== this._lastSortAscending) {\n          var arrangedContent = get(this, 'arrangedContent');\n          arrangedContent.reverseObjects();\n        }\n      }),\n\n      contentArrayWillChange: function(array, idx, removedCount, addedCount) {\n        var isSorted = get(this, 'isSorted');\n\n        if (isSorted) {\n          var arrangedContent = get(this, 'arrangedContent');\n          var removedObjects = array.slice(idx, idx+removedCount);\n          var sortProperties = get(this, 'sortProperties');\n\n          forEach(removedObjects, function(item) {\n            arrangedContent.removeObject(item);\n\n            forEach(sortProperties, function(sortProperty) {\n              removeObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');\n            }, this);\n          }, this);\n        }\n\n        return this._super(array, idx, removedCount, addedCount);\n      },\n\n      contentArrayDidChange: function(array, idx, removedCount, addedCount) {\n        var isSorted = get(this, 'isSorted');\n        var sortProperties = get(this, 'sortProperties');\n\n        if (isSorted) {\n          var addedObjects = array.slice(idx, idx+addedCount);\n\n          forEach(addedObjects, function(item) {\n            this.insertItemSorted(item);\n\n            forEach(sortProperties, function(sortProperty) {\n              addObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');\n            }, this);\n          }, this);\n        }\n\n        return this._super(array, idx, removedCount, addedCount);\n      },\n\n      insertItemSorted: function(item) {\n        var arrangedContent = get(this, 'arrangedContent');\n        var length = get(arrangedContent, 'length');\n\n        var idx = this._binarySearch(item, 0, length);\n        arrangedContent.insertAt(idx, item);\n      },\n\n      contentItemSortPropertyDidChange: function(item) {\n        var arrangedContent = get(this, 'arrangedContent');\n        var oldIndex = arrangedContent.indexOf(item);\n        var leftItem = arrangedContent.objectAt(oldIndex - 1);\n        var rightItem = arrangedContent.objectAt(oldIndex + 1);\n        var leftResult = leftItem && this.orderBy(item, leftItem);\n        var rightResult = rightItem && this.orderBy(item, rightItem);\n\n        if (leftResult < 0 || rightResult > 0) {\n          arrangedContent.removeObject(item);\n          this.insertItemSorted(item);\n        }\n      },\n\n      _binarySearch: function(item, low, high) {\n        var mid, midItem, res, arrangedContent;\n\n        if (low === high) {\n          return low;\n        }\n\n        arrangedContent = get(this, 'arrangedContent');\n\n        mid = low + Math.floor((high - low) / 2);\n        midItem = arrangedContent.objectAt(mid);\n\n        res = this.orderBy(midItem, item);\n\n        if (res < 0) {\n          return this._binarySearch(item, mid+1, high);\n        } else if (res > 0) {\n          return this._binarySearch(item, low, mid);\n        }\n\n        return mid;\n      }\n    });\n  });\nenifed(\"ember-runtime/mixins/target_action_support\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-metal/mixin\",\"ember-metal/computed\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n    var Ember = __dependency1__[\"default\"];\n    // Ember.lookup, Ember.assert\n\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var typeOf = __dependency4__.typeOf;\n    var Mixin = __dependency5__.Mixin;\n    var computed = __dependency6__.computed;\n\n    /**\n    `Ember.TargetActionSupport` is a mixin that can be included in a class\n    to add a `triggerAction` method with semantics similar to the Handlebars\n    `{{action}}` helper. In normal Ember usage, the `{{action}}` helper is\n    usually the best choice. This mixin is most often useful when you are\n    doing more complex event handling in View objects.\n\n    See also `Ember.ViewTargetActionSupport`, which has\n    view-aware defaults for target and actionContext.\n\n    @class TargetActionSupport\n    @namespace Ember\n    @extends Ember.Mixin\n    */\n    var TargetActionSupport = Mixin.create({\n      target: null,\n      action: null,\n      actionContext: null,\n\n      targetObject: computed(function() {\n        var target = get(this, 'target');\n\n        if (typeOf(target) === \"string\") {\n          var value = get(this, target);\n          if (value === undefined) { value = get(Ember.lookup, target); }\n          return value;\n        } else {\n          return target;\n        }\n      }).property('target'),\n\n      actionContextObject: computed(function() {\n        var actionContext = get(this, 'actionContext');\n\n        if (typeOf(actionContext) === \"string\") {\n          var value = get(this, actionContext);\n          if (value === undefined) { value = get(Ember.lookup, actionContext); }\n          return value;\n        } else {\n          return actionContext;\n        }\n      }).property('actionContext'),\n\n      /**\n      Send an `action` with an `actionContext` to a `target`. The action, actionContext\n      and target will be retrieved from properties of the object. For example:\n\n      ```javascript\n      App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n        target: Ember.computed.alias('controller'),\n        action: 'save',\n        actionContext: Ember.computed.alias('context'),\n        click: function() {\n          this.triggerAction(); // Sends the `save` action, along with the current context\n                                // to the current controller\n        }\n      });\n      ```\n\n      The `target`, `action`, and `actionContext` can be provided as properties of\n      an optional object argument to `triggerAction` as well.\n\n      ```javascript\n      App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n        click: function() {\n          this.triggerAction({\n            action: 'save',\n            target: this.get('controller'),\n            actionContext: this.get('context')\n          }); // Sends the `save` action, along with the current context\n              // to the current controller\n        }\n      });\n      ```\n\n      The `actionContext` defaults to the object you are mixing `TargetActionSupport` into.\n      But `target` and `action` must be specified either as properties or with the argument\n      to `triggerAction`, or a combination:\n\n      ```javascript\n      App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n        target: Ember.computed.alias('controller'),\n        click: function() {\n          this.triggerAction({\n            action: 'save'\n          }); // Sends the `save` action, along with a reference to `this`,\n              // to the current controller\n        }\n      });\n      ```\n\n      @method triggerAction\n      @param opts {Hash} (optional, with the optional keys action, target and/or actionContext)\n      @return {Boolean} true if the action was sent successfully and did not return false\n      */\n      triggerAction: function(opts) {\n        opts = opts || {};\n        var action = opts.action || get(this, 'action');\n        var target = opts.target || get(this, 'targetObject');\n        var actionContext = opts.actionContext;\n\n        function args(options, actionName) {\n          var ret = [];\n          if (actionName) { ret.push(actionName); }\n\n          return ret.concat(options);\n        }\n\n        if (typeof actionContext === 'undefined') {\n          actionContext = get(this, 'actionContextObject') || this;\n        }\n\n        if (target && action) {\n          var ret;\n\n          if (target.send) {\n            ret = target.send.apply(target, args(actionContext, action));\n          } else {\n            Ember.assert(\"The action '\" + action + \"' did not exist on \" + target, typeof target[action] === 'function');\n            ret = target[action].apply(target, args(actionContext));\n          }\n\n          if (ret !== false) ret = true;\n\n          return ret;\n        } else {\n          return false;\n        }\n      }\n    });\n\n    __exports__[\"default\"] = TargetActionSupport;\n  });\nenifed(\"ember-runtime/system/application\",\n  [\"ember-runtime/system/namespace\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Namespace = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Namespace.extend();\n  });\nenifed(\"ember-runtime/system/array_proxy\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-metal/computed\",\"ember-metal/mixin\",\"ember-metal/property_events\",\"ember-metal/error\",\"ember-runtime/system/object\",\"ember-runtime/mixins/mutable_array\",\"ember-runtime/mixins/enumerable\",\"ember-runtime/system/string\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.K, Ember.assert\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var isArray = __dependency4__.isArray;\n    var apply = __dependency4__.apply;\n    var computed = __dependency5__.computed;\n    var beforeObserver = __dependency6__.beforeObserver;\n    var observer = __dependency6__.observer;\n    var beginPropertyChanges = __dependency7__.beginPropertyChanges;\n    var endPropertyChanges = __dependency7__.endPropertyChanges;\n    var EmberError = __dependency8__[\"default\"];\n    var EmberObject = __dependency9__[\"default\"];\n    var MutableArray = __dependency10__[\"default\"];\n    var Enumerable = __dependency11__[\"default\"];\n    var fmt = __dependency12__.fmt;\n\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    var OUT_OF_RANGE_EXCEPTION = \"Index out of range\";\n    var EMPTY = [];\n    var alias = computed.alias;\n    var K = Ember.K;\n\n    /**\n      An ArrayProxy wraps any other object that implements `Ember.Array` and/or\n      `Ember.MutableArray,` forwarding all requests. This makes it very useful for\n      a number of binding use cases or other cases where being able to swap\n      out the underlying array is useful.\n\n      A simple example of usage:\n\n      ```javascript\n      var pets = ['dog', 'cat', 'fish'];\n      var ap = Ember.ArrayProxy.create({ content: Ember.A(pets) });\n\n      ap.get('firstObject');                        // 'dog'\n      ap.set('content', ['amoeba', 'paramecium']);\n      ap.get('firstObject');                        // 'amoeba'\n      ```\n\n      This class can also be useful as a layer to transform the contents of\n      an array, as they are accessed. This can be done by overriding\n      `objectAtContent`:\n\n      ```javascript\n      var pets = ['dog', 'cat', 'fish'];\n      var ap = Ember.ArrayProxy.create({\n          content: Ember.A(pets),\n          objectAtContent: function(idx) {\n              return this.get('content').objectAt(idx).toUpperCase();\n          }\n      });\n\n      ap.get('firstObject'); // . 'DOG'\n      ```\n\n      @class ArrayProxy\n      @namespace Ember\n      @extends Ember.Object\n      @uses Ember.MutableArray\n    */\n    var ArrayProxy = EmberObject.extend(MutableArray, {\n\n      /**\n        The content array. Must be an object that implements `Ember.Array` and/or\n        `Ember.MutableArray.`\n\n        @property content\n        @type Ember.Array\n      */\n      content: null,\n\n      /**\n       The array that the proxy pretends to be. In the default `ArrayProxy`\n       implementation, this and `content` are the same. Subclasses of `ArrayProxy`\n       can override this property to provide things like sorting and filtering.\n\n       @property arrangedContent\n      */\n      arrangedContent: alias('content'),\n\n      /**\n        Should actually retrieve the object at the specified index from the\n        content. You can override this method in subclasses to transform the\n        content item to something new.\n\n        This method will only be called if content is non-`null`.\n\n        @method objectAtContent\n        @param {Number} idx The index to retrieve.\n        @return {Object} the value or undefined if none found\n      */\n      objectAtContent: function(idx) {\n        return get(this, 'arrangedContent').objectAt(idx);\n      },\n\n      /**\n        Should actually replace the specified objects on the content array.\n        You can override this method in subclasses to transform the content item\n        into something new.\n\n        This method will only be called if content is non-`null`.\n\n        @method replaceContent\n        @param {Number} idx The starting index\n        @param {Number} amt The number of items to remove from the content.\n        @param {Array} objects Optional array of objects to insert or null if no\n          objects.\n        @return {void}\n      */\n      replaceContent: function(idx, amt, objects) {\n        get(this, 'content').replace(idx, amt, objects);\n      },\n\n      /**\n        Invoked when the content property is about to change. Notifies observers that the\n        entire array content will change.\n\n        @private\n        @method _contentWillChange\n      */\n      _contentWillChange: beforeObserver('content', function() {\n        this._teardownContent();\n      }),\n\n      _teardownContent: function() {\n        var content = get(this, 'content');\n\n        if (content) {\n          content.removeArrayObserver(this, {\n            willChange: 'contentArrayWillChange',\n            didChange: 'contentArrayDidChange'\n          });\n        }\n      },\n\n      /**\n        Override to implement content array `willChange` observer.\n\n        @method contentArrayWillChange\n\n        @param {Ember.Array} contentArray the content array\n        @param {Number} start starting index of the change\n        @param {Number} removeCount count of items removed\n        @param {Number} addCount count of items added\n\n      */\n      contentArrayWillChange: K,\n      /**\n        Override to implement content array `didChange` observer.\n\n        @method contentArrayDidChange\n\n        @param {Ember.Array} contentArray the content array\n        @param {Number} start starting index of the change\n        @param {Number} removeCount count of items removed\n        @param {Number} addCount count of items added\n      */\n      contentArrayDidChange: K,\n\n      /**\n        Invoked when the content property changes. Notifies observers that the\n        entire array content has changed.\n\n        @private\n        @method _contentDidChange\n      */\n      _contentDidChange: observer('content', function() {\n        var content = get(this, 'content');\n\n        Ember.assert(\"Can't set ArrayProxy's content to itself\", content !== this);\n\n        this._setupContent();\n      }),\n\n      _setupContent: function() {\n        var content = get(this, 'content');\n\n        if (content) {\n          Ember.assert(fmt('ArrayProxy expects an Array or ' +\n            'Ember.ArrayProxy, but you passed %@', [typeof content]),\n            isArray(content) || content.isDestroyed);\n\n          content.addArrayObserver(this, {\n            willChange: 'contentArrayWillChange',\n            didChange: 'contentArrayDidChange'\n          });\n        }\n      },\n\n      _arrangedContentWillChange: beforeObserver('arrangedContent', function() {\n        var arrangedContent = get(this, 'arrangedContent');\n        var len = arrangedContent ? get(arrangedContent, 'length') : 0;\n\n        this.arrangedContentArrayWillChange(this, 0, len, undefined);\n        this.arrangedContentWillChange(this);\n\n        this._teardownArrangedContent(arrangedContent);\n      }),\n\n      _arrangedContentDidChange: observer('arrangedContent', function() {\n        var arrangedContent = get(this, 'arrangedContent');\n        var len = arrangedContent ? get(arrangedContent, 'length') : 0;\n\n        Ember.assert(\"Can't set ArrayProxy's content to itself\", arrangedContent !== this);\n\n        this._setupArrangedContent();\n\n        this.arrangedContentDidChange(this);\n        this.arrangedContentArrayDidChange(this, 0, undefined, len);\n      }),\n\n      _setupArrangedContent: function() {\n        var arrangedContent = get(this, 'arrangedContent');\n\n        if (arrangedContent) {\n          Ember.assert(fmt('ArrayProxy expects an Array or ' +\n            'Ember.ArrayProxy, but you passed %@', [typeof arrangedContent]),\n            isArray(arrangedContent) || arrangedContent.isDestroyed);\n\n          arrangedContent.addArrayObserver(this, {\n            willChange: 'arrangedContentArrayWillChange',\n            didChange: 'arrangedContentArrayDidChange'\n          });\n        }\n      },\n\n      _teardownArrangedContent: function() {\n        var arrangedContent = get(this, 'arrangedContent');\n\n        if (arrangedContent) {\n          arrangedContent.removeArrayObserver(this, {\n            willChange: 'arrangedContentArrayWillChange',\n            didChange: 'arrangedContentArrayDidChange'\n          });\n        }\n      },\n\n      arrangedContentWillChange: K,\n      arrangedContentDidChange: K,\n\n      objectAt: function(idx) {\n        return get(this, 'content') && this.objectAtContent(idx);\n      },\n\n      length: computed(function() {\n        var arrangedContent = get(this, 'arrangedContent');\n        return arrangedContent ? get(arrangedContent, 'length') : 0;\n        // No dependencies since Enumerable notifies length of change\n      }),\n\n      _replace: function(idx, amt, objects) {\n        var content = get(this, 'content');\n        Ember.assert('The content property of '+ this.constructor + ' should be set before modifying it', content);\n        if (content) this.replaceContent(idx, amt, objects);\n        return this;\n      },\n\n      replace: function() {\n        if (get(this, 'arrangedContent') === get(this, 'content')) {\n          apply(this, this._replace, arguments);\n        } else {\n          throw new EmberError(\"Using replace on an arranged ArrayProxy is not allowed.\");\n        }\n      },\n\n      _insertAt: function(idx, object) {\n        if (idx > get(this, 'content.length')) throw new EmberError(OUT_OF_RANGE_EXCEPTION);\n        this._replace(idx, 0, [object]);\n        return this;\n      },\n\n      insertAt: function(idx, object) {\n        if (get(this, 'arrangedContent') === get(this, 'content')) {\n          return this._insertAt(idx, object);\n        } else {\n          throw new EmberError(\"Using insertAt on an arranged ArrayProxy is not allowed.\");\n        }\n      },\n\n      removeAt: function(start, len) {\n        if ('number' === typeof start) {\n          var content = get(this, 'content');\n          var arrangedContent = get(this, 'arrangedContent');\n          var indices = [];\n          var i;\n\n          if ((start < 0) || (start >= get(this, 'length'))) {\n            throw new EmberError(OUT_OF_RANGE_EXCEPTION);\n          }\n\n          if (len === undefined) len = 1;\n\n          // Get a list of indices in original content to remove\n          for (i=start; i<start+len; i++) {\n            // Use arrangedContent here so we avoid confusion with objects transformed by objectAtContent\n            indices.push(content.indexOf(arrangedContent.objectAt(i)));\n          }\n\n          // Replace in reverse order since indices will change\n          indices.sort(function(a,b) { return b - a; });\n\n          beginPropertyChanges();\n          for (i=0; i<indices.length; i++) {\n            this._replace(indices[i], 1, EMPTY);\n          }\n          endPropertyChanges();\n        }\n\n        return this ;\n      },\n\n      pushObject: function(obj) {\n        this._insertAt(get(this, 'content.length'), obj) ;\n        return obj ;\n      },\n\n      pushObjects: function(objects) {\n        if (!(Enumerable.detect(objects) || isArray(objects))) {\n          throw new TypeError(\"Must pass Ember.Enumerable to Ember.MutableArray#pushObjects\");\n        }\n        this._replace(get(this, 'length'), 0, objects);\n        return this;\n      },\n\n      setObjects: function(objects) {\n        if (objects.length === 0) return this.clear();\n\n        var len = get(this, 'length');\n        this._replace(0, len, objects);\n        return this;\n      },\n\n      unshiftObject: function(obj) {\n        this._insertAt(0, obj) ;\n        return obj ;\n      },\n\n      unshiftObjects: function(objects) {\n        this._replace(0, 0, objects);\n        return this;\n      },\n\n      slice: function() {\n        var arr = this.toArray();\n        return arr.slice.apply(arr, arguments);\n      },\n\n      arrangedContentArrayWillChange: function(item, idx, removedCnt, addedCnt) {\n        this.arrayContentWillChange(idx, removedCnt, addedCnt);\n      },\n\n      arrangedContentArrayDidChange: function(item, idx, removedCnt, addedCnt) {\n        this.arrayContentDidChange(idx, removedCnt, addedCnt);\n      },\n\n      init: function() {\n        this._super();\n        this._setupContent();\n        this._setupArrangedContent();\n      },\n\n      willDestroy: function() {\n        this._teardownArrangedContent();\n        this._teardownContent();\n      }\n    });\n\n    __exports__[\"default\"] = ArrayProxy;\n  });\nenifed(\"ember-runtime/system/container\",\n  [\"ember-metal/property_set\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var set = __dependency1__[\"default\"];\n\n    var Container = requireModule('container')[\"default\"];\n    Container.set = set;\n\n    __exports__[\"default\"] = Container;\n  });\nenifed(\"ember-runtime/system/core_object\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-metal/platform\",\"ember-metal/watching\",\"ember-metal/chains\",\"ember-metal/events\",\"ember-metal/mixin\",\"ember-metal/enumerable_utils\",\"ember-metal/error\",\"ember-metal/keys\",\"ember-runtime/mixins/action_handler\",\"ember-metal/properties\",\"ember-metal/binding\",\"ember-metal/computed\",\"ember-metal/run_loop\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __dependency16__, __dependency17__, __exports__) {\n        // Remove \"use strict\"; from transpiled module until\n    // https://bugs.webkit.org/show_bug.cgi?id=138038 is fixed\n    //\n    // REMOVE_USE_STRICT: true\n\n    /**\n      @module ember\n      @submodule ember-runtime\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert, Ember.K, Ember.config\n\n    // NOTE: this object should never be included directly. Instead use `Ember.Object`.\n    // We only define this separately so that `Ember.Set` can depend on it.\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var guidFor = __dependency4__.guidFor;\n    var apply = __dependency4__.apply;\n    var o_create = __dependency5__.create;\n    var generateGuid = __dependency4__.generateGuid;\n    var GUID_KEY = __dependency4__.GUID_KEY;\n    var meta = __dependency4__.meta;\n    var makeArray = __dependency4__.makeArray;\n    var rewatch = __dependency6__.rewatch;\n    var finishChains = __dependency7__.finishChains;\n    var sendEvent = __dependency8__.sendEvent;\n    var IS_BINDING = __dependency9__.IS_BINDING;\n    var Mixin = __dependency9__.Mixin;\n    var required = __dependency9__.required;\n    var indexOf = __dependency10__.indexOf;\n    var EmberError = __dependency11__[\"default\"];\n    var o_defineProperty = __dependency5__.defineProperty;\n    var keys = __dependency12__[\"default\"];\n    var ActionHandler = __dependency13__[\"default\"];\n    var defineProperty = __dependency14__.defineProperty;\n    var Binding = __dependency15__.Binding;\n    var ComputedProperty = __dependency16__.ComputedProperty;\n    var run = __dependency17__[\"default\"];\n    var destroy = __dependency6__.destroy;\n    var K = __dependency1__.K;\n    var hasPropertyAccessors = __dependency5__.hasPropertyAccessors;\n\n    var schedule = run.schedule;\n    var applyMixin = Mixin._apply;\n    var finishPartial = Mixin.finishPartial;\n    var reopen = Mixin.prototype.reopen;\n    var hasCachedComputedProperties = false;\n\n    var undefinedDescriptor = {\n      configurable: true,\n      writable: true,\n      enumerable: false,\n      value: undefined\n    };\n\n    var nullDescriptor = {\n      configurable: true,\n      writable: true,\n      enumerable: false,\n      value: null\n    };\n\n    function makeCtor() {\n\n      // Note: avoid accessing any properties on the object since it makes the\n      // method a lot faster. This is glue code so we want it to be as fast as\n      // possible.\n\n      var wasApplied = false;\n      var initMixins, initProperties;\n\n      var Class = function() {\n        if (!wasApplied) {\n          Class.proto(); // prepare prototype...\n        }\n        o_defineProperty(this, GUID_KEY, nullDescriptor);\n        o_defineProperty(this, '__nextSuper', undefinedDescriptor);\n        var m = meta(this);\n        var proto = m.proto;\n        m.proto = this;\n        if (initMixins) {\n          // capture locally so we can clear the closed over variable\n          var mixins = initMixins;\n          initMixins = null;\n          apply(this, this.reopen, mixins);\n        }\n        if (initProperties) {\n          // capture locally so we can clear the closed over variable\n          var props = initProperties;\n          initProperties = null;\n\n          var concatenatedProperties = this.concatenatedProperties;\n\n          for (var i = 0, l = props.length; i < l; i++) {\n            var properties = props[i];\n\n            Ember.assert(\"Ember.Object.create no longer supports mixing in other definitions, use createWithMixins instead.\", !(properties instanceof Mixin));\n\n            if (typeof properties !== 'object' && properties !== undefined) {\n              throw new EmberError(\"Ember.Object.create only accepts objects.\");\n            }\n\n            if (!properties) { continue; }\n\n            var keyNames = keys(properties);\n\n            for (var j = 0, ll = keyNames.length; j < ll; j++) {\n              var keyName = keyNames[j];\n              if (!properties.hasOwnProperty(keyName)) { continue; }\n\n              var value = properties[keyName];\n\n              if (IS_BINDING.test(keyName)) {\n                var bindings = m.bindings;\n                if (!bindings) {\n                  bindings = m.bindings = {};\n                } else if (!m.hasOwnProperty('bindings')) {\n                  bindings = m.bindings = o_create(m.bindings);\n                }\n                bindings[keyName] = value;\n              }\n\n              var desc = m.descs[keyName];\n\n              Ember.assert(\"Ember.Object.create no longer supports defining computed properties. Define computed properties using extend() or reopen() before calling create().\", !(value instanceof ComputedProperty));\n              Ember.assert(\"Ember.Object.create no longer supports defining methods that call _super.\", !(typeof value === 'function' && value.toString().indexOf('._super') !== -1));\n              Ember.assert(\"`actions` must be provided at extend time, not at create \" +\n                           \"time, when Ember.ActionHandler is used (i.e. views, \" +\n                           \"controllers & routes).\", !((keyName === 'actions') && ActionHandler.detect(this)));\n\n              if (concatenatedProperties && indexOf(concatenatedProperties, keyName) >= 0) {\n                var baseValue = this[keyName];\n\n                if (baseValue) {\n                  if ('function' === typeof baseValue.concat) {\n                    value = baseValue.concat(value);\n                  } else {\n                    value = makeArray(baseValue).concat(value);\n                  }\n                } else {\n                  value = makeArray(value);\n                }\n              }\n\n              if (desc) {\n                desc.set(this, keyName, value);\n              } else {\n                if (typeof this.setUnknownProperty === 'function' && !(keyName in this)) {\n                  this.setUnknownProperty(keyName, value);\n                } else {\n                  \n                    if (hasPropertyAccessors) {\n                      defineProperty(this, keyName, null, value); // setup mandatory setter\n                    } else {\n                      this[keyName] = value;\n                    }\n                                  }\n              }\n            }\n          }\n        }\n        finishPartial(this, m);\n        var length = arguments.length;\n        var args = new Array(length);\n        for (var x = 0; x < length; x++) {\n          args[x] = arguments[x];\n        }\n        apply(this, this.init, args);\n        m.proto = proto;\n        finishChains(this);\n        sendEvent(this, \"init\");\n      };\n\n      Class.toString = Mixin.prototype.toString;\n      Class.willReopen = function() {\n        if (wasApplied) {\n          Class.PrototypeMixin = Mixin.create(Class.PrototypeMixin);\n        }\n\n        wasApplied = false;\n      };\n      Class._initMixins = function(args) { initMixins = args; };\n      Class._initProperties = function(args) { initProperties = args; };\n\n      Class.proto = function() {\n        var superclass = Class.superclass;\n        if (superclass) { superclass.proto(); }\n\n        if (!wasApplied) {\n          wasApplied = true;\n          Class.PrototypeMixin.applyPartial(Class.prototype);\n          rewatch(Class.prototype);\n        }\n\n        return this.prototype;\n      };\n\n      return Class;\n\n    }\n\n    /**\n      @class CoreObject\n      @namespace Ember\n    */\n    var CoreObject = makeCtor();\n    CoreObject.toString = function() { return \"Ember.CoreObject\"; };\n    CoreObject.PrototypeMixin = Mixin.create({\n      reopen: function() {\n        var length = arguments.length;\n        var args = new Array(length);\n        for (var i = 0; i < length; i++) {\n          args[i] = arguments[i];\n        }\n        applyMixin(this, args, true);\n        return this;\n      },\n\n      /**\n        An overridable method called when objects are instantiated. By default,\n        does nothing unless it is overridden during class definition.\n\n        Example:\n\n        ```javascript\n        App.Person = Ember.Object.extend({\n          init: function() {\n            alert('Name is ' + this.get('name'));\n          }\n        });\n\n        var steve = App.Person.create({\n          name: \"Steve\"\n        });\n\n        // alerts 'Name is Steve'.\n        ```\n\n        NOTE: If you do override `init` for a framework class like `Ember.View` or\n        `Ember.ArrayController`, be sure to call `this._super()` in your\n        `init` declaration! If you don't, Ember may not have an opportunity to\n        do important setup work, and you'll see strange behavior in your\n        application.\n\n        @method init\n      */\n      init: function() {},\n\n      /**\n        Defines the properties that will be concatenated from the superclass\n        (instead of overridden).\n\n        By default, when you extend an Ember class a property defined in\n        the subclass overrides a property with the same name that is defined\n        in the superclass. However, there are some cases where it is preferable\n        to build up a property's value by combining the superclass' property\n        value with the subclass' value. An example of this in use within Ember\n        is the `classNames` property of `Ember.View`.\n\n        Here is some sample code showing the difference between a concatenated\n        property and a normal one:\n\n        ```javascript\n        App.BarView = Ember.View.extend({\n          someNonConcatenatedProperty: ['bar'],\n          classNames: ['bar']\n        });\n\n        App.FooBarView = App.BarView.extend({\n          someNonConcatenatedProperty: ['foo'],\n          classNames: ['foo']\n        });\n\n        var fooBarView = App.FooBarView.create();\n        fooBarView.get('someNonConcatenatedProperty'); // ['foo']\n        fooBarView.get('classNames'); // ['ember-view', 'bar', 'foo']\n        ```\n\n        This behavior extends to object creation as well. Continuing the\n        above example:\n\n        ```javascript\n        var view = App.FooBarView.create({\n          someNonConcatenatedProperty: ['baz'],\n          classNames: ['baz']\n        })\n        view.get('someNonConcatenatedProperty'); // ['baz']\n        view.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n        ```\n        Adding a single property that is not an array will just add it in the array:\n\n        ```javascript\n        var view = App.FooBarView.create({\n          classNames: 'baz'\n        })\n        view.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n        ```\n\n        Using the `concatenatedProperties` property, we can tell to Ember that mix\n        the content of the properties.\n\n        In `Ember.View` the `classNameBindings` and `attributeBindings` properties\n        are also concatenated, in addition to `classNames`.\n\n        This feature is available for you to use throughout the Ember object model,\n        although typical app developers are likely to use it infrequently. Since\n        it changes expectations about behavior of properties, you should properly\n        document its usage in each individual concatenated property (to not\n        mislead your users to think they can override the property in a subclass).\n\n        @property concatenatedProperties\n        @type Array\n        @default null\n      */\n      concatenatedProperties: null,\n\n      /**\n        Destroyed object property flag.\n\n        if this property is `true` the observers and bindings were already\n        removed by the effect of calling the `destroy()` method.\n\n        @property isDestroyed\n        @default false\n      */\n      isDestroyed: false,\n\n      /**\n        Destruction scheduled flag. The `destroy()` method has been called.\n\n        The object stays intact until the end of the run loop at which point\n        the `isDestroyed` flag is set.\n\n        @property isDestroying\n        @default false\n      */\n      isDestroying: false,\n\n      /**\n        Destroys an object by setting the `isDestroyed` flag and removing its\n        metadata, which effectively destroys observers and bindings.\n\n        If you try to set a property on a destroyed object, an exception will be\n        raised.\n\n        Note that destruction is scheduled for the end of the run loop and does not\n        happen immediately.  It will set an isDestroying flag immediately.\n\n        @method destroy\n        @return {Ember.Object} receiver\n      */\n      destroy: function() {\n        if (this.isDestroying) { return; }\n        this.isDestroying = true;\n\n        schedule('actions', this, this.willDestroy);\n        schedule('destroy', this, this._scheduledDestroy);\n        return this;\n      },\n\n      /**\n        Override to implement teardown.\n\n        @method willDestroy\n       */\n      willDestroy: K,\n\n      /**\n        Invoked by the run loop to actually destroy the object. This is\n        scheduled for execution by the `destroy` method.\n\n        @private\n        @method _scheduledDestroy\n      */\n      _scheduledDestroy: function() {\n        if (this.isDestroyed) { return; }\n        destroy(this);\n        this.isDestroyed = true;\n      },\n\n      bind: function(to, from) {\n        if (!(from instanceof Binding)) { from = Binding.from(from); }\n        from.to(to).connect(this);\n        return from;\n      },\n\n      /**\n        Returns a string representation which attempts to provide more information\n        than Javascript's `toString` typically does, in a generic way for all Ember\n        objects.\n\n        ```javascript\n        App.Person = Em.Object.extend()\n        person = App.Person.create()\n        person.toString() //=> \"<App.Person:ember1024>\"\n        ```\n\n        If the object's class is not defined on an Ember namespace, it will\n        indicate it is a subclass of the registered superclass:\n\n       ```javascript\n        Student = App.Person.extend()\n        student = Student.create()\n        student.toString() //=> \"<(subclass of App.Person):ember1025>\"\n        ```\n\n        If the method `toStringExtension` is defined, its return value will be\n        included in the output.\n\n        ```javascript\n        App.Teacher = App.Person.extend({\n          toStringExtension: function() {\n            return this.get('fullName');\n          }\n        });\n        teacher = App.Teacher.create()\n        teacher.toString(); //=> \"<App.Teacher:ember1026:Tom Dale>\"\n        ```\n\n        @method toString\n        @return {String} string representation\n      */\n      toString: function toString() {\n        var hasToStringExtension = typeof this.toStringExtension === 'function';\n        var extension = hasToStringExtension ? \":\" + this.toStringExtension() : '';\n        var ret = '<'+this.constructor.toString()+':'+guidFor(this)+extension+'>';\n\n        this.toString = makeToString(ret);\n        return ret;\n      }\n    });\n\n    CoreObject.PrototypeMixin.ownerConstructor = CoreObject;\n\n    function makeToString(ret) {\n      return function() { return ret; };\n    }\n\n    if (Ember.config.overridePrototypeMixin) {\n      Ember.config.overridePrototypeMixin(CoreObject.PrototypeMixin);\n    }\n\n    CoreObject.__super__ = null;\n\n    var ClassMixin = Mixin.create({\n\n      ClassMixin: required(),\n\n      PrototypeMixin: required(),\n\n      isClass: true,\n\n      isMethod: false,\n\n      /**\n        Creates a new subclass.\n\n        ```javascript\n        App.Person = Ember.Object.extend({\n          say: function(thing) {\n            alert(thing);\n           }\n        });\n        ```\n\n        This defines a new subclass of Ember.Object: `App.Person`. It contains one method: `say()`.\n\n        You can also create a subclass from any existing class by calling its `extend()`  method. For example, you might want to create a subclass of Ember's built-in `Ember.View` class:\n\n        ```javascript\n        App.PersonView = Ember.View.extend({\n          tagName: 'li',\n          classNameBindings: ['isAdministrator']\n        });\n        ```\n\n        When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special `_super()` method:\n\n        ```javascript\n        App.Person = Ember.Object.extend({\n          say: function(thing) {\n            var name = this.get('name');\n            alert(name + ' says: ' + thing);\n          }\n        });\n\n        App.Soldier = App.Person.extend({\n          say: function(thing) {\n            this._super(thing + \", sir!\");\n          },\n          march: function(numberOfHours) {\n            alert(this.get('name') + ' marches for ' + numberOfHours + ' hours.')\n          }\n        });\n\n        var yehuda = App.Soldier.create({\n          name: \"Yehuda Katz\"\n        });\n\n        yehuda.say(\"Yes\");  // alerts \"Yehuda Katz says: Yes, sir!\"\n        ```\n\n        The `create()` on line #17 creates an *instance* of the `App.Soldier` class. The `extend()` on line #8 creates a *subclass* of `App.Person`. Any instance of the `App.Person` class will *not* have the `march()` method.\n\n        You can also pass `Mixin` classes to add additional properties to the subclass.\n\n        ```javascript\n        App.Person = Ember.Object.extend({\n          say: function(thing) {\n            alert(this.get('name') + ' says: ' + thing);\n          }\n        });\n\n        App.SingingMixin = Mixin.create({\n          sing: function(thing){\n            alert(this.get('name') + ' sings: la la la ' + thing);\n          }\n        });\n\n        App.BroadwayStar = App.Person.extend(App.SingingMixin, {\n          dance: function() {\n            alert(this.get('name') + ' dances: tap tap tap tap ');\n          }\n        });\n        ```\n\n        The `App.BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.\n\n        @method extend\n        @static\n\n        @param {Mixin} [mixins]* One or more Mixin classes\n        @param {Object} [arguments]* Object containing values to use within the new class\n      */\n      extend: function extend() {\n        var Class = makeCtor();\n        var proto;\n        Class.ClassMixin = Mixin.create(this.ClassMixin);\n        Class.PrototypeMixin = Mixin.create(this.PrototypeMixin);\n\n        Class.ClassMixin.ownerConstructor = Class;\n        Class.PrototypeMixin.ownerConstructor = Class;\n\n        reopen.apply(Class.PrototypeMixin, arguments);\n\n        Class.superclass = this;\n        Class.__super__  = this.prototype;\n\n        proto = Class.prototype = o_create(this.prototype);\n        proto.constructor = Class;\n        generateGuid(proto);\n        meta(proto).proto = proto; // this will disable observers on prototype\n\n        Class.ClassMixin.apply(Class);\n        return Class;\n      },\n\n      /**\n        Equivalent to doing `extend(arguments).create()`.\n        If possible use the normal `create` method instead.\n\n        @method createWithMixins\n        @static\n        @param [arguments]*\n      */\n      createWithMixins: function() {\n        var C = this;\n        var l= arguments.length;\n        if (l > 0) {\n          var args = new Array(l);\n          for (var i = 0; i < l; i++) {\n            args[i] = arguments[i];\n          }\n          this._initMixins(args);\n        }\n        return new C();\n      },\n\n      /**\n        Creates an instance of a class. Accepts either no arguments, or an object\n        containing values to initialize the newly instantiated object with.\n\n        ```javascript\n        App.Person = Ember.Object.extend({\n          helloWorld: function() {\n            alert(\"Hi, my name is \" + this.get('name'));\n          }\n        });\n\n        var tom = App.Person.create({\n          name: 'Tom Dale'\n        });\n\n        tom.helloWorld(); // alerts \"Hi, my name is Tom Dale\".\n        ```\n\n        `create` will call the `init` function if defined during\n        `Ember.AnyObject.extend`\n\n        If no arguments are passed to `create`, it will not set values to the new\n        instance during initialization:\n\n        ```javascript\n        var noName = App.Person.create();\n        noName.helloWorld(); // alerts undefined\n        ```\n\n        NOTE: For performance reasons, you cannot declare methods or computed\n        properties during `create`. You should instead declare methods and computed\n        properties when using `extend` or use the `createWithMixins` shorthand.\n\n        @method create\n        @static\n        @param [arguments]*\n      */\n      create: function() {\n        var C = this;\n        var l = arguments.length;\n        if (l > 0) {\n          var args = new Array(l);\n          for (var i = 0; i < l; i++) {\n            args[i] = arguments[i];\n          }\n          this._initProperties(args);\n        }\n        return new C();\n      },\n\n      /**\n        Augments a constructor's prototype with additional\n        properties and functions:\n\n        ```javascript\n        MyObject = Ember.Object.extend({\n          name: 'an object'\n        });\n\n        o = MyObject.create();\n        o.get('name'); // 'an object'\n\n        MyObject.reopen({\n          say: function(msg){\n            console.log(msg);\n          }\n        })\n\n        o2 = MyObject.create();\n        o2.say(\"hello\"); // logs \"hello\"\n\n        o.say(\"goodbye\"); // logs \"goodbye\"\n        ```\n\n        To add functions and properties to the constructor itself,\n        see `reopenClass`\n\n        @method reopen\n      */\n      reopen: function() {\n        this.willReopen();\n\n        var l = arguments.length;\n        var args = new Array(l);\n        if (l > 0) {\n          for (var i = 0; i < l; i++) {\n            args[i] = arguments[i];\n          }\n        }\n\n        apply(this.PrototypeMixin, reopen, args);\n        return this;\n      },\n\n      /**\n        Augments a constructor's own properties and functions:\n\n        ```javascript\n        MyObject = Ember.Object.extend({\n          name: 'an object'\n        });\n\n        MyObject.reopenClass({\n          canBuild: false\n        });\n\n        MyObject.canBuild; // false\n        o = MyObject.create();\n        ```\n\n        In other words, this creates static properties and functions for the class. These are only available on the class\n        and not on any instance of that class.\n\n        ```javascript\n        App.Person = Ember.Object.extend({\n          name : \"\",\n          sayHello : function(){\n            alert(\"Hello. My name is \" + this.get('name'));\n          }\n        });\n\n        App.Person.reopenClass({\n          species : \"Homo sapiens\",\n          createPerson: function(newPersonsName){\n            return App.Person.create({\n              name:newPersonsName\n            });\n          }\n        });\n\n        var tom = App.Person.create({\n          name : \"Tom Dale\"\n        });\n        var yehuda = App.Person.createPerson(\"Yehuda Katz\");\n\n        tom.sayHello(); // \"Hello. My name is Tom Dale\"\n        yehuda.sayHello(); // \"Hello. My name is Yehuda Katz\"\n        alert(App.Person.species); // \"Homo sapiens\"\n        ```\n\n        Note that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`\n        variables. They are only valid on `App.Person`.\n\n        To add functions and properties to instances of\n        a constructor by extending the constructor's prototype\n        see `reopen`\n\n        @method reopenClass\n      */\n      reopenClass: function() {\n        var l = arguments.length;\n        var args = new Array(l);\n        if (l > 0) {\n          for (var i = 0; i < l; i++) {\n            args[i] = arguments[i];\n          }\n        }\n\n        apply(this.ClassMixin, reopen, args);\n        applyMixin(this, arguments, false);\n        return this;\n      },\n\n      detect: function(obj) {\n        if ('function' !== typeof obj) { return false; }\n        while(obj) {\n          if (obj===this) { return true; }\n          obj = obj.superclass;\n        }\n        return false;\n      },\n\n      detectInstance: function(obj) {\n        return obj instanceof this;\n      },\n\n      /**\n        In some cases, you may want to annotate computed properties with additional\n        metadata about how they function or what values they operate on. For\n        example, computed property functions may close over variables that are then\n        no longer available for introspection.\n\n        You can pass a hash of these values to a computed property like this:\n\n        ```javascript\n        person: function() {\n          var personId = this.get('personId');\n          return App.Person.create({ id: personId });\n        }.property().meta({ type: App.Person })\n        ```\n\n        Once you've done this, you can retrieve the values saved to the computed\n        property from your class like this:\n\n        ```javascript\n        MyClass.metaForProperty('person');\n        ```\n\n        This will return the original hash that was passed to `meta()`.\n\n        @method metaForProperty\n        @param key {String} property name\n      */\n      metaForProperty: function(key) {\n        var meta = this.proto()['__ember_meta__'];\n        var desc = meta && meta.descs[key];\n\n        Ember.assert(\"metaForProperty() could not find a computed property with key '\"+key+\"'.\", !!desc && desc instanceof ComputedProperty);\n        return desc._meta || {};\n      },\n\n      _computedProperties: Ember.computed(function() {\n        hasCachedComputedProperties = true;\n        var proto = this.proto();\n        var descs = meta(proto).descs;\n        var property;\n        var properties = [];\n\n        for (var name in descs) {\n          property = descs[name];\n\n          if (property instanceof ComputedProperty) {\n            properties.push({\n              name: name,\n              meta: property._meta\n            });\n          }\n        }\n        return properties;\n      }).readOnly(),\n\n      /**\n        Iterate over each computed property for the class, passing its name\n        and any associated metadata (see `metaForProperty`) to the callback.\n\n        @method eachComputedProperty\n        @param {Function} callback\n        @param {Object} binding\n      */\n      eachComputedProperty: function(callback, binding) {\n        var property, name;\n        var empty = {};\n\n        var properties = get(this, '_computedProperties');\n\n        for (var i = 0, length = properties.length; i < length; i++) {\n          property = properties[i];\n          name = property.name;\n          callback.call(binding || this, property.name, property.meta || empty);\n        }\n      }\n    });\n\n    ClassMixin.ownerConstructor = CoreObject;\n\n    if (Ember.config.overrideClassMixin) {\n      Ember.config.overrideClassMixin(ClassMixin);\n    }\n\n    CoreObject.ClassMixin = ClassMixin;\n\n    ClassMixin.apply(CoreObject);\n\n    CoreObject.reopen({\n      didDefineProperty: function(proto, key, value) {\n        if (hasCachedComputedProperties === false) { return; }\n        if (value instanceof Ember.ComputedProperty) {\n          var cache = Ember.meta(this.constructor).cache;\n\n          if (cache._computedProperties !== undefined) {\n            cache._computedProperties = undefined;\n          }\n        }\n      }\n    });\n\n    __exports__[\"default\"] = CoreObject;\n  });\nenifed(\"ember-runtime/system/deferred\",\n  [\"ember-metal/core\",\"ember-runtime/mixins/deferred\",\"ember-metal/property_get\",\"ember-runtime/system/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var DeferredMixin = __dependency2__[\"default\"];\n    var get = __dependency3__.get;\n    var EmberObject = __dependency4__[\"default\"];\n\n    var Deferred = EmberObject.extend(DeferredMixin, {\n      init: function() {\n        Ember.deprecate('Usage of Ember.Deferred is deprecated.');\n        this._super();\n      }\n    });\n\n    Deferred.reopenClass({\n      promise: function(callback, binding) {\n        var deferred = Deferred.create();\n        callback.call(binding, deferred);\n        return deferred;\n      }\n    });\n\n    __exports__[\"default\"] = Deferred;\n  });\nenifed(\"ember-runtime/system/each_proxy\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-metal/enumerable_utils\",\"ember-metal/array\",\"ember-runtime/mixins/array\",\"ember-runtime/system/object\",\"ember-metal/computed\",\"ember-metal/observer\",\"ember-metal/events\",\"ember-metal/properties\",\"ember-metal/property_events\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert\n\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var guidFor = __dependency4__.guidFor;\n    var forEach = __dependency5__.forEach;\n    var indexOf = __dependency6__.indexOf;\n    var EmberArray = __dependency7__[\"default\"];\n    // ES6TODO: WAT? Circular dep?\n    var EmberObject = __dependency8__[\"default\"];\n    var computed = __dependency9__.computed;\n    var addObserver = __dependency10__.addObserver;\n    var addBeforeObserver = __dependency10__.addBeforeObserver;\n    var removeBeforeObserver = __dependency10__.removeBeforeObserver;\n    var removeObserver = __dependency10__.removeObserver;\n    var typeOf = __dependency4__.typeOf;\n    var watchedEvents = __dependency11__.watchedEvents;\n    var defineProperty = __dependency12__.defineProperty;\n    var beginPropertyChanges = __dependency13__.beginPropertyChanges;\n    var propertyDidChange = __dependency13__.propertyDidChange;\n    var propertyWillChange = __dependency13__.propertyWillChange;\n    var endPropertyChanges = __dependency13__.endPropertyChanges;\n    var changeProperties = __dependency13__.changeProperties;\n\n    var EachArray = EmberObject.extend(EmberArray, {\n\n      init: function(content, keyName, owner) {\n        this._super();\n        this._keyName = keyName;\n        this._owner   = owner;\n        this._content = content;\n      },\n\n      objectAt: function(idx) {\n        var item = this._content.objectAt(idx);\n        return item && get(item, this._keyName);\n      },\n\n      length: computed(function() {\n        var content = this._content;\n        return content ? get(content, 'length') : 0;\n      })\n\n    });\n\n    var IS_OBSERVER = /^.+:(before|change)$/;\n\n    function addObserverForContentKey(content, keyName, proxy, idx, loc) {\n      var objects = proxy._objects;\n      var guid;\n      if (!objects) objects = proxy._objects = {};\n\n      while(--loc>=idx) {\n        var item = content.objectAt(loc);\n        if (item) {\n          Ember.assert('When using @each to observe the array ' + content + ', the array must return an object', typeOf(item) === 'instance' || typeOf(item) === 'object');\n          addBeforeObserver(item, keyName, proxy, 'contentKeyWillChange');\n          addObserver(item, keyName, proxy, 'contentKeyDidChange');\n\n          // keep track of the index each item was found at so we can map\n          // it back when the obj changes.\n          guid = guidFor(item);\n          if (!objects[guid]) objects[guid] = [];\n          objects[guid].push(loc);\n        }\n      }\n    }\n\n    function removeObserverForContentKey(content, keyName, proxy, idx, loc) {\n      var objects = proxy._objects;\n      if (!objects) objects = proxy._objects = {};\n      var indicies, guid;\n\n      while(--loc>=idx) {\n        var item = content.objectAt(loc);\n        if (item) {\n          removeBeforeObserver(item, keyName, proxy, 'contentKeyWillChange');\n          removeObserver(item, keyName, proxy, 'contentKeyDidChange');\n\n          guid = guidFor(item);\n          indicies = objects[guid];\n          indicies[indexOf.call(indicies, loc)] = null;\n        }\n      }\n    }\n\n    /**\n      This is the object instance returned when you get the `@each` property on an\n      array. It uses the unknownProperty handler to automatically create\n      EachArray instances for property names.\n\n      @private\n      @class EachProxy\n      @namespace Ember\n      @extends Ember.Object\n    */\n    var EachProxy = EmberObject.extend({\n\n      init: function(content) {\n        this._super();\n        this._content = content;\n        content.addArrayObserver(this);\n\n        // in case someone is already observing some keys make sure they are\n        // added\n        forEach(watchedEvents(this), function(eventName) {\n          this.didAddListener(eventName);\n        }, this);\n      },\n\n      /**\n        You can directly access mapped properties by simply requesting them.\n        The `unknownProperty` handler will generate an EachArray of each item.\n\n        @method unknownProperty\n        @param keyName {String}\n        @param value {*}\n      */\n      unknownProperty: function(keyName, value) {\n        var ret;\n        ret = new EachArray(this._content, keyName, this);\n        defineProperty(this, keyName, null, ret);\n        this.beginObservingContentKey(keyName);\n        return ret;\n      },\n\n      // ..........................................................\n      // ARRAY CHANGES\n      // Invokes whenever the content array itself changes.\n\n      arrayWillChange: function(content, idx, removedCnt, addedCnt) {\n        var keys = this._keys;\n        var key, lim;\n\n        lim = removedCnt>0 ? idx+removedCnt : -1;\n        beginPropertyChanges(this);\n\n        for(key in keys) {\n          if (!keys.hasOwnProperty(key)) { continue; }\n\n          if (lim>0) { removeObserverForContentKey(content, key, this, idx, lim); }\n\n          propertyWillChange(this, key);\n        }\n\n        propertyWillChange(this._content, '@each');\n        endPropertyChanges(this);\n      },\n\n      arrayDidChange: function(content, idx, removedCnt, addedCnt) {\n        var keys = this._keys;\n        var lim;\n\n        lim = addedCnt>0 ? idx+addedCnt : -1;\n        changeProperties(function() {\n          for(var key in keys) {\n            if (!keys.hasOwnProperty(key)) { continue; }\n\n            if (lim>0) { addObserverForContentKey(content, key, this, idx, lim); }\n\n            propertyDidChange(this, key);\n          }\n\n          propertyDidChange(this._content, '@each');\n        }, this);\n      },\n\n      // ..........................................................\n      // LISTEN FOR NEW OBSERVERS AND OTHER EVENT LISTENERS\n      // Start monitoring keys based on who is listening...\n\n      didAddListener: function(eventName) {\n        if (IS_OBSERVER.test(eventName)) {\n          this.beginObservingContentKey(eventName.slice(0, -7));\n        }\n      },\n\n      didRemoveListener: function(eventName) {\n        if (IS_OBSERVER.test(eventName)) {\n          this.stopObservingContentKey(eventName.slice(0, -7));\n        }\n      },\n\n      // ..........................................................\n      // CONTENT KEY OBSERVING\n      // Actual watch keys on the source content.\n\n      beginObservingContentKey: function(keyName) {\n        var keys = this._keys;\n        if (!keys) keys = this._keys = {};\n        if (!keys[keyName]) {\n          keys[keyName] = 1;\n          var content = this._content;\n          var len = get(content, 'length');\n\n          addObserverForContentKey(content, keyName, this, 0, len);\n        } else {\n          keys[keyName]++;\n        }\n      },\n\n      stopObservingContentKey: function(keyName) {\n        var keys = this._keys;\n        if (keys && (keys[keyName]>0) && (--keys[keyName]<=0)) {\n          var content = this._content;\n          var len     = get(content, 'length');\n\n          removeObserverForContentKey(content, keyName, this, 0, len);\n        }\n      },\n\n      contentKeyWillChange: function(obj, keyName) {\n        propertyWillChange(this, keyName);\n      },\n\n      contentKeyDidChange: function(obj, keyName) {\n        propertyDidChange(this, keyName);\n      }\n    });\n\n    __exports__.EachArray = EachArray;\n    __exports__.EachProxy = EachProxy;\n  });\nenifed(\"ember-runtime/system/lazy_load\",\n  [\"ember-metal/core\",\"ember-metal/array\",\"ember-runtime/system/native_array\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    /*globals CustomEvent */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.ENV.EMBER_LOAD_HOOKS\n    var forEach = __dependency2__.forEach;\n    // make sure Ember.A is setup.\n\n    /**\n      @module ember\n      @submodule ember-runtime\n    */\n\n    var loadHooks = Ember.ENV.EMBER_LOAD_HOOKS || {};\n    var loaded = {};\n\n    /**\n      Detects when a specific package of Ember (e.g. 'Ember.Handlebars')\n      has fully loaded and is available for extension.\n\n      The provided `callback` will be called with the `name` passed\n      resolved from a string into the object:\n\n      ``` javascript\n      Ember.onLoad('Ember.Handlebars' function(hbars) {\n        hbars.registerHelper(...);\n      });\n      ```\n\n      @method onLoad\n      @for Ember\n      @param name {String} name of hook\n      @param callback {Function} callback to be called\n    */\n    function onLoad(name, callback) {\n      var object;\n\n      loadHooks[name] = loadHooks[name] || Ember.A();\n      loadHooks[name].pushObject(callback);\n\n      if (object = loaded[name]) {\n        callback(object);\n      }\n    }\n\n    __exports__.onLoad = onLoad;/**\n      Called when an Ember.js package (e.g Ember.Handlebars) has finished\n      loading. Triggers any callbacks registered for this event.\n\n      @method runLoadHooks\n      @for Ember\n      @param name {String} name of hook\n      @param object {Object} object to pass to callbacks\n    */\n    function runLoadHooks(name, object) {\n      loaded[name] = object;\n\n      if (typeof window === 'object' && typeof window.dispatchEvent === 'function' && typeof CustomEvent === \"function\") {\n        var event = new CustomEvent(name, {detail: object, name: name});\n        window.dispatchEvent(event);\n      }\n\n      if (loadHooks[name]) {\n        forEach.call(loadHooks[name], function(callback) {\n          callback(object);\n        });\n      }\n    }\n\n    __exports__.runLoadHooks = runLoadHooks;\n  });\nenifed(\"ember-runtime/system/namespace\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/array\",\"ember-metal/utils\",\"ember-metal/mixin\",\"ember-runtime/system/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    // Ember.lookup, Ember.BOOTED, Ember.deprecate, Ember.NAME_KEY, Ember.anyUnprocessedMixins\n    var Ember = __dependency1__[\"default\"];\n    var get = __dependency2__.get;\n    var indexOf = __dependency3__.indexOf;\n    var GUID_KEY = __dependency4__.GUID_KEY;\n    var guidFor = __dependency4__.guidFor;\n    var Mixin = __dependency5__.Mixin;\n\n    var EmberObject = __dependency6__[\"default\"];\n\n    /**\n      A Namespace is an object usually used to contain other objects or methods\n      such as an application or framework. Create a namespace anytime you want\n      to define one of these new containers.\n\n      # Example Usage\n\n      ```javascript\n      MyFramework = Ember.Namespace.create({\n        VERSION: '1.0.0'\n      });\n      ```\n\n      @class Namespace\n      @namespace Ember\n      @extends Ember.Object\n    */\n    var Namespace = EmberObject.extend({\n      isNamespace: true,\n\n      init: function() {\n        Namespace.NAMESPACES.push(this);\n        Namespace.PROCESSED = false;\n      },\n\n      toString: function() {\n        var name = get(this, 'name') || get(this, 'modulePrefix');\n        if (name) { return name; }\n\n        findNamespaces();\n        return this[NAME_KEY];\n      },\n\n      nameClasses: function() {\n        processNamespace([this.toString()], this, {});\n      },\n\n      destroy: function() {\n        var namespaces = Namespace.NAMESPACES;\n        var toString = this.toString();\n\n        if (toString) {\n          Ember.lookup[toString] = undefined;\n          delete Namespace.NAMESPACES_BY_ID[toString];\n        }\n        namespaces.splice(indexOf.call(namespaces, this), 1);\n        this._super();\n      }\n    });\n\n    Namespace.reopenClass({\n      NAMESPACES: [Ember],\n      NAMESPACES_BY_ID: {},\n      PROCESSED: false,\n      processAll: processAllNamespaces,\n      byName: function(name) {\n        if (!Ember.BOOTED) {\n          processAllNamespaces();\n        }\n\n        return NAMESPACES_BY_ID[name];\n      }\n    });\n\n    var NAMESPACES_BY_ID = Namespace.NAMESPACES_BY_ID;\n\n    var hasOwnProp = ({}).hasOwnProperty;\n\n    function processNamespace(paths, root, seen) {\n      var idx = paths.length;\n\n      NAMESPACES_BY_ID[paths.join('.')] = root;\n\n      // Loop over all of the keys in the namespace, looking for classes\n      for(var key in root) {\n        if (!hasOwnProp.call(root, key)) { continue; }\n        var obj = root[key];\n\n        // If we are processing the `Ember` namespace, for example, the\n        // `paths` will start with `[\"Ember\"]`. Every iteration through\n        // the loop will update the **second** element of this list with\n        // the key, so processing `Ember.View` will make the Array\n        // `['Ember', 'View']`.\n        paths[idx] = key;\n\n        // If we have found an unprocessed class\n        if (obj && obj.toString === classToString) {\n          // Replace the class' `toString` with the dot-separated path\n          // and set its `NAME_KEY`\n          obj.toString = makeToString(paths.join('.'));\n          obj[NAME_KEY] = paths.join('.');\n\n        // Support nested namespaces\n        } else if (obj && obj.isNamespace) {\n          // Skip aliased namespaces\n          if (seen[guidFor(obj)]) { continue; }\n          seen[guidFor(obj)] = true;\n\n          // Process the child namespace\n          processNamespace(paths, obj, seen);\n        }\n      }\n\n      paths.length = idx; // cut out last item\n    }\n\n    var STARTS_WITH_UPPERCASE = /^[A-Z]/;\n\n    function tryIsNamespace(lookup, prop) {\n      try {\n        var obj = lookup[prop];\n        return obj && obj.isNamespace && obj;\n      } catch (e) {\n        // continue\n      }\n    }\n\n    function findNamespaces() {\n      var lookup = Ember.lookup;\n      var obj, isNamespace;\n\n      if (Namespace.PROCESSED) { return; }\n\n      for (var prop in lookup) {\n        // Only process entities that start with uppercase A-Z\n        if (!STARTS_WITH_UPPERCASE.test(prop)) { continue; }\n\n        // Unfortunately, some versions of IE don't support window.hasOwnProperty\n        if (lookup.hasOwnProperty && !lookup.hasOwnProperty(prop)) { continue; }\n\n        // At times we are not allowed to access certain properties for security reasons.\n        // There are also times where even if we can access them, we are not allowed to access their properties.\n        obj = tryIsNamespace(lookup, prop);\n        if (obj) {\n          obj[NAME_KEY] = prop;\n        }\n      }\n    }\n\n    var NAME_KEY = Ember.NAME_KEY = GUID_KEY + '_name';\n\n    function superClassString(mixin) {\n      var superclass = mixin.superclass;\n      if (superclass) {\n        if (superclass[NAME_KEY]) { return superclass[NAME_KEY]; }\n        else { return superClassString(superclass); }\n      } else {\n        return;\n      }\n    }\n\n    function classToString() {\n      if (!Ember.BOOTED && !this[NAME_KEY]) {\n        processAllNamespaces();\n      }\n\n      var ret;\n\n      if (this[NAME_KEY]) {\n        ret = this[NAME_KEY];\n      } else if (this._toString) {\n        ret = this._toString;\n      } else {\n        var str = superClassString(this);\n        if (str) {\n          ret = \"(subclass of \" + str + \")\";\n        } else {\n          ret = \"(unknown mixin)\";\n        }\n        this.toString = makeToString(ret);\n      }\n\n      return ret;\n    }\n\n    function processAllNamespaces() {\n      var unprocessedNamespaces = !Namespace.PROCESSED;\n      var unprocessedMixins = Ember.anyUnprocessedMixins;\n\n      if (unprocessedNamespaces) {\n        findNamespaces();\n        Namespace.PROCESSED = true;\n      }\n\n      if (unprocessedNamespaces || unprocessedMixins) {\n        var namespaces = Namespace.NAMESPACES;\n        var namespace;\n\n        for (var i=0, l=namespaces.length; i<l; i++) {\n          namespace = namespaces[i];\n          processNamespace([namespace.toString()], namespace, {});\n        }\n\n        Ember.anyUnprocessedMixins = false;\n      }\n    }\n\n    function makeToString(ret) {\n      return function() { return ret; };\n    }\n\n    Mixin.prototype.toString = classToString; // ES6TODO: altering imported objects. SBB.\n\n    __exports__[\"default\"] = Namespace;\n  });\nenifed(\"ember-runtime/system/native_array\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/enumerable_utils\",\"ember-metal/mixin\",\"ember-metal/array\",\"ember-runtime/mixins/array\",\"ember-runtime/mixins/mutable_array\",\"ember-runtime/mixins/observable\",\"ember-runtime/mixins/copyable\",\"ember-runtime/mixins/freezable\",\"ember-runtime/copy\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.EXTEND_PROTOTYPES\n\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var replace = __dependency4__._replace;\n    var forEach = __dependency4__.forEach;\n    var Mixin = __dependency5__.Mixin;\n    var indexOf = __dependency6__.indexOf;\n    var lastIndexOf = __dependency6__.lastIndexOf;\n    var EmberArray = __dependency7__[\"default\"];\n    var MutableArray = __dependency8__[\"default\"];\n    var Observable = __dependency9__[\"default\"];\n    var Copyable = __dependency10__[\"default\"];\n    var FROZEN_ERROR = __dependency11__.FROZEN_ERROR;\n    var copy = __dependency12__[\"default\"];\n\n    // Add Ember.Array to Array.prototype. Remove methods with native\n    // implementations and supply some more optimized versions of generic methods\n    // because they are so common.\n\n    /**\n      The NativeArray mixin contains the properties needed to to make the native\n      Array support Ember.MutableArray and all of its dependent APIs. Unless you\n      have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array` set to\n      false, this will be applied automatically. Otherwise you can apply the mixin\n      at anytime by calling `Ember.NativeArray.activate`.\n\n      @class NativeArray\n      @namespace Ember\n      @uses Ember.MutableArray\n      @uses Ember.Observable\n      @uses Ember.Copyable\n    */\n    var NativeArray = Mixin.create(MutableArray, Observable, Copyable, {\n\n      // because length is a built-in property we need to know to just get the\n      // original property.\n      get: function(key) {\n        if (key==='length') return this.length;\n        else if ('number' === typeof key) return this[key];\n        else return this._super(key);\n      },\n\n      objectAt: function(idx) {\n        return this[idx];\n      },\n\n      // primitive for array support.\n      replace: function(idx, amt, objects) {\n\n        if (this.isFrozen) throw FROZEN_ERROR;\n\n        // if we replaced exactly the same number of items, then pass only the\n        // replaced range. Otherwise, pass the full remaining array length\n        // since everything has shifted\n        var len = objects ? get(objects, 'length') : 0;\n        this.arrayContentWillChange(idx, amt, len);\n\n        if (len === 0) {\n          this.splice(idx, amt);\n        } else {\n          replace(this, idx, amt, objects);\n        }\n\n        this.arrayContentDidChange(idx, amt, len);\n        return this;\n      },\n\n      // If you ask for an unknown property, then try to collect the value\n      // from member items.\n      unknownProperty: function(key, value) {\n        var ret;// = this.reducedProperty(key, value) ;\n        if (value !== undefined && ret === undefined) {\n          ret = this[key] = value;\n        }\n        return ret;\n      },\n\n      indexOf: indexOf,\n\n      lastIndexOf: lastIndexOf,\n\n      copy: function(deep) {\n        if (deep) {\n          return this.map(function(item) { return copy(item, true); });\n        }\n\n        return this.slice();\n      }\n    });\n\n    // Remove any methods implemented natively so we don't override them\n    var ignore = ['length'];\n    forEach(NativeArray.keys(), function(methodName) {\n      if (Array.prototype[methodName]) ignore.push(methodName);\n    });\n\n    if (ignore.length > 0) {\n      NativeArray = NativeArray.without.apply(NativeArray, ignore);\n    }\n\n    /**\n      Creates an `Ember.NativeArray` from an Array like object.\n      Does not modify the original object. Ember.A is not needed if\n      `Ember.EXTEND_PROTOTYPES` is `true` (the default value). However,\n      it is recommended that you use Ember.A when creating addons for\n      ember or when you can not guarantee that `Ember.EXTEND_PROTOTYPES`\n      will be `true`.\n\n      Example\n\n      ```js\n      var Pagination = Ember.CollectionView.extend({\n        tagName: 'ul',\n        classNames: ['pagination'],\n\n        init: function() {\n          this._super();\n          if (!this.get('content')) {\n            this.set('content', Ember.A());\n          }\n        }\n      });\n      ```\n\n      @method A\n      @for Ember\n      @return {Ember.NativeArray}\n    */\n    var A = function(arr) {\n      if (arr === undefined) { arr = []; }\n      return EmberArray.detect(arr) ? arr : NativeArray.apply(arr);\n    };\n\n    /**\n      Activates the mixin on the Array.prototype if not already applied. Calling\n      this method more than once is safe. This will be called when ember is loaded\n      unless you have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array`\n      set to `false`.\n\n      Example\n\n      ```js\n      if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Array) {\n        Ember.NativeArray.activate();\n      }\n      ```\n\n      @method activate\n      @for Ember.NativeArray\n      @static\n      @return {void}\n    */\n    NativeArray.activate = function() {\n      NativeArray.apply(Array.prototype);\n\n      A = function(arr) { return arr || []; };\n    };\n\n    if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Array) {\n      NativeArray.activate();\n    }\n\n    Ember.A = A; // ES6TODO: Setting A onto the object returned by ember-metal/core to avoid circles\n    __exports__.A = A;\n    __exports__.NativeArray = NativeArray;\n    __exports__[\"default\"] = NativeArray;\n  });\nenifed(\"ember-runtime/system/object\",\n  [\"ember-runtime/system/core_object\",\"ember-runtime/mixins/observable\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n\n    var CoreObject = __dependency1__[\"default\"];\n    var Observable = __dependency2__[\"default\"];\n\n    /**\n      `Ember.Object` is the main base class for all Ember objects. It is a subclass\n      of `Ember.CoreObject` with the `Ember.Observable` mixin applied. For details,\n      see the documentation for each of these.\n\n      @class Object\n      @namespace Ember\n      @extends Ember.CoreObject\n      @uses Ember.Observable\n    */\n    var EmberObject = CoreObject.extend(Observable);\n    EmberObject.toString = function() {\n      return \"Ember.Object\";\n    };\n\n    __exports__[\"default\"] = EmberObject;\n  });\nenifed(\"ember-runtime/system/object_proxy\",\n  [\"ember-runtime/system/object\",\"ember-runtime/mixins/-proxy\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var EmberObject = __dependency1__[\"default\"];\n    var _ProxyMixin = __dependency2__[\"default\"];\n\n    /**\n      `Ember.ObjectProxy` forwards all properties not defined by the proxy itself\n      to a proxied `content` object.\n\n      ```javascript\n      object = Ember.Object.create({\n        name: 'Foo'\n      });\n\n      proxy = Ember.ObjectProxy.create({\n        content: object\n      });\n\n      // Access and change existing properties\n      proxy.get('name')          // 'Foo'\n      proxy.set('name', 'Bar');\n      object.get('name')         // 'Bar'\n\n      // Create new 'description' property on `object`\n      proxy.set('description', 'Foo is a whizboo baz');\n      object.get('description')  // 'Foo is a whizboo baz'\n      ```\n\n      While `content` is unset, setting a property to be delegated will throw an\n      Error.\n\n      ```javascript\n      proxy = Ember.ObjectProxy.create({\n        content: null,\n        flag: null\n      });\n      proxy.set('flag', true);\n      proxy.get('flag');         // true\n      proxy.get('foo');          // undefined\n      proxy.set('foo', 'data');  // throws Error\n      ```\n\n      Delegated properties can be bound to and will change when content is updated.\n\n      Computed properties on the proxy itself can depend on delegated properties.\n\n      ```javascript\n      ProxyWithComputedProperty = Ember.ObjectProxy.extend({\n        fullName: function () {\n          var firstName = this.get('firstName'),\n              lastName = this.get('lastName');\n          if (firstName && lastName) {\n            return firstName + ' ' + lastName;\n          }\n          return firstName || lastName;\n        }.property('firstName', 'lastName')\n      });\n\n      proxy = ProxyWithComputedProperty.create();\n\n      proxy.get('fullName');  // undefined\n      proxy.set('content', {\n        firstName: 'Tom', lastName: 'Dale'\n      }); // triggers property change for fullName on proxy\n\n      proxy.get('fullName');  // 'Tom Dale'\n      ```\n\n      @class ObjectProxy\n      @namespace Ember\n      @extends Ember.Object\n      @extends Ember._ProxyMixin\n    */\n\n    __exports__[\"default\"] = EmberObject.extend(_ProxyMixin);\n  });\nenifed(\"ember-runtime/system/set\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/utils\",\"ember-metal/is_none\",\"ember-runtime/system/string\",\"ember-runtime/system/core_object\",\"ember-runtime/mixins/mutable_enumerable\",\"ember-runtime/mixins/enumerable\",\"ember-runtime/mixins/copyable\",\"ember-runtime/mixins/freezable\",\"ember-metal/error\",\"ember-metal/property_events\",\"ember-metal/mixin\",\"ember-metal/computed\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n    var Ember = __dependency1__[\"default\"];\n    // Ember.isNone, Ember.A\n\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var guidFor = __dependency4__.guidFor;\n    var isNone = __dependency5__.isNone;\n    var fmt = __dependency6__.fmt;\n    var CoreObject = __dependency7__[\"default\"];\n    var MutableEnumerable = __dependency8__[\"default\"];\n    var Enumerable = __dependency9__[\"default\"];\n    var Copyable = __dependency10__[\"default\"];\n    var Freezable = __dependency11__.Freezable;\n    var FROZEN_ERROR = __dependency11__.FROZEN_ERROR;\n    var EmberError = __dependency12__[\"default\"];\n    var propertyWillChange = __dependency13__.propertyWillChange;\n    var propertyDidChange = __dependency13__.propertyDidChange;\n    var aliasMethod = __dependency14__.aliasMethod;\n    var computed = __dependency15__.computed;\n\n    /**\n      An unordered collection of objects.\n\n      A Set works a bit like an array except that its items are not ordered. You\n      can create a set to efficiently test for membership for an object. You can\n      also iterate through a set just like an array, even accessing objects by\n      index, however there is no guarantee as to their order.\n\n      All Sets are observable via the Enumerable Observer API - which works\n      on any enumerable object including both Sets and Arrays.\n\n      ## Creating a Set\n\n      You can create a set like you would most objects using\n      `new Ember.Set()`. Most new sets you create will be empty, but you can\n      also initialize the set with some content by passing an array or other\n      enumerable of objects to the constructor.\n\n      Finally, you can pass in an existing set and the set will be copied. You\n      can also create a copy of a set by calling `Ember.Set#copy()`.\n\n      ```javascript\n      // creates a new empty set\n      var foundNames = new Ember.Set();\n\n      // creates a set with four names in it.\n      var names = new Ember.Set([\"Charles\", \"Tom\", \"Juan\", \"Alex\"]); // :P\n\n      // creates a copy of the names set.\n      var namesCopy = new Ember.Set(names);\n\n      // same as above.\n      var anotherNamesCopy = names.copy();\n      ```\n\n      ## Adding/Removing Objects\n\n      You generally add or remove objects from a set using `add()` or\n      `remove()`. You can add any type of object including primitives such as\n      numbers, strings, and booleans.\n\n      Unlike arrays, objects can only exist one time in a set. If you call `add()`\n      on a set with the same object multiple times, the object will only be added\n      once. Likewise, calling `remove()` with the same object multiple times will\n      remove the object the first time and have no effect on future calls until\n      you add the object to the set again.\n\n      NOTE: You cannot add/remove `null` or `undefined` to a set. Any attempt to do\n      so will be ignored.\n\n      In addition to add/remove you can also call `push()`/`pop()`. Push behaves\n      just like `add()` but `pop()`, unlike `remove()` will pick an arbitrary\n      object, remove it and return it. This is a good way to use a set as a job\n      queue when you don't care which order the jobs are executed in.\n\n      ## Testing for an Object\n\n      To test for an object's presence in a set you simply call\n      `Ember.Set#contains()`.\n\n      ## Observing changes\n\n      When using `Ember.Set`, you can observe the `\"[]\"` property to be\n      alerted whenever the content changes. You can also add an enumerable\n      observer to the set to be notified of specific objects that are added and\n      removed from the set. See [Ember.Enumerable](/api/classes/Ember.Enumerable.html)\n      for more information on enumerables.\n\n      This is often unhelpful. If you are filtering sets of objects, for instance,\n      it is very inefficient to re-filter all of the items each time the set\n      changes. It would be better if you could just adjust the filtered set based\n      on what was changed on the original set. The same issue applies to merging\n      sets, as well.\n\n      ## Other Methods\n\n      `Ember.Set` primary implements other mixin APIs. For a complete reference\n      on the methods you will use with `Ember.Set`, please consult these mixins.\n      The most useful ones will be `Ember.Enumerable` and\n      `Ember.MutableEnumerable` which implement most of the common iterator\n      methods you are used to on Array.\n\n      Note that you can also use the `Ember.Copyable` and `Ember.Freezable`\n      APIs on `Ember.Set` as well. Once a set is frozen it can no longer be\n      modified. The benefit of this is that when you call `frozenCopy()` on it,\n      Ember will avoid making copies of the set. This allows you to write\n      code that can know with certainty when the underlying set data will or\n      will not be modified.\n\n      @class Set\n      @namespace Ember\n      @extends Ember.CoreObject\n      @uses Ember.MutableEnumerable\n      @uses Ember.Copyable\n      @uses Ember.Freezable\n      @since Ember 0.9\n    */\n    __exports__[\"default\"] = CoreObject.extend(MutableEnumerable, Copyable, Freezable, {\n\n      // ..........................................................\n      // IMPLEMENT ENUMERABLE APIS\n      //\n\n      /**\n        This property will change as the number of objects in the set changes.\n\n        @property length\n        @type number\n        @default 0\n      */\n      length: 0,\n\n      /**\n        Clears the set. This is useful if you want to reuse an existing set\n        without having to recreate it.\n\n        ```javascript\n        var colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\n        colors.length;  // 3\n        colors.clear();\n        colors.length;  // 0\n        ```\n\n        @method clear\n        @return {Ember.Set} An empty Set\n      */\n      clear: function() {\n        if (this.isFrozen) { throw new EmberError(FROZEN_ERROR); }\n\n        var len = get(this, 'length');\n        if (len === 0) { return this; }\n\n        var guid;\n\n        this.enumerableContentWillChange(len, 0);\n        propertyWillChange(this, 'firstObject');\n        propertyWillChange(this, 'lastObject');\n\n        for (var i=0; i < len; i++) {\n          guid = guidFor(this[i]);\n          delete this[guid];\n          delete this[i];\n        }\n\n        set(this, 'length', 0);\n\n        propertyDidChange(this, 'firstObject');\n        propertyDidChange(this, 'lastObject');\n        this.enumerableContentDidChange(len, 0);\n\n        return this;\n      },\n\n      /**\n        Returns true if the passed object is also an enumerable that contains the\n        same objects as the receiver.\n\n        ```javascript\n        var colors = [\"red\", \"green\", \"blue\"],\n            same_colors = new Ember.Set(colors);\n\n        same_colors.isEqual(colors);               // true\n        same_colors.isEqual([\"purple\", \"brown\"]);  // false\n        ```\n\n        @method isEqual\n        @param {Ember.Set} obj the other object.\n        @return {Boolean}\n      */\n      isEqual: function(obj) {\n        // fail fast\n        if (!Enumerable.detect(obj)) return false;\n\n        var loc = get(this, 'length');\n        if (get(obj, 'length') !== loc) return false;\n\n        while(--loc >= 0) {\n          if (!obj.contains(this[loc])) return false;\n        }\n\n        return true;\n      },\n\n      /**\n        Adds an object to the set. Only non-`null` objects can be added to a set\n        and those can only be added once. If the object is already in the set or\n        the passed value is null this method will have no effect.\n\n        This is an alias for `Ember.MutableEnumerable.addObject()`.\n\n        ```javascript\n        var colors = new Ember.Set();\n        colors.add(\"blue\");     // [\"blue\"]\n        colors.add(\"blue\");     // [\"blue\"]\n        colors.add(\"red\");      // [\"blue\", \"red\"]\n        colors.add(null);       // [\"blue\", \"red\"]\n        colors.add(undefined);  // [\"blue\", \"red\"]\n        ```\n\n        @method add\n        @param {Object} obj The object to add.\n        @return {Ember.Set} The set itself.\n      */\n      add: aliasMethod('addObject'),\n\n      /**\n        Removes the object from the set if it is found. If you pass a `null` value\n        or an object that is already not in the set, this method will have no\n        effect. This is an alias for `Ember.MutableEnumerable.removeObject()`.\n\n        ```javascript\n        var colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\n        colors.remove(\"red\");     // [\"blue\", \"green\"]\n        colors.remove(\"purple\");  // [\"blue\", \"green\"]\n        colors.remove(null);      // [\"blue\", \"green\"]\n        ```\n\n        @method remove\n        @param {Object} obj The object to remove\n        @return {Ember.Set} The set itself.\n      */\n      remove: aliasMethod('removeObject'),\n\n      /**\n        Removes the last element from the set and returns it, or `null` if it's empty.\n\n        ```javascript\n        var colors = new Ember.Set([\"green\", \"blue\"]);\n        colors.pop();  // \"blue\"\n        colors.pop();  // \"green\"\n        colors.pop();  // null\n        ```\n\n        @method pop\n        @return {Object} The removed object from the set or null.\n      */\n      pop: function() {\n        if (get(this, 'isFrozen')) throw new EmberError(FROZEN_ERROR);\n        var obj = this.length > 0 ? this[this.length-1] : null;\n        this.remove(obj);\n        return obj;\n      },\n\n      /**\n        Inserts the given object on to the end of the set. It returns\n        the set itself.\n\n        This is an alias for `Ember.MutableEnumerable.addObject()`.\n\n        ```javascript\n        var colors = new Ember.Set();\n        colors.push(\"red\");   // [\"red\"]\n        colors.push(\"green\"); // [\"red\", \"green\"]\n        colors.push(\"blue\");  // [\"red\", \"green\", \"blue\"]\n        ```\n\n        @method push\n        @return {Ember.Set} The set itself.\n      */\n      push: aliasMethod('addObject'),\n\n      /**\n        Removes the last element from the set and returns it, or `null` if it's empty.\n\n        This is an alias for `Ember.Set.pop()`.\n\n        ```javascript\n        var colors = new Ember.Set([\"green\", \"blue\"]);\n        colors.shift();  // \"blue\"\n        colors.shift();  // \"green\"\n        colors.shift();  // null\n        ```\n\n        @method shift\n        @return {Object} The removed object from the set or null.\n      */\n      shift: aliasMethod('pop'),\n\n      /**\n        Inserts the given object on to the end of the set. It returns\n        the set itself.\n\n        This is an alias of `Ember.Set.push()`\n\n        ```javascript\n        var colors = new Ember.Set();\n        colors.unshift(\"red\");    // [\"red\"]\n        colors.unshift(\"green\");  // [\"red\", \"green\"]\n        colors.unshift(\"blue\");   // [\"red\", \"green\", \"blue\"]\n        ```\n\n        @method unshift\n        @return {Ember.Set} The set itself.\n      */\n      unshift: aliasMethod('push'),\n\n      /**\n        Adds each object in the passed enumerable to the set.\n\n        This is an alias of `Ember.MutableEnumerable.addObjects()`\n\n        ```javascript\n        var colors = new Ember.Set();\n        colors.addEach([\"red\", \"green\", \"blue\"]);  // [\"red\", \"green\", \"blue\"]\n        ```\n\n        @method addEach\n        @param {Ember.Enumerable} objects the objects to add.\n        @return {Ember.Set} The set itself.\n      */\n      addEach: aliasMethod('addObjects'),\n\n      /**\n        Removes each object in the passed enumerable to the set.\n\n        This is an alias of `Ember.MutableEnumerable.removeObjects()`\n\n        ```javascript\n        var colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\n        colors.removeEach([\"red\", \"blue\"]);  //  [\"green\"]\n        ```\n\n        @method removeEach\n        @param {Ember.Enumerable} objects the objects to remove.\n        @return {Ember.Set} The set itself.\n      */\n      removeEach: aliasMethod('removeObjects'),\n\n      // ..........................................................\n      // PRIVATE ENUMERABLE SUPPORT\n      //\n\n      init: function(items) {\n        Ember.deprecate('Ember.Set is deprecated and will be removed in a future release.');\n        this._super();\n        if (items) this.addObjects(items);\n      },\n\n      // implement Ember.Enumerable\n      nextObject: function(idx) {\n        return this[idx];\n      },\n\n      // more optimized version\n      firstObject: computed(function() {\n        return this.length > 0 ? this[0] : undefined;\n      }),\n\n      // more optimized version\n      lastObject: computed(function() {\n        return this.length > 0 ? this[this.length-1] : undefined;\n      }),\n\n      // implements Ember.MutableEnumerable\n      addObject: function(obj) {\n        if (get(this, 'isFrozen')) throw new EmberError(FROZEN_ERROR);\n        if (isNone(obj)) return this; // nothing to do\n\n        var guid = guidFor(obj);\n        var idx  = this[guid];\n        var len  = get(this, 'length');\n        var added;\n\n        if (idx>=0 && idx<len && (this[idx] === obj)) return this; // added\n\n        added = [obj];\n\n        this.enumerableContentWillChange(null, added);\n        propertyWillChange(this, 'lastObject');\n\n        len = get(this, 'length');\n        this[guid] = len;\n        this[len] = obj;\n        set(this, 'length', len+1);\n\n        propertyDidChange(this, 'lastObject');\n        this.enumerableContentDidChange(null, added);\n\n        return this;\n      },\n\n      // implements Ember.MutableEnumerable\n      removeObject: function(obj) {\n        if (get(this, 'isFrozen')) throw new EmberError(FROZEN_ERROR);\n        if (isNone(obj)) return this; // nothing to do\n\n        var guid = guidFor(obj);\n        var idx  = this[guid];\n        var len = get(this, 'length');\n        var isFirst = idx === 0;\n        var isLast = idx === len-1;\n        var last, removed;\n\n\n        if (idx>=0 && idx<len && (this[idx] === obj)) {\n          removed = [obj];\n\n          this.enumerableContentWillChange(removed, null);\n          if (isFirst) { propertyWillChange(this, 'firstObject'); }\n          if (isLast)  { propertyWillChange(this, 'lastObject'); }\n\n          // swap items - basically move the item to the end so it can be removed\n          if (idx < len-1) {\n            last = this[len-1];\n            this[idx] = last;\n            this[guidFor(last)] = idx;\n          }\n\n          delete this[guid];\n          delete this[len-1];\n          set(this, 'length', len-1);\n\n          if (isFirst) { propertyDidChange(this, 'firstObject'); }\n          if (isLast)  { propertyDidChange(this, 'lastObject'); }\n          this.enumerableContentDidChange(removed, null);\n        }\n\n        return this;\n      },\n\n      // optimized version\n      contains: function(obj) {\n        return this[guidFor(obj)]>=0;\n      },\n\n      copy: function() {\n        var C = this.constructor, ret = new C(), loc = get(this, 'length');\n        set(ret, 'length', loc);\n        while(--loc>=0) {\n          ret[loc] = this[loc];\n          ret[guidFor(this[loc])] = loc;\n        }\n        return ret;\n      },\n\n      toString: function() {\n        var len = this.length, idx, array = [];\n        for(idx = 0; idx < len; idx++) {\n          array[idx] = this[idx];\n        }\n        return fmt(\"Ember.Set<%@>\", [array.join(',')]);\n      }\n    });\n  });\nenifed(\"ember-runtime/system/string\",\n  [\"ember-metal/core\",\"ember-metal/utils\",\"ember-metal/cache\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-runtime\n    */\n    var Ember = __dependency1__[\"default\"];\n    // Ember.STRINGS, Ember.FEATURES\n    var isArray = __dependency2__.isArray;\n    var emberInspect = __dependency2__.inspect;\n\n    var Cache = __dependency3__[\"default\"];\n\n    var STRING_DASHERIZE_REGEXP = (/[ _]/g);\n\n    var STRING_DASHERIZE_CACHE = new Cache(1000, function(key) {\n      return decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-');\n    });\n\n    var CAMELIZE_CACHE = new Cache(1000, function(key) {\n      return key.replace(STRING_CAMELIZE_REGEXP, function(match, separator, chr) {\n        return chr ? chr.toUpperCase() : '';\n      }).replace(/^([A-Z])/, function(match, separator, chr) {\n        return match.toLowerCase();\n      });\n    });\n\n    var CLASSIFY_CACHE = new Cache(1000, function(str) {\n      var parts = str.split(\".\");\n      var out = [];\n\n      for (var i=0, l=parts.length; i<l; i++) {\n        var camelized = camelize(parts[i]);\n        out.push(camelized.charAt(0).toUpperCase() + camelized.substr(1));\n      }\n\n      return out.join(\".\");\n    });\n\n    var UNDERSCORE_CACHE = new Cache(1000, function(str) {\n      return str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').\n        replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase();\n    });\n\n    var CAPITALIZE_CACHE = new Cache(1000, function(str) {\n      return str.charAt(0).toUpperCase() + str.substr(1);\n    });\n\n    var DECAMELIZE_CACHE = new Cache(1000, function(str) {\n      return str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase();\n    });\n\n    var STRING_DECAMELIZE_REGEXP = (/([a-z\\d])([A-Z])/g);\n    var STRING_CAMELIZE_REGEXP = (/(\\-|_|\\.|\\s)+(.)?/g);\n    var STRING_UNDERSCORE_REGEXP_1 = (/([a-z\\d])([A-Z]+)/g);\n    var STRING_UNDERSCORE_REGEXP_2 = (/\\-|\\s+/g);\n\n    function fmt(str, formats) {\n      var cachedFormats = formats;\n\n      if (!isArray(cachedFormats) || arguments.length > 2) {\n        cachedFormats = new Array(arguments.length - 1);\n\n        for (var i = 1, l = arguments.length; i < l; i++) {\n          cachedFormats[i - 1] = arguments[i];\n        }\n      }\n\n      // first, replace any ORDERED replacements.\n      var idx  = 0; // the current index for non-numerical replacements\n      return str.replace(/%@([0-9]+)?/g, function(s, argIndex) {\n        argIndex = (argIndex) ? parseInt(argIndex, 10) - 1 : idx++;\n        s = cachedFormats[argIndex];\n        return (s === null) ? '(null)' : (s === undefined) ? '' : emberInspect(s);\n      });\n    }\n\n    function loc(str, formats) {\n      if (!isArray(formats) || arguments.length > 2) {\n        formats = Array.prototype.slice.call(arguments, 1);\n      }\n\n      str = Ember.STRINGS[str] || str;\n      return fmt(str, formats);\n    }\n\n    function w(str) {\n      return str.split(/\\s+/);\n    }\n\n    function decamelize(str) {\n      return DECAMELIZE_CACHE.get(str);\n    }\n\n    function dasherize(str) {\n      return STRING_DASHERIZE_CACHE.get(str);\n    }\n\n    function camelize(str) {\n      return CAMELIZE_CACHE.get(str);\n    }\n\n    function classify(str) {\n      return CLASSIFY_CACHE.get(str);\n    }\n\n    function underscore(str) {\n      return UNDERSCORE_CACHE.get(str);\n    }\n\n    function capitalize(str) {\n      return CAPITALIZE_CACHE.get(str);\n    }\n\n    /**\n      Defines the hash of localized strings for the current language. Used by\n      the `Ember.String.loc()` helper. To localize, add string values to this\n      hash.\n\n      @property STRINGS\n      @for Ember\n      @type Hash\n    */\n    Ember.STRINGS = {};\n\n    /**\n      Defines string helper methods including string formatting and localization.\n      Unless `Ember.EXTEND_PROTOTYPES.String` is `false` these methods will also be\n      added to the `String.prototype` as well.\n\n      @class String\n      @namespace Ember\n      @static\n    */\n    __exports__[\"default\"] = {\n      /**\n        Apply formatting options to the string. This will look for occurrences\n        of \"%@\" in your string and substitute them with the arguments you pass into\n        this method. If you want to control the specific order of replacement,\n        you can add a number after the key as well to indicate which argument\n        you want to insert.\n\n        Ordered insertions are most useful when building loc strings where values\n        you need to insert may appear in different orders.\n\n        ```javascript\n        \"Hello %@ %@\".fmt('John', 'Doe');     // \"Hello John Doe\"\n        \"Hello %@2, %@1\".fmt('John', 'Doe');  // \"Hello Doe, John\"\n        ```\n\n        @method fmt\n        @param {String} str The string to format\n        @param {Array} formats An array of parameters to interpolate into string.\n        @return {String} formatted string\n      */\n      fmt: fmt,\n\n      /**\n        Formats the passed string, but first looks up the string in the localized\n        strings hash. This is a convenient way to localize text. See\n        `Ember.String.fmt()` for more information on formatting.\n\n        Note that it is traditional but not required to prefix localized string\n        keys with an underscore or other character so you can easily identify\n        localized strings.\n\n        ```javascript\n        Ember.STRINGS = {\n          '_Hello World': 'Bonjour le monde',\n          '_Hello %@ %@': 'Bonjour %@ %@'\n        };\n\n        Ember.String.loc(\"_Hello World\");  // 'Bonjour le monde';\n        Ember.String.loc(\"_Hello %@ %@\", [\"John\", \"Smith\"]);  // \"Bonjour John Smith\";\n        ```\n\n        @method loc\n        @param {String} str The string to format\n        @param {Array} formats Optional array of parameters to interpolate into string.\n        @return {String} formatted string\n      */\n      loc: loc,\n\n      /**\n        Splits a string into separate units separated by spaces, eliminating any\n        empty strings in the process. This is a convenience method for split that\n        is mostly useful when applied to the `String.prototype`.\n\n        ```javascript\n        Ember.String.w(\"alpha beta gamma\").forEach(function(key) {\n          console.log(key);\n        });\n\n        // > alpha\n        // > beta\n        // > gamma\n        ```\n\n        @method w\n        @param {String} str The string to split\n        @return {Array} array containing the split strings\n      */\n      w: w,\n\n      /**\n        Converts a camelized string into all lower case separated by underscores.\n\n        ```javascript\n        'innerHTML'.decamelize();           // 'inner_html'\n        'action_name'.decamelize();        // 'action_name'\n        'css-class-name'.decamelize();     // 'css-class-name'\n        'my favorite items'.decamelize();  // 'my favorite items'\n        ```\n\n        @method decamelize\n        @param {String} str The string to decamelize.\n        @return {String} the decamelized string.\n      */\n      decamelize: decamelize,\n\n      /**\n        Replaces underscores, spaces, or camelCase with dashes.\n\n        ```javascript\n        'innerHTML'.dasherize();          // 'inner-html'\n        'action_name'.dasherize();        // 'action-name'\n        'css-class-name'.dasherize();     // 'css-class-name'\n        'my favorite items'.dasherize();  // 'my-favorite-items'\n        ```\n\n        @method dasherize\n        @param {String} str The string to dasherize.\n        @return {String} the dasherized string.\n      */\n      dasherize: dasherize,\n\n      /**\n        Returns the lowerCamelCase form of a string.\n\n        ```javascript\n        'innerHTML'.camelize();          // 'innerHTML'\n        'action_name'.camelize();        // 'actionName'\n        'css-class-name'.camelize();     // 'cssClassName'\n        'my favorite items'.camelize();  // 'myFavoriteItems'\n        'My Favorite Items'.camelize();  // 'myFavoriteItems'\n        ```\n\n        @method camelize\n        @param {String} str The string to camelize.\n        @return {String} the camelized string.\n      */\n      camelize: camelize,\n\n      /**\n        Returns the UpperCamelCase form of a string.\n\n        ```javascript\n        'innerHTML'.classify();          // 'InnerHTML'\n        'action_name'.classify();        // 'ActionName'\n        'css-class-name'.classify();     // 'CssClassName'\n        'my favorite items'.classify();  // 'MyFavoriteItems'\n        ```\n\n        @method classify\n        @param {String} str the string to classify\n        @return {String} the classified string\n      */\n      classify: classify,\n\n      /**\n        More general than decamelize. Returns the lower\\_case\\_and\\_underscored\n        form of a string.\n\n        ```javascript\n        'innerHTML'.underscore();          // 'inner_html'\n        'action_name'.underscore();        // 'action_name'\n        'css-class-name'.underscore();     // 'css_class_name'\n        'my favorite items'.underscore();  // 'my_favorite_items'\n        ```\n\n        @method underscore\n        @param {String} str The string to underscore.\n        @return {String} the underscored string.\n      */\n      underscore: underscore,\n\n      /**\n        Returns the Capitalized form of a string\n\n        ```javascript\n        'innerHTML'.capitalize()         // 'InnerHTML'\n        'action_name'.capitalize()       // 'Action_name'\n        'css-class-name'.capitalize()    // 'Css-class-name'\n        'my favorite items'.capitalize() // 'My favorite items'\n        ```\n\n        @method capitalize\n        @param {String} str The string to capitalize.\n        @return {String} The capitalized string.\n      */\n      capitalize: capitalize\n    };\n\n    __exports__.fmt = fmt;\n    __exports__.loc = loc;\n    __exports__.w = w;\n    __exports__.decamelize = decamelize;\n    __exports__.dasherize = dasherize;\n    __exports__.camelize = camelize;\n    __exports__.classify = classify;\n    __exports__.underscore = underscore;\n    __exports__.capitalize = capitalize;\n  });\nenifed(\"ember-runtime/system/subarray\",\n  [\"ember-metal/property_get\",\"ember-metal/error\",\"ember-metal/enumerable_utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var get = __dependency1__.get;\n    var EmberError = __dependency2__[\"default\"];\n    var EnumerableUtils = __dependency3__[\"default\"];\n\n    var RETAIN = 'r';\n    var FILTER = 'f';\n\n    function Operation(type, count) {\n      this.type = type;\n      this.count = count;\n    }\n\n    __exports__[\"default\"] = SubArray;\n\n    /**\n      An `Ember.SubArray` tracks an array in a way similar to, but more specialized\n      than, `Ember.TrackedArray`.  It is useful for keeping track of the indexes of\n      items within a filtered array.\n\n      @class SubArray\n      @namespace Ember\n    */\n    function SubArray (length) {\n      if (arguments.length < 1) { length = 0; }\n\n      if (length > 0) {\n        this._operations = [new Operation(RETAIN, length)];\n      } else {\n        this._operations = [];\n      }\n    }\n\n\n    SubArray.prototype = {\n      /**\n        Track that an item was added to the tracked array.\n\n        @method addItem\n\n        @param {Number} index The index of the item in the tracked array.\n        @param {Boolean} match `true` iff the item is included in the subarray.\n\n        @return {number} The index of the item in the subarray.\n      */\n      addItem: function(index, match) {\n        var returnValue = -1;\n        var itemType = match ? RETAIN : FILTER;\n        var self = this;\n\n        this._findOperation(index, function(operation, operationIndex, rangeStart, rangeEnd, seenInSubArray) {\n          var newOperation, splitOperation;\n\n          if (itemType === operation.type) {\n            ++operation.count;\n          } else if (index === rangeStart) {\n            // insert to the left of `operation`\n            self._operations.splice(operationIndex, 0, new Operation(itemType, 1));\n          } else {\n            newOperation = new Operation(itemType, 1);\n            splitOperation = new Operation(operation.type, rangeEnd - index + 1);\n            operation.count = index - rangeStart;\n\n            self._operations.splice(operationIndex + 1, 0, newOperation, splitOperation);\n          }\n\n          if (match) {\n            if (operation.type === RETAIN) {\n              returnValue = seenInSubArray + (index - rangeStart);\n            } else {\n              returnValue = seenInSubArray;\n            }\n          }\n\n          self._composeAt(operationIndex);\n        }, function(seenInSubArray) {\n          self._operations.push(new Operation(itemType, 1));\n\n          if (match) {\n            returnValue = seenInSubArray;\n          }\n\n          self._composeAt(self._operations.length-1);\n        });\n\n        return returnValue;\n      },\n\n      /**\n        Track that an item was removed from the tracked array.\n\n        @method removeItem\n\n        @param {Number} index The index of the item in the tracked array.\n\n        @return {number} The index of the item in the subarray, or `-1` if the item\n        was not in the subarray.\n      */\n      removeItem: function(index) {\n        var returnValue = -1;\n        var self = this;\n\n        this._findOperation(index, function (operation, operationIndex, rangeStart, rangeEnd, seenInSubArray) {\n          if (operation.type === RETAIN) {\n            returnValue = seenInSubArray + (index - rangeStart);\n          }\n\n          if (operation.count > 1) {\n            --operation.count;\n          } else {\n            self._operations.splice(operationIndex, 1);\n            self._composeAt(operationIndex);\n          }\n        }, function() {\n          throw new EmberError(\"Can't remove an item that has never been added.\");\n        });\n\n        return returnValue;\n      },\n\n\n      _findOperation: function (index, foundCallback, notFoundCallback) {\n        var seenInSubArray = 0;\n        var operationIndex, len, operation, rangeStart, rangeEnd;\n\n        // OPTIMIZE: change to balanced tree\n        // find leftmost operation to the right of `index`\n        for (operationIndex = rangeStart = 0, len = this._operations.length; operationIndex < len; rangeStart = rangeEnd + 1, ++operationIndex) {\n          operation = this._operations[operationIndex];\n          rangeEnd = rangeStart + operation.count - 1;\n\n          if (index >= rangeStart && index <= rangeEnd) {\n            foundCallback(operation, operationIndex, rangeStart, rangeEnd, seenInSubArray);\n            return;\n          } else if (operation.type === RETAIN) {\n            seenInSubArray += operation.count;\n          }\n        }\n\n        notFoundCallback(seenInSubArray);\n      },\n\n      _composeAt: function(index) {\n        var op = this._operations[index];\n        var otherOp;\n\n        if (!op) {\n          // Composing out of bounds is a no-op, as when removing the last operation\n          // in the list.\n          return;\n        }\n\n        if (index > 0) {\n          otherOp = this._operations[index-1];\n          if (otherOp.type === op.type) {\n            op.count += otherOp.count;\n            this._operations.splice(index-1, 1);\n            --index;\n          }\n        }\n\n        if (index < this._operations.length-1) {\n          otherOp = this._operations[index+1];\n          if (otherOp.type === op.type) {\n            op.count += otherOp.count;\n            this._operations.splice(index+1, 1);\n          }\n        }\n      },\n\n      toString: function () {\n        var str = \"\";\n        EnumerableUtils.forEach(this._operations, function (operation) {\n          str += \" \" + operation.type + \":\" + operation.count;\n        });\n        return str.substring(1);\n      }\n    };\n  });\nenifed(\"ember-runtime/system/tracked_array\",\n  [\"ember-metal/property_get\",\"ember-metal/enumerable_utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var get = __dependency1__.get;\n    var forEach = __dependency2__.forEach;\n\n    var RETAIN = 'r';\n    var INSERT = 'i';\n    var DELETE = 'd';\n\n    __exports__[\"default\"] = TrackedArray;\n\n    /**\n      An `Ember.TrackedArray` tracks array operations.  It's useful when you want to\n      lazily compute the indexes of items in an array after they've been shifted by\n      subsequent operations.\n\n      @class TrackedArray\n      @namespace Ember\n      @param {Array} [items=[]] The array to be tracked.  This is used just to get\n      the initial items for the starting state of retain:n.\n    */\n    function TrackedArray(items) {\n      if (arguments.length < 1) { items = []; }\n\n      var length = get(items, 'length');\n\n      if (length) {\n        this._operations = [new ArrayOperation(RETAIN, length, items)];\n      } else {\n        this._operations = [];\n      }\n    }\n\n    TrackedArray.RETAIN = RETAIN;\n    TrackedArray.INSERT = INSERT;\n    TrackedArray.DELETE = DELETE;\n\n    TrackedArray.prototype = {\n\n      /**\n        Track that `newItems` were added to the tracked array at `index`.\n\n        @method addItems\n        @param index\n        @param newItems\n      */\n      addItems: function (index, newItems) {\n        var count = get(newItems, 'length');\n        if (count < 1) { return; }\n\n        var match = this._findArrayOperation(index);\n        var arrayOperation = match.operation;\n        var arrayOperationIndex = match.index;\n        var arrayOperationRangeStart = match.rangeStart;\n        var composeIndex, splitIndex, splitItems, splitArrayOperation, newArrayOperation;\n\n        newArrayOperation = new ArrayOperation(INSERT, count, newItems);\n\n        if (arrayOperation) {\n          if (!match.split) {\n            // insert left of arrayOperation\n            this._operations.splice(arrayOperationIndex, 0, newArrayOperation);\n            composeIndex = arrayOperationIndex;\n          } else {\n            this._split(arrayOperationIndex, index - arrayOperationRangeStart, newArrayOperation);\n            composeIndex = arrayOperationIndex + 1;\n          }\n        } else {\n          // insert at end\n          this._operations.push(newArrayOperation);\n          composeIndex = arrayOperationIndex;\n        }\n\n        this._composeInsert(composeIndex);\n      },\n\n      /**\n        Track that `count` items were removed at `index`.\n\n        @method removeItems\n        @param index\n        @param count\n      */\n      removeItems: function (index, count) {\n        if (count < 1) { return; }\n\n        var match = this._findArrayOperation(index);\n        var arrayOperation = match.operation;\n        var arrayOperationIndex = match.index;\n        var arrayOperationRangeStart = match.rangeStart;\n        var newArrayOperation, composeIndex;\n\n        newArrayOperation = new ArrayOperation(DELETE, count);\n        if (!match.split) {\n          // insert left of arrayOperation\n          this._operations.splice(arrayOperationIndex, 0, newArrayOperation);\n          composeIndex = arrayOperationIndex;\n        } else {\n          this._split(arrayOperationIndex, index - arrayOperationRangeStart, newArrayOperation);\n          composeIndex = arrayOperationIndex + 1;\n        }\n\n        return this._composeDelete(composeIndex);\n      },\n\n      /**\n        Apply all operations, reducing them to retain:n, for `n`, the number of\n        items in the array.\n\n        `callback` will be called for each operation and will be passed the following arguments:\n\n        * {array} items The items for the given operation\n        * {number} offset The computed offset of the items, ie the index in the\n        array of the first item for this operation.\n        * {string} operation The type of the operation.  One of\n        `Ember.TrackedArray.{RETAIN, DELETE, INSERT}`\n\n        @method apply\n        @param {Function} callback\n      */\n      apply: function (callback) {\n        var items = [];\n        var offset = 0;\n\n        forEach(this._operations, function (arrayOperation, operationIndex) {\n          callback(arrayOperation.items, offset, arrayOperation.type, operationIndex);\n\n          if (arrayOperation.type !== DELETE) {\n            offset += arrayOperation.count;\n            items = items.concat(arrayOperation.items);\n          }\n        });\n\n        this._operations = [new ArrayOperation(RETAIN, items.length, items)];\n      },\n\n      /**\n        Return an `ArrayOperationMatch` for the operation that contains the item at `index`.\n\n        @method _findArrayOperation\n\n        @param {Number} index the index of the item whose operation information\n        should be returned.\n        @private\n      */\n      _findArrayOperation: function (index) {\n        var split = false;\n        var arrayOperationIndex, arrayOperation,\n            arrayOperationRangeStart, arrayOperationRangeEnd,\n            len;\n\n        // OPTIMIZE: we could search these faster if we kept a balanced tree.\n        // find leftmost arrayOperation to the right of `index`\n        for (arrayOperationIndex = arrayOperationRangeStart = 0, len = this._operations.length; arrayOperationIndex < len; ++arrayOperationIndex) {\n          arrayOperation = this._operations[arrayOperationIndex];\n\n          if (arrayOperation.type === DELETE) { continue; }\n\n          arrayOperationRangeEnd = arrayOperationRangeStart + arrayOperation.count - 1;\n\n          if (index === arrayOperationRangeStart) {\n            break;\n          } else if (index > arrayOperationRangeStart && index <= arrayOperationRangeEnd) {\n            split = true;\n            break;\n          } else {\n            arrayOperationRangeStart = arrayOperationRangeEnd + 1;\n          }\n        }\n\n        return new ArrayOperationMatch(arrayOperation, arrayOperationIndex, split, arrayOperationRangeStart);\n      },\n\n      _split: function (arrayOperationIndex, splitIndex, newArrayOperation) {\n        var arrayOperation = this._operations[arrayOperationIndex];\n        var splitItems = arrayOperation.items.slice(splitIndex);\n        var splitArrayOperation = new ArrayOperation(arrayOperation.type, splitItems.length, splitItems);\n\n        // truncate LHS\n        arrayOperation.count = splitIndex;\n        arrayOperation.items = arrayOperation.items.slice(0, splitIndex);\n\n        this._operations.splice(arrayOperationIndex + 1, 0, newArrayOperation, splitArrayOperation);\n      },\n\n      // see SubArray for a better implementation.\n      _composeInsert: function (index) {\n        var newArrayOperation = this._operations[index];\n        var leftArrayOperation = this._operations[index-1]; // may be undefined\n        var rightArrayOperation = this._operations[index+1]; // may be undefined\n        var leftOp = leftArrayOperation && leftArrayOperation.type;\n        var rightOp = rightArrayOperation && rightArrayOperation.type;\n\n        if (leftOp === INSERT) {\n            // merge left\n            leftArrayOperation.count += newArrayOperation.count;\n            leftArrayOperation.items = leftArrayOperation.items.concat(newArrayOperation.items);\n\n          if (rightOp === INSERT) {\n            // also merge right (we have split an insert with an insert)\n            leftArrayOperation.count += rightArrayOperation.count;\n            leftArrayOperation.items = leftArrayOperation.items.concat(rightArrayOperation.items);\n            this._operations.splice(index, 2);\n          } else {\n            // only merge left\n            this._operations.splice(index, 1);\n          }\n        } else if (rightOp === INSERT) {\n          // merge right\n          newArrayOperation.count += rightArrayOperation.count;\n          newArrayOperation.items = newArrayOperation.items.concat(rightArrayOperation.items);\n          this._operations.splice(index + 1, 1);\n        }\n      },\n\n      _composeDelete: function (index) {\n        var arrayOperation = this._operations[index];\n        var deletesToGo = arrayOperation.count;\n        var leftArrayOperation = this._operations[index-1]; // may be undefined\n        var leftOp = leftArrayOperation && leftArrayOperation.type;\n        var nextArrayOperation;\n        var nextOp;\n        var nextCount;\n        var removeNewAndNextOp = false;\n        var removedItems = [];\n\n        if (leftOp === DELETE) {\n          arrayOperation = leftArrayOperation;\n          index -= 1;\n        }\n\n        for (var i = index + 1; deletesToGo > 0; ++i) {\n          nextArrayOperation = this._operations[i];\n          nextOp = nextArrayOperation.type;\n          nextCount = nextArrayOperation.count;\n\n          if (nextOp === DELETE) {\n            arrayOperation.count += nextCount;\n            continue;\n          }\n\n          if (nextCount > deletesToGo) {\n            // d:2 {r,i}:5  we reduce the retain or insert, but it stays\n            removedItems = removedItems.concat(nextArrayOperation.items.splice(0, deletesToGo));\n            nextArrayOperation.count -= deletesToGo;\n\n            // In the case where we truncate the last arrayOperation, we don't need to\n            // remove it; also the deletesToGo reduction is not the entirety of\n            // nextCount\n            i -= 1;\n            nextCount = deletesToGo;\n\n            deletesToGo = 0;\n          } else {\n            if (nextCount === deletesToGo) {\n              // Handle edge case of d:2 i:2 in which case both operations go away\n              // during composition.\n              removeNewAndNextOp = true;\n            }\n            removedItems = removedItems.concat(nextArrayOperation.items);\n            deletesToGo -= nextCount;\n          }\n\n          if (nextOp === INSERT) {\n            // d:2 i:3 will result in delete going away\n            arrayOperation.count -= nextCount;\n          }\n        }\n\n        if (arrayOperation.count > 0) {\n          // compose our new delete with possibly several operations to the right of\n          // disparate types\n          this._operations.splice(index+1, i-1-index);\n        } else {\n          // The delete operation can go away; it has merely reduced some other\n          // operation, as in d:3 i:4; it may also have eliminated that operation,\n          // as in d:3 i:3.\n          this._operations.splice(index, removeNewAndNextOp ? 2 : 1);\n        }\n\n        return removedItems;\n      },\n\n      toString: function () {\n        var str = \"\";\n        forEach(this._operations, function (operation) {\n          str += \" \" + operation.type + \":\" + operation.count;\n        });\n        return str.substring(1);\n      }\n    };\n\n    /**\n      Internal data structure to represent an array operation.\n\n      @method ArrayOperation\n      @private\n      @param {String} type The type of the operation.  One of\n      `Ember.TrackedArray.{RETAIN, INSERT, DELETE}`\n      @param {Number} count The number of items in this operation.\n      @param {Array} items The items of the operation, if included.  RETAIN and\n      INSERT include their items, DELETE does not.\n    */\n    function ArrayOperation (operation, count, items) {\n      this.type = operation; // RETAIN | INSERT | DELETE\n      this.count = count;\n      this.items = items;\n    }\n\n    /**\n      Internal data structure used to include information when looking up operations\n      by item index.\n\n      @method ArrayOperationMatch\n      @private\n      @param {ArrayOperation} operation\n      @param {Number} index The index of `operation` in the array of operations.\n      @param {Boolean} split Whether or not the item index searched for would\n      require a split for a new operation type.\n      @param {Number} rangeStart The index of the first item in the operation,\n      with respect to the tracked array.  The index of the last item can be computed\n      from `rangeStart` and `operation.count`.\n    */\n    function ArrayOperationMatch(operation, index, split, rangeStart) {\n      this.operation = operation;\n      this.index = index;\n      this.split = split;\n      this.rangeStart = rangeStart;\n    }\n  });\nenifed(\"ember-testing\",\n  [\"ember-metal/core\",\"ember-testing/initializers\",\"ember-testing/support\",\"ember-testing/setup_for_testing\",\"ember-testing/test\",\"ember-testing/adapters/adapter\",\"ember-testing/adapters/qunit\",\"ember-testing/helpers\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    // to setup initializer\n         // to handle various edge cases\n\n    var setupForTesting = __dependency4__[\"default\"];\n    var Test = __dependency5__[\"default\"];\n    var Adapter = __dependency6__[\"default\"];\n    var QUnitAdapter = __dependency7__[\"default\"];\n         // adds helpers to helpers object in Test\n\n    /**\n      Ember Testing\n\n      @module ember\n      @submodule ember-testing\n      @requires ember-application\n    */\n\n    Ember.Test = Test;\n    Ember.Test.Adapter = Adapter;\n    Ember.Test.QUnitAdapter = QUnitAdapter;\n    Ember.setupForTesting = setupForTesting;\n  });\nenifed(\"ember-testing/adapters/adapter\",\n  [\"ember-metal/core\",\"ember-metal/utils\",\"ember-runtime/system/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.K\n    var inspect = __dependency2__.inspect;\n    var EmberObject = __dependency3__[\"default\"];\n\n    /**\n     @module ember\n     @submodule ember-testing\n    */\n\n    /**\n      The primary purpose of this class is to create hooks that can be implemented\n      by an adapter for various test frameworks.\n\n      @class Adapter\n      @namespace Ember.Test\n    */\n    var Adapter = EmberObject.extend({\n      /**\n        This callback will be called whenever an async operation is about to start.\n\n        Override this to call your framework's methods that handle async\n        operations.\n\n        @public\n        @method asyncStart\n      */\n      asyncStart: Ember.K,\n\n      /**\n        This callback will be called whenever an async operation has completed.\n\n        @public\n        @method asyncEnd\n      */\n      asyncEnd: Ember.K,\n\n      /**\n        Override this method with your testing framework's false assertion.\n        This function is called whenever an exception occurs causing the testing\n        promise to fail.\n\n        QUnit example:\n\n        ```javascript\n          exception: function(error) {\n            ok(false, error);\n          };\n        ```\n\n        @public\n        @method exception\n        @param {String} error The exception to be raised.\n      */\n      exception: function(error) {\n        throw error;\n      }\n    });\n\n    __exports__[\"default\"] = Adapter;\n  });\nenifed(\"ember-testing/adapters/qunit\",\n  [\"ember-testing/adapters/adapter\",\"ember-metal/utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Adapter = __dependency1__[\"default\"];\n    var inspect = __dependency2__.inspect;\n\n    /**\n      This class implements the methods defined by Ember.Test.Adapter for the\n      QUnit testing framework.\n\n      @class QUnitAdapter\n      @namespace Ember.Test\n      @extends Ember.Test.Adapter\n    */\n    __exports__[\"default\"] = Adapter.extend({\n      asyncStart: function() {\n        QUnit.stop();\n      },\n      asyncEnd: function() {\n        QUnit.start();\n      },\n      exception: function(error) {\n        ok(false, inspect(error));\n      }\n    });\n  });\nenifed(\"ember-testing/helpers\",\n  [\"ember-metal/property_get\",\"ember-metal/error\",\"ember-metal/run_loop\",\"ember-views/system/jquery\",\"ember-testing/test\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {\n    \"use strict\";\n    var get = __dependency1__.get;\n    var EmberError = __dependency2__[\"default\"];\n    var run = __dependency3__[\"default\"];\n    var jQuery = __dependency4__[\"default\"];\n    var Test = __dependency5__[\"default\"];\n\n    /**\n    * @module ember\n    * @submodule ember-testing\n    */\n\n    var helper = Test.registerHelper;\n    var asyncHelper = Test.registerAsyncHelper;\n    var countAsync = 0;\n\n    function currentRouteName(app){\n      var appController = app.__container__.lookup('controller:application');\n\n      return get(appController, 'currentRouteName');\n    }\n\n    function currentPath(app){\n      var appController = app.__container__.lookup('controller:application');\n\n      return get(appController, 'currentPath');\n    }\n\n    function currentURL(app){\n      var router = app.__container__.lookup('router:main');\n\n      return get(router, 'location').getURL();\n    }\n\n    function visit(app, url) {\n      var router = app.__container__.lookup('router:main');\n      router.location.setURL(url);\n\n      if (app._readinessDeferrals > 0) {\n        router['initialURL'] = url;\n        run(app, 'advanceReadiness');\n        delete router['initialURL'];\n      } else {\n        run(app, app.handleURL, url);\n      }\n\n      return app.testHelpers.wait();\n    }\n\n    function click(app, selector, context) {\n      var $el = app.testHelpers.findWithAssert(selector, context);\n      run($el, 'mousedown');\n\n      if ($el.is(':input')) {\n        var type = $el.prop('type');\n        if (type !== 'checkbox' && type !== 'radio' && type !== 'hidden') {\n          run($el, function(){\n            // Firefox does not trigger the `focusin` event if the window\n            // does not have focus. If the document doesn't have focus just\n            // use trigger('focusin') instead.\n            if (!document.hasFocus || document.hasFocus()) {\n              this.focus();\n            } else {\n              this.trigger('focusin');\n            }\n          });\n        }\n      }\n\n      run($el, 'mouseup');\n      run($el, 'click');\n\n      return app.testHelpers.wait();\n    }\n\n    function triggerEvent(app, selector, contextOrType, typeOrOptions, possibleOptions){\n      var arity = arguments.length;\n      var context, type, options;\n\n      if (arity === 3) {\n        // context and options are optional, so this is\n        // app, selector, type\n        context = null;\n        type = contextOrType;\n        options = {};\n      } else if (arity === 4) {\n        // context and options are optional, so this is\n        if (typeof typeOrOptions === \"object\") {  // either\n          // app, selector, type, options\n          context = null;\n          type = contextOrType;\n          options = typeOrOptions;\n        } else { // or\n          // app, selector, context, type\n          context = contextOrType;\n          type = typeOrOptions;\n          options = {};\n        }\n      } else {\n        context = contextOrType;\n        type = typeOrOptions;\n        options = possibleOptions;\n      }\n\n      var $el = app.testHelpers.findWithAssert(selector, context);\n\n      var event = jQuery.Event(type, options);\n\n      run($el, 'trigger', event);\n\n      return app.testHelpers.wait();\n    }\n\n    function keyEvent(app, selector, contextOrType, typeOrKeyCode, keyCode) {\n      var context, type;\n\n      if (typeof keyCode === 'undefined') {\n        context = null;\n        keyCode = typeOrKeyCode;\n        type = contextOrType;\n      } else {\n        context = contextOrType;\n        type = typeOrKeyCode;\n      }\n\n      return app.testHelpers.triggerEvent(selector, context, type, { keyCode: keyCode, which: keyCode });\n    }\n\n    function fillIn(app, selector, contextOrText, text) {\n      var $el, context;\n      if (typeof text === 'undefined') {\n        text = contextOrText;\n      } else {\n        context = contextOrText;\n      }\n      $el = app.testHelpers.findWithAssert(selector, context);\n      run(function() {\n        $el.val(text).change();\n      });\n      return app.testHelpers.wait();\n    }\n\n    function findWithAssert(app, selector, context) {\n      var $el = app.testHelpers.find(selector, context);\n      if ($el.length === 0) {\n        throw new EmberError(\"Element \" + selector + \" not found.\");\n      }\n      return $el;\n    }\n\n    function find(app, selector, context) {\n      var $el;\n      context = context || get(app, 'rootElement');\n      $el = app.$(selector, context);\n\n      return $el;\n    }\n\n    function andThen(app, callback) {\n      return app.testHelpers.wait(callback(app));\n    }\n\n    function wait(app, value) {\n      return Test.promise(function(resolve) {\n        // If this is the first async promise, kick off the async test\n        if (++countAsync === 1) {\n          Test.adapter.asyncStart();\n        }\n\n        // Every 10ms, poll for the async thing to have finished\n        var watcher = setInterval(function() {\n          // 1. If the router is loading, keep polling\n          var routerIsLoading = !!app.__container__.lookup('router:main').router.activeTransition;\n          if (routerIsLoading) { return; }\n\n          // 2. If there are pending Ajax requests, keep polling\n          if (Test.pendingAjaxRequests) { return; }\n\n          // 3. If there are scheduled timers or we are inside of a run loop, keep polling\n          if (run.hasScheduledTimers() || run.currentRunLoop) { return; }\n          if (Test.waiters && Test.waiters.any(function(waiter) {\n            var context = waiter[0];\n            var callback = waiter[1];\n            return !callback.call(context);\n          })) { return; }\n          // Stop polling\n          clearInterval(watcher);\n\n          // If this is the last async promise, end the async test\n          if (--countAsync === 0) {\n            Test.adapter.asyncEnd();\n          }\n\n          // Synchronously resolve the promise\n          run(null, resolve, value);\n        }, 10);\n      });\n\n    }\n\n\n    /**\n    * Loads a route, sets up any controllers, and renders any templates associated\n    * with the route as though a real user had triggered the route change while\n    * using your app.\n    *\n    * Example:\n    *\n    * ```javascript\n    * visit('posts/index').then(function() {\n    *   // assert something\n    * });\n    * ```\n    *\n    * @method visit\n    * @param {String} url the name of the route\n    * @return {RSVP.Promise}\n    */\n    asyncHelper('visit', visit);\n\n    /**\n    * Clicks an element and triggers any actions triggered by the element's `click`\n    * event.\n    *\n    * Example:\n    *\n    * ```javascript\n    * click('.some-jQuery-selector').then(function() {\n    *   // assert something\n    * });\n    * ```\n    *\n    * @method click\n    * @param {String} selector jQuery selector for finding element on the DOM\n    * @return {RSVP.Promise}\n    */\n    asyncHelper('click', click);\n\n    /**\n    * Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with the desired keyCode\n    *\n    * Example:\n    *\n    * ```javascript\n    * keyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {\n    *  // assert something\n    * });\n    * ```\n    *\n    * @method keyEvent\n    * @param {String} selector jQuery selector for finding element on the DOM\n    * @param {String} type the type of key event, e.g. `keypress`, `keydown`, `keyup`\n    * @param {Number} keyCode the keyCode of the simulated key event\n    * @return {RSVP.Promise}\n    * @since 1.5.0\n    */\n    asyncHelper('keyEvent', keyEvent);\n\n    /**\n    * Fills in an input element with some text.\n    *\n    * Example:\n    *\n    * ```javascript\n    * fillIn('#email', 'you@example.com').then(function() {\n    *   // assert something\n    * });\n    * ```\n    *\n    * @method fillIn\n    * @param {String} selector jQuery selector finding an input element on the DOM\n    * to fill text with\n    * @param {String} text text to place inside the input element\n    * @return {RSVP.Promise}\n    */\n    asyncHelper('fillIn', fillIn);\n\n    /**\n    * Finds an element in the context of the app's container element. A simple alias\n    * for `app.$(selector)`.\n    *\n    * Example:\n    *\n    * ```javascript\n    * var $el = find('.my-selector');\n    * ```\n    *\n    * @method find\n    * @param {String} selector jQuery string selector for element lookup\n    * @return {Object} jQuery object representing the results of the query\n    */\n    helper('find', find);\n\n    /**\n    * Like `find`, but throws an error if the element selector returns no results.\n    *\n    * Example:\n    *\n    * ```javascript\n    * var $el = findWithAssert('.doesnt-exist'); // throws error\n    * ```\n    *\n    * @method findWithAssert\n    * @param {String} selector jQuery selector string for finding an element within\n    * the DOM\n    * @return {Object} jQuery object representing the results of the query\n    * @throws {Error} throws error if jQuery object returned has a length of 0\n    */\n    helper('findWithAssert', findWithAssert);\n\n    /**\n      Causes the run loop to process any pending events. This is used to ensure that\n      any async operations from other helpers (or your assertions) have been processed.\n\n      This is most often used as the return value for the helper functions (see 'click',\n      'fillIn','visit',etc).\n\n      Example:\n\n      ```javascript\n      Ember.Test.registerAsyncHelper('loginUser', function(app, username, password) {\n        visit('secured/path/here')\n        .fillIn('#username', username)\n        .fillIn('#password', username)\n        .click('.submit')\n\n        return app.testHelpers.wait();\n      });\n\n      @method wait\n      @param {Object} value The value to be returned.\n      @return {RSVP.Promise}\n    */\n    asyncHelper('wait', wait);\n    asyncHelper('andThen', andThen);\n\n\n    /**\n      Returns the currently active route name.\n\n    Example:\n\n    ```javascript\n    function validateRouteName(){\n    equal(currentRouteName(), 'some.path', \"correct route was transitioned into.\");\n    }\n\n    visit('/some/path').then(validateRouteName)\n    ```\n\n    @method currentRouteName\n    @return {Object} The name of the currently active route.\n    @since 1.5.0\n    */\n    helper('currentRouteName', currentRouteName);\n\n    /**\n      Returns the current path.\n\n    Example:\n\n    ```javascript\n    function validateURL(){\n    equal(currentPath(), 'some.path.index', \"correct path was transitioned into.\");\n    }\n\n    click('#some-link-id').then(validateURL);\n    ```\n\n    @method currentPath\n    @return {Object} The currently active path.\n    @since 1.5.0\n    */\n    helper('currentPath', currentPath);\n\n    /**\n      Returns the current URL.\n\n    Example:\n\n    ```javascript\n    function validateURL(){\n    equal(currentURL(), '/some/path', \"correct URL was transitioned into.\");\n    }\n\n    click('#some-link-id').then(validateURL);\n    ```\n\n    @method currentURL\n    @return {Object} The currently active URL.\n    @since 1.5.0\n    */\n    helper('currentURL', currentURL);\n\n    /**\n      Triggers the given DOM event on the element identified by the provided selector.\n\n      Example:\n\n      ```javascript\n      triggerEvent('#some-elem-id', 'blur');\n      ```\n\n      This is actually used internally by the `keyEvent` helper like so:\n\n      ```javascript\n      triggerEvent('#some-elem-id', 'keypress', { keyCode: 13 });\n      ```\n\n     @method triggerEvent\n     @param {String} selector jQuery selector for finding element on the DOM\n     @param {String} [context] jQuery selector that will limit the selector\n                               argument to find only within the context's children\n     @param {String} type The event type to be triggered.\n     @param {Object} [options] The options to be passed to jQuery.Event.\n     @return {RSVP.Promise}\n     @since 1.5.0\n    */\n    asyncHelper('triggerEvent', triggerEvent);\n  });\nenifed(\"ember-testing/initializers\",\n  [\"ember-runtime/system/lazy_load\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var onLoad = __dependency1__.onLoad;\n\n    var name = 'deferReadiness in `testing` mode';\n\n    onLoad('Ember.Application', function(Application) {\n      if (!Application.initializers[name]) {\n        Application.initializer({\n          name: name,\n\n          initialize: function(container, application){\n            if (application.testing) {\n              application.deferReadiness();\n            }\n          }\n        });\n      }\n    });\n  });\nenifed(\"ember-testing/setup_for_testing\",\n  [\"ember-metal/core\",\"ember-testing/adapters/qunit\",\"ember-views/system/jquery\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // import Test from \"ember-testing/test\";  // ES6TODO: fix when cycles are supported\n    var QUnitAdapter = __dependency2__[\"default\"];\n    var jQuery = __dependency3__[\"default\"];\n\n    var Test, requests;\n\n    function incrementAjaxPendingRequests(_, xhr){\n      requests.push(xhr);\n      Test.pendingAjaxRequests = requests.length;\n    }\n\n    function decrementAjaxPendingRequests(_, xhr){\n      for (var i=0;i<requests.length;i++) {\n        if (xhr === requests[i]) {\n          requests.splice(i, 1);\n        }\n      }\n      Test.pendingAjaxRequests = requests.length;\n    }\n\n    /**\n      Sets Ember up for testing. This is useful to perform\n      basic setup steps in order to unit test.\n\n      Use `App.setupForTesting` to perform integration tests (full\n      application testing).\n\n      @method setupForTesting\n      @namespace Ember\n      @since 1.5.0\n    */\n    __exports__[\"default\"] = function setupForTesting() {\n      if (!Test) { Test = requireModule('ember-testing/test')['default']; }\n\n      Ember.testing = true;\n\n      // if adapter is not manually set default to QUnit\n      if (!Test.adapter) {\n        Test.adapter = QUnitAdapter.create();\n      }\n\n      requests = [];\n      Test.pendingAjaxRequests = requests.length;\n\n      jQuery(document).off('ajaxSend', incrementAjaxPendingRequests);\n      jQuery(document).off('ajaxComplete', decrementAjaxPendingRequests);\n      jQuery(document).on('ajaxSend', incrementAjaxPendingRequests);\n      jQuery(document).on('ajaxComplete', decrementAjaxPendingRequests);\n    }\n  });\nenifed(\"ember-testing/support\",\n  [\"ember-metal/core\",\"ember-views/system/jquery\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var jQuery = __dependency2__[\"default\"];\n\n    /**\n      @module ember\n      @submodule ember-testing\n     */\n\n    var $ = jQuery;\n\n    /**\n      This method creates a checkbox and triggers the click event to fire the\n      passed in handler. It is used to correct for a bug in older versions\n      of jQuery (e.g 1.8.3).\n\n      @private\n      @method testCheckboxClick\n    */\n    function testCheckboxClick(handler) {\n      $('<input type=\"checkbox\">')\n        .css({ position: 'absolute', left: '-1000px', top: '-1000px' })\n        .appendTo('body')\n        .on('click', handler)\n        .trigger('click')\n        .remove();\n    }\n\n    $(function() {\n      /*\n        Determine whether a checkbox checked using jQuery's \"click\" method will have\n        the correct value for its checked property.\n\n        If we determine that the current jQuery version exhibits this behavior,\n        patch it to work correctly as in the commit for the actual fix:\n        https://github.com/jquery/jquery/commit/1fb2f92.\n      */\n      testCheckboxClick(function() {\n        if (!this.checked && !$.event.special.click) {\n          $.event.special.click = {\n            // For checkbox, fire native event so checked state will be right\n            trigger: function() {\n              if ($.nodeName( this, \"input\" ) && this.type === \"checkbox\" && this.click) {\n                this.click();\n                return false;\n              }\n            }\n          };\n        }\n      });\n\n      // Try again to verify that the patch took effect or blow up.\n      testCheckboxClick(function() {\n        Ember.warn(\"clicked checkboxes should be checked! the jQuery patch didn't work\", this.checked);\n      });\n    });\n  });\nenifed(\"ember-testing/test\",\n  [\"ember-metal/core\",\"ember-metal/run_loop\",\"ember-metal/platform\",\"ember-runtime/compare\",\"ember-runtime/ext/rsvp\",\"ember-testing/setup_for_testing\",\"ember-application/system/application\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var emberRun = __dependency2__[\"default\"];\n    var create = __dependency3__.create;\n    var compare = __dependency4__[\"default\"];\n    var RSVP = __dependency5__[\"default\"];\n    var setupForTesting = __dependency6__[\"default\"];\n    var EmberApplication = __dependency7__[\"default\"];\n\n    /**\n      @module ember\n      @submodule ember-testing\n     */\n    var slice = [].slice;\n    var helpers = {};\n    var injectHelpersCallbacks = [];\n\n    /**\n      This is a container for an assortment of testing related functionality:\n\n      * Choose your default test adapter (for your framework of choice).\n      * Register/Unregister additional test helpers.\n      * Setup callbacks to be fired when the test helpers are injected into\n        your application.\n\n      @class Test\n      @namespace Ember\n    */\n    var Test = {\n      /**\n        Hash containing all known test helpers.\n\n        @property _helpers\n        @private\n        @since 1.7.0\n      */\n      _helpers: helpers,\n\n      /**\n        `registerHelper` is used to register a test helper that will be injected\n        when `App.injectTestHelpers` is called.\n\n        The helper method will always be called with the current Application as\n        the first parameter.\n\n        For example:\n\n        ```javascript\n        Ember.Test.registerHelper('boot', function(app) {\n          Ember.run(app, app.advanceReadiness);\n        });\n        ```\n\n        This helper can later be called without arguments because it will be\n        called with `app` as the first parameter.\n\n        ```javascript\n        App = Ember.Application.create();\n        App.injectTestHelpers();\n        boot();\n        ```\n\n        @public\n        @method registerHelper\n        @param {String} name The name of the helper method to add.\n        @param {Function} helperMethod\n        @param options {Object}\n      */\n      registerHelper: function(name, helperMethod) {\n        helpers[name] = {\n          method: helperMethod,\n          meta: { wait: false }\n        };\n      },\n\n      /**\n        `registerAsyncHelper` is used to register an async test helper that will be injected\n        when `App.injectTestHelpers` is called.\n\n        The helper method will always be called with the current Application as\n        the first parameter.\n\n        For example:\n\n        ```javascript\n        Ember.Test.registerAsyncHelper('boot', function(app) {\n          Ember.run(app, app.advanceReadiness);\n        });\n        ```\n\n        The advantage of an async helper is that it will not run\n        until the last async helper has completed.  All async helpers\n        after it will wait for it complete before running.\n\n\n        For example:\n\n        ```javascript\n        Ember.Test.registerAsyncHelper('deletePost', function(app, postId) {\n          click('.delete-' + postId);\n        });\n\n        // ... in your test\n        visit('/post/2');\n        deletePost(2);\n        visit('/post/3');\n        deletePost(3);\n        ```\n\n        @public\n        @method registerAsyncHelper\n        @param {String} name The name of the helper method to add.\n        @param {Function} helperMethod\n        @since 1.2.0\n      */\n      registerAsyncHelper: function(name, helperMethod) {\n        helpers[name] = {\n          method: helperMethod,\n          meta: { wait: true }\n        };\n      },\n\n      /**\n        Remove a previously added helper method.\n\n        Example:\n\n        ```javascript\n        Ember.Test.unregisterHelper('wait');\n        ```\n\n        @public\n        @method unregisterHelper\n        @param {String} name The helper to remove.\n      */\n      unregisterHelper: function(name) {\n        delete helpers[name];\n        delete Test.Promise.prototype[name];\n      },\n\n      /**\n        Used to register callbacks to be fired whenever `App.injectTestHelpers`\n        is called.\n\n        The callback will receive the current application as an argument.\n\n        Example:\n\n        ```javascript\n        Ember.Test.onInjectHelpers(function() {\n          Ember.$(document).ajaxSend(function() {\n            Test.pendingAjaxRequests++;\n          });\n\n          Ember.$(document).ajaxComplete(function() {\n            Test.pendingAjaxRequests--;\n          });\n        });\n        ```\n\n        @public\n        @method onInjectHelpers\n        @param {Function} callback The function to be called.\n      */\n      onInjectHelpers: function(callback) {\n        injectHelpersCallbacks.push(callback);\n      },\n\n      /**\n        This returns a thenable tailored for testing.  It catches failed\n        `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`\n        callback in the last chained then.\n\n        This method should be returned by async helpers such as `wait`.\n\n        @public\n        @method promise\n        @param {Function} resolver The function used to resolve the promise.\n      */\n      promise: function(resolver) {\n        return new Test.Promise(resolver);\n      },\n\n      /**\n       Used to allow ember-testing to communicate with a specific testing\n       framework.\n\n       You can manually set it before calling `App.setupForTesting()`.\n\n       Example:\n\n       ```javascript\n       Ember.Test.adapter = MyCustomAdapter.create()\n       ```\n\n       If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.\n\n       @public\n       @property adapter\n       @type {Class} The adapter to be used.\n       @default Ember.Test.QUnitAdapter\n      */\n      adapter: null,\n\n      /**\n        Replacement for `Ember.RSVP.resolve`\n        The only difference is this uses\n        an instance of `Ember.Test.Promise`\n\n        @public\n        @method resolve\n        @param {Mixed} The value to resolve\n        @since 1.2.0\n      */\n      resolve: function(val) {\n        return Test.promise(function(resolve) {\n          return resolve(val);\n        });\n      },\n\n      /**\n         This allows ember-testing to play nicely with other asynchronous\n         events, such as an application that is waiting for a CSS3\n         transition or an IndexDB transaction.\n\n         For example:\n\n         ```javascript\n         Ember.Test.registerWaiter(function() {\n           return myPendingTransactions() == 0;\n         });\n         ```\n         The `context` argument allows you to optionally specify the `this`\n         with which your callback will be invoked.\n\n         For example:\n\n         ```javascript\n         Ember.Test.registerWaiter(MyDB, MyDB.hasPendingTransactions);\n         ```\n\n         @public\n         @method registerWaiter\n         @param {Object} context (optional)\n         @param {Function} callback\n         @since 1.2.0\n      */\n      registerWaiter: function(context, callback) {\n        if (arguments.length === 1) {\n          callback = context;\n          context = null;\n        }\n        if (!this.waiters) {\n          this.waiters = Ember.A();\n        }\n        this.waiters.push([context, callback]);\n      },\n      /**\n         `unregisterWaiter` is used to unregister a callback that was\n         registered with `registerWaiter`.\n\n         @public\n         @method unregisterWaiter\n         @param {Object} context (optional)\n         @param {Function} callback\n         @since 1.2.0\n      */\n      unregisterWaiter: function(context, callback) {\n        var pair;\n        if (!this.waiters) { return; }\n        if (arguments.length === 1) {\n          callback = context;\n          context = null;\n        }\n        pair = [context, callback];\n        this.waiters = Ember.A(this.waiters.filter(function(elt) {\n          return compare(elt, pair)!==0;\n        }));\n      }\n    };\n\n    function helper(app, name) {\n      var fn = helpers[name].method;\n      var meta = helpers[name].meta;\n\n      return function() {\n        var args = slice.call(arguments);\n        var lastPromise = Test.lastPromise;\n\n        args.unshift(app);\n\n        // some helpers are not async and\n        // need to return a value immediately.\n        // example: `find`\n        if (!meta.wait) {\n          return fn.apply(app, args);\n        }\n\n        if (!lastPromise) {\n          // It's the first async helper in current context\n          lastPromise = fn.apply(app, args);\n        } else {\n          // wait for last helper's promise to resolve\n          // and then execute\n          run(function() {\n            lastPromise = Test.resolve(lastPromise).then(function() {\n              return fn.apply(app, args);\n            });\n          });\n        }\n\n        return lastPromise;\n      };\n    }\n\n    function run(fn) {\n      if (!emberRun.currentRunLoop) {\n        emberRun(fn);\n      } else {\n        fn();\n      }\n    }\n\n    EmberApplication.reopen({\n      /**\n       This property contains the testing helpers for the current application. These\n       are created once you call `injectTestHelpers` on your `Ember.Application`\n       instance. The included helpers are also available on the `window` object by\n       default, but can be used from this object on the individual application also.\n\n        @property testHelpers\n        @type {Object}\n        @default {}\n      */\n      testHelpers: {},\n\n      /**\n       This property will contain the original methods that were registered\n       on the `helperContainer` before `injectTestHelpers` is called.\n\n       When `removeTestHelpers` is called, these methods are restored to the\n       `helperContainer`.\n\n        @property originalMethods\n        @type {Object}\n        @default {}\n        @private\n        @since 1.3.0\n      */\n      originalMethods: {},\n\n\n      /**\n      This property indicates whether or not this application is currently in\n      testing mode. This is set when `setupForTesting` is called on the current\n      application.\n\n      @property testing\n      @type {Boolean}\n      @default false\n      @since 1.3.0\n      */\n      testing: false,\n\n      /**\n       This hook defers the readiness of the application, so that you can start\n       the app when your tests are ready to run. It also sets the router's\n       location to 'none', so that the window's location will not be modified\n       (preventing both accidental leaking of state between tests and interference\n       with your testing framework).\n\n       Example:\n\n      ```\n      App.setupForTesting();\n      ```\n\n        @method setupForTesting\n      */\n      setupForTesting: function() {\n        setupForTesting();\n\n        this.testing = true;\n\n        this.Router.reopen({\n          location: 'none'\n        });\n      },\n\n      /**\n        This will be used as the container to inject the test helpers into. By\n        default the helpers are injected into `window`.\n\n        @property helperContainer\n        @type {Object} The object to be used for test helpers.\n        @default window\n        @since 1.2.0\n      */\n      helperContainer: window,\n\n      /**\n        This injects the test helpers into the `helperContainer` object. If an object is provided\n        it will be used as the helperContainer. If `helperContainer` is not set it will default\n        to `window`. If a function of the same name has already been defined it will be cached\n        (so that it can be reset if the helper is removed with `unregisterHelper` or\n        `removeTestHelpers`).\n\n       Any callbacks registered with `onInjectHelpers` will be called once the\n       helpers have been injected.\n\n      Example:\n      ```\n      App.injectTestHelpers();\n      ```\n\n        @method injectTestHelpers\n      */\n      injectTestHelpers: function(helperContainer) {\n        if (helperContainer) { this.helperContainer = helperContainer; }\n\n        this.testHelpers = {};\n        for (var name in helpers) {\n          this.originalMethods[name] = this.helperContainer[name];\n          this.testHelpers[name] = this.helperContainer[name] = helper(this, name);\n          protoWrap(Test.Promise.prototype, name, helper(this, name), helpers[name].meta.wait);\n        }\n\n        for(var i = 0, l = injectHelpersCallbacks.length; i < l; i++) {\n          injectHelpersCallbacks[i](this);\n        }\n      },\n\n      /**\n        This removes all helpers that have been registered, and resets and functions\n        that were overridden by the helpers.\n\n        Example:\n\n        ```javascript\n        App.removeTestHelpers();\n        ```\n\n        @public\n        @method removeTestHelpers\n      */\n      removeTestHelpers: function() {\n        for (var name in helpers) {\n          this.helperContainer[name] = this.originalMethods[name];\n          delete this.testHelpers[name];\n          delete this.originalMethods[name];\n        }\n      }\n    });\n\n    // This method is no longer needed\n    // But still here for backwards compatibility\n    // of helper chaining\n    function protoWrap(proto, name, callback, isAsync) {\n      proto[name] = function() {\n        var args = arguments;\n        if (isAsync) {\n          return callback.apply(this, args);\n        } else {\n          return this.then(function() {\n            return callback.apply(this, args);\n          });\n        }\n      };\n    }\n\n    Test.Promise = function() {\n      RSVP.Promise.apply(this, arguments);\n      Test.lastPromise = this;\n    };\n\n    Test.Promise.prototype = create(RSVP.Promise.prototype);\n    Test.Promise.prototype.constructor = Test.Promise;\n\n    // Patch `then` to isolate async methods\n    // specifically `Ember.Test.lastPromise`\n    var originalThen = RSVP.Promise.prototype.then;\n    Test.Promise.prototype.then = function(onSuccess, onFailure) {\n      return originalThen.call(this, function(val) {\n        return isolate(onSuccess, val);\n      }, onFailure);\n    };\n\n    // This method isolates nested async methods\n    // so that they don't conflict with other last promises.\n    //\n    // 1. Set `Ember.Test.lastPromise` to null\n    // 2. Invoke method\n    // 3. Return the last promise created during method\n    // 4. Restore `Ember.Test.lastPromise` to original value\n    function isolate(fn, val) {\n      var value, lastPromise;\n\n      // Reset lastPromise for nested helpers\n      Test.lastPromise = null;\n\n      value = fn(val);\n\n      lastPromise = Test.lastPromise;\n\n      // If the method returned a promise\n      // return that promise. If not,\n      // return the last async helper's promise\n      if ((value && (value instanceof Test.Promise)) || !lastPromise) {\n        return value;\n      } else {\n        run(function() {\n          lastPromise = Test.resolve(lastPromise).then(function() {\n            return value;\n          });\n        });\n        return lastPromise;\n      }\n    }\n\n    __exports__[\"default\"] = Test;\n  });\nenifed(\"ember-views\",\n  [\"ember-runtime\",\"ember-views/system/jquery\",\"ember-views/system/utils\",\"ember-views/system/render_buffer\",\"ember-views/system/ext\",\"ember-views/views/states\",\"ember-views/views/core_view\",\"ember-views/views/view\",\"ember-views/views/container_view\",\"ember-views/views/collection_view\",\"ember-views/views/component\",\"ember-views/system/event_dispatcher\",\"ember-views/mixins/view_target_action_support\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __exports__) {\n    \"use strict\";\n    /**\n    Ember Views\n\n    @module ember\n    @submodule ember-views\n    @requires ember-runtime\n    @main ember-views\n    */\n\n    // BEGIN IMPORTS\n    var Ember = __dependency1__[\"default\"];\n    var jQuery = __dependency2__[\"default\"];\n    var isSimpleClick = __dependency3__.isSimpleClick;\n    var RenderBuffer = __dependency4__[\"default\"];\n     // for the side effect of extending Ember.run.queues\n    var cloneStates = __dependency6__.cloneStates;\n    var states = __dependency6__.states;\n\n    var CoreView = __dependency7__[\"default\"];\n    var View = __dependency8__[\"default\"];\n    var ContainerView = __dependency9__[\"default\"];\n    var CollectionView = __dependency10__[\"default\"];\n    var Component = __dependency11__[\"default\"];\n\n    var EventDispatcher = __dependency12__[\"default\"];\n    var ViewTargetActionSupport = __dependency13__[\"default\"];\n    // END IMPORTS\n\n    /**\n      Alias for jQuery\n\n      @method $\n      @for Ember\n    */\n\n    // BEGIN EXPORTS\n    Ember.$ = jQuery;\n\n    Ember.ViewTargetActionSupport = ViewTargetActionSupport;\n    Ember.RenderBuffer = RenderBuffer;\n\n    var ViewUtils = Ember.ViewUtils = {};\n    ViewUtils.isSimpleClick = isSimpleClick;\n\n    Ember.CoreView = CoreView;\n    Ember.View = View;\n    Ember.View.states = states;\n    Ember.View.cloneStates = cloneStates;\n\n    Ember.ContainerView = ContainerView;\n    Ember.CollectionView = CollectionView;\n    Ember.Component = Component;\n    Ember.EventDispatcher = EventDispatcher;\n    // END EXPORTS\n\n    __exports__[\"default\"] = Ember;\n  });\nenifed(\"ember-views/mixins/component_template_deprecation\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/mixin\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.deprecate\n    var get = __dependency2__.get;\n    var Mixin = __dependency3__.Mixin;\n\n    /**\n      The ComponentTemplateDeprecation mixin is used to provide a useful\n      deprecation warning when using either `template` or `templateName` with\n      a component. The `template` and `templateName` properties specified at\n      extend time are moved to `layout` and `layoutName` respectively.\n\n      `Ember.ComponentTemplateDeprecation` is used internally by Ember in\n      `Ember.Component`.\n\n      @class ComponentTemplateDeprecation\n      @namespace Ember\n    */\n    __exports__[\"default\"] = Mixin.create({\n      /**\n        @private\n\n        Moves `templateName` to `layoutName` and `template` to `layout` at extend\n        time if a layout is not also specified.\n\n        Note that this currently modifies the mixin themselves, which is technically\n        dubious but is practically of little consequence. This may change in the\n        future.\n\n        @method willMergeMixin\n        @since 1.4.0\n      */\n      willMergeMixin: function(props) {\n        // must call _super here to ensure that the ActionHandler\n        // mixin is setup properly (moves actions -> _actions)\n        //\n        // Calling super is only OK here since we KNOW that\n        // there is another Mixin loaded first.\n        this._super.apply(this, arguments);\n\n        var deprecatedProperty, replacementProperty;\n        var layoutSpecified = (props.layoutName || props.layout || get(this, 'layoutName'));\n\n        if (props.templateName && !layoutSpecified) {\n          deprecatedProperty = 'templateName';\n          replacementProperty = 'layoutName';\n\n          props.layoutName = props.templateName;\n          delete props['templateName'];\n        }\n\n        if (props.template && !layoutSpecified) {\n          deprecatedProperty = 'template';\n          replacementProperty = 'layout';\n\n          props.layout = props.template;\n          delete props['template'];\n        }\n\n        if (deprecatedProperty) {\n          Ember.deprecate('Do not specify ' + deprecatedProperty + ' on a Component, use ' + replacementProperty + ' instead.', false);\n        }\n      }\n    });\n  });\nenifed(\"ember-views/mixins/view_target_action_support\",\n  [\"ember-metal/mixin\",\"ember-runtime/mixins/target_action_support\",\"ember-metal/computed\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Mixin = __dependency1__.Mixin;\n    var TargetActionSupport = __dependency2__[\"default\"];\n\n    // ES6TODO: computed should have its own export path so you can do import {defaultTo} from computed\n    var computed = __dependency3__.computed;\n    var alias = computed.alias;\n\n    /**\n    `Ember.ViewTargetActionSupport` is a mixin that can be included in a\n    view class to add a `triggerAction` method with semantics similar to\n    the Handlebars `{{action}}` helper. It provides intelligent defaults\n    for the action's target: the view's controller; and the context that is\n    sent with the action: the view's context.\n\n    Note: In normal Ember usage, the `{{action}}` helper is usually the best\n    choice. This mixin is most often useful when you are doing more complex\n    event handling in custom View subclasses.\n\n    For example:\n\n    ```javascript\n    App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n      action: 'save',\n      click: function() {\n        this.triggerAction(); // Sends the `save` action, along with the current context\n                              // to the current controller\n      }\n    });\n    ```\n\n    The `action` can be provided as properties of an optional object argument\n    to `triggerAction` as well.\n\n    ```javascript\n    App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n      click: function() {\n        this.triggerAction({\n          action: 'save'\n        }); // Sends the `save` action, along with the current context\n            // to the current controller\n      }\n    });\n    ```\n\n    @class ViewTargetActionSupport\n    @namespace Ember\n    @extends Ember.TargetActionSupport\n    */\n    __exports__[\"default\"] = Mixin.create(TargetActionSupport, {\n      /**\n      @property target\n      */\n      target: alias('controller'),\n      /**\n      @property actionContext\n      */\n      actionContext: alias('context')\n    });\n  });\nenifed(\"ember-views/system/action_manager\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-views\n    */\n\n    function ActionManager() {}\n\n    /**\n      Global action id hash.\n\n      @private\n      @property registeredActions\n      @type Object\n    */\n    ActionManager.registeredActions = {};\n\n    __exports__[\"default\"] = ActionManager;\n  });\nenifed(\"ember-views/system/event_dispatcher\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/is_none\",\"ember-metal/run_loop\",\"ember-metal/utils\",\"ember-runtime/system/string\",\"ember-runtime/system/object\",\"ember-views/system/jquery\",\"ember-views/system/action_manager\",\"ember-views/views/view\",\"ember-metal/merge\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-views\n    */\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert\n\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var isNone = __dependency4__.isNone;\n    var run = __dependency5__[\"default\"];\n    var typeOf = __dependency6__.typeOf;\n    var fmt = __dependency7__.fmt;\n    var EmberObject = __dependency8__[\"default\"];\n    var jQuery = __dependency9__[\"default\"];\n    var ActionManager = __dependency10__[\"default\"];\n    var View = __dependency11__[\"default\"];\n    var merge = __dependency12__[\"default\"];\n\n    //ES6TODO:\n    // find a better way to do Ember.View.views without global state\n\n    /**\n      `Ember.EventDispatcher` handles delegating browser events to their\n      corresponding `Ember.Views.` For example, when you click on a view,\n      `Ember.EventDispatcher` ensures that that view's `mouseDown` method gets\n      called.\n\n      @class EventDispatcher\n      @namespace Ember\n      @private\n      @extends Ember.Object\n    */\n    __exports__[\"default\"] = EmberObject.extend({\n\n      /**\n        The set of events names (and associated handler function names) to be setup\n        and dispatched by the `EventDispatcher`. Custom events can added to this list at setup\n        time, generally via the `Ember.Application.customEvents` hash. Only override this\n        default set to prevent the EventDispatcher from listening on some events all together.\n\n        This set will be modified by `setup` to also include any events added at that time.\n\n        @property events\n        @type Object\n      */\n      events: {\n        touchstart  : 'touchStart',\n        touchmove   : 'touchMove',\n        touchend    : 'touchEnd',\n        touchcancel : 'touchCancel',\n        keydown     : 'keyDown',\n        keyup       : 'keyUp',\n        keypress    : 'keyPress',\n        mousedown   : 'mouseDown',\n        mouseup     : 'mouseUp',\n        contextmenu : 'contextMenu',\n        click       : 'click',\n        dblclick    : 'doubleClick',\n        mousemove   : 'mouseMove',\n        focusin     : 'focusIn',\n        focusout    : 'focusOut',\n        mouseenter  : 'mouseEnter',\n        mouseleave  : 'mouseLeave',\n        submit      : 'submit',\n        input       : 'input',\n        change      : 'change',\n        dragstart   : 'dragStart',\n        drag        : 'drag',\n        dragenter   : 'dragEnter',\n        dragleave   : 'dragLeave',\n        dragover    : 'dragOver',\n        drop        : 'drop',\n        dragend     : 'dragEnd'\n      },\n\n      /**\n        The root DOM element to which event listeners should be attached. Event\n        listeners will be attached to the document unless this is overridden.\n\n        Can be specified as a DOMElement or a selector string.\n\n        The default body is a string since this may be evaluated before document.body\n        exists in the DOM.\n\n        @private\n        @property rootElement\n        @type DOMElement\n        @default 'body'\n      */\n      rootElement: 'body',\n\n      /**\n        It enables events to be dispatched to the view's `eventManager.` When present,\n        this object takes precedence over handling of events on the view itself.\n\n        Note that most Ember applications do not use this feature. If your app also\n        does not use it, consider setting this property to false to gain some performance\n        improvement by allowing the EventDispatcher to skip the search for the\n        `eventManager` on the view tree.\n\n        ```javascript\n        var EventDispatcher = Em.EventDispatcher.extend({\n          events: {\n              click       : 'click',\n              focusin     : 'focusIn',\n              focusout    : 'focusOut',\n              change      : 'change'\n          },\n          canDispatchToEventManager: false\n        });\n        container.register('event_dispatcher:main', EventDispatcher);\n        ```\n\n        @property canDispatchToEventManager\n        @type boolean\n        @default 'true'\n        @since 1.7.0\n      */\n      canDispatchToEventManager: true,\n\n      /**\n        Sets up event listeners for standard browser events.\n\n        This will be called after the browser sends a `DOMContentReady` event. By\n        default, it will set up all of the listeners on the document body. If you\n        would like to register the listeners on a different element, set the event\n        dispatcher's `root` property.\n\n        @private\n        @method setup\n        @param addedEvents {Hash}\n      */\n      setup: function(addedEvents, rootElement) {\n        var event, events = get(this, 'events');\n\n        merge(events, addedEvents || {});\n\n        if (!isNone(rootElement)) {\n          set(this, 'rootElement', rootElement);\n        }\n\n        rootElement = jQuery(get(this, 'rootElement'));\n\n        Ember.assert(fmt('You cannot use the same root element (%@) multiple times in an Ember.Application', [rootElement.selector || rootElement[0].tagName]), !rootElement.is('.ember-application'));\n        Ember.assert('You cannot make a new Ember.Application using a root element that is a descendent of an existing Ember.Application', !rootElement.closest('.ember-application').length);\n        Ember.assert('You cannot make a new Ember.Application using a root element that is an ancestor of an existing Ember.Application', !rootElement.find('.ember-application').length);\n\n        rootElement.addClass('ember-application');\n\n        Ember.assert('Unable to add \"ember-application\" class to rootElement. Make sure you set rootElement to the body or an element in the body.', rootElement.is('.ember-application'));\n\n        for (event in events) {\n          if (events.hasOwnProperty(event)) {\n            this.setupHandler(rootElement, event, events[event]);\n          }\n        }\n      },\n\n      /**\n        Registers an event listener on the rootElement. If the given event is\n        triggered, the provided event handler will be triggered on the target view.\n\n        If the target view does not implement the event handler, or if the handler\n        returns `false`, the parent view will be called. The event will continue to\n        bubble to each successive parent view until it reaches the top.\n\n        @private\n        @method setupHandler\n        @param {Element} rootElement\n        @param {String} event the browser-originated event to listen to\n        @param {String} eventName the name of the method to call on the view\n      */\n      setupHandler: function(rootElement, event, eventName) {\n        var self = this;\n\n        rootElement.on(event + '.ember', '.ember-view', function(evt, triggeringManager) {\n          var view = View.views[this.id];\n          var result = true;\n\n          var manager = self.canDispatchToEventManager ? self._findNearestEventManager(view, eventName) : null;\n\n          if (manager && manager !== triggeringManager) {\n            result = self._dispatchEvent(manager, evt, eventName, view);\n          } else if (view) {\n            result = self._bubbleEvent(view, evt, eventName);\n          }\n\n          return result;\n        });\n\n        rootElement.on(event + '.ember', '[data-ember-action]', function(evt) {\n          var actionId = jQuery(evt.currentTarget).attr('data-ember-action');\n          var action   = ActionManager.registeredActions[actionId];\n\n          // We have to check for action here since in some cases, jQuery will trigger\n          // an event on `removeChild` (i.e. focusout) after we've already torn down the\n          // action handlers for the view.\n          if (action && action.eventName === eventName) {\n            return action.handler(evt);\n          }\n        });\n      },\n\n      _findNearestEventManager: function(view, eventName) {\n        var manager = null;\n\n        while (view) {\n          manager = get(view, 'eventManager');\n          if (manager && manager[eventName]) { break; }\n\n          view = get(view, 'parentView');\n        }\n\n        return manager;\n      },\n\n      _dispatchEvent: function(object, evt, eventName, view) {\n        var result = true;\n\n        var handler = object[eventName];\n        if (typeOf(handler) === 'function') {\n          result = run(object, handler, evt, view);\n          // Do not preventDefault in eventManagers.\n          evt.stopPropagation();\n        }\n        else {\n          result = this._bubbleEvent(view, evt, eventName);\n        }\n\n        return result;\n      },\n\n      _bubbleEvent: function(view, evt, eventName) {\n        return run(view, view.handleEvent, eventName, evt);\n      },\n\n      destroy: function() {\n        var rootElement = get(this, 'rootElement');\n        jQuery(rootElement).off('.ember', '**').removeClass('ember-application');\n        return this._super();\n      },\n\n      toString: function() {\n        return '(EventDispatcher)';\n      }\n    });\n  });\nenifed(\"ember-views/system/ext\",\n  [\"ember-metal/run_loop\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-views\n    */\n\n    var run = __dependency1__[\"default\"];\n\n    // Add a new named queue for rendering views that happens\n    // after bindings have synced, and a queue for scheduling actions\n    // that that should occur after view rendering.\n    var queues = run.queues;\n    run._addQueue('render', 'actions');\n    run._addQueue('afterRender', 'render');\n  });\nenifed(\"ember-views/system/jquery\",\n  [\"ember-metal/core\",\"ember-runtime/system/string\",\"ember-metal/enumerable_utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert\n    var w = __dependency2__.w;\n\n    // ES6TODO: the functions on EnumerableUtils need their own exports\n    var forEach = __dependency3__.forEach;\n\n    /**\n    Ember Views\n\n    @module ember\n    @submodule ember-views\n    @requires ember-runtime\n    @main ember-views\n    */\n\n    var jQuery = (Ember.imports && Ember.imports.jQuery) || (this && this.jQuery);\n    if (!jQuery && typeof eriuqer === 'function') {\n      jQuery = eriuqer('jquery');\n    }\n\n    Ember.assert(\"Ember Views require jQuery between 1.7 and 2.1\", jQuery && (jQuery().jquery.match(/^((1\\.(7|8|9|10|11))|(2\\.(0|1)))(\\.\\d+)?(pre|rc\\d?)?/) || Ember.ENV.FORCE_JQUERY));\n\n    /**\n    @module ember\n    @submodule ember-views\n    */\n    if (jQuery) {\n      // http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dndevents\n      var dragEvents = w('dragstart drag dragenter dragleave dragover drop dragend');\n\n      // Copies the `dataTransfer` property from a browser event object onto the\n      // jQuery event object for the specified events\n      forEach(dragEvents, function(eventName) {\n        jQuery.event.fixHooks[eventName] = { props: ['dataTransfer'] };\n      });\n    }\n\n    __exports__[\"default\"] = jQuery;\n  });\nenifed(\"ember-views/system/render_buffer\",\n  [\"ember-views/system/jquery\",\"morph\",\"ember-metal/core\",\"ember-metal/platform\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-views\n    */\n\n    var jQuery = __dependency1__[\"default\"];\n    var DOMHelper = __dependency2__.DOMHelper;\n    var Ember = __dependency3__[\"default\"];\n    var create = __dependency4__.create;\n\n    // The HTML spec allows for \"omitted start tags\". These tags are optional\n    // when their intended child is the first thing in the parent tag. For\n    // example, this is a tbody start tag:\n    //\n    // <table>\n    //   <tbody>\n    //     <tr>\n    //\n    // The tbody may be omitted, and the browser will accept and render:\n    //\n    // <table>\n    //   <tr>\n    //\n    // However, the omitted start tag will still be added to the DOM. Here\n    // we test the string and context to see if the browser is about to\n    // perform this cleanup, but with a special allowance for disregarding\n    // <script tags. This disregarding of <script being the first child item\n    // may bend the offical spec a bit, and is only needed for Handlebars\n    // templates.\n    //\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#optional-tags\n    // describes which tags are omittable. The spec for tbody and colgroup\n    // explains this behavior:\n    //\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/tables.html#the-tbody-element\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/tables.html#the-colgroup-element\n    //\n    var omittedStartTagChildren = {\n      tr: document.createElement('tbody'),\n      col: document.createElement('colgroup')\n    };\n\n    var omittedStartTagChildTest = /(?:<script)*.*?<([\\w:]+)/i;\n\n    function detectOmittedStartTag(string, contextualElement){\n      // Omitted start tags are only inside table tags.\n      if (contextualElement.tagName === 'TABLE') {\n        var omittedStartTagChildMatch = omittedStartTagChildTest.exec(string);\n        if (omittedStartTagChildMatch) {\n          // It is already asserted that the contextual element is a table\n          // and not the proper start tag. Just look up the start tag.\n          return omittedStartTagChildren[omittedStartTagChildMatch[1].toLowerCase()];\n        }\n      }\n    }\n\n    function ClassSet() {\n      this.seen = create(null);\n      this.list = [];\n    }\n\n    ClassSet.prototype = {\n      add: function(string) {\n        if (this.seen[string] === true) { return; }\n        this.seen[string] = true;\n\n        this.list.push(string);\n      },\n\n      toDOM: function() {\n        return this.list.join(\" \");\n      }\n    };\n\n    var BAD_TAG_NAME_TEST_REGEXP = /[^a-zA-Z0-9\\-]/;\n    var BAD_TAG_NAME_REPLACE_REGEXP = /[^a-zA-Z0-9\\-]/g;\n\n    function stripTagName(tagName) {\n      if (!tagName) {\n        return tagName;\n      }\n\n      if (!BAD_TAG_NAME_TEST_REGEXP.test(tagName)) {\n        return tagName;\n      }\n\n      return tagName.replace(BAD_TAG_NAME_REPLACE_REGEXP, '');\n    }\n\n    var BAD_CHARS_REGEXP = /&(?!\\w+;)|[<>\"'`]/g;\n    var POSSIBLE_CHARS_REGEXP = /[&<>\"'`]/;\n\n    function escapeAttribute(value) {\n      // Stolen shamelessly from Handlebars\n\n      var escape = {\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\",\n        '\"': \"&quot;\",\n        \"'\": \"&#x27;\",\n        \"`\": \"&#x60;\"\n      };\n\n      var escapeChar = function(chr) {\n        return escape[chr] || \"&amp;\";\n      };\n\n      var string = value.toString();\n\n      if(!POSSIBLE_CHARS_REGEXP.test(string)) { return string; }\n      return string.replace(BAD_CHARS_REGEXP, escapeChar);\n    }\n\n    // IE 6/7 have bugs around setting names on inputs during creation.\n    // From http://msdn.microsoft.com/en-us/library/ie/ms536389(v=vs.85).aspx:\n    // \"To include the NAME attribute at run time on objects created with the createElement method, use the eTag.\"\n    var canSetNameOnInputs = (function() {\n      var div = document.createElement('div');\n      var el = document.createElement('input');\n\n      el.setAttribute('name', 'foo');\n      div.appendChild(el);\n\n      return !!div.innerHTML.match('foo');\n    })();\n\n    /**\n      `Ember.renderBuffer` gathers information regarding the view and generates the\n      final representation. `Ember.renderBuffer` will generate HTML which can be pushed\n      to the DOM.\n\n       ```javascript\n       var buffer = Ember.renderBuffer('div', contextualElement);\n      ```\n\n      @method renderBuffer\n      @namespace Ember\n      @param {String} tagName tag name (such as 'div' or 'p') used for the buffer\n    */\n    __exports__[\"default\"] = function renderBuffer(tagName, contextualElement) {\n      return new _RenderBuffer(tagName, contextualElement); // jshint ignore:line\n    }\n\n    function _RenderBuffer(tagName, contextualElement) {\n      this.tagName = tagName;\n      this._outerContextualElement = contextualElement;\n      this.buffer = null;\n      this.childViews = [];\n      this.dom = new DOMHelper();\n    }\n\n    _RenderBuffer.prototype = {\n\n      reset: function(tagName, contextualElement) {\n        this.tagName = tagName;\n        this.buffer = null;\n        this._element = null;\n        this._outerContextualElement = contextualElement;\n        this.elementClasses = null;\n        this.elementId = null;\n        this.elementAttributes = null;\n        this.elementProperties = null;\n        this.elementTag = null;\n        this.elementStyle = null;\n        this.childViews.length = 0;\n      },\n\n      // The root view's element\n      _element: null,\n\n      // The root view's contextualElement\n      _outerContextualElement: null,\n\n      /**\n        An internal set used to de-dupe class names when `addClass()` is\n        used. After each call to `addClass()`, the `classes` property\n        will be updated.\n\n        @private\n        @property elementClasses\n        @type Array\n        @default null\n      */\n      elementClasses: null,\n\n      /**\n        Array of class names which will be applied in the class attribute.\n\n        You can use `setClasses()` to set this property directly. If you\n        use `addClass()`, it will be maintained for you.\n\n        @property classes\n        @type Array\n        @default null\n      */\n      classes: null,\n\n      /**\n        The id in of the element, to be applied in the id attribute.\n\n        You should not set this property yourself, rather, you should use\n        the `id()` method of `Ember.RenderBuffer`.\n\n        @property elementId\n        @type String\n        @default null\n      */\n      elementId: null,\n\n      /**\n        A hash keyed on the name of the attribute and whose value will be\n        applied to that attribute. For example, if you wanted to apply a\n        `data-view=\"Foo.bar\"` property to an element, you would set the\n        elementAttributes hash to `{'data-view':'Foo.bar'}`.\n\n        You should not maintain this hash yourself, rather, you should use\n        the `attr()` method of `Ember.RenderBuffer`.\n\n        @property elementAttributes\n        @type Hash\n        @default {}\n      */\n      elementAttributes: null,\n\n      /**\n        A hash keyed on the name of the properties and whose value will be\n        applied to that property. For example, if you wanted to apply a\n        `checked=true` property to an element, you would set the\n        elementProperties hash to `{'checked':true}`.\n\n        You should not maintain this hash yourself, rather, you should use\n        the `prop()` method of `Ember.RenderBuffer`.\n\n        @property elementProperties\n        @type Hash\n        @default {}\n      */\n      elementProperties: null,\n\n      /**\n        The tagname of the element an instance of `Ember.RenderBuffer` represents.\n\n        Usually, this gets set as the first parameter to `Ember.RenderBuffer`. For\n        example, if you wanted to create a `p` tag, then you would call\n\n        ```javascript\n        Ember.RenderBuffer('p', contextualElement)\n        ```\n\n        @property elementTag\n        @type String\n        @default null\n      */\n      elementTag: null,\n\n      /**\n        A hash keyed on the name of the style attribute and whose value will\n        be applied to that attribute. For example, if you wanted to apply a\n        `background-color:black;` style to an element, you would set the\n        elementStyle hash to `{'background-color':'black'}`.\n\n        You should not maintain this hash yourself, rather, you should use\n        the `style()` method of `Ember.RenderBuffer`.\n\n        @property elementStyle\n        @type Hash\n        @default {}\n      */\n      elementStyle: null,\n\n      pushChildView: function (view) {\n        var index = this.childViews.length;\n        this.childViews[index] = view;\n        this.push(\"<script id='morph-\"+index+\"' type='text/x-placeholder'>\\x3C/script>\");\n      },\n\n      hydrateMorphs: function (contextualElement) {\n        var childViews = this.childViews;\n        var el = this._element;\n        for (var i=0,l=childViews.length; i<l; i++) {\n          var childView = childViews[i];\n          var ref = el.querySelector('#morph-'+i);\n\n          Ember.assert('An error occured while setting up template bindings. Please check ' +\n                       (childView && childView._parentView && childView._parentView._debugTemplateName ?\n                            '\"' + childView._parentView._debugTemplateName + '\" template ' :\n                            ''\n                       )  + 'for invalid markup or bindings within HTML comments.',\n                       ref);\n\n          var parent = ref.parentNode;\n\n          childView._morph = this.dom.insertMorphBefore(\n            parent,\n            ref,\n            parent.nodeType === 1 ? parent : contextualElement\n          );\n          parent.removeChild(ref);\n        }\n      },\n\n      /**\n        Adds a string of HTML to the `RenderBuffer`.\n\n        @method push\n        @param {String} string HTML to push into the buffer\n        @chainable\n      */\n      push: function(content) {\n        if (this.buffer === null) {\n          this.buffer = '';\n        }\n        this.buffer += content;\n        return this;\n      },\n\n      /**\n        Adds a class to the buffer, which will be rendered to the class attribute.\n\n        @method addClass\n        @param {String} className Class name to add to the buffer\n        @chainable\n      */\n      addClass: function(className) {\n        // lazily create elementClasses\n        this.elementClasses = (this.elementClasses || new ClassSet());\n        this.elementClasses.add(className);\n        this.classes = this.elementClasses.list;\n\n        return this;\n      },\n\n      setClasses: function(classNames) {\n        this.elementClasses = null;\n        var len = classNames.length;\n        var i;\n        for (i = 0; i < len; i++) {\n          this.addClass(classNames[i]);\n        }\n      },\n\n      /**\n        Sets the elementID to be used for the element.\n\n        @method id\n        @param {String} id\n        @chainable\n      */\n      id: function(id) {\n        this.elementId = id;\n        return this;\n      },\n\n      // duck type attribute functionality like jQuery so a render buffer\n      // can be used like a jQuery object in attribute binding scenarios.\n\n      /**\n        Adds an attribute which will be rendered to the element.\n\n        @method attr\n        @param {String} name The name of the attribute\n        @param {String} value The value to add to the attribute\n        @chainable\n        @return {Ember.RenderBuffer|String} this or the current attribute value\n      */\n      attr: function(name, value) {\n        var attributes = this.elementAttributes = (this.elementAttributes || {});\n\n        if (arguments.length === 1) {\n          return attributes[name];\n        } else {\n          attributes[name] = value;\n        }\n\n        return this;\n      },\n\n      /**\n        Remove an attribute from the list of attributes to render.\n\n        @method removeAttr\n        @param {String} name The name of the attribute\n        @chainable\n      */\n      removeAttr: function(name) {\n        var attributes = this.elementAttributes;\n        if (attributes) { delete attributes[name]; }\n\n        return this;\n      },\n\n      /**\n        Adds a property which will be rendered to the element.\n\n        @method prop\n        @param {String} name The name of the property\n        @param {String} value The value to add to the property\n        @chainable\n        @return {Ember.RenderBuffer|String} this or the current property value\n      */\n      prop: function(name, value) {\n        var properties = this.elementProperties = (this.elementProperties || {});\n\n        if (arguments.length === 1) {\n          return properties[name];\n        } else {\n          properties[name] = value;\n        }\n\n        return this;\n      },\n\n      /**\n        Remove an property from the list of properties to render.\n\n        @method removeProp\n        @param {String} name The name of the property\n        @chainable\n      */\n      removeProp: function(name) {\n        var properties = this.elementProperties;\n        if (properties) { delete properties[name]; }\n\n        return this;\n      },\n\n      /**\n        Adds a style to the style attribute which will be rendered to the element.\n\n        @method style\n        @param {String} name Name of the style\n        @param {String} value\n        @chainable\n      */\n      style: function(name, value) {\n        this.elementStyle = (this.elementStyle || {});\n\n        this.elementStyle[name] = value;\n        return this;\n      },\n\n      generateElement: function() {\n        var tagName = this.tagName;\n        var id = this.elementId;\n        var classes = this.classes;\n        var attrs = this.elementAttributes;\n        var props = this.elementProperties;\n        var style = this.elementStyle;\n        var styleBuffer = '';\n        var attr, prop, tagString;\n\n        if (attrs && attrs.name && !canSetNameOnInputs) {\n          // IE allows passing a tag to createElement. See note on `canSetNameOnInputs` above as well.\n          tagString = '<'+stripTagName(tagName)+' name=\"'+escapeAttribute(attrs.name)+'\">';\n        } else {\n          tagString = tagName;\n        }\n\n        var element = this.dom.createElement(tagString, this.outerContextualElement());\n        var $element = jQuery(element);\n\n        if (id) {\n          this.dom.setAttribute(element, 'id', id);\n          this.elementId = null;\n        }\n        if (classes) {\n          this.dom.setAttribute(element, 'class', classes.join(' '));\n          this.classes = null;\n          this.elementClasses = null;\n        }\n\n        if (style) {\n          for (prop in style) {\n            if (style.hasOwnProperty(prop)) {\n              styleBuffer += (prop + ':' + style[prop] + ';');\n            }\n          }\n\n          this.dom.setAttribute(element, 'style', styleBuffer);\n\n          this.elementStyle = null;\n        }\n\n        if (attrs) {\n          for (attr in attrs) {\n            if (attrs.hasOwnProperty(attr)) {\n              this.dom.setAttribute(element, attr, attrs[attr]);\n            }\n          }\n\n          this.elementAttributes = null;\n        }\n\n        if (props) {\n          for (prop in props) {\n            if (props.hasOwnProperty(prop)) {\n              $element.prop(prop, props[prop]);\n            }\n          }\n\n          this.elementProperties = null;\n        }\n\n        this._element = element;\n      },\n\n      /**\n        @method element\n        @return {DOMElement} The element corresponding to the generated HTML\n          of this buffer\n      */\n      element: function() {\n        var content = this.innerContent();\n        // No content means a text node buffer, with the content\n        // in _element. HandlebarsBoundView is an example.\n        if (content === null)  {\n          return this._element;\n        }\n\n        var contextualElement = this.innerContextualElement(content);\n        this.dom.detectNamespace(contextualElement);\n\n        if (!this._element) {\n          this._element = document.createDocumentFragment();\n        }\n\n        var nodes = this.dom.parseHTML(content, contextualElement);\n        while (nodes[0]) {\n          this._element.appendChild(nodes[0]);\n        }\n        this.hydrateMorphs(contextualElement);\n\n        return this._element;\n      },\n\n      /**\n        Generates the HTML content for this buffer.\n\n        @method string\n        @return {String} The generated HTML\n      */\n      string: function() {\n        if (this._element) {\n          // Firefox versions < 11 do not have support for element.outerHTML.\n          var thisElement = this.element();\n          var outerHTML = thisElement.outerHTML;\n          if (typeof outerHTML === 'undefined') {\n            return jQuery('<div/>').append(thisElement).html();\n          }\n          return outerHTML;\n        } else {\n          return this.innerString();\n        }\n      },\n\n      outerContextualElement: function() {\n        if (!this._outerContextualElement) {\n          Ember.deprecate(\"The render buffer expects an outer contextualElement to exist.\" +\n                          \" This ensures DOM that requires context is correctly generated (tr, SVG tags).\" +\n                          \" Defaulting to document.body, but this will be removed in the future\");\n          this.outerContextualElement = document.body;\n        }\n        return this._outerContextualElement;\n      },\n\n      innerContextualElement: function(html) {\n        var innerContextualElement;\n        if (this._element && this._element.nodeType === 1) {\n          innerContextualElement = this._element;\n        } else {\n          innerContextualElement = this.outerContextualElement();\n        }\n\n        var omittedStartTag;\n        if (html) {\n          omittedStartTag = detectOmittedStartTag(html, innerContextualElement);\n        }\n        return omittedStartTag || innerContextualElement;\n      },\n\n      innerString: function() {\n        var content = this.innerContent();\n        if (content && !content.nodeType) {\n          return content;\n        }\n      },\n\n      innerContent: function() {\n        return this.buffer;\n      }\n    };\n  });\nenifed(\"ember-views/system/renderer\",\n  [\"ember-metal/core\",\"ember-metal-views/renderer\",\"ember-metal/platform\",\"ember-views/system/render_buffer\",\"ember-metal/run_loop\",\"ember-metal/property_set\",\"ember-metal/instrumentation\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Renderer = __dependency2__[\"default\"];\n    var create = __dependency3__.create;\n    var renderBuffer = __dependency4__[\"default\"];\n    var run = __dependency5__[\"default\"];\n    var set = __dependency6__.set;\n    var _instrumentStart = __dependency7__._instrumentStart;\n    var subscribers = __dependency7__.subscribers;\n\n    function EmberRenderer() {\n      this.buffer = renderBuffer();\n      Renderer.call(this);\n    }\n    EmberRenderer.prototype = create(Renderer.prototype);\n    EmberRenderer.prototype.constructor = EmberRenderer;\n\n    var BAD_TAG_NAME_TEST_REGEXP = /[^a-zA-Z0-9\\-]/;\n    var BAD_TAG_NAME_REPLACE_REGEXP = /[^a-zA-Z0-9\\-]/g;\n\n    function stripTagName(tagName) {\n      if (!tagName) {\n        return tagName;\n      }\n\n      if (!BAD_TAG_NAME_TEST_REGEXP.test(tagName)) {\n        return tagName;\n      }\n\n      return tagName.replace(BAD_TAG_NAME_REPLACE_REGEXP, '');\n    }\n\n    EmberRenderer.prototype.scheduleRender =\n      function EmberRenderer_scheduleRender(ctx, fn) {\n        return run.scheduleOnce('render', ctx, fn);\n      };\n\n    EmberRenderer.prototype.cancelRender =\n      function EmberRenderer_cancelRender(id) {\n        run.cancel(id);\n      };\n\n    EmberRenderer.prototype.createChildViewsMorph =\n      function EmberRenderer_createChildViewsMorph(view, _element) {\n        if (view.createChildViewsMorph) {\n          return view.createChildViewsMorph(_element);\n        }\n        var element = _element;\n        if (view.tagName === '') {\n          if (view._morph) {\n            view._childViewsMorph = view._morph;\n          } else {\n            element = document.createDocumentFragment();\n            view._childViewsMorph = this._dom.appendMorph(element);\n          }\n        } else {\n          view._childViewsMorph = this._dom.createMorph(element, element.lastChild, null);\n        }\n        return element;\n      };\n\n    EmberRenderer.prototype.createElement =\n      function EmberRenderer_createElement(view, contextualElement) {\n        // If this is the top-most view, start a new buffer. Otherwise,\n        // create a new buffer relative to the original using the\n        // provided buffer operation (for example, `insertAfter` will\n        // insert a new buffer after the \"parent buffer\").\n        var tagName = view.tagName;\n        var classNameBindings = view.classNameBindings;\n        var taglessViewWithClassBindings = tagName === '' && classNameBindings.length > 0;\n\n        if (tagName === null || tagName === undefined) {\n          tagName = 'div';\n        }\n\n        Ember.assert('You cannot use `classNameBindings` on a tag-less view: ' + view.toString(), !taglessViewWithClassBindings);\n\n        var buffer = view.buffer = this.buffer;\n        buffer.reset(tagName, contextualElement);\n\n        if (view.beforeRender) {\n          view.beforeRender(buffer);\n        }\n\n        if (tagName !== '') {\n          if (view.applyAttributesToBuffer) {\n            view.applyAttributesToBuffer(buffer);\n          }\n          buffer.generateElement();\n        }\n\n        if (view.render) {\n          view.render(buffer);\n        }\n\n        if (view.afterRender) {\n          view.afterRender(buffer);\n        }\n\n        var element = buffer.element();\n\n        if (view.isContainer) {\n          this.createChildViewsMorph(view, element);\n        }\n\n        view.buffer = null;\n        if (element && element.nodeType === 1) {\n          // We have hooks, we shouldn't make element observable\n          // consider just doing view.element = element\n          set(view, 'element', element);\n        }\n        return element;\n      };\n\n    EmberRenderer.prototype.destroyView = function destroyView(view) {\n      view.removedFromDOM = true;\n      view.destroy();\n    };\n\n    EmberRenderer.prototype.childViews = function childViews(view) {\n      return view._childViews;\n    };\n\n    Renderer.prototype.willCreateElement = function (view) {\n      if (subscribers.length && view.instrumentDetails) {\n        view._instrumentEnd = _instrumentStart('render.'+view.instrumentName, function viewInstrumentDetails() {\n          var details = {};\n          view.instrumentDetails(details);\n          return details;\n        });\n      }\n      if (view._transitionTo) {\n        view._transitionTo('inBuffer');\n      }\n    }; // inBuffer\n    Renderer.prototype.didCreateElement = function (view) {\n      if (view._transitionTo) {\n        view._transitionTo('hasElement');\n      }\n      if (view._instrumentEnd) {\n        view._instrumentEnd();\n      }\n    }; // hasElement\n    Renderer.prototype.willInsertElement = function (view) {\n      if (view.trigger) { view.trigger('willInsertElement'); }\n    }; // will place into DOM\n    Renderer.prototype.didInsertElement = function (view) {\n      if (view._transitionTo) {\n        view._transitionTo('inDOM');\n      }\n      if (view.trigger) { view.trigger('didInsertElement'); }\n    }; // inDOM // placed into DOM\n\n    Renderer.prototype.willRemoveElement = function (view) {};\n\n    Renderer.prototype.willDestroyElement = function (view) {\n      if (view.trigger) { view.trigger('willDestroyElement'); }\n      if (view.trigger) { view.trigger('willClearRender'); }\n    };\n\n    Renderer.prototype.didDestroyElement = function (view) {\n      set(view, 'element', null);\n      if (view._transitionTo) {\n        view._transitionTo('preRender');\n      }\n    }; // element destroyed so view.destroy shouldn't try to remove it removedFromDOM\n\n    __exports__[\"default\"] = EmberRenderer;\n  });\nenifed(\"ember-views/system/utils\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n    @module ember\n    @submodule ember-views\n    */\n\n    function isSimpleClick(event) {\n      var modifier = event.shiftKey || event.metaKey || event.altKey || event.ctrlKey;\n      var secondaryClick = event.which > 1; // IE9 may return undefined\n\n      return !modifier && !secondaryClick;\n    }\n\n    __exports__.isSimpleClick = isSimpleClick;\n  });\nenifed(\"ember-views/views/collection_view\",\n  [\"ember-metal/core\",\"ember-metal/platform\",\"ember-metal/binding\",\"ember-metal/merge\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-runtime/system/string\",\"ember-views/views/container_view\",\"ember-views/views/core_view\",\"ember-views/views/view\",\"ember-metal/mixin\",\"ember-handlebars/ext\",\"ember-runtime/mixins/array\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __exports__) {\n    \"use strict\";\n\n    /**\n    @module ember\n    @submodule ember-views\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert\n    var create = __dependency2__.create;\n    var isGlobalPath = __dependency3__.isGlobalPath;\n    var merge = __dependency4__[\"default\"];\n    var get = __dependency5__.get;\n    var set = __dependency6__.set;\n    var fmt = __dependency7__.fmt;\n    var ContainerView = __dependency8__[\"default\"];\n    var CoreView = __dependency9__[\"default\"];\n    var View = __dependency10__[\"default\"];\n    var observer = __dependency11__.observer;\n    var beforeObserver = __dependency11__.beforeObserver;\n    var handlebarsGetView = __dependency12__.handlebarsGetView;\n    var EmberArray = __dependency13__[\"default\"];\n\n    /**\n      `Ember.CollectionView` is an `Ember.View` descendent responsible for managing\n      a collection (an array or array-like object) by maintaining a child view object\n      and associated DOM representation for each item in the array and ensuring\n      that child views and their associated rendered HTML are updated when items in\n      the array are added, removed, or replaced.\n\n      ## Setting content\n\n      The managed collection of objects is referenced as the `Ember.CollectionView`\n      instance's `content` property.\n\n      ```javascript\n      someItemsView = Ember.CollectionView.create({\n        content: ['A', 'B','C']\n      })\n      ```\n\n      The view for each item in the collection will have its `content` property set\n      to the item.\n\n      ## Specifying `itemViewClass`\n\n      By default the view class for each item in the managed collection will be an\n      instance of `Ember.View`. You can supply a different class by setting the\n      `CollectionView`'s `itemViewClass` property.\n\n      Given the following application code:\n\n      ```javascript\n      var App = Ember.Application.create();\n      App.ItemListView = Ember.CollectionView.extend({\n        classNames: ['a-collection'],\n        content: ['A','B','C'],\n        itemViewClass: Ember.View.extend({\n          template: Ember.Handlebars.compile(\"the letter: {{view.content}}\")\n        })\n      });\n      ```\n\n      And a simple application template:\n\n      ```handlebars\n      {{view 'item-list'}}\n      ```\n\n      The following HTML will result:\n\n      ```html\n      <div class=\"ember-view a-collection\">\n        <div class=\"ember-view\">the letter: A</div>\n        <div class=\"ember-view\">the letter: B</div>\n        <div class=\"ember-view\">the letter: C</div>\n      </div>\n      ```\n\n      ## Automatic matching of parent/child tagNames\n\n      Setting the `tagName` property of a `CollectionView` to any of\n      \"ul\", \"ol\", \"table\", \"thead\", \"tbody\", \"tfoot\", \"tr\", or \"select\" will result\n      in the item views receiving an appropriately matched `tagName` property.\n\n      Given the following application code:\n\n      ```javascript\n      var App = Ember.Application.create();\n      App.UnorderedListView = Ember.CollectionView.create({\n        tagName: 'ul',\n        content: ['A','B','C'],\n        itemViewClass: Ember.View.extend({\n          template: Ember.Handlebars.compile(\"the letter: {{view.content}}\")\n        })\n      });\n      ```\n\n      And a simple application template:\n\n      ```handlebars\n      {{view 'unordered-list-view'}}\n      ```\n\n      The following HTML will result:\n\n      ```html\n      <ul class=\"ember-view a-collection\">\n        <li class=\"ember-view\">the letter: A</li>\n        <li class=\"ember-view\">the letter: B</li>\n        <li class=\"ember-view\">the letter: C</li>\n      </ul>\n      ```\n\n      Additional `tagName` pairs can be provided by adding to\n      `Ember.CollectionView.CONTAINER_MAP`. For example:\n\n      ```javascript\n      Ember.CollectionView.CONTAINER_MAP['article'] = 'section'\n      ```\n\n      ## Programmatic creation of child views\n\n      For cases where additional customization beyond the use of a single\n      `itemViewClass` or `tagName` matching is required CollectionView's\n      `createChildView` method can be overidden:\n\n      ```javascript\n      App.CustomCollectionView = Ember.CollectionView.extend({\n        createChildView: function(viewClass, attrs) {\n          if (attrs.content.kind == 'album') {\n            viewClass = App.AlbumView;\n          } else {\n            viewClass = App.SongView;\n          }\n          return this._super(viewClass, attrs);\n        }\n      });\n      ```\n\n      ## Empty View\n\n      You can provide an `Ember.View` subclass to the `Ember.CollectionView`\n      instance as its `emptyView` property. If the `content` property of a\n      `CollectionView` is set to `null` or an empty array, an instance of this view\n      will be the `CollectionView`s only child.\n\n      ```javascript\n      var App = Ember.Application.create();\n      App.ListWithNothing = Ember.CollectionView.create({\n        classNames: ['nothing'],\n        content: null,\n        emptyView: Ember.View.extend({\n          template: Ember.Handlebars.compile(\"The collection is empty\")\n        })\n      });\n      ```\n\n      And a simple application template:\n\n      ```handlebars\n      {{view 'list-with-nothing'}}\n      ```\n\n      The following HTML will result:\n\n      ```html\n      <div class=\"ember-view nothing\">\n        <div class=\"ember-view\">\n          The collection is empty\n        </div>\n      </div>\n      ```\n\n      ## Adding and Removing items\n\n      The `childViews` property of a `CollectionView` should not be directly\n      manipulated. Instead, add, remove, replace items from its `content` property.\n      This will trigger appropriate changes to its rendered HTML.\n\n\n      @class CollectionView\n      @namespace Ember\n      @extends Ember.ContainerView\n      @since Ember 0.9\n    */\n    var CollectionView = ContainerView.extend({\n\n      /**\n        A list of items to be displayed by the `Ember.CollectionView`.\n\n        @property content\n        @type Ember.Array\n        @default null\n      */\n      content: null,\n\n      /**\n        This provides metadata about what kind of empty view class this\n        collection would like if it is being instantiated from another\n        system (like Handlebars)\n\n        @private\n        @property emptyViewClass\n      */\n      emptyViewClass: View,\n\n      /**\n        An optional view to display if content is set to an empty array.\n\n        @property emptyView\n        @type Ember.View\n        @default null\n      */\n      emptyView: null,\n\n      /**\n        @property itemViewClass\n        @type Ember.View\n        @default Ember.View\n      */\n      itemViewClass: View,\n\n      /**\n        Setup a CollectionView\n\n        @method init\n      */\n      init: function() {\n        var ret = this._super();\n        this._contentDidChange();\n        return ret;\n      },\n\n      /**\n        Invoked when the content property is about to change. Notifies observers that the\n        entire array content will change.\n\n        @private\n        @method _contentWillChange\n      */\n      _contentWillChange: beforeObserver('content', function() {\n        var content = this.get('content');\n\n        if (content) { content.removeArrayObserver(this); }\n        var len = content ? get(content, 'length') : 0;\n        this.arrayWillChange(content, 0, len);\n      }),\n\n      /**\n        Check to make sure that the content has changed, and if so,\n        update the children directly. This is always scheduled\n        asynchronously, to allow the element to be created before\n        bindings have synchronized and vice versa.\n\n        @private\n        @method _contentDidChange\n      */\n      _contentDidChange: observer('content', function() {\n        var content = get(this, 'content');\n\n        if (content) {\n          this._assertArrayLike(content);\n          content.addArrayObserver(this);\n        }\n\n        var len = content ? get(content, 'length') : 0;\n        this.arrayDidChange(content, 0, null, len);\n      }),\n\n      /**\n        Ensure that the content implements Ember.Array\n\n        @private\n        @method _assertArrayLike\n      */\n      _assertArrayLike: function(content) {\n        Ember.assert(fmt(\"an Ember.CollectionView's content must implement Ember.Array. You passed %@\", [content]), EmberArray.detect(content));\n      },\n\n      /**\n        Removes the content and content observers.\n\n        @method destroy\n      */\n      destroy: function() {\n        if (!this._super()) { return; }\n\n        var content = get(this, 'content');\n        if (content) { content.removeArrayObserver(this); }\n\n        if (this._createdEmptyView) {\n          this._createdEmptyView.destroy();\n        }\n\n        return this;\n      },\n\n      /**\n        Called when a mutation to the underlying content array will occur.\n\n        This method will remove any views that are no longer in the underlying\n        content array.\n\n        Invokes whenever the content array itself will change.\n\n        @method arrayWillChange\n        @param {Array} content the managed collection of objects\n        @param {Number} start the index at which the changes will occurr\n        @param {Number} removed number of object to be removed from content\n      */\n      arrayWillChange: function(content, start, removedCount) {\n        // If the contents were empty before and this template collection has an\n        // empty view remove it now.\n        var emptyView = get(this, 'emptyView');\n        if (emptyView && emptyView instanceof View) {\n          emptyView.removeFromParent();\n        }\n\n        // Loop through child views that correspond with the removed items.\n        // Note that we loop from the end of the array to the beginning because\n        // we are mutating it as we go.\n        var childViews = this._childViews;\n        var childView, idx;\n\n        for (idx = start + removedCount - 1; idx >= start; idx--) {\n          childView = childViews[idx];\n          childView.destroy();\n        }\n      },\n\n      /**\n        Called when a mutation to the underlying content array occurs.\n\n        This method will replay that mutation against the views that compose the\n        `Ember.CollectionView`, ensuring that the view reflects the model.\n\n        This array observer is added in `contentDidChange`.\n\n        @method arrayDidChange\n        @param {Array} content the managed collection of objects\n        @param {Number} start the index at which the changes occurred\n        @param {Number} removed number of object removed from content\n        @param {Number} added number of object added to content\n      */\n      arrayDidChange: function(content, start, removed, added) {\n        var addedViews = [];\n        var view, item, idx, len, itemViewClass, emptyView;\n\n        len = content ? get(content, 'length') : 0;\n\n        if (len) {\n          itemViewClass = get(this, 'itemViewClass');\n          itemViewClass = handlebarsGetView(content, itemViewClass, this.container);\n\n          for (idx = start; idx < start+added; idx++) {\n            item = content.objectAt(idx);\n\n            view = this.createChildView(itemViewClass, {\n              content: item,\n              contentIndex: idx\n            });\n\n            addedViews.push(view);\n          }\n        } else {\n          emptyView = get(this, 'emptyView');\n\n          if (!emptyView) { return; }\n\n          if ('string' === typeof emptyView && isGlobalPath(emptyView)) {\n            emptyView = get(emptyView) || emptyView;\n          }\n\n          emptyView = this.createChildView(emptyView);\n          addedViews.push(emptyView);\n          set(this, 'emptyView', emptyView);\n\n          if (CoreView.detect(emptyView)) {\n            this._createdEmptyView = emptyView;\n          }\n        }\n\n        this.replace(start, 0, addedViews);\n      },\n\n      /**\n        Instantiates a view to be added to the childViews array during view\n        initialization. You generally will not call this method directly unless\n        you are overriding `createChildViews()`. Note that this method will\n        automatically configure the correct settings on the new view instance to\n        act as a child of the parent.\n\n        The tag name for the view will be set to the tagName of the viewClass\n        passed in.\n\n        @method createChildView\n        @param {Class} viewClass\n        @param {Hash} [attrs] Attributes to add\n        @return {Ember.View} new instance\n      */\n      createChildView: function(view, attrs) {\n        view = this._super(view, attrs);\n\n        var itemTagName = get(view, 'tagName');\n\n        if (itemTagName === null || itemTagName === undefined) {\n          itemTagName = CollectionView.CONTAINER_MAP[get(this, 'tagName')];\n          set(view, 'tagName', itemTagName);\n        }\n\n        return view;\n      }\n    });\n\n    /**\n      A map of parent tags to their default child tags. You can add\n      additional parent tags if you want collection views that use\n      a particular parent tag to default to a child tag.\n\n      @property CONTAINER_MAP\n      @type Hash\n      @static\n      @final\n    */\n    CollectionView.CONTAINER_MAP = {\n      ul: 'li',\n      ol: 'li',\n      table: 'tr',\n      thead: 'tr',\n      tbody: 'tr',\n      tfoot: 'tr',\n      tr: 'td',\n      select: 'option'\n    };\n\n    __exports__[\"default\"] = CollectionView;\n  });\nenifed(\"ember-views/views/component\",\n  [\"ember-metal/core\",\"ember-views/mixins/component_template_deprecation\",\"ember-runtime/mixins/target_action_support\",\"ember-views/views/view\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/is_none\",\"ember-metal/computed\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert, Ember.Handlebars\n\n    var ComponentTemplateDeprecation = __dependency2__[\"default\"];\n    var TargetActionSupport = __dependency3__[\"default\"];\n    var View = __dependency4__[\"default\"];\n\n    var get = __dependency5__.get;\n    var set = __dependency6__.set;\n    var isNone = __dependency7__.isNone;\n\n    var computed = __dependency8__.computed;\n\n    var a_slice = Array.prototype.slice;\n\n    /**\n    @module ember\n    @submodule ember-views\n    */\n\n    /**\n      An `Ember.Component` is a view that is completely\n      isolated. Property access in its templates go\n      to the view object and actions are targeted at\n      the view object. There is no access to the\n      surrounding context or outer controller; all\n      contextual information must be passed in.\n\n      The easiest way to create an `Ember.Component` is via\n      a template. If you name a template\n      `components/my-foo`, you will be able to use\n      `{{my-foo}}` in other templates, which will make\n      an instance of the isolated component.\n\n      ```handlebars\n      {{app-profile person=currentUser}}\n      ```\n\n      ```handlebars\n      <!-- app-profile template -->\n      <h1>{{person.title}}</h1>\n      <img {{bind-attr src=person.avatar}}>\n      <p class='signature'>{{person.signature}}</p>\n      ```\n\n      You can use `yield` inside a template to\n      include the **contents** of any block attached to\n      the component. The block will be executed in the\n      context of the surrounding context or outer controller:\n\n      ```handlebars\n      {{#app-profile person=currentUser}}\n        <p>Admin mode</p>\n        {{! Executed in the controller's context. }}\n      {{/app-profile}}\n      ```\n\n      ```handlebars\n      <!-- app-profile template -->\n      <h1>{{person.title}}</h1>\n      {{! Executed in the components context. }}\n      {{yield}} {{! block contents }}\n      ```\n\n      If you want to customize the component, in order to\n      handle events or actions, you implement a subclass\n      of `Ember.Component` named after the name of the\n      component. Note that `Component` needs to be appended to the name of\n      your subclass like `AppProfileComponent`.\n\n      For example, you could implement the action\n      `hello` for the `app-profile` component:\n\n      ```javascript\n      App.AppProfileComponent = Ember.Component.extend({\n        actions: {\n          hello: function(name) {\n            console.log(\"Hello\", name);\n          }\n        }\n      });\n      ```\n\n      And then use it in the component's template:\n\n      ```handlebars\n      <!-- app-profile template -->\n\n      <h1>{{person.title}}</h1>\n      {{yield}} <!-- block contents -->\n\n      <button {{action 'hello' person.name}}>\n        Say Hello to {{person.name}}\n      </button>\n      ```\n\n      Components must have a `-` in their name to avoid\n      conflicts with built-in controls that wrap HTML\n      elements. This is consistent with the same\n      requirement in web components.\n\n      @class Component\n      @namespace Ember\n      @extends Ember.View\n    */\n    var Component = View.extend(TargetActionSupport, ComponentTemplateDeprecation, {\n      instrumentName: 'component',\n      instrumentDisplay: computed(function() {\n        if (this._debugContainerKey) {\n          return '{{' + this._debugContainerKey.split(':')[1] + '}}';\n        }\n      }),\n\n      init: function() {\n        this._super();\n        set(this, 'origContext', get(this, 'context'));\n        set(this, 'context', this);\n        set(this, 'controller', this);\n      },\n\n      defaultLayout: function(context, options){\n        Ember.Handlebars.helpers['yield'].call(context, options);\n      },\n\n      /**\n      A components template property is set by passing a block\n      during its invocation. It is executed within the parent context.\n\n      Example:\n\n      ```handlebars\n      {{#my-component}}\n        // something that is run in the context\n        // of the parent context\n      {{/my-component}}\n      ```\n\n      Specifying a template directly to a component is deprecated without\n      also specifying the layout property.\n\n      @deprecated\n      @property template\n      */\n      template: computed(function(key, value) {\n        if (value !== undefined) { return value; }\n\n        var templateName = get(this, 'templateName');\n        var template = this.templateForName(templateName, 'template');\n\n        Ember.assert(\"You specified the templateName \" + templateName + \" for \" + this + \", but it did not exist.\", !templateName || template);\n\n        return template || get(this, 'defaultTemplate');\n      }).property('templateName'),\n\n      /**\n      Specifying a components `templateName` is deprecated without also\n      providing the `layout` or `layoutName` properties.\n\n      @deprecated\n      @property templateName\n      */\n      templateName: null,\n\n      // during render, isolate keywords\n      cloneKeywords: function() {\n        return {\n          view: this,\n          controller: this\n        };\n      },\n\n      _yield: function(context, options) {\n        var view = options.data.view;\n        var parentView = this._parentView;\n        var template = get(this, 'template');\n\n        if (template) {\n          Ember.assert(\"A Component must have a parent view in order to yield.\", parentView);\n\n          view.appendChild(View, {\n            isVirtual: true,\n            tagName: '',\n            _contextView: parentView,\n            template: template,\n            context: options.data.insideGroup ? get(this, 'origContext') : get(parentView, 'context'),\n            controller: get(parentView, 'controller'),\n            templateData: { keywords: parentView.cloneKeywords(), insideGroup: options.data.insideGroup }\n          });\n        }\n      },\n\n      /**\n        If the component is currently inserted into the DOM of a parent view, this\n        property will point to the controller of the parent view.\n\n        @property targetObject\n        @type Ember.Controller\n        @default null\n      */\n      targetObject: computed(function(key) {\n        var parentView = get(this, '_parentView');\n        return parentView ? get(parentView, 'controller') : null;\n      }).property('_parentView'),\n\n      /**\n        Triggers a named action on the controller context where the component is used if\n        this controller has registered for notifications of the action.\n\n        For example a component for playing or pausing music may translate click events\n        into action notifications of \"play\" or \"stop\" depending on some internal state\n        of the component:\n\n\n        ```javascript\n        App.PlayButtonComponent = Ember.Component.extend({\n          click: function(){\n            if (this.get('isPlaying')) {\n              this.sendAction('play');\n            } else {\n              this.sendAction('stop');\n            }\n          }\n        });\n        ```\n\n        When used inside a template these component actions are configured to\n        trigger actions in the outer application context:\n\n        ```handlebars\n        {{! application.hbs }}\n        {{play-button play=\"musicStarted\" stop=\"musicStopped\"}}\n        ```\n\n        When the component receives a browser `click` event it translate this\n        interaction into application-specific semantics (\"play\" or \"stop\") and\n        triggers the specified action name on the controller for the template\n        where the component is used:\n\n\n        ```javascript\n        App.ApplicationController = Ember.Controller.extend({\n          actions: {\n            musicStarted: function(){\n              // called when the play button is clicked\n              // and the music started playing\n            },\n            musicStopped: function(){\n              // called when the play button is clicked\n              // and the music stopped playing\n            }\n          }\n        });\n        ```\n\n        If no action name is passed to `sendAction` a default name of \"action\"\n        is assumed.\n\n        ```javascript\n        App.NextButtonComponent = Ember.Component.extend({\n          click: function(){\n            this.sendAction();\n          }\n        });\n        ```\n\n        ```handlebars\n        {{! application.hbs }}\n        {{next-button action=\"playNextSongInAlbum\"}}\n        ```\n\n        ```javascript\n        App.ApplicationController = Ember.Controller.extend({\n          actions: {\n            playNextSongInAlbum: function(){\n              ...\n            }\n          }\n        });\n        ```\n\n        @method sendAction\n        @param [action] {String} the action to trigger\n        @param [context] {*} a context to send with the action\n      */\n      sendAction: function(action) {\n        var actionName;\n        var contexts = a_slice.call(arguments, 1);\n\n        // Send the default action\n        if (action === undefined) {\n          actionName = get(this, 'action');\n          Ember.assert(\"The default action was triggered on the component \" + this.toString() +\n                       \", but the action name (\" + actionName + \") was not a string.\",\n                       isNone(actionName) || typeof actionName === 'string');\n        } else {\n          actionName = get(this, action);\n          Ember.assert(\"The \" + action + \" action was triggered on the component \" +\n                       this.toString() + \", but the action name (\" + actionName +\n                       \") was not a string.\",\n                       isNone(actionName) || typeof actionName === 'string');\n        }\n\n        // If no action name for that action could be found, just abort.\n        if (actionName === undefined) { return; }\n\n        this.triggerAction({\n          action: actionName,\n          actionContext: contexts\n        });\n      }\n    });\n\n    __exports__[\"default\"] = Component;\n  });\nenifed(\"ember-views/views/container_view\",\n  [\"ember-metal/core\",\"ember-metal/merge\",\"ember-runtime/mixins/mutable_array\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-views/views/view\",\"ember-views/views/states\",\"ember-metal/error\",\"ember-metal/enumerable_utils\",\"ember-metal/computed\",\"ember-metal/run_loop\",\"ember-metal/properties\",\"ember-views/system/render_buffer\",\"ember-metal/mixin\",\"ember-runtime/system/native_array\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert, Ember.K\n\n    var merge = __dependency2__[\"default\"];\n    var MutableArray = __dependency3__[\"default\"];\n    var get = __dependency4__.get;\n    var set = __dependency5__.set;\n\n    var View = __dependency6__[\"default\"];\n\n    var cloneStates = __dependency7__.cloneStates;\n    var EmberViewStates = __dependency7__.states;\n\n    var EmberError = __dependency8__[\"default\"];\n\n    var forEach = __dependency9__.forEach;\n\n    var computed = __dependency10__.computed;\n    var run = __dependency11__[\"default\"];\n    var defineProperty = __dependency12__.defineProperty;\n    var renderBuffer = __dependency13__[\"default\"];\n    var observer = __dependency14__.observer;\n    var beforeObserver = __dependency14__.beforeObserver;\n    var emberA = __dependency15__.A;\n\n    /**\n    @module ember\n    @submodule ember-views\n    */\n\n    var states = cloneStates(EmberViewStates);\n\n    /**\n      A `ContainerView` is an `Ember.View` subclass that implements `Ember.MutableArray`\n      allowing programmatic management of its child views.\n\n      ## Setting Initial Child Views\n\n      The initial array of child views can be set in one of two ways. You can\n      provide a `childViews` property at creation time that contains instance of\n      `Ember.View`:\n\n      ```javascript\n      aContainer = Ember.ContainerView.create({\n        childViews: [Ember.View.create(), Ember.View.create()]\n      });\n      ```\n\n      You can also provide a list of property names whose values are instances of\n      `Ember.View`:\n\n      ```javascript\n      aContainer = Ember.ContainerView.create({\n        childViews: ['aView', 'bView', 'cView'],\n        aView: Ember.View.create(),\n        bView: Ember.View.create(),\n        cView: Ember.View.create()\n      });\n      ```\n\n      The two strategies can be combined:\n\n      ```javascript\n      aContainer = Ember.ContainerView.create({\n        childViews: ['aView', Ember.View.create()],\n        aView: Ember.View.create()\n      });\n      ```\n\n      Each child view's rendering will be inserted into the container's rendered\n      HTML in the same order as its position in the `childViews` property.\n\n      ## Adding and Removing Child Views\n\n      The container view implements `Ember.MutableArray` allowing programmatic management of its child views.\n\n      To remove a view, pass that view into a `removeObject` call on the container view.\n\n      Given an empty `<body>` the following code\n\n      ```javascript\n      aContainer = Ember.ContainerView.create({\n        classNames: ['the-container'],\n        childViews: ['aView', 'bView'],\n        aView: Ember.View.create({\n          template: Ember.Handlebars.compile(\"A\")\n        }),\n        bView: Ember.View.create({\n          template: Ember.Handlebars.compile(\"B\")\n        })\n      });\n\n      aContainer.appendTo('body');\n      ```\n\n      Results in the HTML\n\n      ```html\n      <div class=\"ember-view the-container\">\n        <div class=\"ember-view\">A</div>\n        <div class=\"ember-view\">B</div>\n      </div>\n      ```\n\n      Removing a view\n\n      ```javascript\n      aContainer.toArray();  // [aContainer.aView, aContainer.bView]\n      aContainer.removeObject(aContainer.get('bView'));\n      aContainer.toArray();  // [aContainer.aView]\n      ```\n\n      Will result in the following HTML\n\n      ```html\n      <div class=\"ember-view the-container\">\n        <div class=\"ember-view\">A</div>\n      </div>\n      ```\n\n      Similarly, adding a child view is accomplished by adding `Ember.View` instances to the\n      container view.\n\n      Given an empty `<body>` the following code\n\n      ```javascript\n      aContainer = Ember.ContainerView.create({\n        classNames: ['the-container'],\n        childViews: ['aView', 'bView'],\n        aView: Ember.View.create({\n          template: Ember.Handlebars.compile(\"A\")\n        }),\n        bView: Ember.View.create({\n          template: Ember.Handlebars.compile(\"B\")\n        })\n      });\n\n      aContainer.appendTo('body');\n      ```\n\n      Results in the HTML\n\n      ```html\n      <div class=\"ember-view the-container\">\n        <div class=\"ember-view\">A</div>\n        <div class=\"ember-view\">B</div>\n      </div>\n      ```\n\n      Adding a view\n\n      ```javascript\n      AnotherViewClass = Ember.View.extend({\n        template: Ember.Handlebars.compile(\"Another view\")\n      });\n\n      aContainer.toArray();  // [aContainer.aView, aContainer.bView]\n      aContainer.pushObject(AnotherViewClass.create());\n      aContainer.toArray(); // [aContainer.aView, aContainer.bView, <AnotherViewClass instance>]\n      ```\n\n      Will result in the following HTML\n\n      ```html\n      <div class=\"ember-view the-container\">\n        <div class=\"ember-view\">A</div>\n        <div class=\"ember-view\">B</div>\n        <div class=\"ember-view\">Another view</div>\n      </div>\n      ```\n\n      ## Templates and Layout\n\n      A `template`, `templateName`, `defaultTemplate`, `layout`, `layoutName` or\n      `defaultLayout` property on a container view will not result in the template\n      or layout being rendered. The HTML contents of a `Ember.ContainerView`'s DOM\n      representation will only be the rendered HTML of its child views.\n\n      @class ContainerView\n      @namespace Ember\n      @extends Ember.View\n    */\n    var ContainerView = View.extend(MutableArray, {\n      isContainer: true,\n      _states: states,\n\n      willWatchProperty: function(prop){\n        Ember.deprecate(\n          \"ContainerViews should not be observed as arrays. This behavior will change in future implementations of ContainerView.\",\n          !prop.match(/\\[]/) && prop.indexOf('@') !== 0\n        );\n      },\n\n      init: function() {\n        this._super();\n\n        var childViews = get(this, 'childViews');\n\n        // redefine view's childViews property that was obliterated\n        defineProperty(this, 'childViews', View.childViewsProperty);\n\n        var _childViews = this._childViews;\n\n        forEach(childViews, function(viewName, idx) {\n          var view;\n\n          if ('string' === typeof viewName) {\n            view = get(this, viewName);\n            view = this.createChildView(view);\n            set(this, viewName, view);\n          } else {\n            view = this.createChildView(viewName);\n          }\n\n          _childViews[idx] = view;\n        }, this);\n\n        var currentView = get(this, 'currentView');\n        if (currentView) {\n          if (!_childViews.length) { _childViews = this._childViews = this._childViews.slice(); }\n          _childViews.push(this.createChildView(currentView));\n        }\n      },\n\n      replace: function(idx, removedCount, addedViews) {\n        var addedCount = addedViews ? get(addedViews, 'length') : 0;\n        var self = this;\n        Ember.assert(\"You can't add a child to a container - the child is already a child of another view\", emberA(addedViews).every(function(item) { return !get(item, '_parentView') || get(item, '_parentView') === self; }));\n\n        this.arrayContentWillChange(idx, removedCount, addedCount);\n        this.childViewsWillChange(this._childViews, idx, removedCount);\n\n        if (addedCount === 0) {\n          this._childViews.splice(idx, removedCount) ;\n        } else {\n          var args = [idx, removedCount].concat(addedViews);\n          if (addedViews.length && !this._childViews.length) { this._childViews = this._childViews.slice(); }\n          this._childViews.splice.apply(this._childViews, args);\n        }\n\n        this.arrayContentDidChange(idx, removedCount, addedCount);\n        this.childViewsDidChange(this._childViews, idx, removedCount, addedCount);\n\n        return this;\n      },\n\n      objectAt: function(idx) {\n        return this._childViews[idx];\n      },\n\n      length: computed(function () {\n        return this._childViews.length;\n      })[\"volatile\"](),\n\n      /**\n        Instructs each child view to render to the passed render buffer.\n\n        @private\n        @method render\n        @param {Ember.RenderBuffer} buffer the buffer to render to\n      */\n      render: function(buffer) {\n      },\n\n      instrumentName: 'container',\n\n      /**\n        When a child view is removed, destroy its element so that\n        it is removed from the DOM.\n\n        The array observer that triggers this action is set up in the\n        `renderToBuffer` method.\n\n        @private\n        @method childViewsWillChange\n        @param {Ember.Array} views the child views array before mutation\n        @param {Number} start the start position of the mutation\n        @param {Number} removed the number of child views removed\n      **/\n      childViewsWillChange: function(views, start, removed) {\n        this.propertyWillChange('childViews');\n\n        if (removed > 0) {\n          var changedViews = views.slice(start, start+removed);\n          // transition to preRender before clearing parentView\n          this.currentState.childViewsWillChange(this, views, start, removed);\n          this.initializeViews(changedViews, null, null);\n        }\n      },\n\n      removeChild: function(child) {\n        this.removeObject(child);\n        return this;\n      },\n\n      /**\n        When a child view is added, make sure the DOM gets updated appropriately.\n\n        If the view has already rendered an element, we tell the child view to\n        create an element and insert it into the DOM. If the enclosing container\n        view has already written to a buffer, but not yet converted that buffer\n        into an element, we insert the string representation of the child into the\n        appropriate place in the buffer.\n\n        @private\n        @method childViewsDidChange\n        @param {Ember.Array} views the array of child views after the mutation has occurred\n        @param {Number} start the start position of the mutation\n        @param {Number} removed the number of child views removed\n        @param {Number} added the number of child views added\n      */\n      childViewsDidChange: function(views, start, removed, added) {\n        if (added > 0) {\n          var changedViews = views.slice(start, start+added);\n          this.initializeViews(changedViews, this, get(this, 'templateData'));\n          this.currentState.childViewsDidChange(this, views, start, added);\n        }\n        this.propertyDidChange('childViews');\n      },\n\n      initializeViews: function(views, parentView, templateData) {\n        forEach(views, function(view) {\n          set(view, '_parentView', parentView);\n\n          if (!view.container && parentView) {\n            set(view, 'container', parentView.container);\n          }\n\n          if (!get(view, 'templateData')) {\n            set(view, 'templateData', templateData);\n          }\n        });\n      },\n\n      currentView: null,\n\n      _currentViewWillChange: beforeObserver('currentView', function() {\n        var currentView = get(this, 'currentView');\n        if (currentView) {\n          currentView.destroy();\n        }\n      }),\n\n      _currentViewDidChange: observer('currentView', function() {\n        var currentView = get(this, 'currentView');\n        if (currentView) {\n          Ember.assert(\"You tried to set a current view that already has a parent. Make sure you don't have multiple outlets in the same view.\", !get(currentView, '_parentView'));\n          this.pushObject(currentView);\n        }\n      }),\n\n      _ensureChildrenAreInDOM: function () {\n        this.currentState.ensureChildrenAreInDOM(this);\n      }\n    });\n\n    merge(states._default, {\n      childViewsWillChange: Ember.K,\n      childViewsDidChange: Ember.K,\n      ensureChildrenAreInDOM: Ember.K\n    });\n\n    merge(states.inBuffer, {\n      childViewsDidChange: function(parentView, views, start, added) {\n        throw new EmberError('You cannot modify child views while in the inBuffer state');\n      }\n    });\n\n    merge(states.hasElement, {\n      childViewsWillChange: function(view, views, start, removed) {\n        for (var i=start; i<start+removed; i++) {\n          views[i].remove();\n        }\n      },\n\n      childViewsDidChange: function(view, views, start, added) {\n        run.scheduleOnce('render', view, '_ensureChildrenAreInDOM');\n      },\n\n      ensureChildrenAreInDOM: function(view) {\n        var childViews = view._childViews;\n        var renderer = view._renderer;\n\n        var i, len, childView;\n        for (i = 0, len = childViews.length; i < len; i++) {\n          childView = childViews[i];\n          if (!childView._elementCreated) {\n            renderer.renderTree(childView, view, i);\n          }\n        }\n      }\n    });\n\n    __exports__[\"default\"] = ContainerView;\n  });\nenifed(\"ember-views/views/core_view\",\n  [\"ember-views/system/renderer\",\"ember-views/views/states\",\"ember-runtime/system/object\",\"ember-runtime/mixins/evented\",\"ember-runtime/mixins/action_handler\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/computed\",\"ember-metal/utils\",\"ember-metal/instrumentation\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __exports__) {\n    \"use strict\";\n    var Rerender = __dependency1__[\"default\"];\n\n    var cloneStates = __dependency2__.cloneStates;\n    var states = __dependency2__.states;\n    var EmberObject = __dependency3__[\"default\"];\n    var Evented = __dependency4__[\"default\"];\n    var ActionHandler = __dependency5__[\"default\"];\n\n    var get = __dependency6__.get;\n    var set = __dependency7__.set;\n    var computed = __dependency8__.computed;\n\n    var typeOf = __dependency9__.typeOf;\n\n    var instrument = __dependency10__.instrument;\n\n    /**\n      `Ember.CoreView` is an abstract class that exists to give view-like behavior\n      to both Ember's main view class `Ember.View` and other classes like\n      `Ember._SimpleMetamorphView` that don't need the fully functionaltiy of\n      `Ember.View`.\n\n      Unless you have specific needs for `CoreView`, you will use `Ember.View`\n      in your applications.\n\n      @class CoreView\n      @namespace Ember\n      @extends Ember.Object\n      @uses Ember.Evented\n      @uses Ember.ActionHandler\n    */\n    var CoreView = EmberObject.extend(Evented, ActionHandler, {\n      isView: true,\n      isVirtual: false,\n      isContainer: false,\n\n      _states: cloneStates(states),\n\n      init: function() {\n        this._super();\n        this._transitionTo('preRender');\n        this._isVisible = get(this, 'isVisible');\n      },\n\n      /**\n        If the view is currently inserted into the DOM of a parent view, this\n        property will point to the parent of the view.\n\n        @property parentView\n        @type Ember.View\n        @default null\n      */\n      parentView: computed('_parentView', function() {\n        var parent = this._parentView;\n\n        if (parent && parent.isVirtual) {\n          return get(parent, 'parentView');\n        } else {\n          return parent;\n        }\n      }),\n\n      _state: null,\n\n      _parentView: null,\n\n      // return the current view, not including virtual views\n      concreteView: computed('parentView', function() {\n        if (!this.isVirtual) { return this; }\n        else { return get(this, 'parentView.concreteView'); }\n      }),\n\n      instrumentName: 'core_view',\n\n      instrumentDetails: function(hash) {\n        hash.object = this.toString();\n        hash.containerKey = this._debugContainerKey;\n        hash.view = this;\n      },\n\n      /**\n        Override the default event firing from `Ember.Evented` to\n        also call methods with the given name.\n\n        @method trigger\n        @param name {String}\n        @private\n      */\n      trigger: function() {\n        this._super.apply(this, arguments);\n        var name = arguments[0];\n        var method = this[name];\n        if (method) {\n          var length = arguments.length;\n          var args = new Array(length - 1);\n          for (var i = 1; i < length; i++) {\n            args[i - 1] = arguments[i];\n          }\n          return method.apply(this, args);\n        }\n      },\n\n      has: function(name) {\n        return typeOf(this[name]) === 'function' || this._super(name);\n      },\n\n      destroy: function() {\n        var parent = this._parentView;\n\n        if (!this._super()) { return; }\n\n\n        // destroy the element -- this will avoid each child view destroying\n        // the element over and over again...\n        if (!this.removedFromDOM && this._renderer) {\n          this._renderer.remove(this, true);\n        }\n\n        // remove from parent if found. Don't call removeFromParent,\n        // as removeFromParent will try to remove the element from\n        // the DOM again.\n        if (parent) { parent.removeChild(this); }\n\n        this._transitionTo('destroying', false);\n\n        return this;\n      },\n\n      clearRenderedChildren: Ember.K,\n      _transitionTo: Ember.K,\n      destroyElement: Ember.K\n    });\n\n    CoreView.reopenClass({\n      renderer: new Rerender()\n    });\n\n    __exports__[\"default\"] = CoreView;\n  });\nenifed(\"ember-views/views/states\",\n  [\"ember-metal/platform\",\"ember-metal/merge\",\"ember-views/views/states/default\",\"ember-views/views/states/pre_render\",\"ember-views/views/states/in_buffer\",\"ember-views/views/states/has_element\",\"ember-views/views/states/in_dom\",\"ember-views/views/states/destroying\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    var create = __dependency1__.create;\n    var merge = __dependency2__[\"default\"];\n    var _default = __dependency3__[\"default\"];\n    var preRender = __dependency4__[\"default\"];\n    var inBuffer = __dependency5__[\"default\"];\n    var hasElement = __dependency6__[\"default\"];\n    var inDOM = __dependency7__[\"default\"];\n    var destroying = __dependency8__[\"default\"];\n\n    function cloneStates(from) {\n      var into = {};\n\n      into._default = {};\n      into.preRender = create(into._default);\n      into.destroying = create(into._default);\n      into.inBuffer = create(into._default);\n      into.hasElement = create(into._default);\n      into.inDOM = create(into.hasElement);\n\n      for (var stateName in from) {\n        if (!from.hasOwnProperty(stateName)) { continue; }\n        merge(into[stateName], from[stateName]);\n      }\n\n      return into;\n    }\n\n    __exports__.cloneStates = cloneStates;var states = {\n      _default: _default,\n      preRender: preRender,\n      inDOM: inDOM,\n      inBuffer: inBuffer,\n      hasElement: hasElement,\n      destroying: destroying\n    };\n    __exports__.states = states;\n  });\nenifed(\"ember-views/views/states/default\",\n  [\"ember-metal/core\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/run_loop\",\"ember-metal/error\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.K\n    var get = __dependency2__.get;\n    var set = __dependency3__.set;\n    var run = __dependency4__[\"default\"];\n    var EmberError = __dependency5__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-views\n    */\n    __exports__[\"default\"] = {\n      // appendChild is only legal while rendering the buffer.\n      appendChild: function() {\n        throw new EmberError(\"You can't use appendChild outside of the rendering process\");\n      },\n\n      $: function() {\n        return undefined;\n      },\n\n      getElement: function() {\n        return null;\n      },\n\n      // Handle events from `Ember.EventDispatcher`\n      handleEvent: function() {\n        return true; // continue event propagation\n      },\n\n      destroyElement: function(view) {\n        if (view._renderer)\n          view._renderer.remove(view, false);\n        return view;\n      },\n\n      rerender: Ember.K,\n      invokeObserver: Ember.K\n    };\n  });\nenifed(\"ember-views/views/states/destroying\",\n  [\"ember-metal/merge\",\"ember-metal/platform\",\"ember-runtime/system/string\",\"ember-views/views/states/default\",\"ember-metal/error\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var merge = __dependency1__[\"default\"];\n    var create = __dependency2__.create;\n    var fmt = __dependency3__.fmt;\n    var _default = __dependency4__[\"default\"];\n    var EmberError = __dependency5__[\"default\"];\n    /**\n    @module ember\n    @submodule ember-views\n    */\n\n    var destroyingError = \"You can't call %@ on a view being destroyed\";\n\n    var destroying = create(_default);\n\n    merge(destroying, {\n      appendChild: function() {\n        throw new EmberError(fmt(destroyingError, ['appendChild']));\n      },\n      rerender: function() {\n        throw new EmberError(fmt(destroyingError, ['rerender']));\n      },\n      destroyElement: function() {\n        throw new EmberError(fmt(destroyingError, ['destroyElement']));\n      }\n    });\n\n    __exports__[\"default\"] = destroying;\n  });\nenifed(\"ember-views/views/states/has_element\",\n  [\"ember-views/views/states/default\",\"ember-metal/run_loop\",\"ember-metal/merge\",\"ember-metal/platform\",\"ember-views/system/jquery\",\"ember-metal/error\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    var _default = __dependency1__[\"default\"];\n    var run = __dependency2__[\"default\"];\n    var merge = __dependency3__[\"default\"];\n    var create = __dependency4__.create;\n    var jQuery = __dependency5__[\"default\"];\n    var EmberError = __dependency6__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-views\n    */\n\n    var get = __dependency7__.get;\n    var set = __dependency8__.set;\n\n    var hasElement = create(_default);\n\n    merge(hasElement, {\n      $: function(view, sel) {\n        var elem = view.get('concreteView').element;\n        return sel ? jQuery(sel, elem) : jQuery(elem);\n      },\n\n      getElement: function(view) {\n        var parent = get(view, 'parentView');\n        if (parent) { parent = get(parent, 'element'); }\n        if (parent) { return view.findElementInParentElement(parent); }\n        return jQuery(\"#\" + get(view, 'elementId'))[0];\n      },\n\n      // once the view has been inserted into the DOM, rerendering is\n      // deferred to allow bindings to synchronize.\n      rerender: function(view) {\n        if (view._root._morph && !view._elementInserted) {\n          throw new EmberError(\"Something you did caused a view to re-render after it rendered but before it was inserted into the DOM.\");\n        }\n        // TODO: should be scheduled with renderer\n        run.scheduleOnce('render', function () {\n          if (view.isDestroying) return;\n          view._renderer.renderTree(view, view._parentView);\n        });\n      },\n\n      // once the view is already in the DOM, destroying it removes it\n      // from the DOM, nukes its element, and puts it back into the\n      // preRender state if inDOM.\n\n      destroyElement: function(view) {\n        view._renderer.remove(view, false);\n        return view;\n      },\n\n      // Handle events from `Ember.EventDispatcher`\n      handleEvent: function(view, eventName, evt) {\n        if (view.has(eventName)) {\n          // Handler should be able to re-dispatch events, so we don't\n          // preventDefault or stopPropagation.\n          return view.trigger(eventName, evt);\n        } else {\n          return true; // continue event propagation\n        }\n      },\n\n      invokeObserver: function(target, observer) {\n        observer.call(target);\n      }\n    });\n\n    __exports__[\"default\"] = hasElement;\n  });\nenifed(\"ember-views/views/states/in_buffer\",\n  [\"ember-views/views/states/default\",\"ember-metal/error\",\"ember-metal/core\",\"ember-metal/platform\",\"ember-metal/merge\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var _default = __dependency1__[\"default\"];\n    var EmberError = __dependency2__[\"default\"];\n\n    var Ember = __dependency3__[\"default\"];\n    // Ember.assert\n    var create = __dependency4__.create;\n    var merge = __dependency5__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-views\n    */\n\n    var inBuffer = create(_default);\n\n    merge(inBuffer, {\n      $: function(view, sel) {\n        // if we don't have an element yet, someone calling this.$() is\n        // trying to update an element that isn't in the DOM. Instead,\n        // rerender the view to allow the render method to reflect the\n        // changes.\n        view.rerender();\n        return Ember.$();\n      },\n\n      // when a view is rendered in a buffer, rerendering it simply\n      // replaces the existing buffer with a new one\n      rerender: function(view) {\n        throw new EmberError(\"Something you did caused a view to re-render after it rendered but before it was inserted into the DOM.\");\n      },\n\n      // when a view is rendered in a buffer, appending a child\n      // view will render that view and append the resulting\n      // buffer into its buffer.\n      appendChild: function(view, childView, options) {\n        var buffer = view.buffer;\n        var _childViews = view._childViews;\n\n        childView = view.createChildView(childView, options);\n        if (!_childViews.length) { _childViews = view._childViews = _childViews.slice(); }\n        _childViews.push(childView);\n\n        if (!childView._morph) {\n          buffer.pushChildView(childView);\n        }\n\n        view.propertyDidChange('childViews');\n\n        return childView;\n      },\n\n      invokeObserver: function(target, observer) {\n        observer.call(target);\n      }\n    });\n\n    __exports__[\"default\"] = inBuffer;\n  });\nenifed(\"ember-views/views/states/in_dom\",\n  [\"ember-metal/core\",\"ember-metal/platform\",\"ember-metal/merge\",\"ember-metal/error\",\"ember-views/views/states/has_element\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // Ember.assert\n    var create = __dependency2__.create;\n    var merge = __dependency3__[\"default\"];\n    var EmberError = __dependency4__[\"default\"];\n\n    var hasElement = __dependency5__[\"default\"];\n    /**\n    @module ember\n    @submodule ember-views\n    */\n\n    var inDOM = create(hasElement);\n\n    var View;\n\n    merge(inDOM, {\n      enter: function(view) {\n        if (!View) { View = requireModule('ember-views/views/view')[\"default\"]; } // ES6TODO: this sucks. Have to avoid cycles...\n\n        // Register the view for event handling. This hash is used by\n        // Ember.EventDispatcher to dispatch incoming events.\n        if (!view.isVirtual) {\n          Ember.assert(\"Attempted to register a view with an id already in use: \"+view.elementId, !View.views[view.elementId]);\n          View.views[view.elementId] = view;\n        }\n\n        view.addBeforeObserver('elementId', function() {\n          throw new EmberError(\"Changing a view's elementId after creation is not allowed\");\n        });\n      },\n\n      exit: function(view) {\n        if (!View) { View = requireModule('ember-views/views/view')[\"default\"]; } // ES6TODO: this sucks. Have to avoid cycles...\n\n        if (!this.isVirtual) delete View.views[view.elementId];\n      }\n    });\n\n    __exports__[\"default\"] = inDOM;\n  });\nenifed(\"ember-views/views/states/pre_render\",\n  [\"ember-views/views/states/default\",\"ember-metal/platform\",\"ember-metal/merge\",\"ember-views/system/jquery\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var _default = __dependency1__[\"default\"];\n    var create = __dependency2__.create;\n    var merge = __dependency3__[\"default\"];\n    var jQuery = __dependency4__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-views\n    */\n    var preRender = create(_default);\n\n    __exports__[\"default\"] = preRender;\n  });\nenifed(\"ember-views/views/view\",\n  [\"ember-metal/core\",\"ember-runtime/mixins/evented\",\"ember-runtime/system/object\",\"ember-metal/error\",\"ember-metal/property_get\",\"ember-metal/property_set\",\"ember-metal/set_properties\",\"ember-metal/run_loop\",\"ember-metal/observer\",\"ember-metal/properties\",\"ember-metal/utils\",\"ember-metal/computed\",\"ember-metal/mixin\",\"ember-metal/is_none\",\"ember-metal/deprecate_property\",\"ember-runtime/system/native_array\",\"ember-runtime/system/string\",\"ember-metal/enumerable_utils\",\"ember-runtime/copy\",\"ember-metal/binding\",\"ember-metal/property_events\",\"ember-views/system/jquery\",\"ember-views/system/ext\",\"ember-views/views/core_view\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __dependency16__, __dependency17__, __dependency18__, __dependency19__, __dependency20__, __dependency21__, __dependency22__, __dependency23__, __dependency24__, __exports__) {\n    \"use strict\";\n    // Ember.assert, Ember.deprecate, Ember.warn, Ember.TEMPLATES,\n    // Ember.K, jQuery, Ember.lookup,\n    // Ember.ContainerView circular dependency\n    // Ember.ENV\n    var Ember = __dependency1__[\"default\"];\n\n    var Evented = __dependency2__[\"default\"];\n    var EmberObject = __dependency3__[\"default\"];\n    var EmberError = __dependency4__[\"default\"];\n    var get = __dependency5__.get;\n    var set = __dependency6__.set;\n    var setProperties = __dependency7__[\"default\"];\n    var run = __dependency8__[\"default\"];\n    var addObserver = __dependency9__.addObserver;\n    var removeObserver = __dependency9__.removeObserver;\n\n    var defineProperty = __dependency10__.defineProperty;\n    var deprecateProperty = __dependency10__.deprecateProperty;\n    var guidFor = __dependency11__.guidFor;\n    var meta = __dependency11__.meta;\n    var computed = __dependency12__.computed;\n    var observer = __dependency13__.observer;\n\n    var typeOf = __dependency11__.typeOf;\n    var isArray = __dependency11__.isArray;\n    var isNone = __dependency14__.isNone;\n    var Mixin = __dependency13__.Mixin;\n    var deprecateProperty = __dependency15__.deprecateProperty;\n    var emberA = __dependency16__.A;\n\n    var dasherize = __dependency17__.dasherize;\n\n    // ES6TODO: functions on EnumerableUtils should get their own export\n    var forEach = __dependency18__.forEach;\n    var addObject = __dependency18__.addObject;\n    var removeObject = __dependency18__.removeObject;\n\n    var beforeObserver = __dependency13__.beforeObserver;\n    var copy = __dependency19__[\"default\"];\n    var isGlobalPath = __dependency20__.isGlobalPath;\n\n    var propertyWillChange = __dependency21__.propertyWillChange;\n    var propertyDidChange = __dependency21__.propertyDidChange;\n\n    var jQuery = __dependency22__[\"default\"];\n     // for the side effect of extending Ember.run.queues\n\n    var CoreView = __dependency24__[\"default\"];\n\n    /**\n    @module ember\n    @submodule ember-views\n    */\n    var childViewsProperty = computed(function() {\n      var childViews = this._childViews;\n      var ret = emberA();\n      var view = this;\n\n      forEach(childViews, function(view) {\n        var currentChildViews;\n        if (view.isVirtual) {\n          if (currentChildViews = get(view, 'childViews')) {\n            ret.pushObjects(currentChildViews);\n          }\n        } else {\n          ret.push(view);\n        }\n      });\n\n      ret.replace = function (idx, removedCount, addedViews) {\n        throw new EmberError(\"childViews is immutable\");\n      };\n\n      return ret;\n    });\n\n    Ember.warn(\"The VIEW_PRESERVES_CONTEXT flag has been removed and the functionality can no longer be disabled.\", Ember.ENV.VIEW_PRESERVES_CONTEXT !== false);\n\n    /**\n      Global hash of shared templates. This will automatically be populated\n      by the build tools so that you can store your Handlebars templates in\n      separate files that get loaded into JavaScript at buildtime.\n\n      @property TEMPLATES\n      @for Ember\n      @type Hash\n    */\n    Ember.TEMPLATES = {};\n\n    var EMPTY_ARRAY = [];\n\n    /**\n      `Ember.View` is the class in Ember responsible for encapsulating templates of\n      HTML content, combining templates with data to render as sections of a page's\n      DOM, and registering and responding to user-initiated events.\n\n      ## HTML Tag\n\n      The default HTML tag name used for a view's DOM representation is `div`. This\n      can be customized by setting the `tagName` property. The following view\n      class:\n\n      ```javascript\n      ParagraphView = Ember.View.extend({\n        tagName: 'em'\n      });\n      ```\n\n      Would result in instances with the following HTML:\n\n      ```html\n      <em id=\"ember1\" class=\"ember-view\"></em>\n      ```\n\n      ## HTML `class` Attribute\n\n      The HTML `class` attribute of a view's tag can be set by providing a\n      `classNames` property that is set to an array of strings:\n\n      ```javascript\n      MyView = Ember.View.extend({\n        classNames: ['my-class', 'my-other-class']\n      });\n      ```\n\n      Will result in view instances with an HTML representation of:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view my-class my-other-class\"></div>\n      ```\n\n      `class` attribute values can also be set by providing a `classNameBindings`\n      property set to an array of properties names for the view. The return value\n      of these properties will be added as part of the value for the view's `class`\n      attribute. These properties can be computed properties:\n\n      ```javascript\n      MyView = Ember.View.extend({\n        classNameBindings: ['propertyA', 'propertyB'],\n        propertyA: 'from-a',\n        propertyB: function() {\n          if (someLogic) { return 'from-b'; }\n        }.property()\n      });\n      ```\n\n      Will result in view instances with an HTML representation of:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view from-a from-b\"></div>\n      ```\n\n      If the value of a class name binding returns a boolean the property name\n      itself will be used as the class name if the property is true. The class name\n      will not be added if the value is `false` or `undefined`.\n\n      ```javascript\n      MyView = Ember.View.extend({\n        classNameBindings: ['hovered'],\n        hovered: true\n      });\n      ```\n\n      Will result in view instances with an HTML representation of:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view hovered\"></div>\n      ```\n\n      When using boolean class name bindings you can supply a string value other\n      than the property name for use as the `class` HTML attribute by appending the\n      preferred value after a \":\" character when defining the binding:\n\n      ```javascript\n      MyView = Ember.View.extend({\n        classNameBindings: ['awesome:so-very-cool'],\n        awesome: true\n      });\n      ```\n\n      Will result in view instances with an HTML representation of:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view so-very-cool\"></div>\n      ```\n\n      Boolean value class name bindings whose property names are in a\n      camelCase-style format will be converted to a dasherized format:\n\n      ```javascript\n      MyView = Ember.View.extend({\n        classNameBindings: ['isUrgent'],\n        isUrgent: true\n      });\n      ```\n\n      Will result in view instances with an HTML representation of:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view is-urgent\"></div>\n      ```\n\n      Class name bindings can also refer to object values that are found by\n      traversing a path relative to the view itself:\n\n      ```javascript\n      MyView = Ember.View.extend({\n        classNameBindings: ['messages.empty']\n        messages: Ember.Object.create({\n          empty: true\n        })\n      });\n      ```\n\n      Will result in view instances with an HTML representation of:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view empty\"></div>\n      ```\n\n      If you want to add a class name for a property which evaluates to true and\n      and a different class name if it evaluates to false, you can pass a binding\n      like this:\n\n      ```javascript\n      // Applies 'enabled' class when isEnabled is true and 'disabled' when isEnabled is false\n      Ember.View.extend({\n        classNameBindings: ['isEnabled:enabled:disabled']\n        isEnabled: true\n      });\n      ```\n\n      Will result in view instances with an HTML representation of:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view enabled\"></div>\n      ```\n\n      When isEnabled is `false`, the resulting HTML reprensentation looks like\n      this:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view disabled\"></div>\n      ```\n\n      This syntax offers the convenience to add a class if a property is `false`:\n\n      ```javascript\n      // Applies no class when isEnabled is true and class 'disabled' when isEnabled is false\n      Ember.View.extend({\n        classNameBindings: ['isEnabled::disabled']\n        isEnabled: true\n      });\n      ```\n\n      Will result in view instances with an HTML representation of:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view\"></div>\n      ```\n\n      When the `isEnabled` property on the view is set to `false`, it will result\n      in view instances with an HTML representation of:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view disabled\"></div>\n      ```\n\n      Updates to the the value of a class name binding will result in automatic\n      update of the  HTML `class` attribute in the view's rendered HTML\n      representation. If the value becomes `false` or `undefined` the class name\n      will be removed.\n\n      Both `classNames` and `classNameBindings` are concatenated properties. See\n      [Ember.Object](/api/classes/Ember.Object.html) documentation for more\n      information about concatenated properties.\n\n      ## HTML Attributes\n\n      The HTML attribute section of a view's tag can be set by providing an\n      `attributeBindings` property set to an array of property names on the view.\n      The return value of these properties will be used as the value of the view's\n      HTML associated attribute:\n\n      ```javascript\n      AnchorView = Ember.View.extend({\n        tagName: 'a',\n        attributeBindings: ['href'],\n        href: 'http://google.com'\n      });\n      ```\n\n      Will result in view instances with an HTML representation of:\n\n      ```html\n      <a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n      ```\n\n      One property can be mapped on to another by placing a \":\" between\n      the source property and the destination property:\n\n      ```javascript\n      AnchorView = Ember.View.extend({\n        tagName: 'a',\n        attributeBindings: ['url:href'],\n        url: 'http://google.com'\n      });\n      ```\n\n      Will result in view instances with an HTML representation of:\n\n      ```html\n      <a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n      ```\n\n      If the return value of an `attributeBindings` monitored property is a boolean\n      the property will follow HTML's pattern of repeating the attribute's name as\n      its value:\n\n      ```javascript\n      MyTextInput = Ember.View.extend({\n        tagName: 'input',\n        attributeBindings: ['disabled'],\n        disabled: true\n      });\n      ```\n\n      Will result in view instances with an HTML representation of:\n\n      ```html\n      <input id=\"ember1\" class=\"ember-view\" disabled=\"disabled\" />\n      ```\n\n      `attributeBindings` can refer to computed properties:\n\n      ```javascript\n      MyTextInput = Ember.View.extend({\n        tagName: 'input',\n        attributeBindings: ['disabled'],\n        disabled: function() {\n          if (someLogic) {\n            return true;\n          } else {\n            return false;\n          }\n        }.property()\n      });\n      ```\n\n      Updates to the the property of an attribute binding will result in automatic\n      update of the  HTML attribute in the view's rendered HTML representation.\n\n      `attributeBindings` is a concatenated property. See [Ember.Object](/api/classes/Ember.Object.html)\n      documentation for more information about concatenated properties.\n\n      ## Templates\n\n      The HTML contents of a view's rendered representation are determined by its\n      template. Templates can be any function that accepts an optional context\n      parameter and returns a string of HTML that will be inserted within the\n      view's tag. Most typically in Ember this function will be a compiled\n      `Ember.Handlebars` template.\n\n      ```javascript\n      AView = Ember.View.extend({\n        template: Ember.Handlebars.compile('I am the template')\n      });\n      ```\n\n      Will result in view instances with an HTML representation of:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view\">I am the template</div>\n      ```\n\n      Within an Ember application is more common to define a Handlebars templates as\n      part of a page:\n\n      ```html\n      <script type='text/x-handlebars' data-template-name='some-template'>\n        Hello\n      </script>\n      ```\n\n      And associate it by name using a view's `templateName` property:\n\n      ```javascript\n      AView = Ember.View.extend({\n        templateName: 'some-template'\n      });\n      ```\n\n      If you have nested resources, your Handlebars template will look like this:\n\n      ```html\n      <script type='text/x-handlebars' data-template-name='posts/new'>\n        <h1>New Post</h1>\n      </script>\n      ```\n\n      And `templateName` property:\n\n      ```javascript\n      AView = Ember.View.extend({\n        templateName: 'posts/new'\n      });\n      ```\n\n      Using a value for `templateName` that does not have a Handlebars template\n      with a matching `data-template-name` attribute will throw an error.\n\n      For views classes that may have a template later defined (e.g. as the block\n      portion of a `{{view}}` Handlebars helper call in another template or in\n      a subclass), you can provide a `defaultTemplate` property set to compiled\n      template function. If a template is not later provided for the view instance\n      the `defaultTemplate` value will be used:\n\n      ```javascript\n      AView = Ember.View.extend({\n        defaultTemplate: Ember.Handlebars.compile('I was the default'),\n        template: null,\n        templateName: null\n      });\n      ```\n\n      Will result in instances with an HTML representation of:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view\">I was the default</div>\n      ```\n\n      If a `template` or `templateName` is provided it will take precedence over\n      `defaultTemplate`:\n\n      ```javascript\n      AView = Ember.View.extend({\n        defaultTemplate: Ember.Handlebars.compile('I was the default')\n      });\n\n      aView = AView.create({\n        template: Ember.Handlebars.compile('I was the template, not default')\n      });\n      ```\n\n      Will result in the following HTML representation when rendered:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view\">I was the template, not default</div>\n      ```\n\n      ## View Context\n\n      The default context of the compiled template is the view's controller:\n\n      ```javascript\n      AView = Ember.View.extend({\n        template: Ember.Handlebars.compile('Hello {{excitedGreeting}}')\n      });\n\n      aController = Ember.Object.create({\n        firstName: 'Barry',\n        excitedGreeting: function() {\n          return this.get(\"content.firstName\") + \"!!!\"\n        }.property()\n      });\n\n      aView = AView.create({\n        controller: aController\n      });\n      ```\n\n      Will result in an HTML representation of:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view\">Hello Barry!!!</div>\n      ```\n\n      A context can also be explicitly supplied through the view's `context`\n      property. If the view has neither `context` nor `controller` properties, the\n      `parentView`'s context will be used.\n\n      ## Layouts\n\n      Views can have a secondary template that wraps their main template. Like\n      primary templates, layouts can be any function that  accepts an optional\n      context parameter and returns a string of HTML that will be inserted inside\n      view's tag. Views whose HTML element is self closing (e.g. `<input />`)\n      cannot have a layout and this property will be ignored.\n\n      Most typically in Ember a layout will be a compiled `Ember.Handlebars`\n      template.\n\n      A view's layout can be set directly with the `layout` property or reference\n      an existing Handlebars template by name with the `layoutName` property.\n\n      A template used as a layout must contain a single use of the Handlebars\n      `{{yield}}` helper. The HTML contents of a view's rendered `template` will be\n      inserted at this location:\n\n      ```javascript\n      AViewWithLayout = Ember.View.extend({\n        layout: Ember.Handlebars.compile(\"<div class='my-decorative-class'>{{yield}}</div>\"),\n        template: Ember.Handlebars.compile(\"I got wrapped\")\n      });\n      ```\n\n      Will result in view instances with an HTML representation of:\n\n      ```html\n      <div id=\"ember1\" class=\"ember-view\">\n        <div class=\"my-decorative-class\">\n          I got wrapped\n        </div>\n      </div>\n      ```\n\n      See [Ember.Handlebars.helpers.yield](/api/classes/Ember.Handlebars.helpers.html#method_yield)\n      for more information.\n\n      ## Responding to Browser Events\n\n      Views can respond to user-initiated events in one of three ways: method\n      implementation, through an event manager, and through `{{action}}` helper use\n      in their template or layout.\n\n      ### Method Implementation\n\n      Views can respond to user-initiated events by implementing a method that\n      matches the event name. A `jQuery.Event` object will be passed as the\n      argument to this method.\n\n      ```javascript\n      AView = Ember.View.extend({\n        click: function(event) {\n          // will be called when when an instance's\n          // rendered element is clicked\n        }\n      });\n      ```\n\n      ### Event Managers\n\n      Views can define an object as their `eventManager` property. This object can\n      then implement methods that match the desired event names. Matching events\n      that occur on the view's rendered HTML or the rendered HTML of any of its DOM\n      descendants will trigger this method. A `jQuery.Event` object will be passed\n      as the first argument to the method and an  `Ember.View` object as the\n      second. The `Ember.View` will be the view whose rendered HTML was interacted\n      with. This may be the view with the `eventManager` property or one of its\n      descendent views.\n\n      ```javascript\n      AView = Ember.View.extend({\n        eventManager: Ember.Object.create({\n          doubleClick: function(event, view) {\n            // will be called when when an instance's\n            // rendered element or any rendering\n            // of this views's descendent\n            // elements is clicked\n          }\n        })\n      });\n      ```\n\n      An event defined for an event manager takes precedence over events of the\n      same name handled through methods on the view.\n\n      ```javascript\n      AView = Ember.View.extend({\n        mouseEnter: function(event) {\n          // will never trigger.\n        },\n        eventManager: Ember.Object.create({\n          mouseEnter: function(event, view) {\n            // takes precedence over AView#mouseEnter\n          }\n        })\n      });\n      ```\n\n      Similarly a view's event manager will take precedence for events of any views\n      rendered as a descendent. A method name that matches an event name will not\n      be called if the view instance was rendered inside the HTML representation of\n      a view that has an `eventManager` property defined that handles events of the\n      name. Events not handled by the event manager will still trigger method calls\n      on the descendent.\n\n      ```javascript\n      var App = Ember.Application.create();\n      App.OuterView = Ember.View.extend({\n        template: Ember.Handlebars.compile(\"outer {{#view 'inner'}}inner{{/view}} outer\"),\n        eventManager: Ember.Object.create({\n          mouseEnter: function(event, view) {\n            // view might be instance of either\n            // OuterView or InnerView depending on\n            // where on the page the user interaction occured\n          }\n        })\n      });\n\n      App.InnerView = Ember.View.extend({\n        click: function(event) {\n          // will be called if rendered inside\n          // an OuterView because OuterView's\n          // eventManager doesn't handle click events\n        },\n        mouseEnter: function(event) {\n          // will never be called if rendered inside\n          // an OuterView.\n        }\n      });\n      ```\n\n      ### Handlebars `{{action}}` Helper\n\n      See [Handlebars.helpers.action](/api/classes/Ember.Handlebars.helpers.html#method_action).\n\n      ### Event Names\n\n      All of the event handling approaches described above respond to the same set\n      of events. The names of the built-in events are listed below. (The hash of\n      built-in events exists in `Ember.EventDispatcher`.) Additional, custom events\n      can be registered by using `Ember.Application.customEvents`.\n\n      Touch events:\n\n      * `touchStart`\n      * `touchMove`\n      * `touchEnd`\n      * `touchCancel`\n\n      Keyboard events\n\n      * `keyDown`\n      * `keyUp`\n      * `keyPress`\n\n      Mouse events\n\n      * `mouseDown`\n      * `mouseUp`\n      * `contextMenu`\n      * `click`\n      * `doubleClick`\n      * `mouseMove`\n      * `focusIn`\n      * `focusOut`\n      * `mouseEnter`\n      * `mouseLeave`\n\n      Form events:\n\n      * `submit`\n      * `change`\n      * `focusIn`\n      * `focusOut`\n      * `input`\n\n      HTML5 drag and drop events:\n\n      * `dragStart`\n      * `drag`\n      * `dragEnter`\n      * `dragLeave`\n      * `dragOver`\n      * `dragEnd`\n      * `drop`\n\n      ## Handlebars `{{view}}` Helper\n\n      Other `Ember.View` instances can be included as part of a view's template by\n      using the `{{view}}` Handlebars helper. See [Ember.Handlebars.helpers.view](/api/classes/Ember.Handlebars.helpers.html#method_view)\n      for additional information.\n\n      @class View\n      @namespace Ember\n      @extends Ember.CoreView\n    */\n    var View = CoreView.extend({\n\n      concatenatedProperties: ['classNames', 'classNameBindings', 'attributeBindings'],\n\n      /**\n        @property isView\n        @type Boolean\n        @default true\n        @static\n      */\n      isView: true,\n\n      // ..........................................................\n      // TEMPLATE SUPPORT\n      //\n\n      /**\n        The name of the template to lookup if no template is provided.\n\n        By default `Ember.View` will lookup a template with this name in\n        `Ember.TEMPLATES` (a shared global object).\n\n        @property templateName\n        @type String\n        @default null\n      */\n      templateName: null,\n\n      /**\n        The name of the layout to lookup if no layout is provided.\n\n        By default `Ember.View` will lookup a template with this name in\n        `Ember.TEMPLATES` (a shared global object).\n\n        @property layoutName\n        @type String\n        @default null\n      */\n      layoutName: null,\n\n      /**\n        Used to identify this view during debugging\n\n        @property instrumentDisplay\n        @type String\n      */\n      instrumentDisplay: computed(function() {\n        if (this.helperName) {\n          return '{{' + this.helperName + '}}';\n        }\n      }),\n\n      /**\n        The template used to render the view. This should be a function that\n        accepts an optional context parameter and returns a string of HTML that\n        will be inserted into the DOM relative to its parent view.\n\n        In general, you should set the `templateName` property instead of setting\n        the template yourself.\n\n        @property template\n        @type Function\n      */\n      template: computed('templateName', function(key, value) {\n        if (value !== undefined) { return value; }\n\n        var templateName = get(this, 'templateName');\n        var template = this.templateForName(templateName, 'template');\n\n        Ember.assert(\"You specified the templateName \" + templateName + \" for \" + this + \", but it did not exist.\", !templateName || template);\n\n        return template || get(this, 'defaultTemplate');\n      }),\n\n      /**\n        The controller managing this view. If this property is set, it will be\n        made available for use by the template.\n\n        @property controller\n        @type Object\n      */\n      controller: computed('_parentView', function(key) {\n        var parentView = get(this, '_parentView');\n        return parentView ? get(parentView, 'controller') : null;\n      }),\n\n      /**\n        A view may contain a layout. A layout is a regular template but\n        supersedes the `template` property during rendering. It is the\n        responsibility of the layout template to retrieve the `template`\n        property from the view (or alternatively, call `Handlebars.helpers.yield`,\n        `{{yield}}`) to render it in the correct location.\n\n        This is useful for a view that has a shared wrapper, but which delegates\n        the rendering of the contents of the wrapper to the `template` property\n        on a subclass.\n\n        @property layout\n        @type Function\n      */\n      layout: computed(function(key) {\n        var layoutName = get(this, 'layoutName');\n        var layout = this.templateForName(layoutName, 'layout');\n\n        Ember.assert(\"You specified the layoutName \" + layoutName + \" for \" + this + \", but it did not exist.\", !layoutName || layout);\n\n        return layout || get(this, 'defaultLayout');\n      }).property('layoutName'),\n\n      _yield: function(context, options) {\n        var template = get(this, 'template');\n        if (template) { template(context, options); }\n      },\n\n      templateForName: function(name, type) {\n        if (!name) { return; }\n        Ember.assert(\"templateNames are not allowed to contain periods: \"+name, name.indexOf('.') === -1);\n\n        if (!this.container) {\n          throw new EmberError('Container was not found when looking up a views template. ' +\n                     'This is most likely due to manually instantiating an Ember.View. ' +\n                     'See: http://git.io/EKPpnA');\n        }\n\n        return this.container.lookup('template:' + name);\n      },\n\n      /**\n        The object from which templates should access properties.\n\n        This object will be passed to the template function each time the render\n        method is called, but it is up to the individual function to decide what\n        to do with it.\n\n        By default, this will be the view's controller.\n\n        @property context\n        @type Object\n      */\n      context: computed(function(key, value) {\n        if (arguments.length === 2) {\n          set(this, '_context', value);\n          return value;\n        } else {\n          return get(this, '_context');\n        }\n      })[\"volatile\"](),\n\n      /**\n        Private copy of the view's template context. This can be set directly\n        by Handlebars without triggering the observer that causes the view\n        to be re-rendered.\n\n        The context of a view is looked up as follows:\n\n        1. Supplied context (usually by Handlebars)\n        2. Specified controller\n        3. `parentView`'s context (for a child of a ContainerView)\n\n        The code in Handlebars that overrides the `_context` property first\n        checks to see whether the view has a specified controller. This is\n        something of a hack and should be revisited.\n\n        @property _context\n        @private\n      */\n      _context: computed(function(key) {\n        var parentView, controller;\n\n        if (controller = get(this, 'controller')) {\n          return controller;\n        }\n\n        parentView = this._parentView;\n        if (parentView) {\n          return get(parentView, '_context');\n        }\n\n        return null;\n      }),\n\n      /**\n        If a value that affects template rendering changes, the view should be\n        re-rendered to reflect the new value.\n\n        @method _contextDidChange\n        @private\n      */\n      _contextDidChange: observer('context', function() {\n        this.rerender();\n      }),\n\n      /**\n        If `false`, the view will appear hidden in DOM.\n\n        @property isVisible\n        @type Boolean\n        @default null\n      */\n      isVisible: true,\n\n      /**\n        Array of child views. You should never edit this array directly.\n        Instead, use `appendChild` and `removeFromParent`.\n\n        @property childViews\n        @type Array\n        @default []\n        @private\n      */\n      childViews: childViewsProperty,\n\n      _childViews: EMPTY_ARRAY,\n\n      // When it's a virtual view, we need to notify the parent that their\n      // childViews will change.\n      _childViewsWillChange: beforeObserver('childViews', function() {\n        if (this.isVirtual) {\n          var parentView = get(this, 'parentView');\n          if (parentView) { propertyWillChange(parentView, 'childViews'); }\n        }\n      }),\n\n      // When it's a virtual view, we need to notify the parent that their\n      // childViews did change.\n      _childViewsDidChange: observer('childViews', function() {\n        if (this.isVirtual) {\n          var parentView = get(this, 'parentView');\n          if (parentView) { propertyDidChange(parentView, 'childViews'); }\n        }\n      }),\n\n      /**\n        Return the nearest ancestor that is an instance of the provided\n        class.\n\n        @method nearestInstanceOf\n        @param {Class} klass Subclass of Ember.View (or Ember.View itself)\n        @return Ember.View\n        @deprecated\n      */\n      nearestInstanceOf: function(klass) {\n        Ember.deprecate(\"nearestInstanceOf is deprecated and will be removed from future releases. Use nearestOfType.\");\n        var view = get(this, 'parentView');\n\n        while (view) {\n          if (view instanceof klass) { return view; }\n          view = get(view, 'parentView');\n        }\n      },\n\n      /**\n        Return the nearest ancestor that is an instance of the provided\n        class or mixin.\n\n        @method nearestOfType\n        @param {Class,Mixin} klass Subclass of Ember.View (or Ember.View itself),\n               or an instance of Ember.Mixin.\n        @return Ember.View\n      */\n      nearestOfType: function(klass) {\n        var view = get(this, 'parentView');\n        var isOfType = klass instanceof Mixin ?\n                       function(view) { return klass.detect(view); } :\n                       function(view) { return klass.detect(view.constructor); };\n\n        while (view) {\n          if (isOfType(view)) { return view; }\n          view = get(view, 'parentView');\n        }\n      },\n\n      /**\n        Return the nearest ancestor that has a given property.\n\n        @method nearestWithProperty\n        @param {String} property A property name\n        @return Ember.View\n      */\n      nearestWithProperty: function(property) {\n        var view = get(this, 'parentView');\n\n        while (view) {\n          if (property in view) { return view; }\n          view = get(view, 'parentView');\n        }\n      },\n\n      /**\n        Return the nearest ancestor whose parent is an instance of\n        `klass`.\n\n        @method nearestChildOf\n        @param {Class} klass Subclass of Ember.View (or Ember.View itself)\n        @return Ember.View\n      */\n      nearestChildOf: function(klass) {\n        var view = get(this, 'parentView');\n\n        while (view) {\n          if (get(view, 'parentView') instanceof klass) { return view; }\n          view = get(view, 'parentView');\n        }\n      },\n\n      /**\n        When the parent view changes, recursively invalidate `controller`\n\n        @method _parentViewDidChange\n        @private\n      */\n      _parentViewDidChange: observer('_parentView', function() {\n        if (this.isDestroying) { return; }\n\n        this.trigger('parentViewDidChange');\n\n        if (get(this, 'parentView.controller') && !get(this, 'controller')) {\n          this.notifyPropertyChange('controller');\n        }\n      }),\n\n      _controllerDidChange: observer('controller', function() {\n        if (this.isDestroying) { return; }\n\n        this.rerender();\n\n        this.forEachChildView(function(view) {\n          view.propertyDidChange('controller');\n        });\n      }),\n\n      cloneKeywords: function() {\n        var templateData = get(this, 'templateData');\n\n        var keywords = templateData ? copy(templateData.keywords) : {};\n        set(keywords, 'view', this.isVirtual ? keywords.view : this);\n        set(keywords, '_view', this);\n        set(keywords, 'controller', get(this, 'controller'));\n\n        return keywords;\n      },\n\n      /**\n        Called on your view when it should push strings of HTML into a\n        `Ember.RenderBuffer`. Most users will want to override the `template`\n        or `templateName` properties instead of this method.\n\n        By default, `Ember.View` will look for a function in the `template`\n        property and invoke it with the value of `context`. The value of\n        `context` will be the view's controller unless you override it.\n\n        @method render\n        @param {Ember.RenderBuffer} buffer The render buffer\n      */\n      render: function(buffer) {\n        // If this view has a layout, it is the responsibility of the\n        // the layout to render the view's template. Otherwise, render the template\n        // directly.\n        var template = get(this, 'layout') || get(this, 'template');\n\n        if (template) {\n          var context = get(this, 'context');\n          var keywords = this.cloneKeywords();\n          var output;\n\n          var data = {\n            view: this,\n            buffer: buffer,\n            isRenderData: true,\n            keywords: keywords,\n            insideGroup: get(this, 'templateData.insideGroup')\n          };\n\n          // Invoke the template with the provided template context, which\n          // is the view's controller by default. A hash of data is also passed that provides\n          // the template with access to the view and render buffer.\n\n          Ember.assert('template must be a function. Did you mean to call Ember.Handlebars.compile(\"...\") or specify templateName instead?', typeof template === 'function');\n          // The template should write directly to the render buffer instead\n          // of returning a string.\n          output = template(context, { data: data });\n\n          // If the template returned a string instead of writing to the buffer,\n          // push the string onto the buffer.\n          if (output !== undefined) { buffer.push(output); }\n        }\n      },\n\n      /**\n        Renders the view again. This will work regardless of whether the\n        view is already in the DOM or not. If the view is in the DOM, the\n        rendering process will be deferred to give bindings a chance\n        to synchronize.\n\n        If children were added during the rendering process using `appendChild`,\n        `rerender` will remove them, because they will be added again\n        if needed by the next `render`.\n\n        In general, if the display of your view changes, you should modify\n        the DOM element directly instead of manually calling `rerender`, which can\n        be slow.\n\n        @method rerender\n      */\n      rerender: function() {\n        return this.currentState.rerender(this);\n      },\n\n      /**\n        Iterates over the view's `classNameBindings` array, inserts the value\n        of the specified property into the `classNames` array, then creates an\n        observer to update the view's element if the bound property ever changes\n        in the future.\n\n        @method _applyClassNameBindings\n        @private\n      */\n      _applyClassNameBindings: function(classBindings) {\n        var classNames = this.classNames;\n        var elem, newClass, dasherizedClass;\n\n        // Loop through all of the configured bindings. These will be either\n        // property names ('isUrgent') or property paths relative to the view\n        // ('content.isUrgent')\n        forEach(classBindings, function(binding) {\n\n          Ember.assert(\"classNameBindings must not have spaces in them. Multiple class name bindings can be provided as elements of an array, e.g. ['foo', ':bar']\", binding.indexOf(' ') === -1);\n\n          // Variable in which the old class value is saved. The observer function\n          // closes over this variable, so it knows which string to remove when\n          // the property changes.\n          var oldClass;\n          // Extract just the property name from bindings like 'foo:bar'\n          var parsedPath = View._parsePropertyPath(binding);\n\n          // Set up an observer on the context. If the property changes, toggle the\n          // class name.\n          var observer = function() {\n            // Get the current value of the property\n            newClass = this._classStringForProperty(binding);\n            elem = this.$();\n\n            // If we had previously added a class to the element, remove it.\n            if (oldClass) {\n              elem.removeClass(oldClass);\n              // Also remove from classNames so that if the view gets rerendered,\n              // the class doesn't get added back to the DOM.\n              classNames.removeObject(oldClass);\n            }\n\n            // If necessary, add a new class. Make sure we keep track of it so\n            // it can be removed in the future.\n            if (newClass) {\n              elem.addClass(newClass);\n              oldClass = newClass;\n            } else {\n              oldClass = null;\n            }\n          };\n\n          // Get the class name for the property at its current value\n          dasherizedClass = this._classStringForProperty(binding);\n\n          if (dasherizedClass) {\n            // Ensure that it gets into the classNames array\n            // so it is displayed when we render.\n            addObject(classNames, dasherizedClass);\n\n            // Save a reference to the class name so we can remove it\n            // if the observer fires. Remember that this variable has\n            // been closed over by the observer.\n            oldClass = dasherizedClass;\n          }\n\n          this.registerObserver(this, parsedPath.path, observer);\n          // Remove className so when the view is rerendered,\n          // the className is added based on binding reevaluation\n          this.one('willClearRender', function() {\n            if (oldClass) {\n              classNames.removeObject(oldClass);\n              oldClass = null;\n            }\n          });\n\n        }, this);\n      },\n\n      _unspecifiedAttributeBindings: null,\n\n      /**\n        Iterates through the view's attribute bindings, sets up observers for each,\n        then applies the current value of the attributes to the passed render buffer.\n\n        @method _applyAttributeBindings\n        @param {Ember.RenderBuffer} buffer\n        @private\n      */\n      _applyAttributeBindings: function(buffer, attributeBindings) {\n        var attributeValue;\n        var unspecifiedAttributeBindings = this._unspecifiedAttributeBindings = this._unspecifiedAttributeBindings || {};\n\n        forEach(attributeBindings, function(binding) {\n          var split = binding.split(':');\n          var property = split[0];\n          var attributeName = split[1] || property;\n\n          Ember.assert('You cannot use class as an attributeBinding, use classNameBindings instead.', attributeName !== 'class');\n\n          if (property in this) {\n            this._setupAttributeBindingObservation(property, attributeName);\n\n            // Determine the current value and add it to the render buffer\n            // if necessary.\n            attributeValue = get(this, property);\n            View.applyAttributeBindings(buffer, attributeName, attributeValue);\n          } else {\n            unspecifiedAttributeBindings[property] = attributeName;\n          }\n        }, this);\n\n        // Lazily setup setUnknownProperty after attributeBindings are initially applied\n        this.setUnknownProperty = this._setUnknownProperty;\n      },\n\n      _setupAttributeBindingObservation: function(property, attributeName) {\n        var attributeValue, elem;\n\n        // Create an observer to add/remove/change the attribute if the\n        // JavaScript property changes.\n        var observer = function() {\n          elem = this.$();\n\n          attributeValue = get(this, property);\n\n          View.applyAttributeBindings(elem, attributeName, attributeValue);\n        };\n\n        this.registerObserver(this, property, observer);\n      },\n\n      /**\n        We're using setUnknownProperty as a hook to setup attributeBinding observers for\n        properties that aren't defined on a view at initialization time.\n\n        Note: setUnknownProperty will only be called once for each property.\n\n        @method setUnknownProperty\n        @param key\n        @param value\n        @private\n      */\n      setUnknownProperty: null, // Gets defined after initialization by _applyAttributeBindings\n\n      _setUnknownProperty: function(key, value) {\n        var attributeName = this._unspecifiedAttributeBindings && this._unspecifiedAttributeBindings[key];\n        if (attributeName) {\n          this._setupAttributeBindingObservation(key, attributeName);\n        }\n\n        defineProperty(this, key);\n        return set(this, key, value);\n      },\n\n      /**\n        Given a property name, returns a dasherized version of that\n        property name if the property evaluates to a non-falsy value.\n\n        For example, if the view has property `isUrgent` that evaluates to true,\n        passing `isUrgent` to this method will return `\"is-urgent\"`.\n\n        @method _classStringForProperty\n        @param property\n        @private\n      */\n      _classStringForProperty: function(property) {\n        var parsedPath = View._parsePropertyPath(property);\n        var path = parsedPath.path;\n\n        var val = get(this, path);\n        if (val === undefined && isGlobalPath(path)) {\n          val = get(Ember.lookup, path);\n        }\n\n        return View._classStringForValue(path, val, parsedPath.className, parsedPath.falsyClassName);\n      },\n\n      // ..........................................................\n      // ELEMENT SUPPORT\n      //\n\n      /**\n        Returns the current DOM element for the view.\n\n        @property element\n        @type DOMElement\n      */\n      element: null,\n\n      /**\n        Returns a jQuery object for this view's element. If you pass in a selector\n        string, this method will return a jQuery object, using the current element\n        as its buffer.\n\n        For example, calling `view.$('li')` will return a jQuery object containing\n        all of the `li` elements inside the DOM element of this view.\n\n        @method $\n        @param {String} [selector] a jQuery-compatible selector string\n        @return {jQuery} the jQuery object for the DOM node\n      */\n      $: function(sel) {\n        return this.currentState.$(this, sel);\n      },\n\n      mutateChildViews: function(callback) {\n        var childViews = this._childViews;\n        var idx = childViews.length;\n        var view;\n\n        while(--idx >= 0) {\n          view = childViews[idx];\n          callback(this, view, idx);\n        }\n\n        return this;\n      },\n\n      forEachChildView: function(callback) {\n        var childViews = this._childViews;\n\n        if (!childViews) { return this; }\n\n        var len = childViews.length;\n        var view, idx;\n\n        for (idx = 0; idx < len; idx++) {\n          view = childViews[idx];\n          callback(view);\n        }\n\n        return this;\n      },\n\n      /**\n        Appends the view's element to the specified parent element.\n\n        If the view does not have an HTML representation yet, `createElement()`\n        will be called automatically.\n\n        Note that this method just schedules the view to be appended; the DOM\n        element will not be appended to the given element until all bindings have\n        finished synchronizing.\n\n        This is not typically a function that you will need to call directly when\n        building your application. You might consider using `Ember.ContainerView`\n        instead. If you do need to use `appendTo`, be sure that the target element\n        you are providing is associated with an `Ember.Application` and does not\n        have an ancestor element that is associated with an Ember view.\n\n        @method appendTo\n        @param {String|DOMElement|jQuery} A selector, element, HTML string, or jQuery object\n        @return {Ember.View} receiver\n      */\n      appendTo: function(selector) {\n        var target = jQuery(selector);\n\n        Ember.assert(\"You tried to append to (\" + selector + \") but that isn't in the DOM\", target.length > 0);\n        Ember.assert(\"You cannot append to an existing Ember.View. Consider using Ember.ContainerView instead.\", !target.is('.ember-view') && !target.parents().is('.ember-view'));\n\n        this.constructor.renderer.appendTo(this, target[0]);\n\n        return this;\n      },\n\n      /**\n        Replaces the content of the specified parent element with this view's\n        element. If the view does not have an HTML representation yet,\n        `createElement()` will be called automatically.\n\n        Note that this method just schedules the view to be appended; the DOM\n        element will not be appended to the given element until all bindings have\n        finished synchronizing\n\n        @method replaceIn\n        @param {String|DOMElement|jQuery} target A selector, element, HTML string, or jQuery object\n        @return {Ember.View} received\n      */\n      replaceIn: function(selector) {\n        var target = jQuery(selector);\n\n        Ember.assert(\"You tried to replace in (\" + selector + \") but that isn't in the DOM\", target.length > 0);\n        Ember.assert(\"You cannot replace an existing Ember.View. Consider using Ember.ContainerView instead.\", !target.is('.ember-view') && !target.parents().is('.ember-view'));\n\n        this.constructor.renderer.replaceIn(this, target[0]);\n\n        return this;\n      },\n\n      /**\n        Appends the view's element to the document body. If the view does\n        not have an HTML representation yet, `createElement()` will be called\n        automatically.\n\n        If your application uses the `rootElement` property, you must append\n        the view within that element. Rendering views outside of the `rootElement`\n        is not supported.\n\n        Note that this method just schedules the view to be appended; the DOM\n        element will not be appended to the document body until all bindings have\n        finished synchronizing.\n\n        @method append\n        @return {Ember.View} receiver\n      */\n      append: function() {\n        return this.appendTo(document.body);\n      },\n\n      /**\n        Removes the view's element from the element to which it is attached.\n\n        @method remove\n        @return {Ember.View} receiver\n      */\n      remove: function() {\n        // What we should really do here is wait until the end of the run loop\n        // to determine if the element has been re-appended to a different\n        // element.\n        // In the interim, we will just re-render if that happens. It is more\n        // important than elements get garbage collected.\n        if (!this.removedFromDOM) { this.destroyElement(); }\n      },\n\n      elementId: null,\n\n      /**\n        Attempts to discover the element in the parent element. The default\n        implementation looks for an element with an ID of `elementId` (or the\n        view's guid if `elementId` is null). You can override this method to\n        provide your own form of lookup. For example, if you want to discover your\n        element using a CSS class name instead of an ID.\n\n        @method findElementInParentElement\n        @param {DOMElement} parentElement The parent's DOM element\n        @return {DOMElement} The discovered element\n      */\n      findElementInParentElement: function(parentElem) {\n        var id = \"#\" + this.elementId;\n        return jQuery(id)[0] || jQuery(id, parentElem)[0];\n      },\n\n      /**\n        Creates a DOM representation of the view and all of its child views by\n        recursively calling the `render()` method.\n\n        After the element has been inserted into the DOM, `didInsertElement` will\n        be called on this view and all of its child views.\n\n        @method createElement\n        @return {Ember.View} receiver\n      */\n      createElement: function() {\n        if (this.element) { return this; }\n\n        this._didCreateElementWithoutMorph = true;\n        this.constructor.renderer.renderTree(this);\n\n        return this;\n      },\n\n      /**\n        Called when a view is going to insert an element into the DOM.\n\n        @event willInsertElement\n      */\n      willInsertElement: Ember.K,\n\n      /**\n        Called when the element of the view has been inserted into the DOM\n        or after the view was re-rendered. Override this function to do any\n        set up that requires an element in the document body.\n\n        When a view has children, didInsertElement will be called on the\n        child view(s) first, bubbling upwards through the hierarchy.\n\n        @event didInsertElement\n      */\n      didInsertElement: Ember.K,\n\n      /**\n        Called when the view is about to rerender, but before anything has\n        been torn down. This is a good opportunity to tear down any manual\n        observers you have installed based on the DOM state\n\n        @event willClearRender\n      */\n      willClearRender: Ember.K,\n\n      /**\n        Destroys any existing element along with the element for any child views\n        as well. If the view does not currently have a element, then this method\n        will do nothing.\n\n        If you implement `willDestroyElement()` on your view, then this method will\n        be invoked on your view before your element is destroyed to give you a\n        chance to clean up any event handlers, etc.\n\n        If you write a `willDestroyElement()` handler, you can assume that your\n        `didInsertElement()` handler was called earlier for the same element.\n\n        You should not call or override this method yourself, but you may\n        want to implement the above callbacks.\n\n        @method destroyElement\n        @return {Ember.View} receiver\n      */\n      destroyElement: function() {\n        return this.currentState.destroyElement(this);\n      },\n\n      /**\n        Called when the element of the view is going to be destroyed. Override\n        this function to do any teardown that requires an element, like removing\n        event listeners.\n\n        Please note: any property changes made during this event will have no\n        effect on object observers.\n\n        @event willDestroyElement\n      */\n      willDestroyElement: Ember.K,\n\n      /**\n        Called when the parentView property has changed.\n\n        @event parentViewDidChange\n      */\n      parentViewDidChange: Ember.K,\n\n      instrumentName: 'view',\n\n      instrumentDetails: function(hash) {\n        hash.template = get(this, 'templateName');\n        this._super(hash);\n      },\n\n      beforeRender: function(buffer) {},\n\n      afterRender: function(buffer) {},\n\n      applyAttributesToBuffer: function(buffer) {\n        // Creates observers for all registered class name and attribute bindings,\n        // then adds them to the element.\n        var classNameBindings = get(this, 'classNameBindings');\n        if (classNameBindings.length) {\n          this._applyClassNameBindings(classNameBindings);\n        }\n\n        // Pass the render buffer so the method can apply attributes directly.\n        // This isn't needed for class name bindings because they use the\n        // existing classNames infrastructure.\n        var attributeBindings = get(this, 'attributeBindings');\n        if (attributeBindings.length) {\n          this._applyAttributeBindings(buffer, attributeBindings);\n        }\n\n        buffer.setClasses(this.classNames);\n        buffer.id(this.elementId);\n\n        var role = get(this, 'ariaRole');\n        if (role) {\n          buffer.attr('role', role);\n        }\n\n        if (get(this, 'isVisible') === false) {\n          buffer.style('display', 'none');\n        }\n      },\n\n      // ..........................................................\n      // STANDARD RENDER PROPERTIES\n      //\n\n      /**\n        Tag name for the view's outer element. The tag name is only used when an\n        element is first created. If you change the `tagName` for an element, you\n        must destroy and recreate the view element.\n\n        By default, the render buffer will use a `<div>` tag for views.\n\n        @property tagName\n        @type String\n        @default null\n      */\n\n      // We leave this null by default so we can tell the difference between\n      // the default case and a user-specified tag.\n      tagName: null,\n\n      /**\n        The WAI-ARIA role of the control represented by this view. For example, a\n        button may have a role of type 'button', or a pane may have a role of\n        type 'alertdialog'. This property is used by assistive software to help\n        visually challenged users navigate rich web applications.\n\n        The full list of valid WAI-ARIA roles is available at:\n        [http://www.w3.org/TR/wai-aria/roles#roles_categorization](http://www.w3.org/TR/wai-aria/roles#roles_categorization)\n\n        @property ariaRole\n        @type String\n        @default null\n      */\n      ariaRole: null,\n\n      /**\n        Standard CSS class names to apply to the view's outer element. This\n        property automatically inherits any class names defined by the view's\n        superclasses as well.\n\n        @property classNames\n        @type Array\n        @default ['ember-view']\n      */\n      classNames: ['ember-view'],\n\n      /**\n        A list of properties of the view to apply as class names. If the property\n        is a string value, the value of that string will be applied as a class\n        name.\n\n        ```javascript\n        // Applies the 'high' class to the view element\n        Ember.View.extend({\n          classNameBindings: ['priority']\n          priority: 'high'\n        });\n        ```\n\n        If the value of the property is a Boolean, the name of that property is\n        added as a dasherized class name.\n\n        ```javascript\n        // Applies the 'is-urgent' class to the view element\n        Ember.View.extend({\n          classNameBindings: ['isUrgent']\n          isUrgent: true\n        });\n        ```\n\n        If you would prefer to use a custom value instead of the dasherized\n        property name, you can pass a binding like this:\n\n        ```javascript\n        // Applies the 'urgent' class to the view element\n        Ember.View.extend({\n          classNameBindings: ['isUrgent:urgent']\n          isUrgent: true\n        });\n        ```\n\n        This list of properties is inherited from the view's superclasses as well.\n\n        @property classNameBindings\n        @type Array\n        @default []\n      */\n      classNameBindings: EMPTY_ARRAY,\n\n      /**\n        A list of properties of the view to apply as attributes. If the property is\n        a string value, the value of that string will be applied as the attribute.\n\n        ```javascript\n        // Applies the type attribute to the element\n        // with the value \"button\", like <div type=\"button\">\n        Ember.View.extend({\n          attributeBindings: ['type'],\n          type: 'button'\n        });\n        ```\n\n        If the value of the property is a Boolean, the name of that property is\n        added as an attribute.\n\n        ```javascript\n        // Renders something like <div enabled=\"enabled\">\n        Ember.View.extend({\n          attributeBindings: ['enabled'],\n          enabled: true\n        });\n        ```\n\n        @property attributeBindings\n      */\n      attributeBindings: EMPTY_ARRAY,\n\n      // .......................................................\n      // CORE DISPLAY METHODS\n      //\n\n      /**\n        Setup a view, but do not finish waking it up.\n\n        * configure `childViews`\n        * register the view with the global views hash, which is used for event\n          dispatch\n\n        @method init\n        @private\n      */\n      init: function() {\n        if (!this.isVirtual && !this.elementId) {\n          this.elementId = guidFor(this);\n        }\n\n        this._super();\n\n        // setup child views. be sure to clone the child views array first\n        this._childViews = this._childViews.slice();\n\n        Ember.assert(\"Only arrays are allowed for 'classNameBindings'\", typeOf(this.classNameBindings) === 'array');\n        this.classNameBindings = emberA(this.classNameBindings.slice());\n\n        Ember.assert(\"Only arrays are allowed for 'classNames'\", typeOf(this.classNames) === 'array');\n        this.classNames = emberA(this.classNames.slice());\n      },\n\n      appendChild: function(view, options) {\n        return this.currentState.appendChild(this, view, options);\n      },\n\n      /**\n        Removes the child view from the parent view.\n\n        @method removeChild\n        @param {Ember.View} view\n        @return {Ember.View} receiver\n      */\n      removeChild: function(view) {\n        // If we're destroying, the entire subtree will be\n        // freed, and the DOM will be handled separately,\n        // so no need to mess with childViews.\n        if (this.isDestroying) { return; }\n\n        // update parent node\n        set(view, '_parentView', null);\n\n        // remove view from childViews array.\n        var childViews = this._childViews;\n\n        removeObject(childViews, view);\n\n        this.propertyDidChange('childViews'); // HUH?! what happened to will change?\n\n        return this;\n      },\n\n      /**\n        Removes all children from the `parentView`.\n\n        @method removeAllChildren\n        @return {Ember.View} receiver\n      */\n      removeAllChildren: function() {\n        return this.mutateChildViews(function(parentView, view) {\n          parentView.removeChild(view);\n        });\n      },\n\n      destroyAllChildren: function() {\n        return this.mutateChildViews(function(parentView, view) {\n          view.destroy();\n        });\n      },\n\n      /**\n        Removes the view from its `parentView`, if one is found. Otherwise\n        does nothing.\n\n        @method removeFromParent\n        @return {Ember.View} receiver\n      */\n      removeFromParent: function() {\n        var parent = this._parentView;\n\n        // Remove DOM element from parent\n        this.remove();\n\n        if (parent) { parent.removeChild(this); }\n        return this;\n      },\n\n      /**\n        You must call `destroy` on a view to destroy the view (and all of its\n        child views). This will remove the view from any parent node, then make\n        sure that the DOM element managed by the view can be released by the\n        memory manager.\n\n        @method destroy\n      */\n      destroy: function() {\n        var childViews = this._childViews;\n        // get parentView before calling super because it'll be destroyed\n        var nonVirtualParentView = get(this, 'parentView');\n        var viewName = this.viewName;\n        var childLen, i;\n\n        if (!this._super()) { return; }\n\n        // remove from non-virtual parent view if viewName was specified\n        if (viewName && nonVirtualParentView) {\n          nonVirtualParentView.set(viewName, null);\n        }\n\n        return this;\n      },\n\n      /**\n        Instantiates a view to be added to the childViews array during view\n        initialization. You generally will not call this method directly unless\n        you are overriding `createChildViews()`. Note that this method will\n        automatically configure the correct settings on the new view instance to\n        act as a child of the parent.\n\n        @method createChildView\n        @param {Class|String} viewClass\n        @param {Hash} [attrs] Attributes to add\n        @return {Ember.View} new instance\n      */\n      createChildView: function(view, attrs) {\n        if (!view) {\n          throw new TypeError(\"createChildViews first argument must exist\");\n        }\n\n        if (view.isView && view._parentView === this && view.container === this.container) {\n          return view;\n        }\n\n        attrs = attrs || {};\n        attrs._parentView = this;\n\n        if (CoreView.detect(view)) {\n          attrs.templateData = attrs.templateData || get(this, 'templateData');\n\n          attrs.container = this.container;\n          view = view.create(attrs);\n\n          // don't set the property on a virtual view, as they are invisible to\n          // consumers of the view API\n          if (view.viewName) {\n            set(get(this, 'concreteView'), view.viewName, view);\n          }\n        } else if ('string' === typeof view) {\n          var fullName = 'view:' + view;\n          var ViewKlass = this.container.lookupFactory(fullName);\n\n          Ember.assert(\"Could not find view: '\" + fullName + \"'\", !!ViewKlass);\n\n          attrs.templateData = get(this, 'templateData');\n          view = ViewKlass.create(attrs);\n        } else {\n          Ember.assert('You must pass instance or subclass of View', view.isView);\n          attrs.container = this.container;\n\n          if (!get(view, 'templateData')) {\n            attrs.templateData = get(this, 'templateData');\n          }\n\n          setProperties(view, attrs);\n\n        }\n\n        return view;\n      },\n\n      becameVisible: Ember.K,\n      becameHidden: Ember.K,\n\n      /**\n        When the view's `isVisible` property changes, toggle the visibility\n        element of the actual DOM element.\n\n        @method _isVisibleDidChange\n        @private\n      */\n      _isVisibleDidChange: observer('isVisible', function() {\n        if (this._isVisible === get(this, 'isVisible')) { return ; }\n        run.scheduleOnce('render', this, this._toggleVisibility);\n      }),\n\n      _toggleVisibility: function() {\n        var $el = this.$();\n        var isVisible = get(this, 'isVisible');\n\n        if (this._isVisible === isVisible) { return ; }\n\n        // It's important to keep these in sync, even if we don't yet have\n        // an element in the DOM to manipulate:\n        this._isVisible = isVisible;\n\n        if (!$el) { return; }\n\n        $el.toggle(isVisible);\n\n        if (this._isAncestorHidden()) { return; }\n\n        if (isVisible) {\n          this._notifyBecameVisible();\n        } else {\n          this._notifyBecameHidden();\n        }\n      },\n\n      _notifyBecameVisible: function() {\n        this.trigger('becameVisible');\n\n        this.forEachChildView(function(view) {\n          var isVisible = get(view, 'isVisible');\n\n          if (isVisible || isVisible === null) {\n            view._notifyBecameVisible();\n          }\n        });\n      },\n\n      _notifyBecameHidden: function() {\n        this.trigger('becameHidden');\n        this.forEachChildView(function(view) {\n          var isVisible = get(view, 'isVisible');\n\n          if (isVisible || isVisible === null) {\n            view._notifyBecameHidden();\n          }\n        });\n      },\n\n      _isAncestorHidden: function() {\n        var parent = get(this, 'parentView');\n\n        while (parent) {\n          if (get(parent, 'isVisible') === false) { return true; }\n\n          parent = get(parent, 'parentView');\n        }\n\n        return false;\n      },\n      transitionTo: function(state, children) {\n        Ember.deprecate(\"Ember.View#transitionTo has been deprecated, it is for internal use only\");\n        this._transitionTo(state, children);\n      },\n      _transitionTo: function(state, children) {\n        var priorState = this.currentState;\n        var currentState = this.currentState = this._states[state];\n        this._state = state;\n\n        if (priorState && priorState.exit) { priorState.exit(this); }\n        if (currentState.enter) { currentState.enter(this); }\n      },\n\n      // .......................................................\n      // EVENT HANDLING\n      //\n\n      /**\n        Handle events from `Ember.EventDispatcher`\n\n        @method handleEvent\n        @param eventName {String}\n        @param evt {Event}\n        @private\n      */\n      handleEvent: function(eventName, evt) {\n        return this.currentState.handleEvent(this, eventName, evt);\n      },\n\n      registerObserver: function(root, path, target, observer) {\n        if (!observer && 'function' === typeof target) {\n          observer = target;\n          target = null;\n        }\n\n        if (!root || typeof root !== 'object') {\n          return;\n        }\n\n        var view = this;\n        var stateCheckedObserver = function() {\n          view.currentState.invokeObserver(this, observer);\n        };\n        var scheduledObserver = function() {\n          run.scheduleOnce('render', this, stateCheckedObserver);\n        };\n\n        addObserver(root, path, target, scheduledObserver);\n\n        this.one('willClearRender', function() {\n          removeObserver(root, path, target, scheduledObserver);\n        });\n      }\n\n    });\n    deprecateProperty(View.prototype, 'state', '_state');\n    deprecateProperty(View.prototype, 'states', '_states');\n\n    /*\n      Describe how the specified actions should behave in the various\n      states that a view can exist in. Possible states:\n\n      * preRender: when a view is first instantiated, and after its\n        element was destroyed, it is in the preRender state\n      * inBuffer: once a view has been rendered, but before it has\n        been inserted into the DOM, it is in the inBuffer state\n      * hasElement: the DOM representation of the view is created,\n        and is ready to be inserted\n      * inDOM: once a view has been inserted into the DOM it is in\n        the inDOM state. A view spends the vast majority of its\n        existence in this state.\n      * destroyed: once a view has been destroyed (using the destroy\n        method), it is in this state. No further actions can be invoked\n        on a destroyed view.\n    */\n\n      // in the destroyed state, everything is illegal\n\n      // before rendering has begun, all legal manipulations are noops.\n\n      // inside the buffer, legal manipulations are done on the buffer\n\n      // once the view has been inserted into the DOM, legal manipulations\n      // are done on the DOM element.\n\n    function notifyMutationListeners() {\n      run.once(View, 'notifyMutationListeners');\n    }\n\n    View.reopenClass({\n\n      /**\n        Parse a path and return an object which holds the parsed properties.\n\n        For example a path like \"content.isEnabled:enabled:disabled\" will return the\n        following object:\n\n        ```javascript\n        {\n          path: \"content.isEnabled\",\n          className: \"enabled\",\n          falsyClassName: \"disabled\",\n          classNames: \":enabled:disabled\"\n        }\n        ```\n\n        @method _parsePropertyPath\n        @static\n        @private\n      */\n      _parsePropertyPath: function(path) {\n        var split = path.split(':');\n        var propertyPath = split[0];\n        var classNames = \"\";\n        var className, falsyClassName;\n\n        // check if the property is defined as prop:class or prop:trueClass:falseClass\n        if (split.length > 1) {\n          className = split[1];\n          if (split.length === 3) { falsyClassName = split[2]; }\n\n          classNames = ':' + className;\n          if (falsyClassName) { classNames += \":\" + falsyClassName; }\n        }\n\n        return {\n          path: propertyPath,\n          classNames: classNames,\n          className: (className === '') ? undefined : className,\n          falsyClassName: falsyClassName\n        };\n      },\n\n      /**\n        Get the class name for a given value, based on the path, optional\n        `className` and optional `falsyClassName`.\n\n        - if a `className` or `falsyClassName` has been specified:\n          - if the value is truthy and `className` has been specified,\n            `className` is returned\n          - if the value is falsy and `falsyClassName` has been specified,\n            `falsyClassName` is returned\n          - otherwise `null` is returned\n        - if the value is `true`, the dasherized last part of the supplied path\n          is returned\n        - if the value is not `false`, `undefined` or `null`, the `value`\n          is returned\n        - if none of the above rules apply, `null` is returned\n\n        @method _classStringForValue\n        @param path\n        @param val\n        @param className\n        @param falsyClassName\n        @static\n        @private\n      */\n      _classStringForValue: function(path, val, className, falsyClassName) {\n        if(isArray(val)) {\n          val = get(val, 'length') !== 0;\n        }\n\n        // When using the colon syntax, evaluate the truthiness or falsiness\n        // of the value to determine which className to return\n        if (className || falsyClassName) {\n          if (className && !!val) {\n            return className;\n\n          } else if (falsyClassName && !val) {\n            return falsyClassName;\n\n          } else {\n            return null;\n          }\n\n        // If value is a Boolean and true, return the dasherized property\n        // name.\n        } else if (val === true) {\n          // Normalize property path to be suitable for use\n          // as a class name. For exaple, content.foo.barBaz\n          // becomes bar-baz.\n          var parts = path.split('.');\n          return dasherize(parts[parts.length-1]);\n\n        // If the value is not false, undefined, or null, return the current\n        // value of the property.\n        } else if (val !== false && val != null) {\n          return val;\n\n        // Nothing to display. Return null so that the old class is removed\n        // but no new class is added.\n        } else {\n          return null;\n        }\n      }\n    });\n\n    var mutation = EmberObject.extend(Evented).create();\n    // TODO MOVE TO RENDERER HOOKS\n    View.addMutationListener = function(callback) {\n      mutation.on('change', callback);\n    };\n\n    View.removeMutationListener = function(callback) {\n      mutation.off('change', callback);\n    };\n\n    View.notifyMutationListeners = function() {\n      mutation.trigger('change');\n    };\n\n    /**\n      Global views hash\n\n      @property views\n      @static\n      @type Hash\n    */\n    View.views = {};\n\n    // If someone overrides the child views computed property when\n    // defining their class, we want to be able to process the user's\n    // supplied childViews and then restore the original computed property\n    // at view initialization time. This happens in Ember.ContainerView's init\n    // method.\n    View.childViewsProperty = childViewsProperty;\n\n    View.applyAttributeBindings = function(elem, name, value) {\n      var type = typeOf(value);\n\n      // if this changes, also change the logic in ember-handlebars/lib/helpers/binding.js\n      if (name !== 'value' && (type === 'string' || (type === 'number' && !isNaN(value)))) {\n        if (value !== elem.attr(name)) {\n          elem.attr(name, value);\n        }\n      } else if (name === 'value' || type === 'boolean') {\n        if (isNone(value) || value === false) {\n          // `null`, `undefined` or `false` should remove attribute\n          elem.removeAttr(name);\n          // In IE8 `prop` couldn't remove attribute when name is `required`.\n          if (name === 'required') {\n            elem.removeProp(name);\n          } else {\n            elem.prop(name, '');\n          }\n        } else if (value !== elem.prop(name)) {\n          // value should always be properties\n          elem.prop(name, value);\n        }\n      } else if (!value) {\n        elem.removeAttr(name);\n      }\n    };\n\n    __exports__[\"default\"] = View;\n  });\nenifed(\"ember\",\n  [\"ember-metal\",\"ember-runtime\",\"ember-handlebars\",\"ember-views\",\"ember-routing\",\"ember-routing-handlebars\",\"ember-application\",\"ember-extension-support\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__) {\n    \"use strict\";\n    /* global navigator */\n    // require the main entry points for each of these packages\n    // this is so that the global exports occur properly\n\n    // do this to ensure that Ember.Test is defined properly on the global\n    // if it is present.\n    if (Ember.__loader.registry['ember-testing']) {\n      requireModule('ember-testing');\n    }\n\n    /**\n    Ember\n\n    @module ember\n    */\n\n    Ember.deprecate('Usage of Ember is deprecated for Internet Explorer 6 and 7, support will be removed in the next major version.', !navigator.userAgent.match(/MSIE [67]/));\n  });\nenifed(\"morph\",\n  [\"./morph/morph\",\"./morph/dom-helper\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Morph = __dependency1__[\"default\"];\n    var Morph;\n    __exports__.Morph = Morph;\n    var DOMHelper = __dependency2__[\"default\"];\n    var DOMHelper;\n    __exports__.DOMHelper = DOMHelper;\n  });\nenifed(\"morph/dom-helper\",\n  [\"../morph/morph\",\"./dom-helper/build-html-dom\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Morph = __dependency1__[\"default\"];\n    var buildHTMLDOM = __dependency2__.buildHTMLDOM;\n    var svgNamespace = __dependency2__.svgNamespace;\n    var svgHTMLIntegrationPoints = __dependency2__.svgHTMLIntegrationPoints;\n\n    var deletesBlankTextNodes = (function(){\n      var element = document.createElement('div');\n      element.appendChild( document.createTextNode('') );\n      var clonedElement = element.cloneNode(true);\n      return clonedElement.childNodes.length === 0;\n    })();\n\n    var ignoresCheckedAttribute = (function(){\n      var element = document.createElement('input');\n      element.setAttribute('checked', 'checked');\n      var clonedElement = element.cloneNode(false);\n      return !clonedElement.checked;\n    })();\n\n    function isSVG(ns){\n      return ns === svgNamespace;\n    }\n\n    // This is not the namespace of the element, but of\n    // the elements inside that elements.\n    function interiorNamespace(element){\n      if (\n        element &&\n        element.namespaceURI === svgNamespace &&\n        !svgHTMLIntegrationPoints[element.tagName]\n      ) {\n        return svgNamespace;\n      } else {\n        return null;\n      }\n    }\n\n    // The HTML spec allows for \"omitted start tags\". These tags are optional\n    // when their intended child is the first thing in the parent tag. For\n    // example, this is a tbody start tag:\n    //\n    // <table>\n    //   <tbody>\n    //     <tr>\n    //\n    // The tbody may be omitted, and the browser will accept and render:\n    //\n    // <table>\n    //   <tr>\n    //\n    // However, the omitted start tag will still be added to the DOM. Here\n    // we test the string and context to see if the browser is about to\n    // perform this cleanup.\n    //\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#optional-tags\n    // describes which tags are omittable. The spec for tbody and colgroup\n    // explains this behavior:\n    //\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/tables.html#the-tbody-element\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/tables.html#the-colgroup-element\n    //\n\n    var omittedStartTagChildTest = /<([\\w:]+)/;\n    function detectOmittedStartTag(string, contextualElement){\n      // Omitted start tags are only inside table tags.\n      if (contextualElement.tagName === 'TABLE') {\n        var omittedStartTagChildMatch = omittedStartTagChildTest.exec(string);\n        if (omittedStartTagChildMatch) {\n          var omittedStartTagChild = omittedStartTagChildMatch[1];\n          // It is already asserted that the contextual element is a table\n          // and not the proper start tag. Just see if a tag was omitted.\n          return omittedStartTagChild === 'tr' ||\n                 omittedStartTagChild === 'col';\n        }\n      }\n    }\n\n    function buildSVGDOM(html, dom){\n      var div = dom.document.createElement('div');\n      div.innerHTML = '<svg>'+html+'</svg>';\n      return div.firstChild.childNodes;\n    }\n\n    /*\n     * A class wrapping DOM functions to address environment compatibility,\n     * namespaces, contextual elements for morph un-escaped content\n     * insertion.\n     *\n     * When entering a template, a DOMHelper should be passed:\n     *\n     *   template(context, { hooks: hooks, dom: new DOMHelper() });\n     *\n     * TODO: support foreignObject as a passed contextual element. It has\n     * a namespace (svg) that does not match its internal namespace\n     * (xhtml).\n     *\n     * @class DOMHelper\n     * @constructor\n     * @param {HTMLDocument} _document The document DOM methods are proxied to\n     */\n    function DOMHelper(_document){\n      this.document = _document || window.document;\n      this.namespace = null;\n    }\n\n    var prototype = DOMHelper.prototype;\n    prototype.constructor = DOMHelper;\n\n    prototype.insertBefore = function(element, childElement, referenceChild) {\n      return element.insertBefore(childElement, referenceChild);\n    };\n\n    prototype.appendChild = function(element, childElement) {\n      return element.appendChild(childElement);\n    };\n\n    prototype.appendText = function(element, text) {\n      return element.appendChild(this.document.createTextNode(text));\n    };\n\n    prototype.setAttribute = function(element, name, value) {\n      element.setAttribute(name, value);\n    };\n\n    if (document.createElementNS) {\n      // Only opt into namespace detection if a contextualElement\n      // is passed.\n      prototype.createElement = function(tagName, contextualElement) {\n        var namespace = this.namespace;\n        if (contextualElement) {\n          if (tagName === 'svg') {\n            namespace = svgNamespace;\n          } else {\n            namespace = interiorNamespace(contextualElement);\n          }\n        }\n        if (namespace) {\n          return this.document.createElementNS(namespace, tagName);\n        } else {\n          return this.document.createElement(tagName);\n        }\n      };\n    } else {\n      prototype.createElement = function(tagName) {\n        return this.document.createElement(tagName);\n      };\n    }\n\n    prototype.setNamespace = function(ns) {\n      this.namespace = ns;\n    };\n\n    prototype.detectNamespace = function(element) {\n      this.namespace = interiorNamespace(element);\n    };\n\n    prototype.createDocumentFragment = function(){\n      return this.document.createDocumentFragment();\n    };\n\n    prototype.createTextNode = function(text){\n      return this.document.createTextNode(text);\n    };\n\n    prototype.repairClonedNode = function(element, blankChildTextNodes, isChecked){\n      if (deletesBlankTextNodes && blankChildTextNodes.length > 0) {\n        for (var i=0, len=blankChildTextNodes.length;i<len;i++){\n          var textNode = this.document.createTextNode(''),\n              offset = blankChildTextNodes[i],\n              before = element.childNodes[offset];\n          if (before) {\n            element.insertBefore(textNode, before);\n          } else {\n            element.appendChild(textNode);\n          }\n        }\n      }\n      if (ignoresCheckedAttribute && isChecked) {\n        element.setAttribute('checked', 'checked');\n      }\n    };\n\n    prototype.cloneNode = function(element, deep){\n      var clone = element.cloneNode(!!deep);\n      return clone;\n    };\n\n    prototype.createMorph = function(parent, start, end, contextualElement){\n      if (!contextualElement && parent.nodeType === 1) {\n        contextualElement = parent;\n      }\n      return new Morph(parent, start, end, this, contextualElement);\n    };\n\n    // This helper is just to keep the templates good looking,\n    // passing integers instead of element references.\n    prototype.createMorphAt = function(parent, startIndex, endIndex, contextualElement){\n      var childNodes = parent.childNodes,\n          start = startIndex === -1 ? null : childNodes[startIndex],\n          end = endIndex === -1 ? null : childNodes[endIndex];\n      return this.createMorph(parent, start, end, contextualElement);\n    };\n\n    prototype.insertMorphBefore = function(element, referenceChild, contextualElement) {\n      var start = this.document.createTextNode('');\n      var end = this.document.createTextNode('');\n      element.insertBefore(start, referenceChild);\n      element.insertBefore(end, referenceChild);\n      return this.createMorph(element, start, end, contextualElement);\n    };\n\n    prototype.appendMorph = function(element, contextualElement) {\n      var start = this.document.createTextNode('');\n      var end = this.document.createTextNode('');\n      element.appendChild(start);\n      element.appendChild(end);\n      return this.createMorph(element, start, end, contextualElement);\n    };\n\n    prototype.parseHTML = function(html, contextualElement) {\n      var isSVGContent = (\n        isSVG(this.namespace) &&\n        !svgHTMLIntegrationPoints[contextualElement.tagName]\n      );\n\n      if (isSVGContent) {\n        return buildSVGDOM(html, this);\n      } else {\n        var nodes = buildHTMLDOM(html, contextualElement, this);\n        if (detectOmittedStartTag(html, contextualElement)) {\n          var node = nodes[0];\n          while (node && node.nodeType !== 1) {\n            node = node.nextSibling;\n          }\n          return node.childNodes;\n        } else {\n          return nodes;\n        }\n      }\n    };\n\n    __exports__[\"default\"] = DOMHelper;\n  });\nenifed(\"morph/dom-helper/build-html-dom\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var svgHTMLIntegrationPoints = {foreignObject: 1, desc: 1, title: 1};\n    __exports__.svgHTMLIntegrationPoints = svgHTMLIntegrationPoints;var svgNamespace = 'http://www.w3.org/2000/svg';\n    __exports__.svgNamespace = svgNamespace;\n    // Safari does not like using innerHTML on SVG HTML integration\n    // points (desc/title/foreignObject).\n    var needsIntegrationPointFix = document && document.createElementNS && (function() {\n      // In FF title will not accept innerHTML.\n      var testEl = document.createElementNS(svgNamespace, 'title');\n      testEl.innerHTML = \"<div></div>\";\n      return testEl.childNodes.length === 0 || testEl.childNodes[0].nodeType !== 1;\n    })();\n\n    // Internet Explorer prior to 9 does not allow setting innerHTML if the first element\n    // is a \"zero-scope\" element. This problem can be worked around by making\n    // the first node an invisible text node. We, like Modernizr, use &shy;\n    var needsShy = document && (function() {\n      var testEl = document.createElement('div');\n      testEl.innerHTML = \"<div></div>\";\n      testEl.firstChild.innerHTML = \"<script><\\/script>\";\n      return testEl.firstChild.innerHTML === '';\n    })();\n\n    // IE 8 (and likely earlier) likes to move whitespace preceeding\n    // a script tag to appear after it. This means that we can\n    // accidentally remove whitespace when updating a morph.\n    var movesWhitespace = document && (function() {\n      var testEl = document.createElement('div');\n      testEl.innerHTML = \"Test: <script type='text/x-placeholder'><\\/script>Value\";\n      return testEl.childNodes[0].nodeValue === 'Test:' &&\n              testEl.childNodes[2].nodeValue === ' Value';\n    })();\n\n    // IE8 create a selected attribute where they should only\n    // create a property\n    var createsSelectedAttribute = document && (function() {\n      var testEl = document.createElement('div');\n      testEl.innerHTML = \"<select><option></option></select>\";\n      return testEl.childNodes[0].childNodes[0].getAttribute('selected') === 'selected';\n    })();\n\n    var detectAutoSelectedOption;\n    if (createsSelectedAttribute) {\n      var detectAutoSelectedOptionRegex = /<option[^>]*selected/;\n      detectAutoSelectedOption = function detectAutoSelectedOption(select, option, html) { //jshint ignore:line\n        return select.selectedIndex === 0 &&\n               !detectAutoSelectedOptionRegex.test(html);\n      };\n    } else {\n      detectAutoSelectedOption = function detectAutoSelectedOption(select, option, html) { //jshint ignore:line\n        var selectedAttribute = option.getAttribute('selected');\n        return select.selectedIndex === 0 && (\n                 selectedAttribute === null ||\n                 ( selectedAttribute !== '' && selectedAttribute.toLowerCase() !== 'selected' )\n                );\n      };\n    }\n\n    // IE 9 and earlier don't allow us to set innerHTML on col, colgroup, frameset,\n    // html, style, table, tbody, tfoot, thead, title, tr. Detect this and add\n    // them to an initial list of corrected tags.\n    //\n    // Here we are only dealing with the ones which can have child nodes.\n    //\n    var tagNamesRequiringInnerHTMLFix, tableNeedsInnerHTMLFix;\n    var tableInnerHTMLTestElement = document.createElement('table');\n    try {\n      tableInnerHTMLTestElement.innerHTML = '<tbody></tbody>';\n    } catch (e) {\n    } finally {\n      tableNeedsInnerHTMLFix = (tableInnerHTMLTestElement.childNodes.length === 0);\n    }\n    if (tableNeedsInnerHTMLFix) {\n      tagNamesRequiringInnerHTMLFix = {\n        colgroup: ['table'],\n        table: [],\n        tbody: ['table'],\n        tfoot: ['table'],\n        thead: ['table'],\n        tr: ['table', 'tbody']\n      };\n    }\n\n    // IE 8 doesn't allow setting innerHTML on a select tag. Detect this and\n    // add it to the list of corrected tags.\n    //\n    var selectInnerHTMLTestElement = document.createElement('select');\n    selectInnerHTMLTestElement.innerHTML = '<option></option>';\n    if (selectInnerHTMLTestElement) {\n      tagNamesRequiringInnerHTMLFix = tagNamesRequiringInnerHTMLFix || {};\n      tagNamesRequiringInnerHTMLFix.select = [];\n    }\n\n    function scriptSafeInnerHTML(element, html) {\n      // without a leading text node, IE will drop a leading script tag.\n      html = '&shy;'+html;\n\n      element.innerHTML = html;\n\n      var nodes = element.childNodes;\n\n      // Look for &shy; to remove it.\n      var shyElement = nodes[0];\n      while (shyElement.nodeType === 1 && !shyElement.nodeName) {\n        shyElement = shyElement.firstChild;\n      }\n      // At this point it's the actual unicode character.\n      if (shyElement.nodeType === 3 && shyElement.nodeValue.charAt(0) === \"\\u00AD\") {\n        var newValue = shyElement.nodeValue.slice(1);\n        if (newValue.length) {\n          shyElement.nodeValue = shyElement.nodeValue.slice(1);\n        } else {\n          shyElement.parentNode.removeChild(shyElement);\n        }\n      }\n\n      return nodes;\n    }\n\n    function buildDOMWithFix(html, contextualElement){\n      var tagName = contextualElement.tagName;\n\n      // Firefox versions < 11 do not have support for element.outerHTML.\n      var outerHTML = contextualElement.outerHTML || new XMLSerializer().serializeToString(contextualElement);\n      if (!outerHTML) {\n        throw \"Can't set innerHTML on \"+tagName+\" in this browser\";\n      }\n\n      var wrappingTags = tagNamesRequiringInnerHTMLFix[tagName.toLowerCase()];\n      var startTag = outerHTML.match(new RegExp(\"<\"+tagName+\"([^>]*)>\", 'i'))[0];\n      var endTag = '</'+tagName+'>';\n\n      var wrappedHTML = [startTag, html, endTag];\n\n      var i = wrappingTags.length;\n      var wrappedDepth = 1 + i;\n      while(i--) {\n        wrappedHTML.unshift('<'+wrappingTags[i]+'>');\n        wrappedHTML.push('</'+wrappingTags[i]+'>');\n      }\n\n      var wrapper = document.createElement('div');\n      scriptSafeInnerHTML(wrapper, wrappedHTML.join(''));\n      var element = wrapper;\n      while (wrappedDepth--) {\n        element = element.firstChild;\n        while (element && element.nodeType !== 1) {\n          element = element.nextSibling;\n        }\n      }\n      while (element && element.tagName !== tagName) {\n        element = element.nextSibling;\n      }\n      return element ? element.childNodes : [];\n    }\n\n    var buildDOM;\n    if (needsShy) {\n      buildDOM = function buildDOM(html, contextualElement, dom){\n        contextualElement = dom.cloneNode(contextualElement, false);\n        scriptSafeInnerHTML(contextualElement, html);\n        return contextualElement.childNodes;\n      };\n    } else {\n      buildDOM = function buildDOM(html, contextualElement, dom){\n        contextualElement = dom.cloneNode(contextualElement, false);\n        contextualElement.innerHTML = html;\n        return contextualElement.childNodes;\n      };\n    }\n\n    var buildIESafeDOM;\n    if (tagNamesRequiringInnerHTMLFix || movesWhitespace) {\n      buildIESafeDOM = function buildIESafeDOM(html, contextualElement, dom) {\n        // Make a list of the leading text on script nodes. Include\n        // script tags without any whitespace for easier processing later.\n        var spacesBefore = [];\n        var spacesAfter = [];\n        html = html.replace(/(\\s*)(<script)/g, function(match, spaces, tag) {\n          spacesBefore.push(spaces);\n          return tag;\n        });\n\n        html = html.replace(/(<\\/script>)(\\s*)/g, function(match, tag, spaces) {\n          spacesAfter.push(spaces);\n          return tag;\n        });\n\n        // Fetch nodes\n        var nodes;\n        if (tagNamesRequiringInnerHTMLFix[contextualElement.tagName.toLowerCase()]) {\n          // buildDOMWithFix uses string wrappers for problematic innerHTML.\n          nodes = buildDOMWithFix(html, contextualElement);\n        } else {\n          nodes = buildDOM(html, contextualElement, dom);\n        }\n\n        // Build a list of script tags, the nodes themselves will be\n        // mutated as we add test nodes.\n        var i, j, node, nodeScriptNodes;\n        var scriptNodes = [];\n        for (i=0;node=nodes[i];i++) {\n          if (node.nodeType !== 1) {\n            continue;\n          }\n          if (node.tagName === 'SCRIPT') {\n            scriptNodes.push(node);\n          } else {\n            nodeScriptNodes = node.getElementsByTagName('script');\n            for (j=0;j<nodeScriptNodes.length;j++) {\n              scriptNodes.push(nodeScriptNodes[j]);\n            }\n          }\n        }\n\n        // Walk the script tags and put back their leading text nodes.\n        var scriptNode, textNode, spaceBefore, spaceAfter;\n        for (i=0;scriptNode=scriptNodes[i];i++) {\n          spaceBefore = spacesBefore[i];\n          if (spaceBefore && spaceBefore.length > 0) {\n            textNode = dom.document.createTextNode(spaceBefore);\n            scriptNode.parentNode.insertBefore(textNode, scriptNode);\n          }\n\n          spaceAfter = spacesAfter[i];\n          if (spaceAfter && spaceAfter.length > 0) {\n            textNode = dom.document.createTextNode(spaceAfter);\n            scriptNode.parentNode.insertBefore(textNode, scriptNode.nextSibling);\n          }\n        }\n\n        return nodes;\n      };\n    } else {\n      buildIESafeDOM = buildDOM;\n    }\n\n    // When parsing innerHTML, the browser may set up DOM with some things\n    // not desired. For example, with a select element context and option\n    // innerHTML the first option will be marked selected.\n    //\n    // This method cleans up some of that, resetting those values back to\n    // their defaults.\n    //\n    function buildSafeDOM(html, contextualElement, dom) {\n      var childNodes = buildIESafeDOM(html, contextualElement, dom);\n\n      if (contextualElement.tagName === 'SELECT') {\n        // Walk child nodes\n        for (var i = 0; childNodes[i]; i++) {\n          // Find and process the first option child node\n          if (childNodes[i].tagName === 'OPTION') {\n            if (detectAutoSelectedOption(childNodes[i].parentNode, childNodes[i], html)) {\n              // If the first node is selected but does not have an attribute,\n              // presume it is not really selected.\n              childNodes[i].parentNode.selectedIndex = -1;\n            }\n            break;\n          }\n        }\n      }\n\n      return childNodes;\n    }\n\n    var buildHTMLDOM;\n    if (needsIntegrationPointFix) {\n      buildHTMLDOM = function buildHTMLDOM(html, contextualElement, dom){\n        if (svgHTMLIntegrationPoints[contextualElement.tagName]) {\n          return buildSafeDOM(html, document.createElement('div'), dom);\n        } else {\n          return buildSafeDOM(html, contextualElement, dom);\n        }\n      };\n    } else {\n      buildHTMLDOM = buildSafeDOM;\n    }\n\n    __exports__.buildHTMLDOM = buildHTMLDOM;\n  });\nenifed(\"morph/morph\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var splice = Array.prototype.splice;\n\n    function ensureStartEnd(start, end) {\n      if (start === null || end === null) {\n        throw new Error('a fragment parent must have boundary nodes in order to detect insertion');\n      }\n    }\n\n    function ensureContext(contextualElement) {\n      if (!contextualElement || contextualElement.nodeType !== 1) {\n        throw new Error('An element node must be provided for a contextualElement, you provided ' +\n                        (contextualElement ? 'nodeType ' + contextualElement.nodeType : 'nothing'));\n      }\n    }\n\n    // TODO: this is an internal API, this should be an assert\n    function Morph(parent, start, end, domHelper, contextualElement) {\n      if (parent.nodeType === 11) {\n        ensureStartEnd(start, end);\n        this.element = null;\n      } else {\n        this.element = parent;\n      }\n      this._parent = parent;\n      this.start = start;\n      this.end = end;\n      this.domHelper = domHelper;\n      ensureContext(contextualElement);\n      this.contextualElement = contextualElement;\n      this.reset();\n    }\n\n    Morph.prototype.reset = function() {\n      this.text = null;\n      this.owner = null;\n      this.morphs = null;\n      this.before = null;\n      this.after = null;\n      this.escaped = true;\n    };\n\n    Morph.prototype.parent = function () {\n      if (!this.element) {\n        var parent = this.start.parentNode;\n        if (this._parent !== parent) {\n          this.element = this._parent = parent;\n        }\n      }\n      return this._parent;\n    };\n\n    Morph.prototype.destroy = function () {\n      if (this.owner) {\n        this.owner.removeMorph(this);\n      } else {\n        clear(this.element || this.parent(), this.start, this.end);\n      }\n    };\n\n    Morph.prototype.removeMorph = function (morph) {\n      var morphs = this.morphs;\n      for (var i=0, l=morphs.length; i<l; i++) {\n        if (morphs[i] === morph) {\n          this.replace(i, 1);\n          break;\n        }\n      }\n    };\n\n    Morph.prototype.update = function (nodeOrString) {\n      this._update(this.element || this.parent(), nodeOrString);\n    };\n\n    Morph.prototype.updateNode = function (node) {\n      var parent = this.element || this.parent();\n      if (!node) return this._updateText(parent, '');\n      this._updateNode(parent, node);\n    };\n\n    Morph.prototype.updateText = function (text) {\n      this._updateText(this.element || this.parent(), text);\n    };\n\n    Morph.prototype.updateHTML = function (html) {\n      var parent = this.element || this.parent();\n      if (!html) return this._updateText(parent, '');\n      this._updateHTML(parent, html);\n    };\n\n    Morph.prototype._update = function (parent, nodeOrString) {\n      if (nodeOrString === null || nodeOrString === undefined) {\n        this._updateText(parent, '');\n      } else if (typeof nodeOrString === 'string') {\n        if (this.escaped) {\n          this._updateText(parent, nodeOrString);\n        } else {\n          this._updateHTML(parent, nodeOrString);\n        }\n      } else if (nodeOrString.nodeType) {\n        this._updateNode(parent, nodeOrString);\n      } else if (nodeOrString.string) { // duck typed SafeString\n        this._updateHTML(parent, nodeOrString.string);\n      } else {\n        this._updateText(parent, nodeOrString.toString());\n      }\n    };\n\n    Morph.prototype._updateNode = function (parent, node) {\n      if (this.text) {\n        if (node.nodeType === 3) {\n          this.text.nodeValue = node.nodeValue;\n          return;\n        } else {\n          this.text = null;\n        }\n      }\n      var start = this.start, end = this.end;\n      clear(parent, start, end);\n      parent.insertBefore(node, end);\n      if (this.before !== null) {\n        this.before.end = start.nextSibling;\n      }\n      if (this.after !== null) {\n        this.after.start = end.previousSibling;\n      }\n    };\n\n    Morph.prototype._updateText = function (parent, text) {\n      if (this.text) {\n        this.text.nodeValue = text;\n        return;\n      }\n      var node = this.domHelper.createTextNode(text);\n      this.text = node;\n      clear(parent, this.start, this.end);\n      parent.insertBefore(node, this.end);\n      if (this.before !== null) {\n        this.before.end = node;\n      }\n      if (this.after !== null) {\n        this.after.start = node;\n      }\n    };\n\n    Morph.prototype._updateHTML = function (parent, html) {\n      var start = this.start, end = this.end;\n      clear(parent, start, end);\n      this.text = null;\n      var childNodes = this.domHelper.parseHTML(html, this.contextualElement);\n      appendChildren(parent, end, childNodes);\n      if (this.before !== null) {\n        this.before.end = start.nextSibling;\n      }\n      if (this.after !== null) {\n        this.after.start = end.previousSibling;\n      }\n    };\n\n    Morph.prototype.append = function (node) {\n      if (this.morphs === null) this.morphs = [];\n      var index = this.morphs.length;\n      return this.insert(index, node);\n    };\n\n    Morph.prototype.insert = function (index, node) {\n      if (this.morphs === null) this.morphs = [];\n      var parent = this.element || this.parent();\n      var morphs = this.morphs;\n      var before = index > 0 ? morphs[index-1] : null;\n      var after  = index < morphs.length ? morphs[index] : null;\n      var start  = before === null ? this.start : (before.end === null ? parent.lastChild : before.end.previousSibling);\n      var end    = after === null ? this.end : (after.start === null ? parent.firstChild : after.start.nextSibling);\n      var morph  = new Morph(parent, start, end, this.domHelper, this.contextualElement);\n\n      morph.owner = this;\n      morph._update(parent, node);\n\n      if (before !== null) {\n        morph.before = before;\n        before.end = start.nextSibling;\n        before.after = morph;\n      }\n\n      if (after !== null) {\n        morph.after = after;\n        after.before = morph;\n        after.start = end.previousSibling;\n      }\n\n      this.morphs.splice(index, 0, morph);\n      return morph;\n    };\n\n    Morph.prototype.replace = function (index, removedLength, addedNodes) {\n      if (this.morphs === null) this.morphs = [];\n      var parent = this.element || this.parent();\n      var morphs = this.morphs;\n      var before = index > 0 ? morphs[index-1] : null;\n      var after = index+removedLength < morphs.length ? morphs[index+removedLength] : null;\n      var start = before === null ? this.start : (before.end === null ? parent.lastChild : before.end.previousSibling);\n      var end   = after === null ? this.end : (after.start === null ? parent.firstChild : after.start.nextSibling);\n      var addedLength = addedNodes === undefined ? 0 : addedNodes.length;\n      var args, i, current;\n\n      if (removedLength > 0) {\n        clear(parent, start, end);\n      }\n\n      if (addedLength === 0) {\n        if (before !== null) {\n          before.after = after;\n          before.end = end;\n        }\n        if (after !== null) {\n          after.before = before;\n          after.start = start;\n        }\n        morphs.splice(index, removedLength);\n        return;\n      }\n\n      args = new Array(addedLength+2);\n      if (addedLength > 0) {\n        for (i=0; i<addedLength; i++) {\n          args[i+2] = current = new Morph(parent, start, end, this.domHelper, this.contextualElement);\n          current._update(parent, addedNodes[i]);\n          current.owner = this;\n          if (before !== null) {\n            current.before = before;\n            before.end = start.nextSibling;\n            before.after = current;\n          }\n          before = current;\n          start = end === null ? parent.lastChild : end.previousSibling;\n        }\n        if (after !== null) {\n          current.after = after;\n          after.before = current;\n          after.start = end.previousSibling;\n        }\n      }\n\n      args[0] = index;\n      args[1] = removedLength;\n\n      splice.apply(morphs, args);\n    };\n\n    function appendChildren(parent, end, nodeList) {\n      var ref = end;\n      var i = nodeList.length;\n      var node;\n\n      while (i--) {\n        node = nodeList[i];\n        parent.insertBefore(node, ref);\n        ref = node;\n      }\n    }\n\n    function clear(parent, start, end) {\n      var current, previous;\n      if (end === null) {\n        current = parent.lastChild;\n      } else {\n        current = end.previousSibling;\n      }\n\n      while (current !== null && current !== start) {\n        previous = current.previousSibling;\n        parent.removeChild(current);\n        current = previous;\n      }\n    }\n\n    __exports__[\"default\"] = Morph;\n  });\nenifed(\"route-recognizer\",\n  [\"route-recognizer/dsl\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var map = __dependency1__[\"default\"];\n\n    var specials = [\n      '/', '.', '*', '+', '?', '|',\n      '(', ')', '[', ']', '{', '}', '\\\\'\n    ];\n\n    var escapeRegex = new RegExp('(\\\\' + specials.join('|\\\\') + ')', 'g');\n\n    function isArray(test) {\n      return Object.prototype.toString.call(test) === \"[object Array]\";\n    }\n\n    // A Segment represents a segment in the original route description.\n    // Each Segment type provides an `eachChar` and `regex` method.\n    //\n    // The `eachChar` method invokes the callback with one or more character\n    // specifications. A character specification consumes one or more input\n    // characters.\n    //\n    // The `regex` method returns a regex fragment for the segment. If the\n    // segment is a dynamic of star segment, the regex fragment also includes\n    // a capture.\n    //\n    // A character specification contains:\n    //\n    // * `validChars`: a String with a list of all valid characters, or\n    // * `invalidChars`: a String with a list of all invalid characters\n    // * `repeat`: true if the character specification can repeat\n\n    function StaticSegment(string) { this.string = string; }\n    StaticSegment.prototype = {\n      eachChar: function(callback) {\n        var string = this.string, ch;\n\n        for (var i=0, l=string.length; i<l; i++) {\n          ch = string.charAt(i);\n          callback({ validChars: ch });\n        }\n      },\n\n      regex: function() {\n        return this.string.replace(escapeRegex, '\\\\$1');\n      },\n\n      generate: function() {\n        return this.string;\n      }\n    };\n\n    function DynamicSegment(name) { this.name = name; }\n    DynamicSegment.prototype = {\n      eachChar: function(callback) {\n        callback({ invalidChars: \"/\", repeat: true });\n      },\n\n      regex: function() {\n        return \"([^/]+)\";\n      },\n\n      generate: function(params) {\n        return params[this.name];\n      }\n    };\n\n    function StarSegment(name) { this.name = name; }\n    StarSegment.prototype = {\n      eachChar: function(callback) {\n        callback({ invalidChars: \"\", repeat: true });\n      },\n\n      regex: function() {\n        return \"(.+)\";\n      },\n\n      generate: function(params) {\n        return params[this.name];\n      }\n    };\n\n    function EpsilonSegment() {}\n    EpsilonSegment.prototype = {\n      eachChar: function() {},\n      regex: function() { return \"\"; },\n      generate: function() { return \"\"; }\n    };\n\n    function parse(route, names, types) {\n      // normalize route as not starting with a \"/\". Recognition will\n      // also normalize.\n      if (route.charAt(0) === \"/\") { route = route.substr(1); }\n\n      var segments = route.split(\"/\"), results = [];\n\n      for (var i=0, l=segments.length; i<l; i++) {\n        var segment = segments[i], match;\n\n        if (match = segment.match(/^:([^\\/]+)$/)) {\n          results.push(new DynamicSegment(match[1]));\n          names.push(match[1]);\n          types.dynamics++;\n        } else if (match = segment.match(/^\\*([^\\/]+)$/)) {\n          results.push(new StarSegment(match[1]));\n          names.push(match[1]);\n          types.stars++;\n        } else if(segment === \"\") {\n          results.push(new EpsilonSegment());\n        } else {\n          results.push(new StaticSegment(segment));\n          types.statics++;\n        }\n      }\n\n      return results;\n    }\n\n    // A State has a character specification and (`charSpec`) and a list of possible\n    // subsequent states (`nextStates`).\n    //\n    // If a State is an accepting state, it will also have several additional\n    // properties:\n    //\n    // * `regex`: A regular expression that is used to extract parameters from paths\n    //   that reached this accepting state.\n    // * `handlers`: Information on how to convert the list of captures into calls\n    //   to registered handlers with the specified parameters\n    // * `types`: How many static, dynamic or star segments in this route. Used to\n    //   decide which route to use if multiple registered routes match a path.\n    //\n    // Currently, State is implemented naively by looping over `nextStates` and\n    // comparing a character specification against a character. A more efficient\n    // implementation would use a hash of keys pointing at one or more next states.\n\n    function State(charSpec) {\n      this.charSpec = charSpec;\n      this.nextStates = [];\n    }\n\n    State.prototype = {\n      get: function(charSpec) {\n        var nextStates = this.nextStates;\n\n        for (var i=0, l=nextStates.length; i<l; i++) {\n          var child = nextStates[i];\n\n          var isEqual = child.charSpec.validChars === charSpec.validChars;\n          isEqual = isEqual && child.charSpec.invalidChars === charSpec.invalidChars;\n\n          if (isEqual) { return child; }\n        }\n      },\n\n      put: function(charSpec) {\n        var state;\n\n        // If the character specification already exists in a child of the current\n        // state, just return that state.\n        if (state = this.get(charSpec)) { return state; }\n\n        // Make a new state for the character spec\n        state = new State(charSpec);\n\n        // Insert the new state as a child of the current state\n        this.nextStates.push(state);\n\n        // If this character specification repeats, insert the new state as a child\n        // of itself. Note that this will not trigger an infinite loop because each\n        // transition during recognition consumes a character.\n        if (charSpec.repeat) {\n          state.nextStates.push(state);\n        }\n\n        // Return the new state\n        return state;\n      },\n\n      // Find a list of child states matching the next character\n      match: function(ch) {\n        // DEBUG \"Processing `\" + ch + \"`:\"\n        var nextStates = this.nextStates,\n            child, charSpec, chars;\n\n        // DEBUG \"  \" + debugState(this)\n        var returned = [];\n\n        for (var i=0, l=nextStates.length; i<l; i++) {\n          child = nextStates[i];\n\n          charSpec = child.charSpec;\n\n          if (typeof (chars = charSpec.validChars) !== 'undefined') {\n            if (chars.indexOf(ch) !== -1) { returned.push(child); }\n          } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {\n            if (chars.indexOf(ch) === -1) { returned.push(child); }\n          }\n        }\n\n        return returned;\n      }\n\n      /** IF DEBUG\n      , debug: function() {\n        var charSpec = this.charSpec,\n            debug = \"[\",\n            chars = charSpec.validChars || charSpec.invalidChars;\n\n        if (charSpec.invalidChars) { debug += \"^\"; }\n        debug += chars;\n        debug += \"]\";\n\n        if (charSpec.repeat) { debug += \"+\"; }\n\n        return debug;\n      }\n      END IF **/\n    };\n\n    /** IF DEBUG\n    function debug(log) {\n      console.log(log);\n    }\n\n    function debugState(state) {\n      return state.nextStates.map(function(n) {\n        if (n.nextStates.length === 0) { return \"( \" + n.debug() + \" [accepting] )\"; }\n        return \"( \" + n.debug() + \" <then> \" + n.nextStates.map(function(s) { return s.debug() }).join(\" or \") + \" )\";\n      }).join(\", \")\n    }\n    END IF **/\n\n    // This is a somewhat naive strategy, but should work in a lot of cases\n    // A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n    //\n    // This strategy generally prefers more static and less dynamic matching.\n    // Specifically, it\n    //\n    //  * prefers fewer stars to more, then\n    //  * prefers using stars for less of the match to more, then\n    //  * prefers fewer dynamic segments to more, then\n    //  * prefers more static segments to more\n    function sortSolutions(states) {\n      return states.sort(function(a, b) {\n        if (a.types.stars !== b.types.stars) { return a.types.stars - b.types.stars; }\n\n        if (a.types.stars) {\n          if (a.types.statics !== b.types.statics) { return b.types.statics - a.types.statics; }\n          if (a.types.dynamics !== b.types.dynamics) { return b.types.dynamics - a.types.dynamics; }\n        }\n\n        if (a.types.dynamics !== b.types.dynamics) { return a.types.dynamics - b.types.dynamics; }\n        if (a.types.statics !== b.types.statics) { return b.types.statics - a.types.statics; }\n\n        return 0;\n      });\n    }\n\n    function recognizeChar(states, ch) {\n      var nextStates = [];\n\n      for (var i=0, l=states.length; i<l; i++) {\n        var state = states[i];\n\n        nextStates = nextStates.concat(state.match(ch));\n      }\n\n      return nextStates;\n    }\n\n    var oCreate = Object.create || function(proto) {\n      function F() {}\n      F.prototype = proto;\n      return new F();\n    };\n\n    function RecognizeResults(queryParams) {\n      this.queryParams = queryParams || {};\n    }\n    RecognizeResults.prototype = oCreate({\n      splice: Array.prototype.splice,\n      slice:  Array.prototype.slice,\n      push:   Array.prototype.push,\n      length: 0,\n      queryParams: null\n    });\n\n    function findHandler(state, path, queryParams) {\n      var handlers = state.handlers, regex = state.regex;\n      var captures = path.match(regex), currentCapture = 1;\n      var result = new RecognizeResults(queryParams);\n\n      for (var i=0, l=handlers.length; i<l; i++) {\n        var handler = handlers[i], names = handler.names, params = {};\n\n        for (var j=0, m=names.length; j<m; j++) {\n          params[names[j]] = captures[currentCapture++];\n        }\n\n        result.push({ handler: handler.handler, params: params, isDynamic: !!names.length });\n      }\n\n      return result;\n    }\n\n    function addSegment(currentState, segment) {\n      segment.eachChar(function(ch) {\n        var state;\n\n        currentState = currentState.put(ch);\n      });\n\n      return currentState;\n    }\n\n    // The main interface\n\n    var RouteRecognizer = function() {\n      this.rootState = new State();\n      this.names = {};\n    };\n\n\n    RouteRecognizer.prototype = {\n      add: function(routes, options) {\n        var currentState = this.rootState, regex = \"^\",\n            types = { statics: 0, dynamics: 0, stars: 0 },\n            handlers = [], allSegments = [], name;\n\n        var isEmpty = true;\n\n        for (var i=0, l=routes.length; i<l; i++) {\n          var route = routes[i], names = [];\n\n          var segments = parse(route.path, names, types);\n\n          allSegments = allSegments.concat(segments);\n\n          for (var j=0, m=segments.length; j<m; j++) {\n            var segment = segments[j];\n\n            if (segment instanceof EpsilonSegment) { continue; }\n\n            isEmpty = false;\n\n            // Add a \"/\" for the new segment\n            currentState = currentState.put({ validChars: \"/\" });\n            regex += \"/\";\n\n            // Add a representation of the segment to the NFA and regex\n            currentState = addSegment(currentState, segment);\n            regex += segment.regex();\n          }\n\n          var handler = { handler: route.handler, names: names };\n          handlers.push(handler);\n        }\n\n        if (isEmpty) {\n          currentState = currentState.put({ validChars: \"/\" });\n          regex += \"/\";\n        }\n\n        currentState.handlers = handlers;\n        currentState.regex = new RegExp(regex + \"$\");\n        currentState.types = types;\n\n        if (name = options && options.as) {\n          this.names[name] = {\n            segments: allSegments,\n            handlers: handlers\n          };\n        }\n      },\n\n      handlersFor: function(name) {\n        var route = this.names[name], result = [];\n        if (!route) { throw new Error(\"There is no route named \" + name); }\n\n        for (var i=0, l=route.handlers.length; i<l; i++) {\n          result.push(route.handlers[i]);\n        }\n\n        return result;\n      },\n\n      hasRoute: function(name) {\n        return !!this.names[name];\n      },\n\n      generate: function(name, params) {\n        var route = this.names[name], output = \"\";\n        if (!route) { throw new Error(\"There is no route named \" + name); }\n\n        var segments = route.segments;\n\n        for (var i=0, l=segments.length; i<l; i++) {\n          var segment = segments[i];\n\n          if (segment instanceof EpsilonSegment) { continue; }\n\n          output += \"/\";\n          output += segment.generate(params);\n        }\n\n        if (output.charAt(0) !== '/') { output = '/' + output; }\n\n        if (params && params.queryParams) {\n          output += this.generateQueryString(params.queryParams, route.handlers);\n        }\n\n        return output;\n      },\n\n      generateQueryString: function(params, handlers) {\n        var pairs = [];\n        var keys = [];\n        for(var key in params) {\n          if (params.hasOwnProperty(key)) {\n            keys.push(key);\n          }\n        }\n        keys.sort();\n        for (var i = 0, len = keys.length; i < len; i++) {\n          key = keys[i];\n          var value = params[key];\n          if (value == null) {\n            continue;\n          }\n          var pair = encodeURIComponent(key);\n          if (isArray(value)) {\n            for (var j = 0, l = value.length; j < l; j++) {\n              var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);\n              pairs.push(arrayPair);\n            }\n          } else {\n            pair += \"=\" + encodeURIComponent(value);\n            pairs.push(pair);\n          }\n        }\n\n        if (pairs.length === 0) { return ''; }\n\n        return \"?\" + pairs.join(\"&\");\n      },\n\n      parseQueryString: function(queryString) {\n        var pairs = queryString.split(\"&\"), queryParams = {};\n        for(var i=0; i < pairs.length; i++) {\n          var pair      = pairs[i].split('='),\n              key       = decodeURIComponent(pair[0]),\n              keyLength = key.length,\n              isArray = false,\n              value;\n          if (pair.length === 1) {\n            value = 'true';\n          } else {\n            //Handle arrays\n            if (keyLength > 2 && key.slice(keyLength -2) === '[]') {\n              isArray = true;\n              key = key.slice(0, keyLength - 2);\n              if(!queryParams[key]) {\n                queryParams[key] = [];\n              }\n            }\n            value = pair[1] ? decodeURIComponent(pair[1]) : '';\n          }\n          if (isArray) {\n            queryParams[key].push(value);\n          } else {\n            queryParams[key] = value;\n          }\n        }\n        return queryParams;\n      },\n\n      recognize: function(path) {\n        var states = [ this.rootState ],\n            pathLen, i, l, queryStart, queryParams = {},\n            isSlashDropped = false;\n\n        queryStart = path.indexOf('?');\n        if (queryStart !== -1) {\n          var queryString = path.substr(queryStart + 1, path.length);\n          path = path.substr(0, queryStart);\n          queryParams = this.parseQueryString(queryString);\n        }\n\n        path = decodeURI(path);\n\n        // DEBUG GROUP path\n\n        if (path.charAt(0) !== \"/\") { path = \"/\" + path; }\n\n        pathLen = path.length;\n        if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n          path = path.substr(0, pathLen - 1);\n          isSlashDropped = true;\n        }\n\n        for (i=0, l=path.length; i<l; i++) {\n          states = recognizeChar(states, path.charAt(i));\n          if (!states.length) { break; }\n        }\n\n        // END DEBUG GROUP\n\n        var solutions = [];\n        for (i=0, l=states.length; i<l; i++) {\n          if (states[i].handlers) { solutions.push(states[i]); }\n        }\n\n        states = sortSolutions(solutions);\n\n        var state = solutions[0];\n\n        if (state && state.handlers) {\n          // if a trailing slash was dropped and a star segment is the last segment\n          // specified, put the trailing slash back\n          if (isSlashDropped && state.regex.source.slice(-5) === \"(.+)$\") {\n            path = path + \"/\";\n          }\n          return findHandler(state, path, queryParams);\n        }\n      }\n    };\n\n    RouteRecognizer.prototype.map = map;\n\n    __exports__[\"default\"] = RouteRecognizer;\n  });\nenifed(\"route-recognizer/dsl\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function Target(path, matcher, delegate) {\n      this.path = path;\n      this.matcher = matcher;\n      this.delegate = delegate;\n    }\n\n    Target.prototype = {\n      to: function(target, callback) {\n        var delegate = this.delegate;\n\n        if (delegate && delegate.willAddRoute) {\n          target = delegate.willAddRoute(this.matcher.target, target);\n        }\n\n        this.matcher.add(this.path, target);\n\n        if (callback) {\n          if (callback.length === 0) { throw new Error(\"You must have an argument in the function passed to `to`\"); }\n          this.matcher.addChild(this.path, target, callback, this.delegate);\n        }\n        return this;\n      }\n    };\n\n    function Matcher(target) {\n      this.routes = {};\n      this.children = {};\n      this.target = target;\n    }\n\n    Matcher.prototype = {\n      add: function(path, handler) {\n        this.routes[path] = handler;\n      },\n\n      addChild: function(path, target, callback, delegate) {\n        var matcher = new Matcher(target);\n        this.children[path] = matcher;\n\n        var match = generateMatch(path, matcher, delegate);\n\n        if (delegate && delegate.contextEntered) {\n          delegate.contextEntered(target, match);\n        }\n\n        callback(match);\n      }\n    };\n\n    function generateMatch(startingPath, matcher, delegate) {\n      return function(path, nestedCallback) {\n        var fullPath = startingPath + path;\n\n        if (nestedCallback) {\n          nestedCallback(generateMatch(fullPath, matcher, delegate));\n        } else {\n          return new Target(startingPath + path, matcher, delegate);\n        }\n      };\n    }\n\n    function addRoute(routeArray, path, handler) {\n      var len = 0;\n      for (var i=0, l=routeArray.length; i<l; i++) {\n        len += routeArray[i].path.length;\n      }\n\n      path = path.substr(len);\n      var route = { path: path, handler: handler };\n      routeArray.push(route);\n    }\n\n    function eachRoute(baseRoute, matcher, callback, binding) {\n      var routes = matcher.routes;\n\n      for (var path in routes) {\n        if (routes.hasOwnProperty(path)) {\n          var routeArray = baseRoute.slice();\n          addRoute(routeArray, path, routes[path]);\n\n          if (matcher.children[path]) {\n            eachRoute(routeArray, matcher.children[path], callback, binding);\n          } else {\n            callback.call(binding, routeArray);\n          }\n        }\n      }\n    }\n\n    __exports__[\"default\"] = function(callback, addRouteCallback) {\n      var matcher = new Matcher();\n\n      callback(generateMatch(\"\", matcher, this.delegate));\n\n      eachRoute([], matcher, function(route) {\n        if (addRouteCallback) { addRouteCallback(this, route); }\n        else { this.add(route); }\n      }, this);\n    }\n  });\nenifed(\"router\",\n  [\"./router/router\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Router = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Router;\n  });\nenifed(\"router/handler-info\",\n  [\"./utils\",\"rsvp/promise\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var bind = __dependency1__.bind;\n    var merge = __dependency1__.merge;\n    var serialize = __dependency1__.serialize;\n    var promiseLabel = __dependency1__.promiseLabel;\n    var applyHook = __dependency1__.applyHook;\n    var Promise = __dependency2__[\"default\"];\n\n    function HandlerInfo(_props) {\n      var props = _props || {};\n      merge(this, props);\n      this.initialize(props);\n    }\n\n    HandlerInfo.prototype = {\n      name: null,\n      handler: null,\n      params: null,\n      context: null,\n\n      // Injected by the handler info factory.\n      factory: null,\n\n      initialize: function() {},\n\n      log: function(payload, message) {\n        if (payload.log) {\n          payload.log(this.name + ': ' + message);\n        }\n      },\n\n      promiseLabel: function(label) {\n        return promiseLabel(\"'\" + this.name + \"' \" + label);\n      },\n\n      getUnresolved: function() {\n        return this;\n      },\n\n      serialize: function() {\n        return this.params || {};\n      },\n\n      resolve: function(shouldContinue, payload) {\n        var checkForAbort  = bind(this, this.checkForAbort,      shouldContinue),\n            beforeModel    = bind(this, this.runBeforeModelHook, payload),\n            model          = bind(this, this.getModel,           payload),\n            afterModel     = bind(this, this.runAfterModelHook,  payload),\n            becomeResolved = bind(this, this.becomeResolved,     payload);\n\n        return Promise.resolve(undefined, this.promiseLabel(\"Start handler\"))\n               .then(checkForAbort, null, this.promiseLabel(\"Check for abort\"))\n               .then(beforeModel, null, this.promiseLabel(\"Before model\"))\n               .then(checkForAbort, null, this.promiseLabel(\"Check if aborted during 'beforeModel' hook\"))\n               .then(model, null, this.promiseLabel(\"Model\"))\n               .then(checkForAbort, null, this.promiseLabel(\"Check if aborted in 'model' hook\"))\n               .then(afterModel, null, this.promiseLabel(\"After model\"))\n               .then(checkForAbort, null, this.promiseLabel(\"Check if aborted in 'afterModel' hook\"))\n               .then(becomeResolved, null, this.promiseLabel(\"Become resolved\"));\n      },\n\n      runBeforeModelHook: function(payload) {\n        if (payload.trigger) {\n          payload.trigger(true, 'willResolveModel', payload, this.handler);\n        }\n        return this.runSharedModelHook(payload, 'beforeModel', []);\n      },\n\n      runAfterModelHook: function(payload, resolvedModel) {\n        // Stash the resolved model on the payload.\n        // This makes it possible for users to swap out\n        // the resolved model in afterModel.\n        var name = this.name;\n        this.stashResolvedModel(payload, resolvedModel);\n\n        return this.runSharedModelHook(payload, 'afterModel', [resolvedModel])\n                   .then(function() {\n                     // Ignore the fulfilled value returned from afterModel.\n                     // Return the value stashed in resolvedModels, which\n                     // might have been swapped out in afterModel.\n                     return payload.resolvedModels[name];\n                   }, null, this.promiseLabel(\"Ignore fulfillment value and return model value\"));\n      },\n\n      runSharedModelHook: function(payload, hookName, args) {\n        this.log(payload, \"calling \" + hookName + \" hook\");\n\n        if (this.queryParams) {\n          args.push(this.queryParams);\n        }\n        args.push(payload);\n\n        var result = applyHook(this.handler, hookName, args);\n\n        if (result && result.isTransition) {\n          result = null;\n        }\n\n        return Promise.resolve(result, this.promiseLabel(\"Resolve value returned from one of the model hooks\"));\n      },\n\n      // overridden by subclasses\n      getModel: null,\n\n      checkForAbort: function(shouldContinue, promiseValue) {\n        return Promise.resolve(shouldContinue(), this.promiseLabel(\"Check for abort\")).then(function() {\n          // We don't care about shouldContinue's resolve value;\n          // pass along the original value passed to this fn.\n          return promiseValue;\n        }, null, this.promiseLabel(\"Ignore fulfillment value and continue\"));\n      },\n\n      stashResolvedModel: function(payload, resolvedModel) {\n        payload.resolvedModels = payload.resolvedModels || {};\n        payload.resolvedModels[this.name] = resolvedModel;\n      },\n\n      becomeResolved: function(payload, resolvedContext) {\n        var params = this.serialize(resolvedContext);\n\n        if (payload) {\n          this.stashResolvedModel(payload, resolvedContext);\n          payload.params = payload.params || {};\n          payload.params[this.name] = params;\n        }\n\n        return this.factory('resolved', {\n          context: resolvedContext,\n          name: this.name,\n          handler: this.handler,\n          params: params\n        });\n      },\n\n      shouldSupercede: function(other) {\n        // Prefer this newer handlerInfo over `other` if:\n        // 1) The other one doesn't exist\n        // 2) The names don't match\n        // 3) This handler has a context that doesn't match\n        //    the other one (or the other one doesn't have one).\n        // 4) This handler has parameters that don't match the other.\n        if (!other) { return true; }\n\n        var contextsMatch = (other.context === this.context);\n        return other.name !== this.name ||\n               (this.hasOwnProperty('context') && !contextsMatch) ||\n               (this.hasOwnProperty('params') && !paramsMatch(this.params, other.params));\n      }\n    };\n\n    function paramsMatch(a, b) {\n      if ((!a) ^ (!b)) {\n        // Only one is null.\n        return false;\n      }\n\n      if (!a) {\n        // Both must be null.\n        return true;\n      }\n\n      // Note: this assumes that both params have the same\n      // number of keys, but since we're comparing the\n      // same handlers, they should.\n      for (var k in a) {\n        if (a.hasOwnProperty(k) && a[k] !== b[k]) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    __exports__[\"default\"] = HandlerInfo;\n  });\nenifed(\"router/handler-info/factory\",\n  [\"router/handler-info/resolved-handler-info\",\"router/handler-info/unresolved-handler-info-by-object\",\"router/handler-info/unresolved-handler-info-by-param\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var ResolvedHandlerInfo = __dependency1__[\"default\"];\n    var UnresolvedHandlerInfoByObject = __dependency2__[\"default\"];\n    var UnresolvedHandlerInfoByParam = __dependency3__[\"default\"];\n\n    handlerInfoFactory.klasses = {\n      resolved: ResolvedHandlerInfo,\n      param: UnresolvedHandlerInfoByParam,\n      object: UnresolvedHandlerInfoByObject\n    };\n\n    function handlerInfoFactory(name, props) {\n      var Ctor = handlerInfoFactory.klasses[name],\n          handlerInfo = new Ctor(props || {});\n      handlerInfo.factory = handlerInfoFactory;\n      return handlerInfo;\n    }\n\n    __exports__[\"default\"] = handlerInfoFactory;\n  });\nenifed(\"router/handler-info/resolved-handler-info\",\n  [\"../handler-info\",\"router/utils\",\"rsvp/promise\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var HandlerInfo = __dependency1__[\"default\"];\n    var subclass = __dependency2__.subclass;\n    var promiseLabel = __dependency2__.promiseLabel;\n    var Promise = __dependency3__[\"default\"];\n\n    var ResolvedHandlerInfo = subclass(HandlerInfo, {\n      resolve: function(shouldContinue, payload) {\n        // A ResolvedHandlerInfo just resolved with itself.\n        if (payload && payload.resolvedModels) {\n          payload.resolvedModels[this.name] = this.context;\n        }\n        return Promise.resolve(this, this.promiseLabel(\"Resolve\"));\n      },\n\n      getUnresolved: function() {\n        return this.factory('param', {\n          name: this.name,\n          handler: this.handler,\n          params: this.params\n        });\n      },\n\n      isResolved: true\n    });\n\n    __exports__[\"default\"] = ResolvedHandlerInfo;\n  });\nenifed(\"router/handler-info/unresolved-handler-info-by-object\",\n  [\"../handler-info\",\"router/utils\",\"rsvp/promise\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var HandlerInfo = __dependency1__[\"default\"];\n    var merge = __dependency2__.merge;\n    var subclass = __dependency2__.subclass;\n    var promiseLabel = __dependency2__.promiseLabel;\n    var isParam = __dependency2__.isParam;\n    var Promise = __dependency3__[\"default\"];\n\n    var UnresolvedHandlerInfoByObject = subclass(HandlerInfo, {\n      getModel: function(payload) {\n        this.log(payload, this.name + \": resolving provided model\");\n        return Promise.resolve(this.context);\n      },\n\n      initialize: function(props) {\n        this.names = props.names || [];\n        this.context = props.context;\n      },\n\n      /**\n        @private\n\n        Serializes a handler using its custom `serialize` method or\n        by a default that looks up the expected property name from\n        the dynamic segment.\n\n        @param {Object} model the model to be serialized for this handler\n      */\n      serialize: function(_model) {\n        var model = _model || this.context,\n            names = this.names,\n            handler = this.handler;\n\n        var object = {};\n        if (isParam(model)) {\n          object[names[0]] = model;\n          return object;\n        }\n\n        // Use custom serialize if it exists.\n        if (handler.serialize) {\n          return handler.serialize(model, names);\n        }\n\n        if (names.length !== 1) { return; }\n\n        var name = names[0];\n\n        if (/_id$/.test(name)) {\n          object[name] = model.id;\n        } else {\n          object[name] = model;\n        }\n        return object;\n      }\n    });\n\n    __exports__[\"default\"] = UnresolvedHandlerInfoByObject;\n  });\nenifed(\"router/handler-info/unresolved-handler-info-by-param\",\n  [\"../handler-info\",\"router/utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var HandlerInfo = __dependency1__[\"default\"];\n    var resolveHook = __dependency2__.resolveHook;\n    var merge = __dependency2__.merge;\n    var subclass = __dependency2__.subclass;\n    var promiseLabel = __dependency2__.promiseLabel;\n\n    // Generated by URL transitions and non-dynamic route segments in named Transitions.\n    var UnresolvedHandlerInfoByParam = subclass (HandlerInfo, {\n      initialize: function(props) {\n        this.params = props.params || {};\n      },\n\n      getModel: function(payload) {\n        var fullParams = this.params;\n        if (payload && payload.queryParams) {\n          fullParams = {};\n          merge(fullParams, this.params);\n          fullParams.queryParams = payload.queryParams;\n        }\n\n        var handler = this.handler;\n        var hookName = resolveHook(handler, 'deserialize') ||\n                       resolveHook(handler, 'model');\n\n        return this.runSharedModelHook(payload, hookName, [fullParams]);\n      }\n    });\n\n    __exports__[\"default\"] = UnresolvedHandlerInfoByParam;\n  });\nenifed(\"router/router\",\n  [\"route-recognizer\",\"rsvp/promise\",\"./utils\",\"./transition-state\",\"./transition\",\"./transition-intent/named-transition-intent\",\"./transition-intent/url-transition-intent\",\"./handler-info\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    var RouteRecognizer = __dependency1__[\"default\"];\n    var Promise = __dependency2__[\"default\"];\n    var trigger = __dependency3__.trigger;\n    var log = __dependency3__.log;\n    var slice = __dependency3__.slice;\n    var forEach = __dependency3__.forEach;\n    var merge = __dependency3__.merge;\n    var serialize = __dependency3__.serialize;\n    var extractQueryParams = __dependency3__.extractQueryParams;\n    var getChangelist = __dependency3__.getChangelist;\n    var promiseLabel = __dependency3__.promiseLabel;\n    var callHook = __dependency3__.callHook;\n    var TransitionState = __dependency4__[\"default\"];\n    var logAbort = __dependency5__.logAbort;\n    var Transition = __dependency5__.Transition;\n    var TransitionAborted = __dependency5__.TransitionAborted;\n    var NamedTransitionIntent = __dependency6__[\"default\"];\n    var URLTransitionIntent = __dependency7__[\"default\"];\n    var ResolvedHandlerInfo = __dependency8__.ResolvedHandlerInfo;\n\n    var pop = Array.prototype.pop;\n\n    function Router() {\n      this.recognizer = new RouteRecognizer();\n      this.reset();\n    }\n\n    function getTransitionByIntent(intent, isIntermediate) {\n      var wasTransitioning = !!this.activeTransition;\n      var oldState = wasTransitioning ? this.activeTransition.state : this.state;\n      var newTransition;\n\n      var newState = intent.applyToState(oldState, this.recognizer, this.getHandler, isIntermediate);\n      var queryParamChangelist = getChangelist(oldState.queryParams, newState.queryParams);\n\n      if (handlerInfosEqual(newState.handlerInfos, oldState.handlerInfos)) {\n\n        // This is a no-op transition. See if query params changed.\n        if (queryParamChangelist) {\n          newTransition = this.queryParamsTransition(queryParamChangelist, wasTransitioning, oldState, newState);\n          if (newTransition) {\n            return newTransition;\n          }\n        }\n\n        // No-op. No need to create a new transition.\n        return new Transition(this);\n      }\n\n      if (isIntermediate) {\n        setupContexts(this, newState);\n        return;\n      }\n\n      // Create a new transition to the destination route.\n      newTransition = new Transition(this, intent, newState);\n\n      // Abort and usurp any previously active transition.\n      if (this.activeTransition) {\n        this.activeTransition.abort();\n      }\n      this.activeTransition = newTransition;\n\n      // Transition promises by default resolve with resolved state.\n      // For our purposes, swap out the promise to resolve\n      // after the transition has been finalized.\n      newTransition.promise = newTransition.promise.then(function(result) {\n        return finalizeTransition(newTransition, result.state);\n      }, null, promiseLabel(\"Settle transition promise when transition is finalized\"));\n\n      if (!wasTransitioning) {\n        notifyExistingHandlers(this, newState, newTransition);\n      }\n\n      fireQueryParamDidChange(this, newState, queryParamChangelist);\n\n      return newTransition;\n    }\n\n    Router.prototype = {\n\n      /**\n        The main entry point into the router. The API is essentially\n        the same as the `map` method in `route-recognizer`.\n\n        This method extracts the String handler at the last `.to()`\n        call and uses it as the name of the whole route.\n\n        @param {Function} callback\n      */\n      map: function(callback) {\n        this.recognizer.delegate = this.delegate;\n\n        this.recognizer.map(callback, function(recognizer, routes) {\n          for (var i = routes.length - 1, proceed = true; i >= 0 && proceed; --i) {\n            var route = routes[i];\n            recognizer.add(routes, { as: route.handler });\n            proceed = route.path === '/' || route.path === '' || route.handler.slice(-6) === '.index';\n          }\n        });\n      },\n\n      hasRoute: function(route) {\n        return this.recognizer.hasRoute(route);\n      },\n\n      queryParamsTransition: function(changelist, wasTransitioning, oldState, newState) {\n        var router = this;\n\n        fireQueryParamDidChange(this, newState, changelist);\n\n        if (!wasTransitioning && this.activeTransition) {\n          // One of the handlers in queryParamsDidChange\n          // caused a transition. Just return that transition.\n          return this.activeTransition;\n        } else {\n          // Running queryParamsDidChange didn't change anything.\n          // Just update query params and be on our way.\n\n          // We have to return a noop transition that will\n          // perform a URL update at the end. This gives\n          // the user the ability to set the url update\n          // method (default is replaceState).\n          var newTransition = new Transition(this);\n          newTransition.queryParamsOnly = true;\n\n          oldState.queryParams = finalizeQueryParamChange(this, newState.handlerInfos, newState.queryParams, newTransition);\n\n          newTransition.promise = newTransition.promise.then(function(result) {\n            updateURL(newTransition, oldState, true);\n            if (router.didTransition) {\n              router.didTransition(router.currentHandlerInfos);\n            }\n            return result;\n          }, null, promiseLabel(\"Transition complete\"));\n          return newTransition;\n        }\n      },\n\n      // NOTE: this doesn't really belong here, but here\n      // it shall remain until our ES6 transpiler can\n      // handle cyclical deps.\n      transitionByIntent: function(intent, isIntermediate) {\n        try {\n          return getTransitionByIntent.apply(this, arguments);\n        } catch(e) {\n          return new Transition(this, intent, null, e);\n        }\n      },\n\n      /**\n        Clears the current and target route handlers and triggers exit\n        on each of them starting at the leaf and traversing up through\n        its ancestors.\n      */\n      reset: function() {\n        if (this.state) {\n          forEach(this.state.handlerInfos.slice().reverse(), function(handlerInfo) {\n            var handler = handlerInfo.handler;\n            callHook(handler, 'exit');\n          });\n        }\n\n        this.state = new TransitionState();\n        this.currentHandlerInfos = null;\n      },\n\n      activeTransition: null,\n\n      /**\n        var handler = handlerInfo.handler;\n        The entry point for handling a change to the URL (usually\n        via the back and forward button).\n\n        Returns an Array of handlers and the parameters associated\n        with those parameters.\n\n        @param {String} url a URL to process\n\n        @return {Array} an Array of `[handler, parameter]` tuples\n      */\n      handleURL: function(url) {\n        // Perform a URL-based transition, but don't change\n        // the URL afterward, since it already happened.\n        var args = slice.call(arguments);\n        if (url.charAt(0) !== '/') { args[0] = '/' + url; }\n\n        return doTransition(this, args).method(null);\n      },\n\n      /**\n        Hook point for updating the URL.\n\n        @param {String} url a URL to update to\n      */\n      updateURL: function() {\n        throw new Error(\"updateURL is not implemented\");\n      },\n\n      /**\n        Hook point for replacing the current URL, i.e. with replaceState\n\n        By default this behaves the same as `updateURL`\n\n        @param {String} url a URL to update to\n      */\n      replaceURL: function(url) {\n        this.updateURL(url);\n      },\n\n      /**\n        Transition into the specified named route.\n\n        If necessary, trigger the exit callback on any handlers\n        that are no longer represented by the target route.\n\n        @param {String} name the name of the route\n      */\n      transitionTo: function(name) {\n        return doTransition(this, arguments);\n      },\n\n      intermediateTransitionTo: function(name) {\n        return doTransition(this, arguments, true);\n      },\n\n      refresh: function(pivotHandler) {\n        var state = this.activeTransition ? this.activeTransition.state : this.state;\n        var handlerInfos = state.handlerInfos;\n        var params = {};\n        for (var i = 0, len = handlerInfos.length; i < len; ++i) {\n          var handlerInfo = handlerInfos[i];\n          params[handlerInfo.name] = handlerInfo.params || {};\n        }\n\n        log(this, \"Starting a refresh transition\");\n        var intent = new NamedTransitionIntent({\n          name: handlerInfos[handlerInfos.length - 1].name,\n          pivotHandler: pivotHandler || handlerInfos[0].handler,\n          contexts: [], // TODO collect contexts...?\n          queryParams: this._changedQueryParams || state.queryParams || {}\n        });\n\n        return this.transitionByIntent(intent, false);\n      },\n\n      /**\n        Identical to `transitionTo` except that the current URL will be replaced\n        if possible.\n\n        This method is intended primarily for use with `replaceState`.\n\n        @param {String} name the name of the route\n      */\n      replaceWith: function(name) {\n        return doTransition(this, arguments).method('replace');\n      },\n\n      /**\n        Take a named route and context objects and generate a\n        URL.\n\n        @param {String} name the name of the route to generate\n          a URL for\n        @param {...Object} objects a list of objects to serialize\n\n        @return {String} a URL\n      */\n      generate: function(handlerName) {\n\n        var partitionedArgs = extractQueryParams(slice.call(arguments, 1)),\n          suppliedParams = partitionedArgs[0],\n          queryParams = partitionedArgs[1];\n\n        // Construct a TransitionIntent with the provided params\n        // and apply it to the present state of the router.\n        var intent = new NamedTransitionIntent({ name: handlerName, contexts: suppliedParams });\n        var state = intent.applyToState(this.state, this.recognizer, this.getHandler);\n        var params = {};\n\n        for (var i = 0, len = state.handlerInfos.length; i < len; ++i) {\n          var handlerInfo = state.handlerInfos[i];\n          var handlerParams = handlerInfo.serialize();\n          merge(params, handlerParams);\n        }\n        params.queryParams = queryParams;\n\n        return this.recognizer.generate(handlerName, params);\n      },\n\n      applyIntent: function(handlerName, contexts) {\n        var intent = new NamedTransitionIntent({\n          name: handlerName,\n          contexts: contexts\n        });\n\n        var state = this.activeTransition && this.activeTransition.state || this.state;\n        return intent.applyToState(state, this.recognizer, this.getHandler);\n      },\n\n      isActiveIntent: function(handlerName, contexts, queryParams) {\n        var targetHandlerInfos = this.state.handlerInfos,\n            found = false, names, object, handlerInfo, handlerObj, i, len;\n\n        if (!targetHandlerInfos.length) { return false; }\n\n        var targetHandler = targetHandlerInfos[targetHandlerInfos.length - 1].name;\n        var recogHandlers = this.recognizer.handlersFor(targetHandler);\n\n        var index = 0;\n        for (len = recogHandlers.length; index < len; ++index) {\n          handlerInfo = targetHandlerInfos[index];\n          if (handlerInfo.name === handlerName) { break; }\n        }\n\n        if (index === recogHandlers.length) {\n          // The provided route name isn't even in the route hierarchy.\n          return false;\n        }\n\n        var state = new TransitionState();\n        state.handlerInfos = targetHandlerInfos.slice(0, index + 1);\n        recogHandlers = recogHandlers.slice(0, index + 1);\n\n        var intent = new NamedTransitionIntent({\n          name: targetHandler,\n          contexts: contexts\n        });\n\n        var newState = intent.applyToHandlers(state, recogHandlers, this.getHandler, targetHandler, true, true);\n\n        var handlersEqual = handlerInfosEqual(newState.handlerInfos, state.handlerInfos);\n        if (!queryParams || !handlersEqual) {\n          return handlersEqual;\n        }\n\n        // Get a hash of QPs that will still be active on new route\n        var activeQPsOnNewHandler = {};\n        merge(activeQPsOnNewHandler, queryParams);\n\n        var activeQueryParams  = this.state.queryParams;\n        for (var key in activeQueryParams) {\n          if (activeQueryParams.hasOwnProperty(key) &&\n              activeQPsOnNewHandler.hasOwnProperty(key)) {\n            activeQPsOnNewHandler[key] = activeQueryParams[key];\n          }\n        }\n\n        return handlersEqual && !getChangelist(activeQPsOnNewHandler, queryParams);\n      },\n\n      isActive: function(handlerName) {\n        var partitionedArgs = extractQueryParams(slice.call(arguments, 1));\n        return this.isActiveIntent(handlerName, partitionedArgs[0], partitionedArgs[1]);\n      },\n\n      trigger: function(name) {\n        var args = slice.call(arguments);\n        trigger(this, this.currentHandlerInfos, false, args);\n      },\n\n      /**\n        Hook point for logging transition status updates.\n\n        @param {String} message The message to log.\n      */\n      log: null,\n\n      _willChangeContextEvent: 'willChangeContext',\n      _triggerWillChangeContext: function(handlerInfos, newTransition) {\n        trigger(this, handlerInfos, true, [this._willChangeContextEvent, newTransition]);\n      },\n\n      _triggerWillLeave: function(handlerInfos, newTransition, leavingChecker) {\n        trigger(this, handlerInfos, true, ['willLeave', newTransition, leavingChecker]);\n      }\n    };\n\n    /**\n      @private\n\n      Fires queryParamsDidChange event\n    */\n    function fireQueryParamDidChange(router, newState, queryParamChangelist) {\n      // If queryParams changed trigger event\n      if (queryParamChangelist) {\n\n        // This is a little hacky but we need some way of storing\n        // changed query params given that no activeTransition\n        // is guaranteed to have occurred.\n        router._changedQueryParams = queryParamChangelist.all;\n        trigger(router, newState.handlerInfos, true, ['queryParamsDidChange', queryParamChangelist.changed, queryParamChangelist.all, queryParamChangelist.removed]);\n        router._changedQueryParams = null;\n      }\n    }\n\n    /**\n      @private\n\n      Takes an Array of `HandlerInfo`s, figures out which ones are\n      exiting, entering, or changing contexts, and calls the\n      proper handler hooks.\n\n      For example, consider the following tree of handlers. Each handler is\n      followed by the URL segment it handles.\n\n      ```\n      |~index (\"/\")\n      | |~posts (\"/posts\")\n      | | |-showPost (\"/:id\")\n      | | |-newPost (\"/new\")\n      | | |-editPost (\"/edit\")\n      | |~about (\"/about/:id\")\n      ```\n\n      Consider the following transitions:\n\n      1. A URL transition to `/posts/1`.\n         1. Triggers the `*model` callbacks on the\n            `index`, `posts`, and `showPost` handlers\n         2. Triggers the `enter` callback on the same\n         3. Triggers the `setup` callback on the same\n      2. A direct transition to `newPost`\n         1. Triggers the `exit` callback on `showPost`\n         2. Triggers the `enter` callback on `newPost`\n         3. Triggers the `setup` callback on `newPost`\n      3. A direct transition to `about` with a specified\n         context object\n         1. Triggers the `exit` callback on `newPost`\n            and `posts`\n         2. Triggers the `serialize` callback on `about`\n         3. Triggers the `enter` callback on `about`\n         4. Triggers the `setup` callback on `about`\n\n      @param {Router} transition\n      @param {TransitionState} newState\n    */\n    function setupContexts(router, newState, transition) {\n      var partition = partitionHandlers(router.state, newState);\n\n      forEach(partition.exited, function(handlerInfo) {\n        var handler = handlerInfo.handler;\n        delete handler.context;\n\n        callHook(handler, 'reset', true, transition);\n        callHook(handler, 'exit', transition);\n      });\n\n      var oldState = router.oldState = router.state;\n      router.state = newState;\n      var currentHandlerInfos = router.currentHandlerInfos = partition.unchanged.slice();\n\n      try {\n        forEach(partition.reset, function(handlerInfo) {\n          var handler = handlerInfo.handler;\n          callHook(handler, 'reset', false, transition);\n        });\n\n        forEach(partition.updatedContext, function(handlerInfo) {\n          return handlerEnteredOrUpdated(currentHandlerInfos, handlerInfo, false, transition);\n        });\n\n        forEach(partition.entered, function(handlerInfo) {\n          return handlerEnteredOrUpdated(currentHandlerInfos, handlerInfo, true, transition);\n        });\n      } catch(e) {\n        router.state = oldState;\n        router.currentHandlerInfos = oldState.handlerInfos;\n        throw e;\n      }\n\n      router.state.queryParams = finalizeQueryParamChange(router, currentHandlerInfos, newState.queryParams, transition);\n    }\n\n\n    /**\n      @private\n\n      Helper method used by setupContexts. Handles errors or redirects\n      that may happen in enter/setup.\n    */\n    function handlerEnteredOrUpdated(currentHandlerInfos, handlerInfo, enter, transition) {\n\n      var handler = handlerInfo.handler,\n          context = handlerInfo.context;\n\n      if (enter) {\n        callHook(handler, 'enter', transition);\n      }\n      if (transition && transition.isAborted) {\n        throw new TransitionAborted();\n      }\n\n      handler.context = context;\n      callHook(handler, 'contextDidChange');\n\n      callHook(handler, 'setup', context, transition);\n      if (transition && transition.isAborted) {\n        throw new TransitionAborted();\n      }\n\n      currentHandlerInfos.push(handlerInfo);\n\n      return true;\n    }\n\n\n    /**\n      @private\n\n      This function is called when transitioning from one URL to\n      another to determine which handlers are no longer active,\n      which handlers are newly active, and which handlers remain\n      active but have their context changed.\n\n      Take a list of old handlers and new handlers and partition\n      them into four buckets:\n\n      * unchanged: the handler was active in both the old and\n        new URL, and its context remains the same\n      * updated context: the handler was active in both the\n        old and new URL, but its context changed. The handler's\n        `setup` method, if any, will be called with the new\n        context.\n      * exited: the handler was active in the old URL, but is\n        no longer active.\n      * entered: the handler was not active in the old URL, but\n        is now active.\n\n      The PartitionedHandlers structure has four fields:\n\n      * `updatedContext`: a list of `HandlerInfo` objects that\n        represent handlers that remain active but have a changed\n        context\n      * `entered`: a list of `HandlerInfo` objects that represent\n        handlers that are newly active\n      * `exited`: a list of `HandlerInfo` objects that are no\n        longer active.\n      * `unchanged`: a list of `HanderInfo` objects that remain active.\n\n      @param {Array[HandlerInfo]} oldHandlers a list of the handler\n        information for the previous URL (or `[]` if this is the\n        first handled transition)\n      @param {Array[HandlerInfo]} newHandlers a list of the handler\n        information for the new URL\n\n      @return {Partition}\n    */\n    function partitionHandlers(oldState, newState) {\n      var oldHandlers = oldState.handlerInfos;\n      var newHandlers = newState.handlerInfos;\n\n      var handlers = {\n            updatedContext: [],\n            exited: [],\n            entered: [],\n            unchanged: []\n          };\n\n      var handlerChanged, contextChanged = false, i, l;\n\n      for (i=0, l=newHandlers.length; i<l; i++) {\n        var oldHandler = oldHandlers[i], newHandler = newHandlers[i];\n\n        if (!oldHandler || oldHandler.handler !== newHandler.handler) {\n          handlerChanged = true;\n        }\n\n        if (handlerChanged) {\n          handlers.entered.push(newHandler);\n          if (oldHandler) { handlers.exited.unshift(oldHandler); }\n        } else if (contextChanged || oldHandler.context !== newHandler.context) {\n          contextChanged = true;\n          handlers.updatedContext.push(newHandler);\n        } else {\n          handlers.unchanged.push(oldHandler);\n        }\n      }\n\n      for (i=newHandlers.length, l=oldHandlers.length; i<l; i++) {\n        handlers.exited.unshift(oldHandlers[i]);\n      }\n\n      handlers.reset = handlers.updatedContext.slice();\n      handlers.reset.reverse();\n\n      return handlers;\n    }\n\n    function updateURL(transition, state, inputUrl) {\n      var urlMethod = transition.urlMethod;\n\n      if (!urlMethod) {\n        return;\n      }\n\n      var router = transition.router,\n          handlerInfos = state.handlerInfos,\n          handlerName = handlerInfos[handlerInfos.length - 1].name,\n          params = {};\n\n      for (var i = handlerInfos.length - 1; i >= 0; --i) {\n        var handlerInfo = handlerInfos[i];\n        merge(params, handlerInfo.params);\n        if (handlerInfo.handler.inaccessibleByURL) {\n          urlMethod = null;\n        }\n      }\n\n      if (urlMethod) {\n        params.queryParams = transition._visibleQueryParams || state.queryParams;\n        var url = router.recognizer.generate(handlerName, params);\n\n        if (urlMethod === 'replace') {\n          router.replaceURL(url);\n        } else {\n          router.updateURL(url);\n        }\n      }\n    }\n\n    /**\n      @private\n\n      Updates the URL (if necessary) and calls `setupContexts`\n      to update the router's array of `currentHandlerInfos`.\n     */\n    function finalizeTransition(transition, newState) {\n\n      try {\n        log(transition.router, transition.sequence, \"Resolved all models on destination route; finalizing transition.\");\n\n        var router = transition.router,\n            handlerInfos = newState.handlerInfos,\n            seq = transition.sequence;\n\n        // Run all the necessary enter/setup/exit hooks\n        setupContexts(router, newState, transition);\n\n        // Check if a redirect occurred in enter/setup\n        if (transition.isAborted) {\n          // TODO: cleaner way? distinguish b/w targetHandlerInfos?\n          router.state.handlerInfos = router.currentHandlerInfos;\n          return Promise.reject(logAbort(transition));\n        }\n\n        updateURL(transition, newState, transition.intent.url);\n\n        transition.isActive = false;\n        router.activeTransition = null;\n\n        trigger(router, router.currentHandlerInfos, true, ['didTransition']);\n\n        if (router.didTransition) {\n          router.didTransition(router.currentHandlerInfos);\n        }\n\n        log(router, transition.sequence, \"TRANSITION COMPLETE.\");\n\n        // Resolve with the final handler.\n        return handlerInfos[handlerInfos.length - 1].handler;\n      } catch(e) {\n        if (!((e instanceof TransitionAborted))) {\n          //var erroneousHandler = handlerInfos.pop();\n          var infos = transition.state.handlerInfos;\n          transition.trigger(true, 'error', e, transition, infos[infos.length-1].handler);\n          transition.abort();\n        }\n\n        throw e;\n      }\n    }\n\n    /**\n      @private\n\n      Begins and returns a Transition based on the provided\n      arguments. Accepts arguments in the form of both URL\n      transitions and named transitions.\n\n      @param {Router} router\n      @param {Array[Object]} args arguments passed to transitionTo,\n        replaceWith, or handleURL\n    */\n    function doTransition(router, args, isIntermediate) {\n      // Normalize blank transitions to root URL transitions.\n      var name = args[0] || '/';\n\n      var lastArg = args[args.length-1];\n      var queryParams = {};\n      if (lastArg && lastArg.hasOwnProperty('queryParams')) {\n        queryParams = pop.call(args).queryParams;\n      }\n\n      var intent;\n      if (args.length === 0) {\n\n        log(router, \"Updating query params\");\n\n        // A query param update is really just a transition\n        // into the route you're already on.\n        var handlerInfos = router.state.handlerInfos;\n        intent = new NamedTransitionIntent({\n          name: handlerInfos[handlerInfos.length - 1].name,\n          contexts: [],\n          queryParams: queryParams\n        });\n\n      } else if (name.charAt(0) === '/') {\n\n        log(router, \"Attempting URL transition to \" + name);\n        intent = new URLTransitionIntent({ url: name });\n\n      } else {\n\n        log(router, \"Attempting transition to \" + name);\n        intent = new NamedTransitionIntent({\n          name: args[0],\n          contexts: slice.call(args, 1),\n          queryParams: queryParams\n        });\n      }\n\n      return router.transitionByIntent(intent, isIntermediate);\n    }\n\n    function handlerInfosEqual(handlerInfos, otherHandlerInfos) {\n      if (handlerInfos.length !== otherHandlerInfos.length) {\n        return false;\n      }\n\n      for (var i = 0, len = handlerInfos.length; i < len; ++i) {\n        if (handlerInfos[i] !== otherHandlerInfos[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    function finalizeQueryParamChange(router, resolvedHandlers, newQueryParams, transition) {\n      // We fire a finalizeQueryParamChange event which\n      // gives the new route hierarchy a chance to tell\n      // us which query params it's consuming and what\n      // their final values are. If a query param is\n      // no longer consumed in the final route hierarchy,\n      // its serialized segment will be removed\n      // from the URL.\n\n      for (var k in newQueryParams) {\n        if (newQueryParams.hasOwnProperty(k) &&\n            newQueryParams[k] === null) {\n          delete newQueryParams[k];\n        }\n      }\n\n      var finalQueryParamsArray = [];\n      trigger(router, resolvedHandlers, true, ['finalizeQueryParamChange', newQueryParams, finalQueryParamsArray, transition]);\n\n      if (transition) {\n        transition._visibleQueryParams = {};\n      }\n\n      var finalQueryParams = {};\n      for (var i = 0, len = finalQueryParamsArray.length; i < len; ++i) {\n        var qp = finalQueryParamsArray[i];\n        finalQueryParams[qp.key] = qp.value;\n        if (transition && qp.visible !== false) {\n          transition._visibleQueryParams[qp.key] = qp.value;\n        }\n      }\n      return finalQueryParams;\n    }\n\n    function notifyExistingHandlers(router, newState, newTransition) {\n      var oldHandlers = router.state.handlerInfos,\n          changing = [],\n          leavingIndex = null,\n          leaving, leavingChecker, i, oldHandlerLen, oldHandler, newHandler;\n\n      oldHandlerLen = oldHandlers.length;\n      for (i = 0; i < oldHandlerLen; i++) {\n        oldHandler = oldHandlers[i];\n        newHandler = newState.handlerInfos[i];\n\n        if (!newHandler || oldHandler.name !== newHandler.name) {\n          leavingIndex = i;\n          break;\n        }\n\n        if (!newHandler.isResolved) {\n          changing.push(oldHandler);\n        }\n      }\n\n      if (leavingIndex !== null) {\n        leaving = oldHandlers.slice(leavingIndex, oldHandlerLen);\n        leavingChecker = function(name) {\n          for (var h = 0, len = leaving.length; h < len; h++) {\n            if (leaving[h].name === name) {\n              return true;\n            }\n          }\n          return false;\n        };\n\n        router._triggerWillLeave(leaving, newTransition, leavingChecker);\n      }\n\n      if (changing.length > 0) {\n        router._triggerWillChangeContext(changing, newTransition);\n      }\n\n      trigger(router, oldHandlers, true, ['willTransition', newTransition]);\n    }\n\n    __exports__[\"default\"] = Router;\n  });\nenifed(\"router/transition-intent\",\n  [\"./utils\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var merge = __dependency1__.merge;\n\n    function TransitionIntent(props) {\n      this.initialize(props);\n\n      // TODO: wat\n      this.data = this.data || {};\n    }\n\n    TransitionIntent.prototype = {\n      initialize: null,\n      applyToState: null\n    };\n\n    __exports__[\"default\"] = TransitionIntent;\n  });\nenifed(\"router/transition-intent/named-transition-intent\",\n  [\"../transition-intent\",\"../transition-state\",\"../handler-info/factory\",\"../utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var TransitionIntent = __dependency1__[\"default\"];\n    var TransitionState = __dependency2__[\"default\"];\n    var handlerInfoFactory = __dependency3__[\"default\"];\n    var isParam = __dependency4__.isParam;\n    var extractQueryParams = __dependency4__.extractQueryParams;\n    var merge = __dependency4__.merge;\n    var subclass = __dependency4__.subclass;\n\n    __exports__[\"default\"] = subclass(TransitionIntent, {\n      name: null,\n      pivotHandler: null,\n      contexts: null,\n      queryParams: null,\n\n      initialize: function(props) {\n        this.name = props.name;\n        this.pivotHandler = props.pivotHandler;\n        this.contexts = props.contexts || [];\n        this.queryParams = props.queryParams;\n      },\n\n      applyToState: function(oldState, recognizer, getHandler, isIntermediate) {\n\n        var partitionedArgs     = extractQueryParams([this.name].concat(this.contexts)),\n          pureArgs              = partitionedArgs[0],\n          queryParams           = partitionedArgs[1],\n          handlers              = recognizer.handlersFor(pureArgs[0]);\n\n        var targetRouteName = handlers[handlers.length-1].handler;\n\n        return this.applyToHandlers(oldState, handlers, getHandler, targetRouteName, isIntermediate);\n      },\n\n      applyToHandlers: function(oldState, handlers, getHandler, targetRouteName, isIntermediate, checkingIfActive) {\n\n        var i, len;\n        var newState = new TransitionState();\n        var objects = this.contexts.slice(0);\n\n        var invalidateIndex = handlers.length;\n\n        // Pivot handlers are provided for refresh transitions\n        if (this.pivotHandler) {\n          for (i = 0, len = handlers.length; i < len; ++i) {\n            if (getHandler(handlers[i].handler) === this.pivotHandler) {\n              invalidateIndex = i;\n              break;\n            }\n          }\n        }\n\n        var pivotHandlerFound = !this.pivotHandler;\n\n        for (i = handlers.length - 1; i >= 0; --i) {\n          var result = handlers[i];\n          var name = result.handler;\n          var handler = getHandler(name);\n\n          var oldHandlerInfo = oldState.handlerInfos[i];\n          var newHandlerInfo = null;\n\n          if (result.names.length > 0) {\n            if (i >= invalidateIndex) {\n              newHandlerInfo = this.createParamHandlerInfo(name, handler, result.names, objects, oldHandlerInfo);\n            } else {\n              newHandlerInfo = this.getHandlerInfoForDynamicSegment(name, handler, result.names, objects, oldHandlerInfo, targetRouteName, i);\n            }\n          } else {\n            // This route has no dynamic segment.\n            // Therefore treat as a param-based handlerInfo\n            // with empty params. This will cause the `model`\n            // hook to be called with empty params, which is desirable.\n            newHandlerInfo = this.createParamHandlerInfo(name, handler, result.names, objects, oldHandlerInfo);\n          }\n\n          if (checkingIfActive) {\n            // If we're performing an isActive check, we want to\n            // serialize URL params with the provided context, but\n            // ignore mismatches between old and new context.\n            newHandlerInfo = newHandlerInfo.becomeResolved(null, newHandlerInfo.context);\n            var oldContext = oldHandlerInfo && oldHandlerInfo.context;\n            if (result.names.length > 0 && newHandlerInfo.context === oldContext) {\n              // If contexts match in isActive test, assume params also match.\n              // This allows for flexibility in not requiring that every last\n              // handler provide a `serialize` method\n              newHandlerInfo.params = oldHandlerInfo && oldHandlerInfo.params;\n            }\n            newHandlerInfo.context = oldContext;\n          }\n\n          var handlerToUse = oldHandlerInfo;\n          if (i >= invalidateIndex || newHandlerInfo.shouldSupercede(oldHandlerInfo)) {\n            invalidateIndex = Math.min(i, invalidateIndex);\n            handlerToUse = newHandlerInfo;\n          }\n\n          if (isIntermediate && !checkingIfActive) {\n            handlerToUse = handlerToUse.becomeResolved(null, handlerToUse.context);\n          }\n\n          newState.handlerInfos.unshift(handlerToUse);\n        }\n\n        if (objects.length > 0) {\n          throw new Error(\"More context objects were passed than there are dynamic segments for the route: \" + targetRouteName);\n        }\n\n        if (!isIntermediate) {\n          this.invalidateChildren(newState.handlerInfos, invalidateIndex);\n        }\n\n        merge(newState.queryParams, this.queryParams || {});\n\n        return newState;\n      },\n\n      invalidateChildren: function(handlerInfos, invalidateIndex) {\n        for (var i = invalidateIndex, l = handlerInfos.length; i < l; ++i) {\n          var handlerInfo = handlerInfos[i];\n          handlerInfos[i] = handlerInfos[i].getUnresolved();\n        }\n      },\n\n      getHandlerInfoForDynamicSegment: function(name, handler, names, objects, oldHandlerInfo, targetRouteName, i) {\n\n        var numNames = names.length;\n        var objectToUse;\n        if (objects.length > 0) {\n\n          // Use the objects provided for this transition.\n          objectToUse = objects[objects.length - 1];\n          if (isParam(objectToUse)) {\n            return this.createParamHandlerInfo(name, handler, names, objects, oldHandlerInfo);\n          } else {\n            objects.pop();\n          }\n        } else if (oldHandlerInfo && oldHandlerInfo.name === name) {\n          // Reuse the matching oldHandlerInfo\n          return oldHandlerInfo;\n        } else {\n          if (this.preTransitionState) {\n            var preTransitionHandlerInfo = this.preTransitionState.handlerInfos[i];\n            objectToUse = preTransitionHandlerInfo && preTransitionHandlerInfo.context;\n          } else {\n            // Ideally we should throw this error to provide maximal\n            // information to the user that not enough context objects\n            // were provided, but this proves too cumbersome in Ember\n            // in cases where inner template helpers are evaluated\n            // before parent helpers un-render, in which cases this\n            // error somewhat prematurely fires.\n            //throw new Error(\"Not enough context objects were provided to complete a transition to \" + targetRouteName + \". Specifically, the \" + name + \" route needs an object that can be serialized into its dynamic URL segments [\" + names.join(', ') + \"]\");\n            return oldHandlerInfo;\n          }\n        }\n\n        return handlerInfoFactory('object', {\n          name: name,\n          handler: handler,\n          context: objectToUse,\n          names: names\n        });\n      },\n\n      createParamHandlerInfo: function(name, handler, names, objects, oldHandlerInfo) {\n        var params = {};\n\n        // Soak up all the provided string/numbers\n        var numNames = names.length;\n        while (numNames--) {\n\n          // Only use old params if the names match with the new handler\n          var oldParams = (oldHandlerInfo && name === oldHandlerInfo.name && oldHandlerInfo.params) || {};\n\n          var peek = objects[objects.length - 1];\n          var paramName = names[numNames];\n          if (isParam(peek)) {\n            params[paramName] = \"\" + objects.pop();\n          } else {\n            // If we're here, this means only some of the params\n            // were string/number params, so try and use a param\n            // value from a previous handler.\n            if (oldParams.hasOwnProperty(paramName)) {\n              params[paramName] = oldParams[paramName];\n            } else {\n              throw new Error(\"You didn't provide enough string/numeric parameters to satisfy all of the dynamic segments for route \" + name);\n            }\n          }\n        }\n\n        return handlerInfoFactory('param', {\n          name: name,\n          handler: handler,\n          params: params\n        });\n      }\n    });\n  });\nenifed(\"router/transition-intent/url-transition-intent\",\n  [\"../transition-intent\",\"../transition-state\",\"../handler-info/factory\",\"../utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var TransitionIntent = __dependency1__[\"default\"];\n    var TransitionState = __dependency2__[\"default\"];\n    var handlerInfoFactory = __dependency3__[\"default\"];\n    var oCreate = __dependency4__.oCreate;\n    var merge = __dependency4__.merge;\n    var subclass = __dependency4__.subclass;\n\n    __exports__[\"default\"] = subclass(TransitionIntent, {\n      url: null,\n\n      initialize: function(props) {\n        this.url = props.url;\n      },\n\n      applyToState: function(oldState, recognizer, getHandler) {\n        var newState = new TransitionState();\n\n        var results = recognizer.recognize(this.url),\n            queryParams = {},\n            i, len;\n\n        if (!results) {\n          throw new UnrecognizedURLError(this.url);\n        }\n\n        var statesDiffer = false;\n\n        for (i = 0, len = results.length; i < len; ++i) {\n          var result = results[i];\n          var name = result.handler;\n          var handler = getHandler(name);\n\n          if (handler.inaccessibleByURL) {\n            throw new UnrecognizedURLError(this.url);\n          }\n\n          var newHandlerInfo = handlerInfoFactory('param', {\n            name: name,\n            handler: handler,\n            params: result.params\n          });\n\n          var oldHandlerInfo = oldState.handlerInfos[i];\n          if (statesDiffer || newHandlerInfo.shouldSupercede(oldHandlerInfo)) {\n            statesDiffer = true;\n            newState.handlerInfos[i] = newHandlerInfo;\n          } else {\n            newState.handlerInfos[i] = oldHandlerInfo;\n          }\n        }\n\n        merge(newState.queryParams, results.queryParams);\n\n        return newState;\n      }\n    });\n\n    /**\n      Promise reject reasons passed to promise rejection\n      handlers for failed transitions.\n     */\n    function UnrecognizedURLError(message) {\n      this.message = (message || \"UnrecognizedURLError\");\n      this.name = \"UnrecognizedURLError\";\n    }\n  });\nenifed(\"router/transition-state\",\n  [\"./handler-info\",\"./utils\",\"rsvp/promise\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var ResolvedHandlerInfo = __dependency1__.ResolvedHandlerInfo;\n    var forEach = __dependency2__.forEach;\n    var promiseLabel = __dependency2__.promiseLabel;\n    var callHook = __dependency2__.callHook;\n    var Promise = __dependency3__[\"default\"];\n\n    function TransitionState(other) {\n      this.handlerInfos = [];\n      this.queryParams = {};\n      this.params = {};\n    }\n\n    TransitionState.prototype = {\n      handlerInfos: null,\n      queryParams: null,\n      params: null,\n\n      promiseLabel: function(label) {\n        var targetName = '';\n        forEach(this.handlerInfos, function(handlerInfo) {\n          if (targetName !== '') {\n            targetName += '.';\n          }\n          targetName += handlerInfo.name;\n        });\n        return promiseLabel(\"'\" + targetName + \"': \" + label);\n      },\n\n      resolve: function(shouldContinue, payload) {\n        var self = this;\n        // First, calculate params for this state. This is useful\n        // information to provide to the various route hooks.\n        var params = this.params;\n        forEach(this.handlerInfos, function(handlerInfo) {\n          params[handlerInfo.name] = handlerInfo.params || {};\n        });\n\n        payload = payload || {};\n        payload.resolveIndex = 0;\n\n        var currentState = this;\n        var wasAborted = false;\n\n        // The prelude RSVP.resolve() asyncs us into the promise land.\n        return Promise.resolve(null, this.promiseLabel(\"Start transition\"))\n        .then(resolveOneHandlerInfo, null, this.promiseLabel('Resolve handler'))['catch'](handleError, this.promiseLabel('Handle error'));\n\n        function innerShouldContinue() {\n          return Promise.resolve(shouldContinue(), currentState.promiseLabel(\"Check if should continue\"))['catch'](function(reason) {\n            // We distinguish between errors that occurred\n            // during resolution (e.g. beforeModel/model/afterModel),\n            // and aborts due to a rejecting promise from shouldContinue().\n            wasAborted = true;\n            return Promise.reject(reason);\n          }, currentState.promiseLabel(\"Handle abort\"));\n        }\n\n        function handleError(error) {\n          // This is the only possible\n          // reject value of TransitionState#resolve\n          var handlerInfos = currentState.handlerInfos;\n          var errorHandlerIndex = payload.resolveIndex >= handlerInfos.length ?\n                                  handlerInfos.length - 1 : payload.resolveIndex;\n          return Promise.reject({\n            error: error,\n            handlerWithError: currentState.handlerInfos[errorHandlerIndex].handler,\n            wasAborted: wasAborted,\n            state: currentState\n          });\n        }\n\n        function proceed(resolvedHandlerInfo) {\n          var wasAlreadyResolved = currentState.handlerInfos[payload.resolveIndex].isResolved;\n\n          // Swap the previously unresolved handlerInfo with\n          // the resolved handlerInfo\n          currentState.handlerInfos[payload.resolveIndex++] = resolvedHandlerInfo;\n\n          if (!wasAlreadyResolved) {\n            // Call the redirect hook. The reason we call it here\n            // vs. afterModel is so that redirects into child\n            // routes don't re-run the model hooks for this\n            // already-resolved route.\n            var handler = resolvedHandlerInfo.handler;\n            callHook(handler, 'redirect', resolvedHandlerInfo.context, payload);\n          }\n\n          // Proceed after ensuring that the redirect hook\n          // didn't abort this transition by transitioning elsewhere.\n          return innerShouldContinue().then(resolveOneHandlerInfo, null, currentState.promiseLabel('Resolve handler'));\n        }\n\n        function resolveOneHandlerInfo() {\n          if (payload.resolveIndex === currentState.handlerInfos.length) {\n            // This is is the only possible\n            // fulfill value of TransitionState#resolve\n            return {\n              error: null,\n              state: currentState\n            };\n          }\n\n          var handlerInfo = currentState.handlerInfos[payload.resolveIndex];\n\n          return handlerInfo.resolve(innerShouldContinue, payload)\n                            .then(proceed, null, currentState.promiseLabel('Proceed'));\n        }\n      }\n    };\n\n    __exports__[\"default\"] = TransitionState;\n  });\nenifed(\"router/transition\",\n  [\"rsvp/promise\",\"./handler-info\",\"./utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__[\"default\"];\n    var ResolvedHandlerInfo = __dependency2__.ResolvedHandlerInfo;\n    var trigger = __dependency3__.trigger;\n    var slice = __dependency3__.slice;\n    var log = __dependency3__.log;\n    var promiseLabel = __dependency3__.promiseLabel;\n\n    /**\n      @private\n\n      A Transition is a thennable (a promise-like object) that represents\n      an attempt to transition to another route. It can be aborted, either\n      explicitly via `abort` or by attempting another transition while a\n      previous one is still underway. An aborted transition can also\n      be `retry()`d later.\n     */\n    function Transition(router, intent, state, error) {\n      var transition = this;\n      this.state = state || router.state;\n      this.intent = intent;\n      this.router = router;\n      this.data = this.intent && this.intent.data || {};\n      this.resolvedModels = {};\n      this.queryParams = {};\n\n      if (error) {\n        this.promise = Promise.reject(error);\n        return;\n      }\n\n      if (state) {\n        this.params = state.params;\n        this.queryParams = state.queryParams;\n        this.handlerInfos = state.handlerInfos;\n\n        var len = state.handlerInfos.length;\n        if (len) {\n          this.targetName = state.handlerInfos[len-1].name;\n        }\n\n        for (var i = 0; i < len; ++i) {\n          var handlerInfo = state.handlerInfos[i];\n\n          // TODO: this all seems hacky\n          if (!handlerInfo.isResolved) { break; }\n          this.pivotHandler = handlerInfo.handler;\n        }\n\n        this.sequence = Transition.currentSequence++;\n        this.promise = state.resolve(checkForAbort, this)['catch'](function(result) {\n          if (result.wasAborted || transition.isAborted) {\n            return Promise.reject(logAbort(transition));\n          } else {\n            transition.trigger('error', result.error, transition, result.handlerWithError);\n            transition.abort();\n            return Promise.reject(result.error);\n          }\n        }, promiseLabel('Handle Abort'));\n      } else {\n        this.promise = Promise.resolve(this.state);\n        this.params = {};\n      }\n\n      function checkForAbort() {\n        if (transition.isAborted) {\n          return Promise.reject(undefined, promiseLabel(\"Transition aborted - reject\"));\n        }\n      }\n    }\n\n    Transition.currentSequence = 0;\n\n    Transition.prototype = {\n      targetName: null,\n      urlMethod: 'update',\n      intent: null,\n      params: null,\n      pivotHandler: null,\n      resolveIndex: 0,\n      handlerInfos: null,\n      resolvedModels: null,\n      isActive: true,\n      state: null,\n      queryParamsOnly: false,\n\n      isTransition: true,\n\n      isExiting: function(handler) {\n        var handlerInfos = this.handlerInfos;\n        for (var i = 0, len = handlerInfos.length; i < len; ++i) {\n          var handlerInfo = handlerInfos[i];\n          if (handlerInfo.name === handler || handlerInfo.handler === handler) {\n            return false;\n          }\n        }\n        return true;\n      },\n\n      /**\n        @public\n\n        The Transition's internal promise. Calling `.then` on this property\n        is that same as calling `.then` on the Transition object itself, but\n        this property is exposed for when you want to pass around a\n        Transition's promise, but not the Transition object itself, since\n        Transition object can be externally `abort`ed, while the promise\n        cannot.\n       */\n      promise: null,\n\n      /**\n        @public\n\n        Custom state can be stored on a Transition's `data` object.\n        This can be useful for decorating a Transition within an earlier\n        hook and shared with a later hook. Properties set on `data` will\n        be copied to new transitions generated by calling `retry` on this\n        transition.\n       */\n      data: null,\n\n      /**\n        @public\n\n        A standard promise hook that resolves if the transition\n        succeeds and rejects if it fails/redirects/aborts.\n\n        Forwards to the internal `promise` property which you can\n        use in situations where you want to pass around a thennable,\n        but not the Transition itself.\n\n        @param {Function} onFulfilled\n        @param {Function} onRejected\n        @param {String} label optional string for labeling the promise.\n        Useful for tooling.\n        @return {Promise}\n       */\n      then: function(onFulfilled, onRejected, label) {\n        return this.promise.then(onFulfilled, onRejected, label);\n      },\n\n      /**\n        @public\n\n        Forwards to the internal `promise` property which you can\n        use in situations where you want to pass around a thennable,\n        but not the Transition itself.\n\n        @method catch\n        @param {Function} onRejection\n        @param {String} label optional string for labeling the promise.\n        Useful for tooling.\n        @return {Promise}\n       */\n      \"catch\": function(onRejection, label) {\n        return this.promise[\"catch\"](onRejection, label);\n      },\n\n      /**\n        @public\n\n        Forwards to the internal `promise` property which you can\n        use in situations where you want to pass around a thennable,\n        but not the Transition itself.\n\n        @method finally\n        @param {Function} callback\n        @param {String} label optional string for labeling the promise.\n        Useful for tooling.\n        @return {Promise}\n       */\n      \"finally\": function(callback, label) {\n        return this.promise[\"finally\"](callback, label);\n      },\n\n      /**\n        @public\n\n        Aborts the Transition. Note you can also implicitly abort a transition\n        by initiating another transition while a previous one is underway.\n       */\n      abort: function() {\n        if (this.isAborted) { return this; }\n        log(this.router, this.sequence, this.targetName + \": transition was aborted\");\n        this.intent.preTransitionState = this.router.state;\n        this.isAborted = true;\n        this.isActive = false;\n        this.router.activeTransition = null;\n        return this;\n      },\n\n      /**\n        @public\n\n        Retries a previously-aborted transition (making sure to abort the\n        transition if it's still active). Returns a new transition that\n        represents the new attempt to transition.\n       */\n      retry: function() {\n        // TODO: add tests for merged state retry()s\n        this.abort();\n        return this.router.transitionByIntent(this.intent, false);\n      },\n\n      /**\n        @public\n\n        Sets the URL-changing method to be employed at the end of a\n        successful transition. By default, a new Transition will just\n        use `updateURL`, but passing 'replace' to this method will\n        cause the URL to update using 'replaceWith' instead. Omitting\n        a parameter will disable the URL change, allowing for transitions\n        that don't update the URL at completion (this is also used for\n        handleURL, since the URL has already changed before the\n        transition took place).\n\n        @param {String} method the type of URL-changing method to use\n          at the end of a transition. Accepted values are 'replace',\n          falsy values, or any other non-falsy value (which is\n          interpreted as an updateURL transition).\n\n        @return {Transition} this transition\n       */\n      method: function(method) {\n        this.urlMethod = method;\n        return this;\n      },\n\n      /**\n        @public\n\n        Fires an event on the current list of resolved/resolving\n        handlers within this transition. Useful for firing events\n        on route hierarchies that haven't fully been entered yet.\n\n        Note: This method is also aliased as `send`\n\n        @param {Boolean} [ignoreFailure=false] a boolean specifying whether unhandled events throw an error\n        @param {String} name the name of the event to fire\n       */\n      trigger: function (ignoreFailure) {\n        var args = slice.call(arguments);\n        if (typeof ignoreFailure === 'boolean') {\n          args.shift();\n        } else {\n          // Throw errors on unhandled trigger events by default\n          ignoreFailure = false;\n        }\n        trigger(this.router, this.state.handlerInfos.slice(0, this.resolveIndex + 1), ignoreFailure, args);\n      },\n\n      /**\n        @public\n\n        Transitions are aborted and their promises rejected\n        when redirects occur; this method returns a promise\n        that will follow any redirects that occur and fulfill\n        with the value fulfilled by any redirecting transitions\n        that occur.\n\n        @return {Promise} a promise that fulfills with the same\n          value that the final redirecting transition fulfills with\n       */\n      followRedirects: function() {\n        var router = this.router;\n        return this.promise['catch'](function(reason) {\n          if (router.activeTransition) {\n            return router.activeTransition.followRedirects();\n          }\n          return Promise.reject(reason);\n        });\n      },\n\n      toString: function() {\n        return \"Transition (sequence \" + this.sequence + \")\";\n      },\n\n      /**\n        @private\n       */\n      log: function(message) {\n        log(this.router, this.sequence, message);\n      }\n    };\n\n    // Alias 'trigger' as 'send'\n    Transition.prototype.send = Transition.prototype.trigger;\n\n    /**\n      @private\n\n      Logs and returns a TransitionAborted error.\n     */\n    function logAbort(transition) {\n      log(transition.router, transition.sequence, \"detected abort.\");\n      return new TransitionAborted();\n    }\n\n    function TransitionAborted(message) {\n      this.message = (message || \"TransitionAborted\");\n      this.name = \"TransitionAborted\";\n    }\n\n    __exports__.Transition = Transition;\n    __exports__.logAbort = logAbort;\n    __exports__.TransitionAborted = TransitionAborted;\n  });\nenifed(\"router/utils\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var slice = Array.prototype.slice;\n\n    var _isArray;\n    if (!Array.isArray) {\n      _isArray = function (x) {\n        return Object.prototype.toString.call(x) === \"[object Array]\";\n      };\n    } else {\n      _isArray = Array.isArray;\n    }\n\n    var isArray = _isArray;\n    __exports__.isArray = isArray;\n    function merge(hash, other) {\n      for (var prop in other) {\n        if (other.hasOwnProperty(prop)) { hash[prop] = other[prop]; }\n      }\n    }\n\n    var oCreate = Object.create || function(proto) {\n      function F() {}\n      F.prototype = proto;\n      return new F();\n    };\n    __exports__.oCreate = oCreate;\n    /**\n      @private\n\n      Extracts query params from the end of an array\n    **/\n    function extractQueryParams(array) {\n      var len = (array && array.length), head, queryParams;\n\n      if(len && len > 0 && array[len - 1] && array[len - 1].hasOwnProperty('queryParams')) {\n        queryParams = array[len - 1].queryParams;\n        head = slice.call(array, 0, len - 1);\n        return [head, queryParams];\n      } else {\n        return [array, null];\n      }\n    }\n\n    __exports__.extractQueryParams = extractQueryParams;/**\n      @private\n\n      Coerces query param properties and array elements into strings.\n    **/\n    function coerceQueryParamsToString(queryParams) {\n      for (var key in queryParams) {\n        if (typeof queryParams[key] === 'number') {\n          queryParams[key] = '' + queryParams[key];\n        } else if (isArray(queryParams[key])) {\n          for (var i = 0, l = queryParams[key].length; i < l; i++) {\n            queryParams[key][i] = '' + queryParams[key][i];\n          }\n        }\n      }\n    }\n    /**\n      @private\n     */\n    function log(router, sequence, msg) {\n      if (!router.log) { return; }\n\n      if (arguments.length === 3) {\n        router.log(\"Transition #\" + sequence + \": \" + msg);\n      } else {\n        msg = sequence;\n        router.log(msg);\n      }\n    }\n\n    __exports__.log = log;function bind(context, fn) {\n      var boundArgs = arguments;\n      return function(value) {\n        var args = slice.call(boundArgs, 2);\n        args.push(value);\n        return fn.apply(context, args);\n      };\n    }\n\n    __exports__.bind = bind;function isParam(object) {\n      return (typeof object === \"string\" || object instanceof String || typeof object === \"number\" || object instanceof Number);\n    }\n\n\n    function forEach(array, callback) {\n      for (var i=0, l=array.length; i<l && false !== callback(array[i]); i++) { }\n    }\n\n    __exports__.forEach = forEach;function trigger(router, handlerInfos, ignoreFailure, args) {\n      if (router.triggerEvent) {\n        router.triggerEvent(handlerInfos, ignoreFailure, args);\n        return;\n      }\n\n      var name = args.shift();\n\n      if (!handlerInfos) {\n        if (ignoreFailure) { return; }\n        throw new Error(\"Could not trigger event '\" + name + \"'. There are no active handlers\");\n      }\n\n      var eventWasHandled = false;\n\n      for (var i=handlerInfos.length-1; i>=0; i--) {\n        var handlerInfo = handlerInfos[i],\n            handler = handlerInfo.handler;\n\n        if (handler.events && handler.events[name]) {\n          if (handler.events[name].apply(handler, args) === true) {\n            eventWasHandled = true;\n          } else {\n            return;\n          }\n        }\n      }\n\n      if (!eventWasHandled && !ignoreFailure) {\n        throw new Error(\"Nothing handled the event '\" + name + \"'.\");\n      }\n    }\n\n    __exports__.trigger = trigger;function getChangelist(oldObject, newObject) {\n      var key;\n      var results = {\n        all: {},\n        changed: {},\n        removed: {}\n      };\n\n      merge(results.all, newObject);\n\n      var didChange = false;\n      coerceQueryParamsToString(oldObject);\n      coerceQueryParamsToString(newObject);\n\n      // Calculate removals\n      for (key in oldObject) {\n        if (oldObject.hasOwnProperty(key)) {\n          if (!newObject.hasOwnProperty(key)) {\n            didChange = true;\n            results.removed[key] = oldObject[key];\n          }\n        }\n      }\n\n      // Calculate changes\n      for (key in newObject) {\n        if (newObject.hasOwnProperty(key)) {\n          if (isArray(oldObject[key]) && isArray(newObject[key])) {\n            if (oldObject[key].length !== newObject[key].length) {\n              results.changed[key] = newObject[key];\n              didChange = true;\n            } else {\n              for (var i = 0, l = oldObject[key].length; i < l; i++) {\n                if (oldObject[key][i] !== newObject[key][i]) {\n                  results.changed[key] = newObject[key];\n                  didChange = true;\n                }\n              }\n            }\n          }\n          else {\n            if (oldObject[key] !== newObject[key]) {\n              results.changed[key] = newObject[key];\n              didChange = true;\n            }\n          }\n        }\n      }\n\n      return didChange && results;\n    }\n\n    __exports__.getChangelist = getChangelist;function promiseLabel(label) {\n      return 'Router: ' + label;\n    }\n\n    __exports__.promiseLabel = promiseLabel;function subclass(parentConstructor, proto) {\n      function C(props) {\n        parentConstructor.call(this, props || {});\n      }\n      C.prototype = oCreate(parentConstructor.prototype);\n      merge(C.prototype, proto);\n      return C;\n    }\n\n    __exports__.subclass = subclass;function resolveHook(obj, hookName) {\n      if (!obj) { return; }\n      var underscored = \"_\" + hookName;\n      return obj[underscored] && underscored ||\n             obj[hookName] && hookName;\n    }\n\n    function callHook(obj, hookName) {\n      var args = slice.call(arguments, 2);\n      return applyHook(obj, hookName, args);\n    }\n\n    function applyHook(obj, _hookName, args) {\n      var hookName = resolveHook(obj, _hookName);\n      if (hookName) {\n        return obj[hookName].apply(obj, args);\n      }\n    }\n\n    __exports__.merge = merge;\n    __exports__.slice = slice;\n    __exports__.isParam = isParam;\n    __exports__.coerceQueryParamsToString = coerceQueryParamsToString;\n    __exports__.callHook = callHook;\n    __exports__.resolveHook = resolveHook;\n    __exports__.applyHook = applyHook;\n  });\nenifed(\"rsvp\",\n  [\"./rsvp/promise\",\"./rsvp/events\",\"./rsvp/node\",\"./rsvp/all\",\"./rsvp/all-settled\",\"./rsvp/race\",\"./rsvp/hash\",\"./rsvp/hash-settled\",\"./rsvp/rethrow\",\"./rsvp/defer\",\"./rsvp/config\",\"./rsvp/map\",\"./rsvp/resolve\",\"./rsvp/reject\",\"./rsvp/filter\",\"./rsvp/asap\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __dependency11__, __dependency12__, __dependency13__, __dependency14__, __dependency15__, __dependency16__, __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__[\"default\"];\n    var EventTarget = __dependency2__[\"default\"];\n    var denodeify = __dependency3__[\"default\"];\n    var all = __dependency4__[\"default\"];\n    var allSettled = __dependency5__[\"default\"];\n    var race = __dependency6__[\"default\"];\n    var hash = __dependency7__[\"default\"];\n    var hashSettled = __dependency8__[\"default\"];\n    var rethrow = __dependency9__[\"default\"];\n    var defer = __dependency10__[\"default\"];\n    var config = __dependency11__.config;\n    var configure = __dependency11__.configure;\n    var map = __dependency12__[\"default\"];\n    var resolve = __dependency13__[\"default\"];\n    var reject = __dependency14__[\"default\"];\n    var filter = __dependency15__[\"default\"];\n    var asap = __dependency16__[\"default\"];\n\n    config.async = asap; // default async is asap;\n    var cast = resolve;\n    function async(callback, arg) {\n      config.async(callback, arg);\n    }\n\n    function on() {\n      config.on.apply(config, arguments);\n    }\n\n    function off() {\n      config.off.apply(config, arguments);\n    }\n\n    // Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\n    if (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n      var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n      configure('instrument', true);\n      for (var eventName in callbacks) {\n        if (callbacks.hasOwnProperty(eventName)) {\n          on(eventName, callbacks[eventName]);\n        }\n      }\n    }\n\n    __exports__.cast = cast;\n    __exports__.Promise = Promise;\n    __exports__.EventTarget = EventTarget;\n    __exports__.all = all;\n    __exports__.allSettled = allSettled;\n    __exports__.race = race;\n    __exports__.hash = hash;\n    __exports__.hashSettled = hashSettled;\n    __exports__.rethrow = rethrow;\n    __exports__.defer = defer;\n    __exports__.denodeify = denodeify;\n    __exports__.configure = configure;\n    __exports__.on = on;\n    __exports__.off = off;\n    __exports__.resolve = resolve;\n    __exports__.reject = reject;\n    __exports__.async = async;\n    __exports__.map = map;\n    __exports__.filter = filter;\n  });\nenifed(\"rsvp.umd\",\n  [\"./rsvp\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var Promise = __dependency1__.Promise;\n    var allSettled = __dependency1__.allSettled;\n    var hash = __dependency1__.hash;\n    var hashSettled = __dependency1__.hashSettled;\n    var denodeify = __dependency1__.denodeify;\n    var on = __dependency1__.on;\n    var off = __dependency1__.off;\n    var map = __dependency1__.map;\n    var filter = __dependency1__.filter;\n    var resolve = __dependency1__.resolve;\n    var reject = __dependency1__.reject;\n    var rethrow = __dependency1__.rethrow;\n    var all = __dependency1__.all;\n    var defer = __dependency1__.defer;\n    var EventTarget = __dependency1__.EventTarget;\n    var configure = __dependency1__.configure;\n    var race = __dependency1__.race;\n    var async = __dependency1__.async;\n\n    var RSVP = {\n      'race': race,\n      'Promise': Promise,\n      'allSettled': allSettled,\n      'hash': hash,\n      'hashSettled': hashSettled,\n      'denodeify': denodeify,\n      'on': on,\n      'off': off,\n      'map': map,\n      'filter': filter,\n      'resolve': resolve,\n      'reject': reject,\n      'all': all,\n      'rethrow': rethrow,\n      'defer': defer,\n      'EventTarget': EventTarget,\n      'configure': configure,\n      'async': async\n    };\n\n    /* global define:true module:true window: true */\n    if (typeof enifed === 'function' && enifed['amd']) {\n      enifed(function() { return RSVP; });\n    } else if (typeof module !== 'undefined' && module['exports']) {\n      module['exports'] = RSVP;\n    } else if (typeof this !== 'undefined') {\n      this['RSVP'] = RSVP;\n    }\n  });\nenifed(\"rsvp/-internal\",\n  [\"./utils\",\"./instrument\",\"./config\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var objectOrFunction = __dependency1__.objectOrFunction;\n    var isFunction = __dependency1__.isFunction;\n\n    var instrument = __dependency2__[\"default\"];\n\n    var config = __dependency3__.config;\n\n    function  withOwnPromise() {\n      return new TypeError('A promises callback cannot return that same promise.');\n    }\n\n    function noop() {}\n\n    var PENDING   = void 0;\n    var FULFILLED = 1;\n    var REJECTED  = 2;\n\n    var GET_THEN_ERROR = new ErrorObject();\n\n    function getThen(promise) {\n      try {\n        return promise.then;\n      } catch(error) {\n        GET_THEN_ERROR.error = error;\n        return GET_THEN_ERROR;\n      }\n    }\n\n    function tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n      try {\n        then.call(value, fulfillmentHandler, rejectionHandler);\n      } catch(e) {\n        return e;\n      }\n    }\n\n    function handleForeignThenable(promise, thenable, then) {\n      config.async(function(promise) {\n        var sealed = false;\n        var error = tryThen(then, thenable, function(value) {\n          if (sealed) { return; }\n          sealed = true;\n          if (thenable !== value) {\n            resolve(promise, value);\n          } else {\n            fulfill(promise, value);\n          }\n        }, function(reason) {\n          if (sealed) { return; }\n          sealed = true;\n\n          reject(promise, reason);\n        }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n        if (!sealed && error) {\n          sealed = true;\n          reject(promise, error);\n        }\n      }, promise);\n    }\n\n    function handleOwnThenable(promise, thenable) {\n      if (thenable._state === FULFILLED) {\n        fulfill(promise, thenable._result);\n      } else if (promise._state === REJECTED) {\n        reject(promise, thenable._result);\n      } else {\n        subscribe(thenable, undefined, function(value) {\n          if (thenable !== value) {\n            resolve(promise, value);\n          } else {\n            fulfill(promise, value);\n          }\n        }, function(reason) {\n          reject(promise, reason);\n        });\n      }\n    }\n\n    function handleMaybeThenable(promise, maybeThenable) {\n      if (maybeThenable.constructor === promise.constructor) {\n        handleOwnThenable(promise, maybeThenable);\n      } else {\n        var then = getThen(maybeThenable);\n\n        if (then === GET_THEN_ERROR) {\n          reject(promise, GET_THEN_ERROR.error);\n        } else if (then === undefined) {\n          fulfill(promise, maybeThenable);\n        } else if (isFunction(then)) {\n          handleForeignThenable(promise, maybeThenable, then);\n        } else {\n          fulfill(promise, maybeThenable);\n        }\n      }\n    }\n\n    function resolve(promise, value) {\n      if (promise === value) {\n        fulfill(promise, value);\n      } else if (objectOrFunction(value)) {\n        handleMaybeThenable(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }\n\n    function publishRejection(promise) {\n      if (promise._onerror) {\n        promise._onerror(promise._result);\n      }\n\n      publish(promise);\n    }\n\n    function fulfill(promise, value) {\n      if (promise._state !== PENDING) { return; }\n\n      promise._result = value;\n      promise._state = FULFILLED;\n\n      if (promise._subscribers.length === 0) {\n        if (config.instrument) {\n          instrument('fulfilled', promise);\n        }\n      } else {\n        config.async(publish, promise);\n      }\n    }\n\n    function reject(promise, reason) {\n      if (promise._state !== PENDING) { return; }\n      promise._state = REJECTED;\n      promise._result = reason;\n\n      config.async(publishRejection, promise);\n    }\n\n    function subscribe(parent, child, onFulfillment, onRejection) {\n      var subscribers = parent._subscribers;\n      var length = subscribers.length;\n\n      parent._onerror = null;\n\n      subscribers[length] = child;\n      subscribers[length + FULFILLED] = onFulfillment;\n      subscribers[length + REJECTED]  = onRejection;\n\n      if (length === 0 && parent._state) {\n        config.async(publish, parent);\n      }\n    }\n\n    function publish(promise) {\n      var subscribers = promise._subscribers;\n      var settled = promise._state;\n\n      if (config.instrument) {\n        instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n      }\n\n      if (subscribers.length === 0) { return; }\n\n      var child, callback, detail = promise._result;\n\n      for (var i = 0; i < subscribers.length; i += 3) {\n        child = subscribers[i];\n        callback = subscribers[i + settled];\n\n        if (child) {\n          invokeCallback(settled, child, callback, detail);\n        } else {\n          callback(detail);\n        }\n      }\n\n      promise._subscribers.length = 0;\n    }\n\n    function ErrorObject() {\n      this.error = null;\n    }\n\n    var TRY_CATCH_ERROR = new ErrorObject();\n\n    function tryCatch(callback, detail) {\n      try {\n        return callback(detail);\n      } catch(e) {\n        TRY_CATCH_ERROR.error = e;\n        return TRY_CATCH_ERROR;\n      }\n    }\n\n    function invokeCallback(settled, promise, callback, detail) {\n      var hasCallback = isFunction(callback),\n          value, error, succeeded, failed;\n\n      if (hasCallback) {\n        value = tryCatch(callback, detail);\n\n        if (value === TRY_CATCH_ERROR) {\n          failed = true;\n          error = value.error;\n          value = null;\n        } else {\n          succeeded = true;\n        }\n\n        if (promise === value) {\n          reject(promise, withOwnPromise());\n          return;\n        }\n\n      } else {\n        value = detail;\n        succeeded = true;\n      }\n\n      if (promise._state !== PENDING) {\n        // noop\n      } else if (hasCallback && succeeded) {\n        resolve(promise, value);\n      } else if (failed) {\n        reject(promise, error);\n      } else if (settled === FULFILLED) {\n        fulfill(promise, value);\n      } else if (settled === REJECTED) {\n        reject(promise, value);\n      }\n    }\n\n    function initializePromise(promise, resolver) {\n      try {\n        resolver(function resolvePromise(value){\n          resolve(promise, value);\n        }, function rejectPromise(reason) {\n          reject(promise, reason);\n        });\n      } catch(e) {\n        reject(promise, e);\n      }\n    }\n\n    __exports__.noop = noop;\n    __exports__.resolve = resolve;\n    __exports__.reject = reject;\n    __exports__.fulfill = fulfill;\n    __exports__.subscribe = subscribe;\n    __exports__.publish = publish;\n    __exports__.publishRejection = publishRejection;\n    __exports__.initializePromise = initializePromise;\n    __exports__.invokeCallback = invokeCallback;\n    __exports__.FULFILLED = FULFILLED;\n    __exports__.REJECTED = REJECTED;\n    __exports__.PENDING = PENDING;\n  });\nenifed(\"rsvp/all-settled\",\n  [\"./enumerator\",\"./promise\",\"./utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Enumerator = __dependency1__[\"default\"];\n    var makeSettledResult = __dependency1__.makeSettledResult;\n    var Promise = __dependency2__[\"default\"];\n    var o_create = __dependency3__.o_create;\n\n    function AllSettled(Constructor, entries, label) {\n      this._superConstructor(Constructor, entries, false /* don't abort on reject */, label);\n    }\n\n    AllSettled.prototype = o_create(Enumerator.prototype);\n    AllSettled.prototype._superConstructor = Enumerator;\n    AllSettled.prototype._makeResult = makeSettledResult;\n    AllSettled.prototype._validationError = function() {\n      return new Error('allSettled must be called with an array');\n    };\n\n    /**\n      `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\n      a fail-fast method, it waits until all the promises have returned and\n      shows you all the results. This is useful if you want to handle multiple\n      promises' failure states together as a set.\n\n      Returns a promise that is fulfilled when all the given promises have been\n      settled. The return promise is fulfilled with an array of the states of\n      the promises passed into the `promises` array argument.\n\n      Each state object will either indicate fulfillment or rejection, and\n      provide the corresponding value or reason. The states will take one of\n      the following formats:\n\n      ```javascript\n      { state: 'fulfilled', value: value }\n        or\n      { state: 'rejected', reason: reason }\n      ```\n\n      Example:\n\n      ```javascript\n      var promise1 = RSVP.Promise.resolve(1);\n      var promise2 = RSVP.Promise.reject(new Error('2'));\n      var promise3 = RSVP.Promise.reject(new Error('3'));\n      var promises = [ promise1, promise2, promise3 ];\n\n      RSVP.allSettled(promises).then(function(array){\n        // array == [\n        //   { state: 'fulfilled', value: 1 },\n        //   { state: 'rejected', reason: Error },\n        //   { state: 'rejected', reason: Error }\n        // ]\n        // Note that for the second item, reason.message will be '2', and for the\n        // third item, reason.message will be '3'.\n      }, function(error) {\n        // Not run. (This block would only be called if allSettled had failed,\n        // for instance if passed an incorrect argument type.)\n      });\n      ```\n\n      @method allSettled\n      @static\n      @for RSVP\n      @param {Array} promises\n      @param {String} label - optional string that describes the promise.\n      Useful for tooling.\n      @return {Promise} promise that is fulfilled with an array of the settled\n      states of the constituent promises.\n    */\n\n    __exports__[\"default\"] = function allSettled(entries, label) {\n      return new AllSettled(Promise, entries, label).promise;\n    }\n  });\nenifed(\"rsvp/all\",\n  [\"./promise\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__[\"default\"];\n\n    /**\n      This is a convenient alias for `RSVP.Promise.all`.\n\n      @method all\n      @static\n      @for RSVP\n      @param {Array} array Array of promises.\n      @param {String} label An optional label. This is useful\n      for tooling.\n    */\n    __exports__[\"default\"] = function all(array, label) {\n      return Promise.all(array, label);\n    }\n  });\nenifed(\"rsvp/asap\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var len = 0;\n\n    __exports__[\"default\"] = function asap(callback, arg) {\n      queue[len] = callback;\n      queue[len + 1] = arg;\n      len += 2;\n      if (len === 2) {\n        // If len is 1, that means that we need to schedule an async flush.\n        // If additional callbacks are queued before the queue is flushed, they\n        // will be processed by this flush that we are scheduling.\n        scheduleFlush();\n      }\n    }\n\n    var browserWindow = (typeof window !== 'undefined') ? window : undefined\n    var browserGlobal = browserWindow || {};\n    var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\n\n    // test for web worker but not in IE10\n    var isWorker = typeof Uint8ClampedArray !== 'undefined' &&\n      typeof importScripts !== 'undefined' &&\n      typeof MessageChannel !== 'undefined';\n\n    // node\n    function useNextTick() {\n      return function() {\n        process.nextTick(flush);\n      };\n    }\n\n    // vertx\n    function useVertxTimer() {\n      return function() {\n        vertxNext(flush);\n      };\n    }\n\n    function useMutationObserver() {\n      var iterations = 0;\n      var observer = new BrowserMutationObserver(flush);\n      var node = document.createTextNode('');\n      observer.observe(node, { characterData: true });\n\n      return function() {\n        node.data = (iterations = ++iterations % 2);\n      };\n    }\n\n    // web worker\n    function useMessageChannel() {\n      var channel = new MessageChannel();\n      channel.port1.onmessage = flush;\n      return function () {\n        channel.port2.postMessage(0);\n      };\n    }\n\n    function useSetTimeout() {\n      return function() {\n        setTimeout(flush, 1);\n      };\n    }\n\n    var queue = new Array(1000);\n    function flush() {\n      for (var i = 0; i < len; i+=2) {\n        var callback = queue[i];\n        var arg = queue[i+1];\n\n        callback(arg);\n\n        queue[i] = undefined;\n        queue[i+1] = undefined;\n      }\n\n      len = 0;\n    }\n\n    function attemptVertex() {\n      try {\n        var vertx = eriuqer('vertx');\n        var vertxNext = vertx.runOnLoop || vertx.runOnContext;\n        return useVertxTimer();\n      } catch(e) {\n        return useSetTimeout();\n      }\n    }\n\n    var scheduleFlush;\n    // Decide what async method to use to triggering processing of queued callbacks:\n    if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {\n      scheduleFlush = useNextTick();\n    } else if (BrowserMutationObserver) {\n      scheduleFlush = useMutationObserver();\n    } else if (isWorker) {\n      scheduleFlush = useMessageChannel();\n    } else if (browserWindow === undefined && typeof eriuqer === 'function') {\n      scheduleFlush = attemptVertex();\n    } else {\n      scheduleFlush = useSetTimeout();\n    }\n  });\nenifed(\"rsvp/config\",\n  [\"./events\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EventTarget = __dependency1__[\"default\"];\n\n    var config = {\n      instrument: false\n    };\n\n    EventTarget.mixin(config);\n\n    function configure(name, value) {\n      if (name === 'onerror') {\n        // handle for legacy users that expect the actual\n        // error to be passed to their function added via\n        // `RSVP.configure('onerror', someFunctionHere);`\n        config.on('error', value);\n        return;\n      }\n\n      if (arguments.length === 2) {\n        config[name] = value;\n      } else {\n        return config[name];\n      }\n    }\n\n    __exports__.config = config;\n    __exports__.configure = configure;\n  });\nenifed(\"rsvp/defer\",\n  [\"./promise\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__[\"default\"];\n\n    /**\n      `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n      `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n      interface. New code should use the `RSVP.Promise` constructor instead.\n\n      The object returned from `RSVP.defer` is a plain object with three properties:\n\n      * promise - an `RSVP.Promise`.\n      * reject - a function that causes the `promise` property on this object to\n        become rejected\n      * resolve - a function that causes the `promise` property on this object to\n        become fulfilled.\n\n      Example:\n\n       ```javascript\n       var deferred = RSVP.defer();\n\n       deferred.resolve(\"Success!\");\n\n       defered.promise.then(function(value){\n         // value here is \"Success!\"\n       });\n       ```\n\n      @method defer\n      @static\n      @for RSVP\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Object}\n     */\n\n    __exports__[\"default\"] = function defer(label) {\n      var deferred = { };\n\n      deferred['promise'] = new Promise(function(resolve, reject) {\n        deferred['resolve'] = resolve;\n        deferred['reject'] = reject;\n      }, label);\n\n      return deferred;\n    }\n  });\nenifed(\"rsvp/enumerator\",\n  [\"./utils\",\"./-internal\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var isArray = __dependency1__.isArray;\n    var isMaybeThenable = __dependency1__.isMaybeThenable;\n\n    var noop = __dependency2__.noop;\n    var reject = __dependency2__.reject;\n    var fulfill = __dependency2__.fulfill;\n    var subscribe = __dependency2__.subscribe;\n    var FULFILLED = __dependency2__.FULFILLED;\n    var REJECTED = __dependency2__.REJECTED;\n    var PENDING = __dependency2__.PENDING;\n\n    function makeSettledResult(state, position, value) {\n      if (state === FULFILLED) {\n        return {\n          state: 'fulfilled',\n          value: value\n        };\n      } else {\n        return {\n          state: 'rejected',\n          reason: value\n        };\n      }\n    }\n\n    __exports__.makeSettledResult = makeSettledResult;function Enumerator(Constructor, input, abortOnReject, label) {\n      this._instanceConstructor = Constructor;\n      this.promise = new Constructor(noop, label);\n      this._abortOnReject = abortOnReject;\n\n      if (this._validateInput(input)) {\n        this._input     = input;\n        this.length     = input.length;\n        this._remaining = input.length;\n\n        this._init();\n\n        if (this.length === 0) {\n          fulfill(this.promise, this._result);\n        } else {\n          this.length = this.length || 0;\n          this._enumerate();\n          if (this._remaining === 0) {\n            fulfill(this.promise, this._result);\n          }\n        }\n      } else {\n        reject(this.promise, this._validationError());\n      }\n    }\n\n    Enumerator.prototype._validateInput = function(input) {\n      return isArray(input);\n    };\n\n    Enumerator.prototype._validationError = function() {\n      return new Error('Array Methods must be provided an Array');\n    };\n\n    Enumerator.prototype._init = function() {\n      this._result = new Array(this.length);\n    };\n\n    __exports__[\"default\"] = Enumerator;\n\n    Enumerator.prototype._enumerate = function() {\n      var length  = this.length;\n      var promise = this.promise;\n      var input   = this._input;\n\n      for (var i = 0; promise._state === PENDING && i < length; i++) {\n        this._eachEntry(input[i], i);\n      }\n    };\n\n    Enumerator.prototype._eachEntry = function(entry, i) {\n      var c = this._instanceConstructor;\n      if (isMaybeThenable(entry)) {\n        if (entry.constructor === c && entry._state !== PENDING) {\n          entry._onerror = null;\n          this._settledAt(entry._state, i, entry._result);\n        } else {\n          this._willSettleAt(c.resolve(entry), i);\n        }\n      } else {\n        this._remaining--;\n        this._result[i] = this._makeResult(FULFILLED, i, entry);\n      }\n    };\n\n    Enumerator.prototype._settledAt = function(state, i, value) {\n      var promise = this.promise;\n\n      if (promise._state === PENDING) {\n        this._remaining--;\n\n        if (this._abortOnReject && state === REJECTED) {\n          reject(promise, value);\n        } else {\n          this._result[i] = this._makeResult(state, i, value);\n        }\n      }\n\n      if (this._remaining === 0) {\n        fulfill(promise, this._result);\n      }\n    };\n\n    Enumerator.prototype._makeResult = function(state, i, value) {\n      return value;\n    };\n\n    Enumerator.prototype._willSettleAt = function(promise, i) {\n      var enumerator = this;\n\n      subscribe(promise, undefined, function(value) {\n        enumerator._settledAt(FULFILLED, i, value);\n      }, function(reason) {\n        enumerator._settledAt(REJECTED, i, reason);\n      });\n    };\n  });\nenifed(\"rsvp/events\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function indexOf(callbacks, callback) {\n      for (var i=0, l=callbacks.length; i<l; i++) {\n        if (callbacks[i] === callback) { return i; }\n      }\n\n      return -1;\n    }\n\n    function callbacksFor(object) {\n      var callbacks = object._promiseCallbacks;\n\n      if (!callbacks) {\n        callbacks = object._promiseCallbacks = {};\n      }\n\n      return callbacks;\n    }\n\n    /**\n      @class RSVP.EventTarget\n    */\n    __exports__[\"default\"] = {\n\n      /**\n        `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n        Example:\n\n        ```javascript\n        var object = {};\n\n        RSVP.EventTarget.mixin(object);\n\n        object.on('finished', function(event) {\n          // handle event\n        });\n\n        object.trigger('finished', { detail: value });\n        ```\n\n        `EventTarget.mixin` also works with prototypes:\n\n        ```javascript\n        var Person = function() {};\n        RSVP.EventTarget.mixin(Person.prototype);\n\n        var yehuda = new Person();\n        var tom = new Person();\n\n        yehuda.on('poke', function(event) {\n          console.log('Yehuda says OW');\n        });\n\n        tom.on('poke', function(event) {\n          console.log('Tom says OW');\n        });\n\n        yehuda.trigger('poke');\n        tom.trigger('poke');\n        ```\n\n        @method mixin\n        @for RSVP.EventTarget\n        @private\n        @param {Object} object object to extend with EventTarget methods\n      */\n      mixin: function(object) {\n        object.on = this.on;\n        object.off = this.off;\n        object.trigger = this.trigger;\n        object._promiseCallbacks = undefined;\n        return object;\n      },\n\n      /**\n        Registers a callback to be executed when `eventName` is triggered\n\n        ```javascript\n        object.on('event', function(eventInfo){\n          // handle the event\n        });\n\n        object.trigger('event');\n        ```\n\n        @method on\n        @for RSVP.EventTarget\n        @private\n        @param {String} eventName name of the event to listen for\n        @param {Function} callback function to be called when the event is triggered.\n      */\n      on: function(eventName, callback) {\n        var allCallbacks = callbacksFor(this), callbacks;\n\n        callbacks = allCallbacks[eventName];\n\n        if (!callbacks) {\n          callbacks = allCallbacks[eventName] = [];\n        }\n\n        if (indexOf(callbacks, callback) === -1) {\n          callbacks.push(callback);\n        }\n      },\n\n      /**\n        You can use `off` to stop firing a particular callback for an event:\n\n        ```javascript\n        function doStuff() { // do stuff! }\n        object.on('stuff', doStuff);\n\n        object.trigger('stuff'); // doStuff will be called\n\n        // Unregister ONLY the doStuff callback\n        object.off('stuff', doStuff);\n        object.trigger('stuff'); // doStuff will NOT be called\n        ```\n\n        If you don't pass a `callback` argument to `off`, ALL callbacks for the\n        event will not be executed when the event fires. For example:\n\n        ```javascript\n        var callback1 = function(){};\n        var callback2 = function(){};\n\n        object.on('stuff', callback1);\n        object.on('stuff', callback2);\n\n        object.trigger('stuff'); // callback1 and callback2 will be executed.\n\n        object.off('stuff');\n        object.trigger('stuff'); // callback1 and callback2 will not be executed!\n        ```\n\n        @method off\n        @for RSVP.EventTarget\n        @private\n        @param {String} eventName event to stop listening to\n        @param {Function} callback optional argument. If given, only the function\n        given will be removed from the event's callback queue. If no `callback`\n        argument is given, all callbacks will be removed from the event's callback\n        queue.\n      */\n      off: function(eventName, callback) {\n        var allCallbacks = callbacksFor(this), callbacks, index;\n\n        if (!callback) {\n          allCallbacks[eventName] = [];\n          return;\n        }\n\n        callbacks = allCallbacks[eventName];\n\n        index = indexOf(callbacks, callback);\n\n        if (index !== -1) { callbacks.splice(index, 1); }\n      },\n\n      /**\n        Use `trigger` to fire custom events. For example:\n\n        ```javascript\n        object.on('foo', function(){\n          console.log('foo event happened!');\n        });\n        object.trigger('foo');\n        // 'foo event happened!' logged to the console\n        ```\n\n        You can also pass a value as a second argument to `trigger` that will be\n        passed as an argument to all event listeners for the event:\n\n        ```javascript\n        object.on('foo', function(value){\n          console.log(value.name);\n        });\n\n        object.trigger('foo', { name: 'bar' });\n        // 'bar' logged to the console\n        ```\n\n        @method trigger\n        @for RSVP.EventTarget\n        @private\n        @param {String} eventName name of the event to be triggered\n        @param {Any} options optional value to be passed to any event handlers for\n        the given `eventName`\n      */\n      trigger: function(eventName, options) {\n        var allCallbacks = callbacksFor(this), callbacks, callback;\n\n        if (callbacks = allCallbacks[eventName]) {\n          // Don't cache the callbacks.length since it may grow\n          for (var i=0; i<callbacks.length; i++) {\n            callback = callbacks[i];\n\n            callback(options);\n          }\n        }\n      }\n    };\n  });\nenifed(\"rsvp/filter\",\n  [\"./promise\",\"./utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__[\"default\"];\n    var isFunction = __dependency2__.isFunction;\n\n    /**\n     `RSVP.filter` is similar to JavaScript's native `filter` method, except that it\n      waits for all promises to become fulfilled before running the `filterFn` on\n      each item in given to `promises`. `RSVP.filter` returns a promise that will\n      become fulfilled with the result of running `filterFn` on the values the\n      promises become fulfilled with.\n\n      For example:\n\n      ```javascript\n\n      var promise1 = RSVP.resolve(1);\n      var promise2 = RSVP.resolve(2);\n      var promise3 = RSVP.resolve(3);\n\n      var promises = [promise1, promise2, promise3];\n\n      var filterFn = function(item){\n        return item > 1;\n      };\n\n      RSVP.filter(promises, filterFn).then(function(result){\n        // result is [ 2, 3 ]\n      });\n      ```\n\n      If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n      that is rejected will be given as an argument to the returned promise's\n      rejection handler. For example:\n\n      ```javascript\n      var promise1 = RSVP.resolve(1);\n      var promise2 = RSVP.reject(new Error('2'));\n      var promise3 = RSVP.reject(new Error('3'));\n      var promises = [ promise1, promise2, promise3 ];\n\n      var filterFn = function(item){\n        return item > 1;\n      };\n\n      RSVP.filter(promises, filterFn).then(function(array){\n        // Code here never runs because there are rejected promises!\n      }, function(reason) {\n        // reason.message === '2'\n      });\n      ```\n\n      `RSVP.filter` will also wait for any promises returned from `filterFn`.\n      For instance, you may want to fetch a list of users then return a subset\n      of those users based on some asynchronous operation:\n\n      ```javascript\n\n      var alice = { name: 'alice' };\n      var bob   = { name: 'bob' };\n      var users = [ alice, bob ];\n\n      var promises = users.map(function(user){\n        return RSVP.resolve(user);\n      });\n\n      var filterFn = function(user){\n        // Here, Alice has permissions to create a blog post, but Bob does not.\n        return getPrivilegesForUser(user).then(function(privs){\n          return privs.can_create_blog_post === true;\n        });\n      };\n      RSVP.filter(promises, filterFn).then(function(users){\n        // true, because the server told us only Alice can create a blog post.\n        users.length === 1;\n        // false, because Alice is the only user present in `users`\n        users[0] === bob;\n      });\n      ```\n\n      @method filter\n      @static\n      @for RSVP\n      @param {Array} promises\n      @param {Function} filterFn - function to be called on each resolved value to\n      filter the final results.\n      @param {String} label optional string describing the promise. Useful for\n      tooling.\n      @return {Promise}\n    */\n    __exports__[\"default\"] = function filter(promises, filterFn, label) {\n      return Promise.all(promises, label).then(function(values) {\n        if (!isFunction(filterFn)) {\n          throw new TypeError(\"You must pass a function as filter's second argument.\");\n        }\n\n        var length = values.length;\n        var filtered = new Array(length);\n\n        for (var i = 0; i < length; i++) {\n          filtered[i] = filterFn(values[i]);\n        }\n\n        return Promise.all(filtered, label).then(function(filtered) {\n          var results = new Array(length);\n          var newLength = 0;\n\n          for (var i = 0; i < length; i++) {\n            if (filtered[i]) {\n              results[newLength] = values[i];\n              newLength++;\n            }\n          }\n\n          results.length = newLength;\n\n          return results;\n        });\n      });\n    }\n  });\nenifed(\"rsvp/hash-settled\",\n  [\"./promise\",\"./enumerator\",\"./promise-hash\",\"./utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__[\"default\"];\n    var makeSettledResult = __dependency2__.makeSettledResult;\n    var PromiseHash = __dependency3__[\"default\"];\n    var Enumerator = __dependency2__[\"default\"];\n    var o_create = __dependency4__.o_create;\n\n    function HashSettled(Constructor, object, label) {\n      this._superConstructor(Constructor, object, false, label);\n    }\n\n    HashSettled.prototype = o_create(PromiseHash.prototype);\n    HashSettled.prototype._superConstructor = Enumerator;\n    HashSettled.prototype._makeResult = makeSettledResult;\n\n    HashSettled.prototype._validationError = function() {\n      return new Error('hashSettled must be called with an object');\n    };\n\n    /**\n      `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n      instead of an array for its `promises` argument.\n\n      Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n      but like `RSVP.allSettled`, `hashSettled` waits until all the\n      constituent promises have returned and then shows you all the results\n      with their states and values/reasons. This is useful if you want to\n      handle multiple promises' failure states together as a set.\n\n      Returns a promise that is fulfilled when all the given promises have been\n      settled, or rejected if the passed parameters are invalid.\n\n      The returned promise is fulfilled with a hash that has the same key names as\n      the `promises` object argument. If any of the values in the object are not\n      promises, they will be copied over to the fulfilled object and marked with state\n      'fulfilled'.\n\n      Example:\n\n      ```javascript\n      var promises = {\n        myPromise: RSVP.Promise.resolve(1),\n        yourPromise: RSVP.Promise.resolve(2),\n        theirPromise: RSVP.Promise.resolve(3),\n        notAPromise: 4\n      };\n\n      RSVP.hashSettled(promises).then(function(hash){\n        // hash here is an object that looks like:\n        // {\n        //   myPromise: { state: 'fulfilled', value: 1 },\n        //   yourPromise: { state: 'fulfilled', value: 2 },\n        //   theirPromise: { state: 'fulfilled', value: 3 },\n        //   notAPromise: { state: 'fulfilled', value: 4 }\n        // }\n      });\n      ```\n\n      If any of the `promises` given to `RSVP.hash` are rejected, the state will\n      be set to 'rejected' and the reason for rejection provided.\n\n      Example:\n\n      ```javascript\n      var promises = {\n        myPromise: RSVP.Promise.resolve(1),\n        rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n        anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n      };\n\n      RSVP.hashSettled(promises).then(function(hash){\n        // hash here is an object that looks like:\n        // {\n        //   myPromise:              { state: 'fulfilled', value: 1 },\n        //   rejectedPromise:        { state: 'rejected', reason: Error },\n        //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n        // }\n        // Note that for rejectedPromise, reason.message == 'rejection',\n        // and for anotherRejectedPromise, reason.message == 'more rejection'.\n      });\n      ```\n\n      An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n      are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n      chains.\n\n      Example:\n\n      ```javascript\n      function MyConstructor(){\n        this.example = RSVP.Promise.resolve('Example');\n      }\n\n      MyConstructor.prototype = {\n        protoProperty: RSVP.Promise.resolve('Proto Property')\n      };\n\n      var myObject = new MyConstructor();\n\n      RSVP.hashSettled(myObject).then(function(hash){\n        // protoProperty will not be present, instead you will just have an\n        // object that looks like:\n        // {\n        //   example: { state: 'fulfilled', value: 'Example' }\n        // }\n        //\n        // hash.hasOwnProperty('protoProperty'); // false\n        // 'undefined' === typeof hash.protoProperty\n      });\n      ```\n\n      @method hashSettled\n      @for RSVP\n      @param {Object} promises\n      @param {String} label optional string that describes the promise.\n      Useful for tooling.\n      @return {Promise} promise that is fulfilled when when all properties of `promises`\n      have been settled.\n      @static\n    */\n    __exports__[\"default\"] = function hashSettled(object, label) {\n      return new HashSettled(Promise, object, label).promise;\n    }\n  });\nenifed(\"rsvp/hash\",\n  [\"./promise\",\"./promise-hash\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__[\"default\"];\n    var PromiseHash = __dependency2__[\"default\"];\n\n    /**\n      `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n      for its `promises` argument.\n\n      Returns a promise that is fulfilled when all the given promises have been\n      fulfilled, or rejected if any of them become rejected. The returned promise\n      is fulfilled with a hash that has the same key names as the `promises` object\n      argument. If any of the values in the object are not promises, they will\n      simply be copied over to the fulfilled object.\n\n      Example:\n\n      ```javascript\n      var promises = {\n        myPromise: RSVP.resolve(1),\n        yourPromise: RSVP.resolve(2),\n        theirPromise: RSVP.resolve(3),\n        notAPromise: 4\n      };\n\n      RSVP.hash(promises).then(function(hash){\n        // hash here is an object that looks like:\n        // {\n        //   myPromise: 1,\n        //   yourPromise: 2,\n        //   theirPromise: 3,\n        //   notAPromise: 4\n        // }\n      });\n      ````\n\n      If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n      that is rejected will be given as the reason to the rejection handler.\n\n      Example:\n\n      ```javascript\n      var promises = {\n        myPromise: RSVP.resolve(1),\n        rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n        anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n      };\n\n      RSVP.hash(promises).then(function(hash){\n        // Code here never runs because there are rejected promises!\n      }, function(reason) {\n        // reason.message === 'rejectedPromise'\n      });\n      ```\n\n      An important note: `RSVP.hash` is intended for plain JavaScript objects that\n      are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n      chains.\n\n      Example:\n\n      ```javascript\n      function MyConstructor(){\n        this.example = RSVP.resolve('Example');\n      }\n\n      MyConstructor.prototype = {\n        protoProperty: RSVP.resolve('Proto Property')\n      };\n\n      var myObject = new MyConstructor();\n\n      RSVP.hash(myObject).then(function(hash){\n        // protoProperty will not be present, instead you will just have an\n        // object that looks like:\n        // {\n        //   example: 'Example'\n        // }\n        //\n        // hash.hasOwnProperty('protoProperty'); // false\n        // 'undefined' === typeof hash.protoProperty\n      });\n      ```\n\n      @method hash\n      @static\n      @for RSVP\n      @param {Object} promises\n      @param {String} label optional string that describes the promise.\n      Useful for tooling.\n      @return {Promise} promise that is fulfilled when all properties of `promises`\n      have been fulfilled, or rejected if any of them become rejected.\n    */\n    __exports__[\"default\"] = function hash(object, label) {\n      return new PromiseHash(Promise, object, label).promise;\n    }\n  });\nenifed(\"rsvp/instrument\",\n  [\"./config\",\"./utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var config = __dependency1__.config;\n    var now = __dependency2__.now;\n\n    var queue = [];\n\n    function scheduleFlush() {\n      setTimeout(function() {\n        var entry;\n        for (var i = 0; i < queue.length; i++) {\n          entry = queue[i];\n\n          var payload = entry.payload;\n\n          payload.guid = payload.key + payload.id;\n          payload.childGuid = payload.key + payload.childId;\n          if (payload.error) {\n            payload.stack = payload.error.stack;\n          }\n\n          config.trigger(entry.name, entry.payload);\n        }\n        queue.length = 0;\n      }, 50);\n    }\n\n    __exports__[\"default\"] = function instrument(eventName, promise, child) {\n      if (1 === queue.push({\n          name: eventName,\n          payload: {\n            key: promise._guidKey,\n            id:  promise._id,\n            eventName: eventName,\n            detail: promise._result,\n            childId: child && child._id,\n            label: promise._label,\n            timeStamp: now(),\n            error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n          }})) {\n            scheduleFlush();\n          }\n      }\n  });\nenifed(\"rsvp/map\",\n  [\"./promise\",\"./utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__[\"default\"];\n    var isFunction = __dependency2__.isFunction;\n\n    /**\n     `RSVP.map` is similar to JavaScript's native `map` method, except that it\n      waits for all promises to become fulfilled before running the `mapFn` on\n      each item in given to `promises`. `RSVP.map` returns a promise that will\n      become fulfilled with the result of running `mapFn` on the values the promises\n      become fulfilled with.\n\n      For example:\n\n      ```javascript\n\n      var promise1 = RSVP.resolve(1);\n      var promise2 = RSVP.resolve(2);\n      var promise3 = RSVP.resolve(3);\n      var promises = [ promise1, promise2, promise3 ];\n\n      var mapFn = function(item){\n        return item + 1;\n      };\n\n      RSVP.map(promises, mapFn).then(function(result){\n        // result is [ 2, 3, 4 ]\n      });\n      ```\n\n      If any of the `promises` given to `RSVP.map` are rejected, the first promise\n      that is rejected will be given as an argument to the returned promise's\n      rejection handler. For example:\n\n      ```javascript\n      var promise1 = RSVP.resolve(1);\n      var promise2 = RSVP.reject(new Error('2'));\n      var promise3 = RSVP.reject(new Error('3'));\n      var promises = [ promise1, promise2, promise3 ];\n\n      var mapFn = function(item){\n        return item + 1;\n      };\n\n      RSVP.map(promises, mapFn).then(function(array){\n        // Code here never runs because there are rejected promises!\n      }, function(reason) {\n        // reason.message === '2'\n      });\n      ```\n\n      `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n      say you want to get all comments from a set of blog posts, but you need\n      the blog posts first because they contain a url to those comments.\n\n      ```javscript\n\n      var mapFn = function(blogPost){\n        // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n        // with some comments data\n        return getComments(blogPost.comments_url);\n      };\n\n      // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n      // with some blog post data\n      RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n        // comments is the result of asking the server for the comments\n        // of all blog posts returned from getBlogPosts()\n      });\n      ```\n\n      @method map\n      @static\n      @for RSVP\n      @param {Array} promises\n      @param {Function} mapFn function to be called on each fulfilled promise.\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise} promise that is fulfilled with the result of calling\n      `mapFn` on each fulfilled promise or value when they become fulfilled.\n       The promise will be rejected if any of the given `promises` become rejected.\n      @static\n    */\n    __exports__[\"default\"] = function map(promises, mapFn, label) {\n      return Promise.all(promises, label).then(function(values) {\n        if (!isFunction(mapFn)) {\n          throw new TypeError(\"You must pass a function as map's second argument.\");\n        }\n\n        var length = values.length;\n        var results = new Array(length);\n\n        for (var i = 0; i < length; i++) {\n          results[i] = mapFn(values[i]);\n        }\n\n        return Promise.all(results, label);\n      });\n    }\n  });\nenifed(\"rsvp/node\",\n  [\"./promise\",\"./-internal\",\"./utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__[\"default\"];\n    var noop = __dependency2__.noop;\n    var resolve = __dependency2__.resolve;\n    var reject = __dependency2__.reject;\n    var isArray = __dependency3__.isArray;\n\n    function Result() {\n      this.value = undefined;\n    }\n\n    var ERROR = new Result();\n    var GET_THEN_ERROR = new Result();\n\n    function getThen(obj) {\n      try {\n       return obj.then;\n      } catch(error) {\n        ERROR.value= error;\n        return ERROR;\n      }\n    }\n\n\n    function tryApply(f, s, a) {\n      try {\n        f.apply(s, a);\n      } catch(error) {\n        ERROR.value = error;\n        return ERROR;\n      }\n    }\n\n    function makeObject(_, argumentNames) {\n      var obj = {};\n      var name;\n      var i;\n      var length = _.length;\n      var args = new Array(length);\n\n      for (var x = 0; x < length; x++) {\n        args[x] = _[x];\n      }\n\n      for (i = 0; i < argumentNames.length; i++) {\n        name = argumentNames[i];\n        obj[name] = args[i + 1];\n      }\n\n      return obj;\n    }\n\n    function arrayResult(_) {\n      var length = _.length;\n      var args = new Array(length - 1);\n\n      for (var i = 1; i < length; i++) {\n        args[i - 1] = _[i];\n      }\n\n      return args;\n    }\n\n    function wrapThenable(then, promise) {\n      return {\n        then: function(onFulFillment, onRejection) {\n          return then.call(promise, onFulFillment, onRejection);\n        }\n      };\n    }\n\n    /**\n      `RSVP.denodeify` takes a 'node-style' function and returns a function that\n      will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n      browser when you'd prefer to use promises over using callbacks. For example,\n      `denodeify` transforms the following:\n\n      ```javascript\n      var fs = require('fs');\n\n      fs.readFile('myfile.txt', function(err, data){\n        if (err) return handleError(err);\n        handleData(data);\n      });\n      ```\n\n      into:\n\n      ```javascript\n      var fs = require('fs');\n      var readFile = RSVP.denodeify(fs.readFile);\n\n      readFile('myfile.txt').then(handleData, handleError);\n      ```\n\n      If the node function has multiple success parameters, then `denodeify`\n      just returns the first one:\n\n      ```javascript\n      var request = RSVP.denodeify(require('request'));\n\n      request('http://example.com').then(function(res) {\n        // ...\n      });\n      ```\n\n      However, if you need all success parameters, setting `denodeify`'s\n      second parameter to `true` causes it to return all success parameters\n      as an array:\n\n      ```javascript\n      var request = RSVP.denodeify(require('request'), true);\n\n      request('http://example.com').then(function(result) {\n        // result[0] -> res\n        // result[1] -> body\n      });\n      ```\n\n      Or if you pass it an array with names it returns the parameters as a hash:\n\n      ```javascript\n      var request = RSVP.denodeify(require('request'), ['res', 'body']);\n\n      request('http://example.com').then(function(result) {\n        // result.res\n        // result.body\n      });\n      ```\n\n      Sometimes you need to retain the `this`:\n\n      ```javascript\n      var app = require('express')();\n      var render = RSVP.denodeify(app.render.bind(app));\n      ```\n\n      The denodified function inherits from the original function. It works in all\n      environments, except IE 10 and below. Consequently all properties of the original\n      function are available to you. However, any properties you change on the\n      denodeified function won't be changed on the original function. Example:\n\n      ```javascript\n      var request = RSVP.denodeify(require('request')),\n          cookieJar = request.jar(); // <- Inheritance is used here\n\n      request('http://example.com', {jar: cookieJar}).then(function(res) {\n        // cookieJar.cookies holds now the cookies returned by example.com\n      });\n      ```\n\n      Using `denodeify` makes it easier to compose asynchronous operations instead\n      of using callbacks. For example, instead of:\n\n      ```javascript\n      var fs = require('fs');\n\n      fs.readFile('myfile.txt', function(err, data){\n        if (err) { ... } // Handle error\n        fs.writeFile('myfile2.txt', data, function(err){\n          if (err) { ... } // Handle error\n          console.log('done')\n        });\n      });\n      ```\n\n      you can chain the operations together using `then` from the returned promise:\n\n      ```javascript\n      var fs = require('fs');\n      var readFile = RSVP.denodeify(fs.readFile);\n      var writeFile = RSVP.denodeify(fs.writeFile);\n\n      readFile('myfile.txt').then(function(data){\n        return writeFile('myfile2.txt', data);\n      }).then(function(){\n        console.log('done')\n      }).catch(function(error){\n        // Handle error\n      });\n      ```\n\n      @method denodeify\n      @static\n      @for RSVP\n      @param {Function} nodeFunc a 'node-style' function that takes a callback as\n      its last argument. The callback expects an error to be passed as its first\n      argument (if an error occurred, otherwise null), and the value from the\n      operation as its second argument ('function(err, value){ }').\n      @param {Boolean|Array} argumentNames An optional paramter that if set\n      to `true` causes the promise to fulfill with the callback's success arguments\n      as an array. This is useful if the node function has multiple success\n      paramters. If you set this paramter to an array with names, the promise will\n      fulfill with a hash with these names as keys and the success parameters as\n      values.\n      @return {Function} a function that wraps `nodeFunc` to return an\n      `RSVP.Promise`\n      @static\n    */\n    __exports__[\"default\"] = function denodeify(nodeFunc, options) {\n      var fn = function() {\n        var self = this;\n        var l = arguments.length;\n        var args = new Array(l + 1);\n        var arg;\n        var promiseInput = false;\n\n        for (var i = 0; i < l; ++i) {\n          arg = arguments[i];\n\n          if (!promiseInput) {\n            // TODO: clean this up\n            promiseInput = needsPromiseInput(arg);\n            if (promiseInput === GET_THEN_ERROR) {\n              var p = new Promise(noop);\n              reject(p, GET_THEN_ERROR.value);\n              return p;\n            } else if (promiseInput && promiseInput !== true) {\n              arg = wrapThenable(promiseInput, arg);\n            }\n          }\n          args[i] = arg;\n        }\n\n        var promise = new Promise(noop);\n\n        args[l] = function(err, val) {\n          if (err)\n            reject(promise, err);\n          else if (options === undefined)\n            resolve(promise, val);\n          else if (options === true)\n            resolve(promise, arrayResult(arguments));\n          else if (isArray(options))\n            resolve(promise, makeObject(arguments, options));\n          else\n            resolve(promise, val);\n        };\n\n        if (promiseInput) {\n          return handlePromiseInput(promise, args, nodeFunc, self);\n        } else {\n          return handleValueInput(promise, args, nodeFunc, self);\n        }\n      };\n\n      fn.__proto__ = nodeFunc;\n\n      return fn;\n    }\n\n    function handleValueInput(promise, args, nodeFunc, self) {\n      var result = tryApply(nodeFunc, self, args);\n      if (result === ERROR) {\n        reject(promise, result.value);\n      }\n      return promise;\n    }\n\n    function handlePromiseInput(promise, args, nodeFunc, self){\n      return Promise.all(args).then(function(args){\n        var result = tryApply(nodeFunc, self, args);\n        if (result === ERROR) {\n          reject(promise, result.value);\n        }\n        return promise;\n      });\n    }\n\n    function needsPromiseInput(arg) {\n      if (arg && typeof arg === 'object') {\n        if (arg.constructor === Promise) {\n          return true;\n        } else {\n          return getThen(arg);\n        }\n      } else {\n        return false;\n      }\n    }\n  });\nenifed(\"rsvp/promise-hash\",\n  [\"./enumerator\",\"./-internal\",\"./utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Enumerator = __dependency1__[\"default\"];\n    var PENDING = __dependency2__.PENDING;\n    var o_create = __dependency3__.o_create;\n\n    function PromiseHash(Constructor, object, label) {\n      this._superConstructor(Constructor, object, true, label);\n    }\n\n    __exports__[\"default\"] = PromiseHash;\n\n    PromiseHash.prototype = o_create(Enumerator.prototype);\n    PromiseHash.prototype._superConstructor = Enumerator;\n    PromiseHash.prototype._init = function() {\n      this._result = {};\n    };\n\n    PromiseHash.prototype._validateInput = function(input) {\n      return input && typeof input === 'object';\n    };\n\n    PromiseHash.prototype._validationError = function() {\n      return new Error('Promise.hash must be called with an object');\n    };\n\n    PromiseHash.prototype._enumerate = function() {\n      var promise = this.promise;\n      var input   = this._input;\n      var results = [];\n\n      for (var key in input) {\n        if (promise._state === PENDING && input.hasOwnProperty(key)) {\n          results.push({\n            position: key,\n            entry: input[key]\n          });\n        }\n      }\n\n      var length = results.length;\n      this._remaining = length;\n      var result;\n\n      for (var i = 0; promise._state === PENDING && i < length; i++) {\n        result = results[i];\n        this._eachEntry(result.entry, result.position);\n      }\n    };\n  });\nenifed(\"rsvp/promise\",\n  [\"./config\",\"./instrument\",\"./utils\",\"./-internal\",\"./promise/all\",\"./promise/race\",\"./promise/resolve\",\"./promise/reject\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    var config = __dependency1__.config;\n    var instrument = __dependency2__[\"default\"];\n\n    var isFunction = __dependency3__.isFunction;\n    var now = __dependency3__.now;\n\n    var noop = __dependency4__.noop;\n    var subscribe = __dependency4__.subscribe;\n    var initializePromise = __dependency4__.initializePromise;\n    var invokeCallback = __dependency4__.invokeCallback;\n    var FULFILLED = __dependency4__.FULFILLED;\n    var REJECTED = __dependency4__.REJECTED;\n\n    var all = __dependency5__[\"default\"];\n    var race = __dependency6__[\"default\"];\n    var Resolve = __dependency7__[\"default\"];\n    var Reject = __dependency8__[\"default\"];\n\n    var guidKey = 'rsvp_' + now() + '-';\n    var counter = 0;\n\n    function needsResolver() {\n      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n    }\n\n    function needsNew() {\n      throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n    }\n    __exports__[\"default\"] = Promise;\n    /**\n      Promise objects represent the eventual result of an asynchronous operation. The\n      primary way of interacting with a promise is through its `then` method, which\n      registers callbacks to receive either a promise’s eventual value or the reason\n      why the promise cannot be fulfilled.\n\n      Terminology\n      -----------\n\n      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n      - `thenable` is an object or function that defines a `then` method.\n      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n      - `exception` is a value that is thrown using the throw statement.\n      - `reason` is a value that indicates why a promise was rejected.\n      - `settled` the final resting state of a promise, fulfilled or rejected.\n\n      A promise can be in one of three states: pending, fulfilled, or rejected.\n\n      Promises that are fulfilled have a fulfillment value and are in the fulfilled\n      state.  Promises that are rejected have a rejection reason and are in the\n      rejected state.  A fulfillment value is never a thenable.\n\n      Promises can also be said to *resolve* a value.  If this value is also a\n      promise, then the original promise's settled state will match the value's\n      settled state.  So a promise that *resolves* a promise that rejects will\n      itself reject, and a promise that *resolves* a promise that fulfills will\n      itself fulfill.\n\n\n      Basic Usage:\n      ------------\n\n      ```js\n      var promise = new Promise(function(resolve, reject) {\n        // on success\n        resolve(value);\n\n        // on failure\n        reject(reason);\n      });\n\n      promise.then(function(value) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Advanced Usage:\n      ---------------\n\n      Promises shine when abstracting away asynchronous interactions such as\n      `XMLHttpRequest`s.\n\n      ```js\n      function getJSON(url) {\n        return new Promise(function(resolve, reject){\n          var xhr = new XMLHttpRequest();\n\n          xhr.open('GET', url);\n          xhr.onreadystatechange = handler;\n          xhr.responseType = 'json';\n          xhr.setRequestHeader('Accept', 'application/json');\n          xhr.send();\n\n          function handler() {\n            if (this.readyState === this.DONE) {\n              if (this.status === 200) {\n                resolve(this.response);\n              } else {\n                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n              }\n            }\n          };\n        });\n      }\n\n      getJSON('/posts.json').then(function(json) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Unlike callbacks, promises are great composable primitives.\n\n      ```js\n      Promise.all([\n        getJSON('/posts'),\n        getJSON('/comments')\n      ]).then(function(values){\n        values[0] // => postsJSON\n        values[1] // => commentsJSON\n\n        return values;\n      });\n      ```\n\n      @class RSVP.Promise\n      @param {function} resolver\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @constructor\n    */\n    function Promise(resolver, label) {\n      this._id = counter++;\n      this._label = label;\n      this._state = undefined;\n      this._result = undefined;\n      this._subscribers = [];\n\n      if (config.instrument) {\n        instrument('created', this);\n      }\n\n      if (noop !== resolver) {\n        if (!isFunction(resolver)) {\n          needsResolver();\n        }\n\n        if (!(this instanceof Promise)) {\n          needsNew();\n        }\n\n        initializePromise(this, resolver);\n      }\n    }\n\n    Promise.cast = Resolve; // deprecated\n    Promise.all = all;\n    Promise.race = race;\n    Promise.resolve = Resolve;\n    Promise.reject = Reject;\n\n    Promise.prototype = {\n      constructor: Promise,\n\n      _guidKey: guidKey,\n\n      _onerror: function (reason) {\n        config.trigger('error', reason);\n      },\n\n    /**\n      The primary way of interacting with a promise is through its `then` method,\n      which registers callbacks to receive either a promise's eventual value or the\n      reason why the promise cannot be fulfilled.\n\n      ```js\n      findUser().then(function(user){\n        // user is available\n      }, function(reason){\n        // user is unavailable, and you are given the reason why\n      });\n      ```\n\n      Chaining\n      --------\n\n      The return value of `then` is itself a promise.  This second, 'downstream'\n      promise is resolved with the return value of the first promise's fulfillment\n      or rejection handler, or rejected if the handler throws an exception.\n\n      ```js\n      findUser().then(function (user) {\n        return user.name;\n      }, function (reason) {\n        return 'default name';\n      }).then(function (userName) {\n        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n        // will be `'default name'`\n      });\n\n      findUser().then(function (user) {\n        throw new Error('Found user, but still unhappy');\n      }, function (reason) {\n        throw new Error('`findUser` rejected and we're unhappy');\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n      });\n      ```\n      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n      ```js\n      findUser().then(function (user) {\n        throw new PedagogicalException('Upstream error');\n      }).then(function (value) {\n        // never reached\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // The `PedgagocialException` is propagated all the way down to here\n      });\n      ```\n\n      Assimilation\n      ------------\n\n      Sometimes the value you want to propagate to a downstream promise can only be\n      retrieved asynchronously. This can be achieved by returning a promise in the\n      fulfillment or rejection handler. The downstream promise will then be pending\n      until the returned promise is settled. This is called *assimilation*.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // The user's comments are now available\n      });\n      ```\n\n      If the assimliated promise rejects, then the downstream promise will also reject.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // If `findCommentsByAuthor` fulfills, we'll have the value here\n      }, function (reason) {\n        // If `findCommentsByAuthor` rejects, we'll have the reason here\n      });\n      ```\n\n      Simple Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var result;\n\n      try {\n        result = findResult();\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n      findResult(function(result, err){\n        if (err) {\n          // failure\n        } else {\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findResult().then(function(result){\n        // success\n      }, function(reason){\n        // failure\n      });\n      ```\n\n      Advanced Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var author, books;\n\n      try {\n        author = findAuthor();\n        books  = findBooksByAuthor(author);\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n\n      function foundBooks(books) {\n\n      }\n\n      function failure(reason) {\n\n      }\n\n      findAuthor(function(author, err){\n        if (err) {\n          failure(err);\n          // failure\n        } else {\n          try {\n            findBoooksByAuthor(author, function(books, err) {\n              if (err) {\n                failure(err);\n              } else {\n                try {\n                  foundBooks(books);\n                } catch(reason) {\n                  failure(reason);\n                }\n              }\n            });\n          } catch(error) {\n            failure(err);\n          }\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findAuthor().\n        then(findBooksByAuthor).\n        then(function(books){\n          // found books\n      }).catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method then\n      @param {Function} onFulfilled\n      @param {Function} onRejected\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise}\n    */\n      then: function(onFulfillment, onRejection, label) {\n        var parent = this;\n        var state = parent._state;\n\n        if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n          if (config.instrument) {\n            instrument('chained', this, this);\n          }\n          return this;\n        }\n\n        parent._onerror = null;\n\n        var child = new this.constructor(noop, label);\n        var result = parent._result;\n\n        if (config.instrument) {\n          instrument('chained', parent, child);\n        }\n\n        if (state) {\n          var callback = arguments[state - 1];\n          config.async(function(){\n            invokeCallback(state, child, callback, result);\n          });\n        } else {\n          subscribe(parent, child, onFulfillment, onRejection);\n        }\n\n        return child;\n      },\n\n    /**\n      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n      as the catch block of a try/catch statement.\n\n      ```js\n      function findAuthor(){\n        throw new Error('couldn't find that author');\n      }\n\n      // synchronous\n      try {\n        findAuthor();\n      } catch(reason) {\n        // something went wrong\n      }\n\n      // async with promises\n      findAuthor().catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method catch\n      @param {Function} onRejection\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise}\n    */\n      'catch': function(onRejection, label) {\n        return this.then(null, onRejection, label);\n      },\n\n    /**\n      `finally` will be invoked regardless of the promise's fate just as native\n      try/catch/finally behaves\n\n      Synchronous example:\n\n      ```js\n      findAuthor() {\n        if (Math.random() > 0.5) {\n          throw new Error();\n        }\n        return new Author();\n      }\n\n      try {\n        return findAuthor(); // succeed or fail\n      } catch(error) {\n        return findOtherAuther();\n      } finally {\n        // always runs\n        // doesn't affect the return value\n      }\n      ```\n\n      Asynchronous example:\n\n      ```js\n      findAuthor().catch(function(reason){\n        return findOtherAuther();\n      }).finally(function(){\n        // author was either found, or not\n      });\n      ```\n\n      @method finally\n      @param {Function} callback\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise}\n    */\n      'finally': function(callback, label) {\n        var constructor = this.constructor;\n\n        return this.then(function(value) {\n          return constructor.resolve(callback()).then(function(){\n            return value;\n          });\n        }, function(reason) {\n          return constructor.resolve(callback()).then(function(){\n            throw reason;\n          });\n        }, label);\n      }\n    };\n  });\nenifed(\"rsvp/promise/all\",\n  [\"../enumerator\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Enumerator = __dependency1__[\"default\"];\n\n    /**\n      `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n      is fulfilled with an array of fulfillment values for the passed promises, or\n      rejected with the reason of the first passed promise to be rejected. It casts all\n      elements of the passed iterable to promises as it runs this algorithm.\n\n      Example:\n\n      ```javascript\n      var promise1 = RSVP.resolve(1);\n      var promise2 = RSVP.resolve(2);\n      var promise3 = RSVP.resolve(3);\n      var promises = [ promise1, promise2, promise3 ];\n\n      RSVP.Promise.all(promises).then(function(array){\n        // The array here would be [ 1, 2, 3 ];\n      });\n      ```\n\n      If any of the `promises` given to `RSVP.all` are rejected, the first promise\n      that is rejected will be given as an argument to the returned promises's\n      rejection handler. For example:\n\n      Example:\n\n      ```javascript\n      var promise1 = RSVP.resolve(1);\n      var promise2 = RSVP.reject(new Error(\"2\"));\n      var promise3 = RSVP.reject(new Error(\"3\"));\n      var promises = [ promise1, promise2, promise3 ];\n\n      RSVP.Promise.all(promises).then(function(array){\n        // Code here never runs because there are rejected promises!\n      }, function(error) {\n        // error.message === \"2\"\n      });\n      ```\n\n      @method all\n      @static\n      @param {Array} entries array of promises\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise} promise that is fulfilled when all `promises` have been\n      fulfilled, or rejected if any of them become rejected.\n      @static\n    */\n    __exports__[\"default\"] = function all(entries, label) {\n      return new Enumerator(this, entries, true /* abort on reject */, label).promise;\n    }\n  });\nenifed(\"rsvp/promise/race\",\n  [\"../utils\",\"../-internal\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var isArray = __dependency1__.isArray;\n\n    var noop = __dependency2__.noop;\n    var resolve = __dependency2__.resolve;\n    var reject = __dependency2__.reject;\n    var subscribe = __dependency2__.subscribe;\n    var PENDING = __dependency2__.PENDING;\n\n    /**\n      `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n      first passed promise to settle.\n\n      Example:\n\n      ```javascript\n      var promise1 = new RSVP.Promise(function(resolve, reject){\n        setTimeout(function(){\n          resolve('promise 1');\n        }, 200);\n      });\n\n      var promise2 = new RSVP.Promise(function(resolve, reject){\n        setTimeout(function(){\n          resolve('promise 2');\n        }, 100);\n      });\n\n      RSVP.Promise.race([promise1, promise2]).then(function(result){\n        // result === 'promise 2' because it was resolved before promise1\n        // was resolved.\n      });\n      ```\n\n      `RSVP.Promise.race` is deterministic in that only the state of the first\n      settled promise matters. For example, even if other promises given to the\n      `promises` array argument are resolved, but the first settled promise has\n      become rejected before the other promises became fulfilled, the returned\n      promise will become rejected:\n\n      ```javascript\n      var promise1 = new RSVP.Promise(function(resolve, reject){\n        setTimeout(function(){\n          resolve('promise 1');\n        }, 200);\n      });\n\n      var promise2 = new RSVP.Promise(function(resolve, reject){\n        setTimeout(function(){\n          reject(new Error('promise 2'));\n        }, 100);\n      });\n\n      RSVP.Promise.race([promise1, promise2]).then(function(result){\n        // Code here never runs\n      }, function(reason){\n        // reason.message === 'promise 2' because promise 2 became rejected before\n        // promise 1 became fulfilled\n      });\n      ```\n\n      An example real-world use case is implementing timeouts:\n\n      ```javascript\n      RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n      ```\n\n      @method race\n      @static\n      @param {Array} promises array of promises to observe\n      @param {String} label optional string for describing the promise returned.\n      Useful for tooling.\n      @return {Promise} a promise which settles in the same way as the first passed\n      promise to settle.\n    */\n    __exports__[\"default\"] = function race(entries, label) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      var promise = new Constructor(noop, label);\n\n      if (!isArray(entries)) {\n        reject(promise, new TypeError('You must pass an array to race.'));\n        return promise;\n      }\n\n      var length = entries.length;\n\n      function onFulfillment(value) {\n        resolve(promise, value);\n      }\n\n      function onRejection(reason) {\n        reject(promise, reason);\n      }\n\n      for (var i = 0; promise._state === PENDING && i < length; i++) {\n        subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);\n      }\n\n      return promise;\n    }\n  });\nenifed(\"rsvp/promise/reject\",\n  [\"../-internal\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var noop = __dependency1__.noop;\n    var _reject = __dependency1__.reject;\n\n    /**\n      `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n      It is shorthand for the following:\n\n      ```javascript\n      var promise = new RSVP.Promise(function(resolve, reject){\n        reject(new Error('WHOOPS'));\n      });\n\n      promise.then(function(value){\n        // Code here doesn't run because the promise is rejected!\n      }, function(reason){\n        // reason.message === 'WHOOPS'\n      });\n      ```\n\n      Instead of writing the above, your code now simply becomes the following:\n\n      ```javascript\n      var promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\n      promise.then(function(value){\n        // Code here doesn't run because the promise is rejected!\n      }, function(reason){\n        // reason.message === 'WHOOPS'\n      });\n      ```\n\n      @method reject\n      @static\n      @param {Any} reason value that the returned promise will be rejected with.\n      @param {String} label optional string for identifying the returned promise.\n      Useful for tooling.\n      @return {Promise} a promise rejected with the given `reason`.\n    */\n    __exports__[\"default\"] = function reject(reason, label) {\n      /*jshint validthis:true */\n      var Constructor = this;\n      var promise = new Constructor(noop, label);\n      _reject(promise, reason);\n      return promise;\n    }\n  });\nenifed(\"rsvp/promise/resolve\",\n  [\"../-internal\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var noop = __dependency1__.noop;\n    var _resolve = __dependency1__.resolve;\n\n    /**\n      `RSVP.Promise.resolve` returns a promise that will become resolved with the\n      passed `value`. It is shorthand for the following:\n\n      ```javascript\n      var promise = new RSVP.Promise(function(resolve, reject){\n        resolve(1);\n      });\n\n      promise.then(function(value){\n        // value === 1\n      });\n      ```\n\n      Instead of writing the above, your code now simply becomes the following:\n\n      ```javascript\n      var promise = RSVP.Promise.resolve(1);\n\n      promise.then(function(value){\n        // value === 1\n      });\n      ```\n\n      @method resolve\n      @static\n      @param {Any} value value that the returned promise will be resolved with\n      @param {String} label optional string for identifying the returned promise.\n      Useful for tooling.\n      @return {Promise} a promise that will become fulfilled with the given\n      `value`\n    */\n    __exports__[\"default\"] = function resolve(object, label) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      if (object && typeof object === 'object' && object.constructor === Constructor) {\n        return object;\n      }\n\n      var promise = new Constructor(noop, label);\n      _resolve(promise, object);\n      return promise;\n    }\n  });\nenifed(\"rsvp/race\",\n  [\"./promise\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__[\"default\"];\n\n    /**\n      This is a convenient alias for `RSVP.Promise.race`.\n\n      @method race\n      @static\n      @for RSVP\n      @param {Array} array Array of promises.\n      @param {String} label An optional label. This is useful\n      for tooling.\n     */\n    __exports__[\"default\"] = function race(array, label) {\n      return Promise.race(array, label);\n    }\n  });\nenifed(\"rsvp/reject\",\n  [\"./promise\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__[\"default\"];\n\n    /**\n      This is a convenient alias for `RSVP.Promise.reject`.\n\n      @method reject\n      @static\n      @for RSVP\n      @param {Any} reason value that the returned promise will be rejected with.\n      @param {String} label optional string for identifying the returned promise.\n      Useful for tooling.\n      @return {Promise} a promise rejected with the given `reason`.\n    */\n    __exports__[\"default\"] = function reject(reason, label) {\n      return Promise.reject(reason, label);\n    }\n  });\nenifed(\"rsvp/resolve\",\n  [\"./promise\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__[\"default\"];\n\n    /**\n      This is a convenient alias for `RSVP.Promise.resolve`.\n\n      @method resolve\n      @static\n      @for RSVP\n      @param {Any} value value that the returned promise will be resolved with\n      @param {String} label optional string for identifying the returned promise.\n      Useful for tooling.\n      @return {Promise} a promise that will become fulfilled with the given\n      `value`\n    */\n    __exports__[\"default\"] = function resolve(value, label) {\n      return Promise.resolve(value, label);\n    }\n  });\nenifed(\"rsvp/rethrow\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      `RSVP.rethrow` will rethrow an error on the next turn of the JavaScript event\n      loop in order to aid debugging.\n\n      Promises A+ specifies that any exceptions that occur with a promise must be\n      caught by the promises implementation and bubbled to the last handler. For\n      this reason, it is recommended that you always specify a second rejection\n      handler function to `then`. However, `RSVP.rethrow` will throw the exception\n      outside of the promise, so it bubbles up to your console if in the browser,\n      or domain/cause uncaught exception in Node. `rethrow` will also throw the\n      error again so the error can be handled by the promise per the spec.\n\n      ```javascript\n      function throws(){\n        throw new Error('Whoops!');\n      }\n\n      var promise = new RSVP.Promise(function(resolve, reject){\n        throws();\n      });\n\n      promise.catch(RSVP.rethrow).then(function(){\n        // Code here doesn't run because the promise became rejected due to an\n        // error!\n      }, function (err){\n        // handle the error here\n      });\n      ```\n\n      The 'Whoops' error will be thrown on the next turn of the event loop\n      and you can watch for it in your console. You can also handle it using a\n      rejection handler given to `.then` or `.catch` on the returned promise.\n\n      @method rethrow\n      @static\n      @for RSVP\n      @param {Error} reason reason the promise became rejected.\n      @throws Error\n      @static\n    */\n    __exports__[\"default\"] = function rethrow(reason) {\n      setTimeout(function() {\n        throw reason;\n      });\n      throw reason;\n    }\n  });\nenifed(\"rsvp/utils\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function objectOrFunction(x) {\n      return typeof x === 'function' || (typeof x === 'object' && x !== null);\n    }\n\n    __exports__.objectOrFunction = objectOrFunction;function isFunction(x) {\n      return typeof x === 'function';\n    }\n\n    __exports__.isFunction = isFunction;function isMaybeThenable(x) {\n      return typeof x === 'object' && x !== null;\n    }\n\n    __exports__.isMaybeThenable = isMaybeThenable;var _isArray;\n    if (!Array.isArray) {\n      _isArray = function (x) {\n        return Object.prototype.toString.call(x) === '[object Array]';\n      };\n    } else {\n      _isArray = Array.isArray;\n    }\n\n    var isArray = _isArray;\n    __exports__.isArray = isArray;\n    // Date.now is not available in browsers < IE9\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility\n    var now = Date.now || function() { return new Date().getTime(); };\n    __exports__.now = now;\n    function F() { }\n\n    var o_create = (Object.create || function (o) {\n      if (arguments.length > 1) {\n        throw new Error('Second argument not supported');\n      }\n      if (typeof o !== 'object') {\n        throw new TypeError('Argument must be an object');\n      }\n      F.prototype = o;\n      return new F();\n    });\n    __exports__.o_create = o_create;\n  });\nrequireModule(\"ember\");\n\n})();","(function() {\n/* global define, Ember */\ndefine('ember', [], function() {\n  \"use strict\";\n\n  return {\n    'default': Ember\n  };\n});\n\ndefine('ember-data', [], function() {\n  \"use strict\";\n\n  return {\n    'default': DS\n  };\n});\n})();\n\ndefine('jquery', [], function() {\n  \"use strict\";\n\n  return {\n    'default': jQuery\n  };\n});\n","(function() {\n/*globals define registry requirejs */\n\ndefine(\"ember/resolver\",\n  [],\n  function() {\n    \"use strict\";\n\n    if (typeof requirejs.entries === 'undefined') {\n      requirejs.entries = requirejs._eak_seen;\n    }\n\n  /*\n   * This module defines a subclass of Ember.DefaultResolver that adds two\n   * important features:\n   *\n   *  1) The resolver makes the container aware of es6 modules via the AMD\n   *     output. The loader's _moduleEntries is consulted so that classes can be\n   *     resolved directly via the module loader, without needing a manual\n   *     `import`.\n   *  2) is able to provide injections to classes that implement `extend`\n   *     (as is typical with Ember).\n   */\n\n  function classFactory(klass) {\n    return {\n      create: function (injections) {\n        if (typeof klass.extend === 'function') {\n          return klass.extend(injections);\n        } else {\n          return klass;\n        }\n      }\n    };\n  }\n\n  if (!(Object.create && !Object.create(null).hasOwnProperty)) {\n    throw new Error(\"This browser does not support Object.create(null), please polyfil with es5-sham: http://git.io/yBU2rg\");\n  }\n\n  function makeDictionary() {\n    var cache = Object.create(null);\n    cache['_dict'] = null;\n    delete cache['_dict'];\n    return cache;\n  }\n\n  var underscore = Ember.String.underscore;\n  var classify = Ember.String.classify;\n  var get = Ember.get;\n\n  function parseName(fullName) {\n    /*jshint validthis:true */\n\n    if (fullName.parsedName === true) { return fullName; }\n\n    var prefixParts = fullName.split('@');\n    var prefix;\n\n    if (prefixParts.length === 2) {\n      if (prefixParts[0].split(':')[0] === 'view') {\n        prefixParts[0] = prefixParts[0].split(':')[1];\n        prefixParts[1] = 'view:' + prefixParts[1];\n      }\n\n      prefix = prefixParts[0];\n    }\n\n    var nameParts = prefixParts[prefixParts.length - 1].split(\":\");\n    var type = nameParts[0], fullNameWithoutType = nameParts[1];\n    var name = fullNameWithoutType;\n    var namespace = get(this, 'namespace');\n    var root = namespace;\n\n    return {\n      parsedName: true,\n      fullName: fullName,\n      prefix: prefix || this.prefix({type: type}),\n      type: type,\n      fullNameWithoutType: fullNameWithoutType,\n      name: name,\n      root: root,\n      resolveMethodName: \"resolve\" + classify(type)\n    };\n  }\n\n  function chooseModuleName(moduleEntries, moduleName) {\n    var underscoredModuleName = Ember.String.underscore(moduleName);\n\n    if (moduleName !== underscoredModuleName && moduleEntries[moduleName] && moduleEntries[underscoredModuleName]) {\n      throw new TypeError(\"Ambiguous module names: `\" + moduleName + \"` and `\" + underscoredModuleName + \"`\");\n    }\n\n    if (moduleEntries[moduleName]) {\n      return moduleName;\n    } else if (moduleEntries[underscoredModuleName]) {\n      return underscoredModuleName;\n    } else {\n      // workaround for dasherized partials:\n      // something/something/-something => something/something/_something\n      var partializedModuleName = moduleName.replace(/\\/-([^\\/]*)$/, '/_$1');\n\n      if (moduleEntries[partializedModuleName]) {\n        Ember.deprecate('Modules should not contain underscores. ' +\n                        'Attempted to lookup \"'+moduleName+'\" which ' +\n                        'was not found. Please rename \"'+partializedModuleName+'\" '+\n                        'to \"'+moduleName+'\" instead.', false);\n\n        return partializedModuleName;\n      } else {\n        return moduleName;\n      }\n    }\n  }\n\n  function resolveOther(parsedName) {\n    /*jshint validthis:true */\n\n    Ember.assert('`modulePrefix` must be defined', this.namespace.modulePrefix);\n\n    var normalizedModuleName = this.findModuleName(parsedName);\n\n    if (normalizedModuleName) {\n      var module = require(normalizedModuleName, null, null, true /* force sync */);\n\n      if (module && module['default']) { module = module['default']; }\n\n      if (module === undefined) {\n        throw new Error(\" Expected to find: '\" + parsedName.fullName + \"' within '\" + normalizedModuleName + \"' but got 'undefined'. Did you forget to `export default` within '\" + normalizedModuleName + \"'?\");\n      }\n\n      if (this.shouldWrapInClassFactory(module, parsedName)) {\n        module = classFactory(module);\n      }\n\n      return module;\n    } else {\n      return this._super(parsedName);\n    }\n  }\n  // Ember.DefaultResolver docs:\n  //   https://github.com/emberjs/ember.js/blob/master/packages/ember-application/lib/system/resolver.js\n  var Resolver = Ember.DefaultResolver.extend({\n    resolveOther: resolveOther,\n    resolveTemplate: resolveOther,\n    pluralizedTypes: null,\n\n    makeToString: function(factory, fullName) {\n      return '' + this.namespace.modulePrefix + '@' + fullName + ':';\n    },\n    parseName: parseName,\n    shouldWrapInClassFactory: function(module, parsedName){\n      return false;\n    },\n    init: function() {\n      this._super();\n      this.moduleBasedResolver = true;\n      this._normalizeCache = makeDictionary();\n\n      this.pluralizedTypes = this.pluralizedTypes || makeDictionary();\n\n      if (!this.pluralizedTypes.config) {\n        this.pluralizedTypes.config = 'config';\n      }\n    },\n    normalize: function(fullName) {\n      return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this._normalize(fullName));\n    },\n    _normalize: function(fullName) {\n      // replace `.` with `/` in order to make nested controllers work in the following cases\n      // 1. `needs: ['posts/post']`\n      // 2. `{{render \"posts/post\"}}`\n      // 3. `this.render('posts/post')` from Route\n      var split = fullName.split(':');\n      if (split.length > 1) {\n        return split[0] + ':' + Ember.String.dasherize(split[1].replace(/\\./g, '/'));\n      } else {\n        return fullName;\n      }\n    },\n\n    pluralize: function(type) {\n      return this.pluralizedTypes[type] || (this.pluralizedTypes[type] = type + 's');\n    },\n\n    podBasedLookupWithPrefix: function(podPrefix, parsedName) {\n      var fullNameWithoutType = parsedName.fullNameWithoutType;\n\n      if (parsedName.type === 'template') {\n        fullNameWithoutType = fullNameWithoutType.replace(/^components\\//, '');\n      }\n\n        return podPrefix + '/' + fullNameWithoutType + '/' + parsedName.type;\n    },\n\n    podBasedModuleName: function(parsedName) {\n      var podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;\n\n      return this.podBasedLookupWithPrefix(podPrefix, parsedName);\n    },\n\n    podBasedComponentsInSubdir: function(parsedName) {\n      var podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;\n      podPrefix = podPrefix + '/components';\n\n      if (parsedName.type === 'component' || parsedName.fullNameWithoutType.match(/^components/)) {\n        return this.podBasedLookupWithPrefix(podPrefix, parsedName);\n      }\n    },\n\n    mainModuleName: function(parsedName) {\n      // if router:main or adapter:main look for a module with just the type first\n      var tmpModuleName = parsedName.prefix + '/' + parsedName.type;\n\n      if (parsedName.fullNameWithoutType === 'main') {\n        return tmpModuleName;\n      }\n    },\n\n    defaultModuleName: function(parsedName) {\n      return parsedName.prefix + '/' +  this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType;\n    },\n\n    prefix: function(parsedName) {\n      var tmpPrefix = this.namespace.modulePrefix;\n\n      if (this.namespace[parsedName.type + 'Prefix']) {\n        tmpPrefix = this.namespace[parsedName.type + 'Prefix'];\n      }\n\n      return tmpPrefix;\n    },\n\n    /**\n\n      A listing of functions to test for moduleName's based on the provided\n      `parsedName`. This allows easy customization of additional module based\n      lookup patterns.\n\n      @property moduleNameLookupPatterns\n      @returns {Ember.Array}\n    */\n    moduleNameLookupPatterns: Ember.computed(function(){\n      return Ember.A([\n        this.podBasedModuleName,\n        this.podBasedComponentsInSubdir,\n        this.mainModuleName,\n        this.defaultModuleName\n      ]);\n    }),\n\n    findModuleName: function(parsedName, loggingDisabled){\n      var self = this;\n      var moduleName;\n\n      this.get('moduleNameLookupPatterns').find(function(item) {\n        var moduleEntries = requirejs.entries;\n        var tmpModuleName = item.call(self, parsedName);\n\n        // allow treat all dashed and all underscored as the same thing\n        // supports components with dashes and other stuff with underscores.\n        if (tmpModuleName) {\n          tmpModuleName = chooseModuleName(moduleEntries, tmpModuleName);\n        }\n\n        if (tmpModuleName && moduleEntries[tmpModuleName]) {\n          if (!loggingDisabled) {\n            self._logLookup(true, parsedName, tmpModuleName);\n          }\n\n          moduleName = tmpModuleName;\n        }\n\n        if (!loggingDisabled) {\n          self._logLookup(moduleName, parsedName, tmpModuleName);\n        }\n\n        return moduleName;\n      });\n\n      return moduleName;\n    },\n\n    // used by Ember.DefaultResolver.prototype._logLookup\n    lookupDescription: function(fullName) {\n      var parsedName = this.parseName(fullName);\n\n      var moduleName = this.findModuleName(parsedName, true);\n\n      return moduleName;\n    },\n\n    // only needed until 1.6.0-beta.2 can be required\n    _logLookup: function(found, parsedName, description) {\n      if (!Ember.ENV.LOG_MODULE_RESOLVER && !parsedName.root.LOG_RESOLVER) {\n        return;\n      }\n\n      var symbol, padding;\n\n      if (found) { symbol = '[✓]'; }\n      else       { symbol = '[ ]'; }\n\n      if (parsedName.fullName.length > 60) {\n        padding = '.';\n      } else {\n        padding = new Array(60 - parsedName.fullName.length).join('.');\n      }\n\n      if (!description) {\n        description = this.lookupDescription(parsedName);\n      }\n\n      Ember.Logger.info(symbol, parsedName.fullName, padding, description);\n    }\n  });\n\n  Resolver.moduleBasedResolver = true;\n  Resolver['default'] = Resolver;\n  return Resolver;\n});\n\ndefine(\"resolver\",\n  [\"ember/resolver\"],\n  function (Resolver) {\n    Ember.deprecate('Importing/requiring Ember Resolver as \"resolver\" is deprecated, please use \"ember/resolver\" instead');\n    return Resolver;\n  });\n\n})();\n\n\n\n(function() {\n/*globals define registry requirejs */\n\ndefine(\"ember/container-debug-adapter\",\n  [],\n  function() {\n    \"use strict\";\n\n  // Support Ember < 1.5-beta.4\n  // TODO: Remove this after 1.5.0 is released\n  if (typeof Ember.ContainerDebugAdapter === 'undefined') {\n    return null;\n  }\n  /*\n   * This module defines a subclass of Ember.ContainerDebugAdapter that adds two\n   * important features:\n   *\n   *  1) is able provide injections to classes that implement `extend`\n   *     (as is typical with Ember).\n   */\n\n  var ContainerDebugAdapter = Ember.ContainerDebugAdapter.extend({\n    /**\n      The container of the application being debugged.\n      This property will be injected\n      on creation.\n\n      @property container\n      @default null\n    */\n    // container: null, LIVES IN PARENT\n\n    /**\n      The resolver instance of the application\n      being debugged. This property will be injected\n      on creation.\n\n      @property resolver\n      @default null\n    */\n    // resolver: null,  LIVES IN PARENT\n    /**\n      Returns true if it is possible to catalog a list of available\n      classes in the resolver for a given type.\n\n      @method canCatalogEntriesByType\n      @param {string} type The type. e.g. \"model\", \"controller\", \"route\"\n      @return {boolean} whether a list is available for this type.\n    */\n    canCatalogEntriesByType: function(type) {\n      return true;\n    },\n\n    /**\n      Returns the available classes a given type.\n\n      @method catalogEntriesByType\n      @param {string} type The type. e.g. \"model\", \"controller\", \"route\"\n      @return {Array} An array of classes.\n    */\n    catalogEntriesByType: function(type) {\n      var entries = requirejs.entries,\n          module,\n          types = Ember.A();\n\n      var makeToString = function(){\n        return this.shortname;\n      };\n\n      for(var key in entries) {\n        if(entries.hasOwnProperty(key) && key.indexOf(type) !== -1)\n        {\n          // // TODO return the name instead of the module itself\n          // module = require(key, null, null, true);\n\n          // if (module && module['default']) { module = module['default']; }\n          // module.shortname = key.split(type +'s/').pop();\n          // module.toString = makeToString;\n\n          // types.push(module);\n          types.push(key.split(type +'s/').pop());\n        }\n      }\n\n      return types;\n    }\n  });\n\n  ContainerDebugAdapter['default'] = ContainerDebugAdapter;\n  return ContainerDebugAdapter;\n});\n\n})();\n\n\n\n(function() {\n(function() {\n  \"use strict\";\n\n  Ember.Application.initializer({\n    name: 'container-debug-adapter',\n\n    initialize: function(container) {\n      var ContainerDebugAdapter = require('ember/container-debug-adapter');\n      var Resolver = require('ember/resolver');\n\n      container.register('container-debug-adapter:main', ContainerDebugAdapter);\n    }\n  });\n}());\n\n})();\n\n\n\n(function() {\n\n})();\n\n","(function() {\ndefine(\"ember/load-initializers\",\n  [],\n  function() {\n    \"use strict\";\n\n    return {\n      'default': function(app, prefix) {\n        var initializersRegExp = new RegExp('^' + prefix + '/initializers');\n\n        Ember.keys(requirejs._eak_seen).filter(function(key) {\n          return initializersRegExp.test(key);\n        }).forEach(function(moduleName) {\n          var module = require(moduleName, null, null, true);\n          if (!module) { throw new Error(moduleName + ' must export an initializer.'); }\n          app.initializer(module['default']);\n        });\n      }\n    }\n  }\n);\n})();\n","define(\"ic-ajax\",\n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /*!\n     * ic-ajax\n     *\n     * - (c) 2013 Instructure, Inc\n     * - please see license at https://github.com/instructure/ic-ajax/blob/master/LICENSE\n     * - inspired by discourse ajax: https://github.com/discourse/discourse/blob/master/app/assets/javascripts/discourse/mixins/ajax.js#L19\n     */\n\n    var Ember = __dependency1__[\"default\"] || __dependency1__;\n\n    /*\n     * jQuery.ajax wrapper, supports the same signature except providing\n     * `success` and `error` handlers will throw an error (use promises instead)\n     * and it resolves only the response (no access to jqXHR or textStatus).\n     */\n\n    function request() {\n      return raw.apply(null, arguments).then(function(result) {\n        return result.response;\n      }, null, 'ic-ajax: unwrap raw ajax response');\n    }\n\n    __exports__.request = request;__exports__[\"default\"] = request;\n\n    /*\n     * Same as `request` except it resolves an object with `{response, textStatus,\n     * jqXHR}`, useful if you need access to the jqXHR object for headers, etc.\n     */\n\n    function raw() {\n      return makePromise(parseArgs.apply(null, arguments));\n    }\n\n    __exports__.raw = raw;var __fixtures__ = {};\n    __exports__.__fixtures__ = __fixtures__;\n    /*\n     * Defines a fixture that will be used instead of an actual ajax\n     * request to a given url. This is useful for testing, allowing you to\n     * stub out responses your application will send without requiring\n     * libraries like sinon or mockjax, etc.\n     *\n     * For example:\n     *\n     *    defineFixture('/self', {\n     *      response: { firstName: 'Ryan', lastName: 'Florence' },\n     *      textStatus: 'success'\n     *      jqXHR: {}\n     *    });\n     *\n     * @param {String} url\n     * @param {Object} fixture\n     */\n\n    function defineFixture(url, fixture) {\n      if (fixture.response) {\n        fixture.response = JSON.parse(JSON.stringify(fixture.response));\n      }\n      __fixtures__[url] = fixture;\n    }\n\n    __exports__.defineFixture = defineFixture;/*\n     * Looks up a fixture by url.\n     *\n     * @param {String} url\n     */\n\n    function lookupFixture (url) {\n      return __fixtures__ && __fixtures__[url];\n    }\n\n    __exports__.lookupFixture = lookupFixture;function makePromise(settings) {\n      return new Ember.RSVP.Promise(function(resolve, reject) {\n        var fixture = lookupFixture(settings.url);\n        if (fixture) {\n          if (fixture.textStatus === 'success' || fixture.textStatus == null) {\n            return Ember.run.later(null, resolve, fixture);\n          } else {\n            return Ember.run.later(null, reject, fixture);\n          }\n        }\n        settings.success = makeSuccess(resolve);\n        settings.error = makeError(reject);\n        Ember.$.ajax(settings);\n      }, 'ic-ajax: ' + (settings.type || 'GET') + ' to ' + settings.url);\n    };\n\n    function parseArgs() {\n      var settings = {};\n      if (arguments.length === 1) {\n        if (typeof arguments[0] === \"string\") {\n          settings.url = arguments[0];\n        } else {\n          settings = arguments[0];\n        }\n      } else if (arguments.length === 2) {\n        settings = arguments[1];\n        settings.url = arguments[0];\n      }\n      if (settings.success || settings.error) {\n        throw new Ember.Error(\"ajax should use promises, received 'success' or 'error' callback\");\n      }\n      return settings;\n    }\n\n    function makeSuccess(resolve) {\n      return function(response, textStatus, jqXHR) {\n        Ember.run(null, resolve, {\n          response: response,\n          textStatus: textStatus,\n          jqXHR: jqXHR\n        });\n      }\n    }\n\n    function makeError(reject) {\n      return function(jqXHR, textStatus, errorThrown) {\n        Ember.run(null, reject, {\n          jqXHR: jqXHR,\n          textStatus: textStatus,\n          errorThrown: errorThrown\n        });\n      };\n    }\n  });","/*!\n * Bootstrap v3.3.1 (http://getbootstrap.com)\n * Copyright 2011-2014 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\nif(\"undefined\"==typeof jQuery)throw new Error(\"Bootstrap's JavaScript requires jQuery\");+function(a){var b=a.fn.jquery.split(\" \")[0].split(\".\");if(b[0]<2&&b[1]<9||1==b[0]&&9==b[1]&&b[2]<1)throw new Error(\"Bootstrap's JavaScript requires jQuery version 1.9.1 or higher\")}(jQuery),+function(a){\"use strict\";function b(){var a=document.createElement(\"bootstrap\"),b={WebkitTransition:\"webkitTransitionEnd\",MozTransition:\"transitionend\",OTransition:\"oTransitionEnd otransitionend\",transition:\"transitionend\"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one(\"bsTransitionEnd\",function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b(),a.support.transition&&(a.event.special.bsTransitionEnd={bindType:a.support.transition.end,delegateType:a.support.transition.end,handle:function(b){return a(b.target).is(this)?b.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(a){\"use strict\";function b(b){return this.each(function(){var c=a(this),e=c.data(\"bs.alert\");e||c.data(\"bs.alert\",e=new d(this)),\"string\"==typeof b&&e[b].call(c)})}var c='[data-dismiss=\"alert\"]',d=function(b){a(b).on(\"click\",c,this.close)};d.VERSION=\"3.3.1\",d.TRANSITION_DURATION=150,d.prototype.close=function(b){function c(){g.detach().trigger(\"closed.bs.alert\").remove()}var e=a(this),f=e.attr(\"data-target\");f||(f=e.attr(\"href\"),f=f&&f.replace(/.*(?=#[^\\s]*$)/,\"\"));var g=a(f);b&&b.preventDefault(),g.length||(g=e.closest(\".alert\")),g.trigger(b=a.Event(\"close.bs.alert\")),b.isDefaultPrevented()||(g.removeClass(\"in\"),a.support.transition&&g.hasClass(\"fade\")?g.one(\"bsTransitionEnd\",c).emulateTransitionEnd(d.TRANSITION_DURATION):c())};var e=a.fn.alert;a.fn.alert=b,a.fn.alert.Constructor=d,a.fn.alert.noConflict=function(){return a.fn.alert=e,this},a(document).on(\"click.bs.alert.data-api\",c,d.prototype.close)}(jQuery),+function(a){\"use strict\";function b(b){return this.each(function(){var d=a(this),e=d.data(\"bs.button\"),f=\"object\"==typeof b&&b;e||d.data(\"bs.button\",e=new c(this,f)),\"toggle\"==b?e.toggle():b&&e.setState(b)})}var c=function(b,d){this.$element=a(b),this.options=a.extend({},c.DEFAULTS,d),this.isLoading=!1};c.VERSION=\"3.3.1\",c.DEFAULTS={loadingText:\"loading...\"},c.prototype.setState=function(b){var c=\"disabled\",d=this.$element,e=d.is(\"input\")?\"val\":\"html\",f=d.data();b+=\"Text\",null==f.resetText&&d.data(\"resetText\",d[e]()),setTimeout(a.proxy(function(){d[e](null==f[b]?this.options[b]:f[b]),\"loadingText\"==b?(this.isLoading=!0,d.addClass(c).attr(c,c)):this.isLoading&&(this.isLoading=!1,d.removeClass(c).removeAttr(c))},this),0)},c.prototype.toggle=function(){var a=!0,b=this.$element.closest('[data-toggle=\"buttons\"]');if(b.length){var c=this.$element.find(\"input\");\"radio\"==c.prop(\"type\")&&(c.prop(\"checked\")&&this.$element.hasClass(\"active\")?a=!1:b.find(\".active\").removeClass(\"active\")),a&&c.prop(\"checked\",!this.$element.hasClass(\"active\")).trigger(\"change\")}else this.$element.attr(\"aria-pressed\",!this.$element.hasClass(\"active\"));a&&this.$element.toggleClass(\"active\")};var d=a.fn.button;a.fn.button=b,a.fn.button.Constructor=c,a.fn.button.noConflict=function(){return a.fn.button=d,this},a(document).on(\"click.bs.button.data-api\",'[data-toggle^=\"button\"]',function(c){var d=a(c.target);d.hasClass(\"btn\")||(d=d.closest(\".btn\")),b.call(d,\"toggle\"),c.preventDefault()}).on(\"focus.bs.button.data-api blur.bs.button.data-api\",'[data-toggle^=\"button\"]',function(b){a(b.target).closest(\".btn\").toggleClass(\"focus\",/^focus(in)?$/.test(b.type))})}(jQuery),+function(a){\"use strict\";function b(b){return this.each(function(){var d=a(this),e=d.data(\"bs.carousel\"),f=a.extend({},c.DEFAULTS,d.data(),\"object\"==typeof b&&b),g=\"string\"==typeof b?b:f.slide;e||d.data(\"bs.carousel\",e=new c(this,f)),\"number\"==typeof b?e.to(b):g?e[g]():f.interval&&e.pause().cycle()})}var c=function(b,c){this.$element=a(b),this.$indicators=this.$element.find(\".carousel-indicators\"),this.options=c,this.paused=this.sliding=this.interval=this.$active=this.$items=null,this.options.keyboard&&this.$element.on(\"keydown.bs.carousel\",a.proxy(this.keydown,this)),\"hover\"==this.options.pause&&!(\"ontouchstart\"in document.documentElement)&&this.$element.on(\"mouseenter.bs.carousel\",a.proxy(this.pause,this)).on(\"mouseleave.bs.carousel\",a.proxy(this.cycle,this))};c.VERSION=\"3.3.1\",c.TRANSITION_DURATION=600,c.DEFAULTS={interval:5e3,pause:\"hover\",wrap:!0,keyboard:!0},c.prototype.keydown=function(a){if(!/input|textarea/i.test(a.target.tagName)){switch(a.which){case 37:this.prev();break;case 39:this.next();break;default:return}a.preventDefault()}},c.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},c.prototype.getItemIndex=function(a){return this.$items=a.parent().children(\".item\"),this.$items.index(a||this.$active)},c.prototype.getItemForDirection=function(a,b){var c=\"prev\"==a?-1:1,d=this.getItemIndex(b),e=(d+c)%this.$items.length;return this.$items.eq(e)},c.prototype.to=function(a){var b=this,c=this.getItemIndex(this.$active=this.$element.find(\".item.active\"));return a>this.$items.length-1||0>a?void 0:this.sliding?this.$element.one(\"slid.bs.carousel\",function(){b.to(a)}):c==a?this.pause().cycle():this.slide(a>c?\"next\":\"prev\",this.$items.eq(a))},c.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(\".next, .prev\").length&&a.support.transition&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},c.prototype.next=function(){return this.sliding?void 0:this.slide(\"next\")},c.prototype.prev=function(){return this.sliding?void 0:this.slide(\"prev\")},c.prototype.slide=function(b,d){var e=this.$element.find(\".item.active\"),f=d||this.getItemForDirection(b,e),g=this.interval,h=\"next\"==b?\"left\":\"right\",i=\"next\"==b?\"first\":\"last\",j=this;if(!f.length){if(!this.options.wrap)return;f=this.$element.find(\".item\")[i]()}if(f.hasClass(\"active\"))return this.sliding=!1;var k=f[0],l=a.Event(\"slide.bs.carousel\",{relatedTarget:k,direction:h});if(this.$element.trigger(l),!l.isDefaultPrevented()){if(this.sliding=!0,g&&this.pause(),this.$indicators.length){this.$indicators.find(\".active\").removeClass(\"active\");var m=a(this.$indicators.children()[this.getItemIndex(f)]);m&&m.addClass(\"active\")}var n=a.Event(\"slid.bs.carousel\",{relatedTarget:k,direction:h});return a.support.transition&&this.$element.hasClass(\"slide\")?(f.addClass(b),f[0].offsetWidth,e.addClass(h),f.addClass(h),e.one(\"bsTransitionEnd\",function(){f.removeClass([b,h].join(\" \")).addClass(\"active\"),e.removeClass([\"active\",h].join(\" \")),j.sliding=!1,setTimeout(function(){j.$element.trigger(n)},0)}).emulateTransitionEnd(c.TRANSITION_DURATION)):(e.removeClass(\"active\"),f.addClass(\"active\"),this.sliding=!1,this.$element.trigger(n)),g&&this.cycle(),this}};var d=a.fn.carousel;a.fn.carousel=b,a.fn.carousel.Constructor=c,a.fn.carousel.noConflict=function(){return a.fn.carousel=d,this};var e=function(c){var d,e=a(this),f=a(e.attr(\"data-target\")||(d=e.attr(\"href\"))&&d.replace(/.*(?=#[^\\s]+$)/,\"\"));if(f.hasClass(\"carousel\")){var g=a.extend({},f.data(),e.data()),h=e.attr(\"data-slide-to\");h&&(g.interval=!1),b.call(f,g),h&&f.data(\"bs.carousel\").to(h),c.preventDefault()}};a(document).on(\"click.bs.carousel.data-api\",\"[data-slide]\",e).on(\"click.bs.carousel.data-api\",\"[data-slide-to]\",e),a(window).on(\"load\",function(){a('[data-ride=\"carousel\"]').each(function(){var c=a(this);b.call(c,c.data())})})}(jQuery),+function(a){\"use strict\";function b(b){var c,d=b.attr(\"data-target\")||(c=b.attr(\"href\"))&&c.replace(/.*(?=#[^\\s]+$)/,\"\");return a(d)}function c(b){return this.each(function(){var c=a(this),e=c.data(\"bs.collapse\"),f=a.extend({},d.DEFAULTS,c.data(),\"object\"==typeof b&&b);!e&&f.toggle&&\"show\"==b&&(f.toggle=!1),e||c.data(\"bs.collapse\",e=new d(this,f)),\"string\"==typeof b&&e[b]()})}var d=function(b,c){this.$element=a(b),this.options=a.extend({},d.DEFAULTS,c),this.$trigger=a(this.options.trigger).filter('[href=\"#'+b.id+'\"], [data-target=\"#'+b.id+'\"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};d.VERSION=\"3.3.1\",d.TRANSITION_DURATION=350,d.DEFAULTS={toggle:!0,trigger:'[data-toggle=\"collapse\"]'},d.prototype.dimension=function(){var a=this.$element.hasClass(\"width\");return a?\"width\":\"height\"},d.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass(\"in\")){var b,e=this.$parent&&this.$parent.find(\"> .panel\").children(\".in, .collapsing\");if(!(e&&e.length&&(b=e.data(\"bs.collapse\"),b&&b.transitioning))){var f=a.Event(\"show.bs.collapse\");if(this.$element.trigger(f),!f.isDefaultPrevented()){e&&e.length&&(c.call(e,\"hide\"),b||e.data(\"bs.collapse\",null));var g=this.dimension();this.$element.removeClass(\"collapse\").addClass(\"collapsing\")[g](0).attr(\"aria-expanded\",!0),this.$trigger.removeClass(\"collapsed\").attr(\"aria-expanded\",!0),this.transitioning=1;var h=function(){this.$element.removeClass(\"collapsing\").addClass(\"collapse in\")[g](\"\"),this.transitioning=0,this.$element.trigger(\"shown.bs.collapse\")};if(!a.support.transition)return h.call(this);var i=a.camelCase([\"scroll\",g].join(\"-\"));this.$element.one(\"bsTransitionEnd\",a.proxy(h,this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i])}}}},d.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass(\"in\")){var b=a.Event(\"hide.bs.collapse\");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass(\"collapsing\").removeClass(\"collapse in\").attr(\"aria-expanded\",!1),this.$trigger.addClass(\"collapsed\").attr(\"aria-expanded\",!1),this.transitioning=1;var e=function(){this.transitioning=0,this.$element.removeClass(\"collapsing\").addClass(\"collapse\").trigger(\"hidden.bs.collapse\")};return a.support.transition?void this.$element[c](0).one(\"bsTransitionEnd\",a.proxy(e,this)).emulateTransitionEnd(d.TRANSITION_DURATION):e.call(this)}}},d.prototype.toggle=function(){this[this.$element.hasClass(\"in\")?\"hide\":\"show\"]()},d.prototype.getParent=function(){return a(this.options.parent).find('[data-toggle=\"collapse\"][data-parent=\"'+this.options.parent+'\"]').each(a.proxy(function(c,d){var e=a(d);this.addAriaAndCollapsedClass(b(e),e)},this)).end()},d.prototype.addAriaAndCollapsedClass=function(a,b){var c=a.hasClass(\"in\");a.attr(\"aria-expanded\",c),b.toggleClass(\"collapsed\",!c).attr(\"aria-expanded\",c)};var e=a.fn.collapse;a.fn.collapse=c,a.fn.collapse.Constructor=d,a.fn.collapse.noConflict=function(){return a.fn.collapse=e,this},a(document).on(\"click.bs.collapse.data-api\",'[data-toggle=\"collapse\"]',function(d){var e=a(this);e.attr(\"data-target\")||d.preventDefault();var f=b(e),g=f.data(\"bs.collapse\"),h=g?\"toggle\":a.extend({},e.data(),{trigger:this});c.call(f,h)})}(jQuery),+function(a){\"use strict\";function b(b){b&&3===b.which||(a(e).remove(),a(f).each(function(){var d=a(this),e=c(d),f={relatedTarget:this};e.hasClass(\"open\")&&(e.trigger(b=a.Event(\"hide.bs.dropdown\",f)),b.isDefaultPrevented()||(d.attr(\"aria-expanded\",\"false\"),e.removeClass(\"open\").trigger(\"hidden.bs.dropdown\",f)))}))}function c(b){var c=b.attr(\"data-target\");c||(c=b.attr(\"href\"),c=c&&/#[A-Za-z]/.test(c)&&c.replace(/.*(?=#[^\\s]*$)/,\"\"));var d=c&&a(c);return d&&d.length?d:b.parent()}function d(b){return this.each(function(){var c=a(this),d=c.data(\"bs.dropdown\");d||c.data(\"bs.dropdown\",d=new g(this)),\"string\"==typeof b&&d[b].call(c)})}var e=\".dropdown-backdrop\",f='[data-toggle=\"dropdown\"]',g=function(b){a(b).on(\"click.bs.dropdown\",this.toggle)};g.VERSION=\"3.3.1\",g.prototype.toggle=function(d){var e=a(this);if(!e.is(\".disabled, :disabled\")){var f=c(e),g=f.hasClass(\"open\");if(b(),!g){\"ontouchstart\"in document.documentElement&&!f.closest(\".navbar-nav\").length&&a('<div class=\"dropdown-backdrop\"/>').insertAfter(a(this)).on(\"click\",b);var h={relatedTarget:this};if(f.trigger(d=a.Event(\"show.bs.dropdown\",h)),d.isDefaultPrevented())return;e.trigger(\"focus\").attr(\"aria-expanded\",\"true\"),f.toggleClass(\"open\").trigger(\"shown.bs.dropdown\",h)}return!1}},g.prototype.keydown=function(b){if(/(38|40|27|32)/.test(b.which)&&!/input|textarea/i.test(b.target.tagName)){var d=a(this);if(b.preventDefault(),b.stopPropagation(),!d.is(\".disabled, :disabled\")){var e=c(d),g=e.hasClass(\"open\");if(!g&&27!=b.which||g&&27==b.which)return 27==b.which&&e.find(f).trigger(\"focus\"),d.trigger(\"click\");var h=\" li:not(.divider):visible a\",i=e.find('[role=\"menu\"]'+h+', [role=\"listbox\"]'+h);if(i.length){var j=i.index(b.target);38==b.which&&j>0&&j--,40==b.which&&j<i.length-1&&j++,~j||(j=0),i.eq(j).trigger(\"focus\")}}}};var h=a.fn.dropdown;a.fn.dropdown=d,a.fn.dropdown.Constructor=g,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=h,this},a(document).on(\"click.bs.dropdown.data-api\",b).on(\"click.bs.dropdown.data-api\",\".dropdown form\",function(a){a.stopPropagation()}).on(\"click.bs.dropdown.data-api\",f,g.prototype.toggle).on(\"keydown.bs.dropdown.data-api\",f,g.prototype.keydown).on(\"keydown.bs.dropdown.data-api\",'[role=\"menu\"]',g.prototype.keydown).on(\"keydown.bs.dropdown.data-api\",'[role=\"listbox\"]',g.prototype.keydown)}(jQuery),+function(a){\"use strict\";function b(b,d){return this.each(function(){var e=a(this),f=e.data(\"bs.modal\"),g=a.extend({},c.DEFAULTS,e.data(),\"object\"==typeof b&&b);f||e.data(\"bs.modal\",f=new c(this,g)),\"string\"==typeof b?f[b](d):g.show&&f.show(d)})}var c=function(b,c){this.options=c,this.$body=a(document.body),this.$element=a(b),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(\".modal-content\").load(this.options.remote,a.proxy(function(){this.$element.trigger(\"loaded.bs.modal\")},this))};c.VERSION=\"3.3.1\",c.TRANSITION_DURATION=300,c.BACKDROP_TRANSITION_DURATION=150,c.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},c.prototype.toggle=function(a){return this.isShown?this.hide():this.show(a)},c.prototype.show=function(b){var d=this,e=a.Event(\"show.bs.modal\",{relatedTarget:b});this.$element.trigger(e),this.isShown||e.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass(\"modal-open\"),this.escape(),this.resize(),this.$element.on(\"click.dismiss.bs.modal\",'[data-dismiss=\"modal\"]',a.proxy(this.hide,this)),this.backdrop(function(){var e=a.support.transition&&d.$element.hasClass(\"fade\");d.$element.parent().length||d.$element.appendTo(d.$body),d.$element.show().scrollTop(0),d.options.backdrop&&d.adjustBackdrop(),d.adjustDialog(),e&&d.$element[0].offsetWidth,d.$element.addClass(\"in\").attr(\"aria-hidden\",!1),d.enforceFocus();var f=a.Event(\"shown.bs.modal\",{relatedTarget:b});e?d.$element.find(\".modal-dialog\").one(\"bsTransitionEnd\",function(){d.$element.trigger(\"focus\").trigger(f)}).emulateTransitionEnd(c.TRANSITION_DURATION):d.$element.trigger(\"focus\").trigger(f)}))},c.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event(\"hide.bs.modal\"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),a(document).off(\"focusin.bs.modal\"),this.$element.removeClass(\"in\").attr(\"aria-hidden\",!0).off(\"click.dismiss.bs.modal\"),a.support.transition&&this.$element.hasClass(\"fade\")?this.$element.one(\"bsTransitionEnd\",a.proxy(this.hideModal,this)).emulateTransitionEnd(c.TRANSITION_DURATION):this.hideModal())},c.prototype.enforceFocus=function(){a(document).off(\"focusin.bs.modal\").on(\"focusin.bs.modal\",a.proxy(function(a){this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.trigger(\"focus\")},this))},c.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on(\"keydown.dismiss.bs.modal\",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off(\"keydown.dismiss.bs.modal\")},c.prototype.resize=function(){this.isShown?a(window).on(\"resize.bs.modal\",a.proxy(this.handleUpdate,this)):a(window).off(\"resize.bs.modal\")},c.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.$body.removeClass(\"modal-open\"),a.resetAdjustments(),a.resetScrollbar(),a.$element.trigger(\"hidden.bs.modal\")})},c.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},c.prototype.backdrop=function(b){var d=this,e=this.$element.hasClass(\"fade\")?\"fade\":\"\";if(this.isShown&&this.options.backdrop){var f=a.support.transition&&e;if(this.$backdrop=a('<div class=\"modal-backdrop '+e+'\" />').prependTo(this.$element).on(\"click.dismiss.bs.modal\",a.proxy(function(a){a.target===a.currentTarget&&(\"static\"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),f&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass(\"in\"),!b)return;f?this.$backdrop.one(\"bsTransitionEnd\",b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):b()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass(\"in\");var g=function(){d.removeBackdrop(),b&&b()};a.support.transition&&this.$element.hasClass(\"fade\")?this.$backdrop.one(\"bsTransitionEnd\",g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):g()}else b&&b()},c.prototype.handleUpdate=function(){this.options.backdrop&&this.adjustBackdrop(),this.adjustDialog()},c.prototype.adjustBackdrop=function(){this.$backdrop.css(\"height\",0).css(\"height\",this.$element[0].scrollHeight)},c.prototype.adjustDialog=function(){var a=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&a?this.scrollbarWidth:\"\",paddingRight:this.bodyIsOverflowing&&!a?this.scrollbarWidth:\"\"})},c.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:\"\",paddingRight:\"\"})},c.prototype.checkScrollbar=function(){this.bodyIsOverflowing=document.body.scrollHeight>document.documentElement.clientHeight,this.scrollbarWidth=this.measureScrollbar()},c.prototype.setScrollbar=function(){var a=parseInt(this.$body.css(\"padding-right\")||0,10);this.bodyIsOverflowing&&this.$body.css(\"padding-right\",a+this.scrollbarWidth)},c.prototype.resetScrollbar=function(){this.$body.css(\"padding-right\",\"\")},c.prototype.measureScrollbar=function(){var a=document.createElement(\"div\");a.className=\"modal-scrollbar-measure\",this.$body.append(a);var b=a.offsetWidth-a.clientWidth;return this.$body[0].removeChild(a),b};var d=a.fn.modal;a.fn.modal=b,a.fn.modal.Constructor=c,a.fn.modal.noConflict=function(){return a.fn.modal=d,this},a(document).on(\"click.bs.modal.data-api\",'[data-toggle=\"modal\"]',function(c){var d=a(this),e=d.attr(\"href\"),f=a(d.attr(\"data-target\")||e&&e.replace(/.*(?=#[^\\s]+$)/,\"\")),g=f.data(\"bs.modal\")?\"toggle\":a.extend({remote:!/#/.test(e)&&e},f.data(),d.data());d.is(\"a\")&&c.preventDefault(),f.one(\"show.bs.modal\",function(a){a.isDefaultPrevented()||f.one(\"hidden.bs.modal\",function(){d.is(\":visible\")&&d.trigger(\"focus\")})}),b.call(f,g,this)})}(jQuery),+function(a){\"use strict\";function b(b){return this.each(function(){var d=a(this),e=d.data(\"bs.tooltip\"),f=\"object\"==typeof b&&b,g=f&&f.selector;(e||\"destroy\"!=b)&&(g?(e||d.data(\"bs.tooltip\",e={}),e[g]||(e[g]=new c(this,f))):e||d.data(\"bs.tooltip\",e=new c(this,f)),\"string\"==typeof b&&e[b]())})}var c=function(a,b){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init(\"tooltip\",a,b)};c.VERSION=\"3.3.1\",c.TRANSITION_DURATION=150,c.DEFAULTS={animation:!0,placement:\"top\",selector:!1,template:'<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',trigger:\"hover focus\",title:\"\",delay:0,html:!1,container:!1,viewport:{selector:\"body\",padding:0}},c.prototype.init=function(b,c,d){this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d),this.$viewport=this.options.viewport&&a(this.options.viewport.selector||this.options.viewport);for(var e=this.options.trigger.split(\" \"),f=e.length;f--;){var g=e[f];if(\"click\"==g)this.$element.on(\"click.\"+this.type,this.options.selector,a.proxy(this.toggle,this));else if(\"manual\"!=g){var h=\"hover\"==g?\"mouseenter\":\"focusin\",i=\"hover\"==g?\"mouseleave\":\"focusout\";this.$element.on(h+\".\"+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+\".\"+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:\"manual\",selector:\"\"}):this.fixTitle()},c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&\"number\"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},c.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},c.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data(\"bs.\"+this.type);return c&&c.$tip&&c.$tip.is(\":visible\")?void(c.hoverState=\"in\"):(c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data(\"bs.\"+this.type,c)),clearTimeout(c.timeout),c.hoverState=\"in\",c.options.delay&&c.options.delay.show?void(c.timeout=setTimeout(function(){\"in\"==c.hoverState&&c.show()},c.options.delay.show)):c.show())},c.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data(\"bs.\"+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data(\"bs.\"+this.type,c)),clearTimeout(c.timeout),c.hoverState=\"out\",c.options.delay&&c.options.delay.hide?void(c.timeout=setTimeout(function(){\"out\"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide()},c.prototype.show=function(){var b=a.Event(\"show.bs.\"+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(b);var d=a.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(b.isDefaultPrevented()||!d)return;var e=this,f=this.tip(),g=this.getUID(this.type);this.setContent(),f.attr(\"id\",g),this.$element.attr(\"aria-describedby\",g),this.options.animation&&f.addClass(\"fade\");var h=\"function\"==typeof this.options.placement?this.options.placement.call(this,f[0],this.$element[0]):this.options.placement,i=/\\s?auto?\\s?/i,j=i.test(h);j&&(h=h.replace(i,\"\")||\"top\"),f.detach().css({top:0,left:0,display:\"block\"}).addClass(h).data(\"bs.\"+this.type,this),this.options.container?f.appendTo(this.options.container):f.insertAfter(this.$element);var k=this.getPosition(),l=f[0].offsetWidth,m=f[0].offsetHeight;if(j){var n=h,o=this.options.container?a(this.options.container):this.$element.parent(),p=this.getPosition(o);h=\"bottom\"==h&&k.bottom+m>p.bottom?\"top\":\"top\"==h&&k.top-m<p.top?\"bottom\":\"right\"==h&&k.right+l>p.width?\"left\":\"left\"==h&&k.left-l<p.left?\"right\":h,f.removeClass(n).addClass(h)}var q=this.getCalculatedOffset(h,k,l,m);this.applyPlacement(q,h);var r=function(){var a=e.hoverState;e.$element.trigger(\"shown.bs.\"+e.type),e.hoverState=null,\"out\"==a&&e.leave(e)};a.support.transition&&this.$tip.hasClass(\"fade\")?f.one(\"bsTransitionEnd\",r).emulateTransitionEnd(c.TRANSITION_DURATION):r()}},c.prototype.applyPlacement=function(b,c){var d=this.tip(),e=d[0].offsetWidth,f=d[0].offsetHeight,g=parseInt(d.css(\"margin-top\"),10),h=parseInt(d.css(\"margin-left\"),10);isNaN(g)&&(g=0),isNaN(h)&&(h=0),b.top=b.top+g,b.left=b.left+h,a.offset.setOffset(d[0],a.extend({using:function(a){d.css({top:Math.round(a.top),left:Math.round(a.left)})}},b),0),d.addClass(\"in\");var i=d[0].offsetWidth,j=d[0].offsetHeight;\"top\"==c&&j!=f&&(b.top=b.top+f-j);var k=this.getViewportAdjustedDelta(c,b,i,j);k.left?b.left+=k.left:b.top+=k.top;var l=/top|bottom/.test(c),m=l?2*k.left-e+i:2*k.top-f+j,n=l?\"offsetWidth\":\"offsetHeight\";d.offset(b),this.replaceArrow(m,d[0][n],l)},c.prototype.replaceArrow=function(a,b,c){this.arrow().css(c?\"left\":\"top\",50*(1-a/b)+\"%\").css(c?\"top\":\"left\",\"\")},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(\".tooltip-inner\")[this.options.html?\"html\":\"text\"](b),a.removeClass(\"fade in top bottom left right\")},c.prototype.hide=function(b){function d(){\"in\"!=e.hoverState&&f.detach(),e.$element.removeAttr(\"aria-describedby\").trigger(\"hidden.bs.\"+e.type),b&&b()}var e=this,f=this.tip(),g=a.Event(\"hide.bs.\"+this.type);return this.$element.trigger(g),g.isDefaultPrevented()?void 0:(f.removeClass(\"in\"),a.support.transition&&this.$tip.hasClass(\"fade\")?f.one(\"bsTransitionEnd\",d).emulateTransitionEnd(c.TRANSITION_DURATION):d(),this.hoverState=null,this)},c.prototype.fixTitle=function(){var a=this.$element;(a.attr(\"title\")||\"string\"!=typeof a.attr(\"data-original-title\"))&&a.attr(\"data-original-title\",a.attr(\"title\")||\"\").attr(\"title\",\"\")},c.prototype.hasContent=function(){return this.getTitle()},c.prototype.getPosition=function(b){b=b||this.$element;var c=b[0],d=\"BODY\"==c.tagName,e=c.getBoundingClientRect();null==e.width&&(e=a.extend({},e,{width:e.right-e.left,height:e.bottom-e.top}));var f=d?{top:0,left:0}:b.offset(),g={scroll:d?document.documentElement.scrollTop||document.body.scrollTop:b.scrollTop()},h=d?{width:a(window).width(),height:a(window).height()}:null;return a.extend({},e,g,h,f)},c.prototype.getCalculatedOffset=function(a,b,c,d){return\"bottom\"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:\"top\"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:\"left\"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},c.prototype.getViewportAdjustedDelta=function(a,b,c,d){var e={top:0,left:0};if(!this.$viewport)return e;var f=this.options.viewport&&this.options.viewport.padding||0,g=this.getPosition(this.$viewport);if(/right|left/.test(a)){var h=b.top-f-g.scroll,i=b.top+f-g.scroll+d;h<g.top?e.top=g.top-h:i>g.top+g.height&&(e.top=g.top+g.height-i)}else{var j=b.left-f,k=b.left+f+c;j<g.left?e.left=g.left-j:k>g.width&&(e.left=g.left+g.width-k)}return e},c.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr(\"data-original-title\")||(\"function\"==typeof c.title?c.title.call(b[0]):c.title)},c.prototype.getUID=function(a){do a+=~~(1e6*Math.random());while(document.getElementById(a));return a},c.prototype.tip=function(){return this.$tip=this.$tip||a(this.options.template)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(\".tooltip-arrow\")},c.prototype.enable=function(){this.enabled=!0},c.prototype.disable=function(){this.enabled=!1},c.prototype.toggleEnabled=function(){this.enabled=!this.enabled},c.prototype.toggle=function(b){var c=this;b&&(c=a(b.currentTarget).data(\"bs.\"+this.type),c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data(\"bs.\"+this.type,c))),c.tip().hasClass(\"in\")?c.leave(c):c.enter(c)},c.prototype.destroy=function(){var a=this;clearTimeout(this.timeout),this.hide(function(){a.$element.off(\".\"+a.type).removeData(\"bs.\"+a.type)})};var d=a.fn.tooltip;a.fn.tooltip=b,a.fn.tooltip.Constructor=c,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=d,this}}(jQuery),+function(a){\"use strict\";function b(b){return this.each(function(){var d=a(this),e=d.data(\"bs.popover\"),f=\"object\"==typeof b&&b,g=f&&f.selector;(e||\"destroy\"!=b)&&(g?(e||d.data(\"bs.popover\",e={}),e[g]||(e[g]=new c(this,f))):e||d.data(\"bs.popover\",e=new c(this,f)),\"string\"==typeof b&&e[b]())})}var c=function(a,b){this.init(\"popover\",a,b)};if(!a.fn.tooltip)throw new Error(\"Popover requires tooltip.js\");c.VERSION=\"3.3.1\",c.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:\"right\",trigger:\"click\",content:\"\",template:'<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'}),c.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),c.prototype.constructor=c,c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(\".popover-title\")[this.options.html?\"html\":\"text\"](b),a.find(\".popover-content\").children().detach().end()[this.options.html?\"string\"==typeof c?\"html\":\"append\":\"text\"](c),a.removeClass(\"fade top bottom left right in\"),a.find(\".popover-title\").html()||a.find(\".popover-title\").hide()},c.prototype.hasContent=function(){return this.getTitle()||this.getContent()},c.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr(\"data-content\")||(\"function\"==typeof b.content?b.content.call(a[0]):b.content)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(\".arrow\")},c.prototype.tip=function(){return this.$tip||(this.$tip=a(this.options.template)),this.$tip};var d=a.fn.popover;a.fn.popover=b,a.fn.popover.Constructor=c,a.fn.popover.noConflict=function(){return a.fn.popover=d,this}}(jQuery),+function(a){\"use strict\";function b(c,d){var e=a.proxy(this.process,this);this.$body=a(\"body\"),this.$scrollElement=a(a(c).is(\"body\")?window:c),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||\"\")+\" .nav li > a\",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on(\"scroll.bs.scrollspy\",e),this.refresh(),this.process()}function c(c){return this.each(function(){var d=a(this),e=d.data(\"bs.scrollspy\"),f=\"object\"==typeof c&&c;e||d.data(\"bs.scrollspy\",e=new b(this,f)),\"string\"==typeof c&&e[c]()})}b.VERSION=\"3.3.1\",b.DEFAULTS={offset:10},b.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},b.prototype.refresh=function(){var b=\"offset\",c=0;a.isWindow(this.$scrollElement[0])||(b=\"position\",c=this.$scrollElement.scrollTop()),this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight();var d=this;this.$body.find(this.selector).map(function(){var d=a(this),e=d.data(\"target\")||d.attr(\"href\"),f=/^#./.test(e)&&a(e);return f&&f.length&&f.is(\":visible\")&&[[f[b]().top+c,e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){d.offsets.push(this[0]),d.targets.push(this[1])})},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.getScrollHeight(),d=this.options.offset+c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(this.scrollHeight!=c&&this.refresh(),b>=d)return g!=(a=f[f.length-1])&&this.activate(a);if(g&&b<e[0])return this.activeTarget=null,this.clear();for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(!e[a+1]||b<=e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){this.activeTarget=b,this.clear();var c=this.selector+'[data-target=\"'+b+'\"],'+this.selector+'[href=\"'+b+'\"]',d=a(c).parents(\"li\").addClass(\"active\");d.parent(\".dropdown-menu\").length&&(d=d.closest(\"li.dropdown\").addClass(\"active\")),d.trigger(\"activate.bs.scrollspy\")},b.prototype.clear=function(){a(this.selector).parentsUntil(this.options.target,\".active\").removeClass(\"active\")};var d=a.fn.scrollspy;a.fn.scrollspy=c,a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=d,this},a(window).on(\"load.bs.scrollspy.data-api\",function(){a('[data-spy=\"scroll\"]').each(function(){var b=a(this);c.call(b,b.data())})})}(jQuery),+function(a){\"use strict\";function b(b){return this.each(function(){var d=a(this),e=d.data(\"bs.tab\");e||d.data(\"bs.tab\",e=new c(this)),\"string\"==typeof b&&e[b]()})}var c=function(b){this.element=a(b)};c.VERSION=\"3.3.1\",c.TRANSITION_DURATION=150,c.prototype.show=function(){var b=this.element,c=b.closest(\"ul:not(.dropdown-menu)\"),d=b.data(\"target\");if(d||(d=b.attr(\"href\"),d=d&&d.replace(/.*(?=#[^\\s]*$)/,\"\")),!b.parent(\"li\").hasClass(\"active\")){var e=c.find(\".active:last a\"),f=a.Event(\"hide.bs.tab\",{relatedTarget:b[0]}),g=a.Event(\"show.bs.tab\",{relatedTarget:e[0]});if(e.trigger(f),b.trigger(g),!g.isDefaultPrevented()&&!f.isDefaultPrevented()){var h=a(d);this.activate(b.closest(\"li\"),c),this.activate(h,h.parent(),function(){e.trigger({type:\"hidden.bs.tab\",relatedTarget:b[0]}),b.trigger({type:\"shown.bs.tab\",relatedTarget:e[0]})\n})}}},c.prototype.activate=function(b,d,e){function f(){g.removeClass(\"active\").find(\"> .dropdown-menu > .active\").removeClass(\"active\").end().find('[data-toggle=\"tab\"]').attr(\"aria-expanded\",!1),b.addClass(\"active\").find('[data-toggle=\"tab\"]').attr(\"aria-expanded\",!0),h?(b[0].offsetWidth,b.addClass(\"in\")):b.removeClass(\"fade\"),b.parent(\".dropdown-menu\")&&b.closest(\"li.dropdown\").addClass(\"active\").end().find('[data-toggle=\"tab\"]').attr(\"aria-expanded\",!0),e&&e()}var g=d.find(\"> .active\"),h=e&&a.support.transition&&(g.length&&g.hasClass(\"fade\")||!!d.find(\"> .fade\").length);g.length&&h?g.one(\"bsTransitionEnd\",f).emulateTransitionEnd(c.TRANSITION_DURATION):f(),g.removeClass(\"in\")};var d=a.fn.tab;a.fn.tab=b,a.fn.tab.Constructor=c,a.fn.tab.noConflict=function(){return a.fn.tab=d,this};var e=function(c){c.preventDefault(),b.call(a(this),\"show\")};a(document).on(\"click.bs.tab.data-api\",'[data-toggle=\"tab\"]',e).on(\"click.bs.tab.data-api\",'[data-toggle=\"pill\"]',e)}(jQuery),+function(a){\"use strict\";function b(b){return this.each(function(){var d=a(this),e=d.data(\"bs.affix\"),f=\"object\"==typeof b&&b;e||d.data(\"bs.affix\",e=new c(this,f)),\"string\"==typeof b&&e[b]()})}var c=function(b,d){this.options=a.extend({},c.DEFAULTS,d),this.$target=a(this.options.target).on(\"scroll.bs.affix.data-api\",a.proxy(this.checkPosition,this)).on(\"click.bs.affix.data-api\",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(b),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};c.VERSION=\"3.3.1\",c.RESET=\"affix affix-top affix-bottom\",c.DEFAULTS={offset:0,target:window},c.prototype.getState=function(a,b,c,d){var e=this.$target.scrollTop(),f=this.$element.offset(),g=this.$target.height();if(null!=c&&\"top\"==this.affixed)return c>e?\"top\":!1;if(\"bottom\"==this.affixed)return null!=c?e+this.unpin<=f.top?!1:\"bottom\":a-d>=e+g?!1:\"bottom\";var h=null==this.affixed,i=h?e:f.top,j=h?g:b;return null!=c&&c>=i?\"top\":null!=d&&i+j>=a-d?\"bottom\":!1},c.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass(\"affix\");var a=this.$target.scrollTop(),b=this.$element.offset();return this.pinnedOffset=b.top-a},c.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},c.prototype.checkPosition=function(){if(this.$element.is(\":visible\")){var b=this.$element.height(),d=this.options.offset,e=d.top,f=d.bottom,g=a(\"body\").height();\"object\"!=typeof d&&(f=e=d),\"function\"==typeof e&&(e=d.top(this.$element)),\"function\"==typeof f&&(f=d.bottom(this.$element));var h=this.getState(g,b,e,f);if(this.affixed!=h){null!=this.unpin&&this.$element.css(\"top\",\"\");var i=\"affix\"+(h?\"-\"+h:\"\"),j=a.Event(i+\".bs.affix\");if(this.$element.trigger(j),j.isDefaultPrevented())return;this.affixed=h,this.unpin=\"bottom\"==h?this.getPinnedOffset():null,this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace(\"affix\",\"affixed\")+\".bs.affix\")}\"bottom\"==h&&this.$element.offset({top:g-b-f})}};var d=a.fn.affix;a.fn.affix=b,a.fn.affix.Constructor=c,a.fn.affix.noConflict=function(){return a.fn.affix=d,this},a(window).on(\"load\",function(){a('[data-spy=\"affix\"]').each(function(){var c=a(this),d=c.data();d.offset=d.offset||{},null!=d.offsetBottom&&(d.offset.bottom=d.offsetBottom),null!=d.offsetTop&&(d.offset.top=d.offsetTop),b.call(c,d)})})}(jQuery);","/**\n * @license\n * Lo-Dash 2.4.1 (Custom Build) lodash.com/license | Underscore.js 1.5.2 underscorejs.org/LICENSE\n * Build: `lodash modern -o ./dist/lodash.js`\n */\n;(function(){function n(n,t,e){e=(e||0)-1;for(var r=n?n.length:0;++e<r;)if(n[e]===t)return e;return-1}function t(t,e){var r=typeof e;if(t=t.l,\"boolean\"==r||null==e)return t[e]?0:-1;\"number\"!=r&&\"string\"!=r&&(r=\"object\");var u=\"number\"==r?e:m+e;return t=(t=t[r])&&t[u],\"object\"==r?t&&-1<n(t,e)?0:-1:t?0:-1}function e(n){var t=this.l,e=typeof n;if(\"boolean\"==e||null==n)t[n]=true;else{\"number\"!=e&&\"string\"!=e&&(e=\"object\");var r=\"number\"==e?n:m+n,t=t[e]||(t[e]={});\"object\"==e?(t[r]||(t[r]=[])).push(n):t[r]=true\n}}function r(n){return n.charCodeAt(0)}function u(n,t){for(var e=n.m,r=t.m,u=-1,o=e.length;++u<o;){var i=e[u],a=r[u];if(i!==a){if(i>a||typeof i==\"undefined\")return 1;if(i<a||typeof a==\"undefined\")return-1}}return n.n-t.n}function o(n){var t=-1,r=n.length,u=n[0],o=n[r/2|0],i=n[r-1];if(u&&typeof u==\"object\"&&o&&typeof o==\"object\"&&i&&typeof i==\"object\")return false;for(u=f(),u[\"false\"]=u[\"null\"]=u[\"true\"]=u.undefined=false,o=f(),o.k=n,o.l=u,o.push=e;++t<r;)o.push(n[t]);return o}function i(n){return\"\\\\\"+U[n]\n}function a(){return h.pop()||[]}function f(){return g.pop()||{k:null,l:null,m:null,\"false\":false,n:0,\"null\":false,number:null,object:null,push:null,string:null,\"true\":false,undefined:false,o:null}}function l(n){n.length=0,h.length<_&&h.push(n)}function c(n){var t=n.l;t&&c(t),n.k=n.l=n.m=n.object=n.number=n.string=n.o=null,g.length<_&&g.push(n)}function p(n,t,e){t||(t=0),typeof e==\"undefined\"&&(e=n?n.length:0);var r=-1;e=e-t||0;for(var u=Array(0>e?0:e);++r<e;)u[r]=n[t+r];return u}function s(e){function h(n,t,e){if(!n||!V[typeof n])return n;\nt=t&&typeof e==\"undefined\"?t:tt(t,e,3);for(var r=-1,u=V[typeof n]&&Fe(n),o=u?u.length:0;++r<o&&(e=u[r],false!==t(n[e],e,n)););return n}function g(n,t,e){var r;if(!n||!V[typeof n])return n;t=t&&typeof e==\"undefined\"?t:tt(t,e,3);for(r in n)if(false===t(n[r],r,n))break;return n}function _(n,t,e){var r,u=n,o=u;if(!u)return o;for(var i=arguments,a=0,f=typeof e==\"number\"?2:i.length;++a<f;)if((u=i[a])&&V[typeof u])for(var l=-1,c=V[typeof u]&&Fe(u),p=c?c.length:0;++l<p;)r=c[l],\"undefined\"==typeof o[r]&&(o[r]=u[r]);\nreturn o}function U(n,t,e){var r,u=n,o=u;if(!u)return o;var i=arguments,a=0,f=typeof e==\"number\"?2:i.length;if(3<f&&\"function\"==typeof i[f-2])var l=tt(i[--f-1],i[f--],2);else 2<f&&\"function\"==typeof i[f-1]&&(l=i[--f]);for(;++a<f;)if((u=i[a])&&V[typeof u])for(var c=-1,p=V[typeof u]&&Fe(u),s=p?p.length:0;++c<s;)r=p[c],o[r]=l?l(o[r],u[r]):u[r];return o}function H(n){var t,e=[];if(!n||!V[typeof n])return e;for(t in n)me.call(n,t)&&e.push(t);return e}function J(n){return n&&typeof n==\"object\"&&!Te(n)&&me.call(n,\"__wrapped__\")?n:new Q(n)\n}function Q(n,t){this.__chain__=!!t,this.__wrapped__=n}function X(n){function t(){if(r){var n=p(r);be.apply(n,arguments)}if(this instanceof t){var o=nt(e.prototype),n=e.apply(o,n||arguments);return wt(n)?n:o}return e.apply(u,n||arguments)}var e=n[0],r=n[2],u=n[4];return $e(t,n),t}function Z(n,t,e,r,u){if(e){var o=e(n);if(typeof o!=\"undefined\")return o}if(!wt(n))return n;var i=ce.call(n);if(!K[i])return n;var f=Ae[i];switch(i){case T:case F:return new f(+n);case W:case P:return new f(n);case z:return o=f(n.source,C.exec(n)),o.lastIndex=n.lastIndex,o\n}if(i=Te(n),t){var c=!r;r||(r=a()),u||(u=a());for(var s=r.length;s--;)if(r[s]==n)return u[s];o=i?f(n.length):{}}else o=i?p(n):U({},n);return i&&(me.call(n,\"index\")&&(o.index=n.index),me.call(n,\"input\")&&(o.input=n.input)),t?(r.push(n),u.push(o),(i?St:h)(n,function(n,i){o[i]=Z(n,t,e,r,u)}),c&&(l(r),l(u)),o):o}function nt(n){return wt(n)?ke(n):{}}function tt(n,t,e){if(typeof n!=\"function\")return Ut;if(typeof t==\"undefined\"||!(\"prototype\"in n))return n;var r=n.__bindData__;if(typeof r==\"undefined\"&&(De.funcNames&&(r=!n.name),r=r||!De.funcDecomp,!r)){var u=ge.call(n);\nDe.funcNames||(r=!O.test(u)),r||(r=E.test(u),$e(n,r))}if(false===r||true!==r&&1&r[1])return n;switch(e){case 1:return function(e){return n.call(t,e)};case 2:return function(e,r){return n.call(t,e,r)};case 3:return function(e,r,u){return n.call(t,e,r,u)};case 4:return function(e,r,u,o){return n.call(t,e,r,u,o)}}return Mt(n,t)}function et(n){function t(){var n=f?i:this;if(u){var h=p(u);be.apply(h,arguments)}return(o||c)&&(h||(h=p(arguments)),o&&be.apply(h,o),c&&h.length<a)?(r|=16,et([e,s?r:-4&r,h,null,i,a])):(h||(h=arguments),l&&(e=n[v]),this instanceof t?(n=nt(e.prototype),h=e.apply(n,h),wt(h)?h:n):e.apply(n,h))\n}var e=n[0],r=n[1],u=n[2],o=n[3],i=n[4],a=n[5],f=1&r,l=2&r,c=4&r,s=8&r,v=e;return $e(t,n),t}function rt(e,r){var u=-1,i=st(),a=e?e.length:0,f=a>=b&&i===n,l=[];if(f){var p=o(r);p?(i=t,r=p):f=false}for(;++u<a;)p=e[u],0>i(r,p)&&l.push(p);return f&&c(r),l}function ut(n,t,e,r){r=(r||0)-1;for(var u=n?n.length:0,o=[];++r<u;){var i=n[r];if(i&&typeof i==\"object\"&&typeof i.length==\"number\"&&(Te(i)||yt(i))){t||(i=ut(i,t,e));var a=-1,f=i.length,l=o.length;for(o.length+=f;++a<f;)o[l++]=i[a]}else e||o.push(i)}return o\n}function ot(n,t,e,r,u,o){if(e){var i=e(n,t);if(typeof i!=\"undefined\")return!!i}if(n===t)return 0!==n||1/n==1/t;if(n===n&&!(n&&V[typeof n]||t&&V[typeof t]))return false;if(null==n||null==t)return n===t;var f=ce.call(n),c=ce.call(t);if(f==D&&(f=q),c==D&&(c=q),f!=c)return false;switch(f){case T:case F:return+n==+t;case W:return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case z:case P:return n==oe(t)}if(c=f==$,!c){var p=me.call(n,\"__wrapped__\"),s=me.call(t,\"__wrapped__\");if(p||s)return ot(p?n.__wrapped__:n,s?t.__wrapped__:t,e,r,u,o);\nif(f!=q)return false;if(f=n.constructor,p=t.constructor,f!=p&&!(dt(f)&&f instanceof f&&dt(p)&&p instanceof p)&&\"constructor\"in n&&\"constructor\"in t)return false}for(f=!u,u||(u=a()),o||(o=a()),p=u.length;p--;)if(u[p]==n)return o[p]==t;var v=0,i=true;if(u.push(n),o.push(t),c){if(p=n.length,v=t.length,(i=v==p)||r)for(;v--;)if(c=p,s=t[v],r)for(;c--&&!(i=ot(n[c],s,e,r,u,o)););else if(!(i=ot(n[v],s,e,r,u,o)))break}else g(t,function(t,a,f){return me.call(f,a)?(v++,i=me.call(n,a)&&ot(n[a],t,e,r,u,o)):void 0}),i&&!r&&g(n,function(n,t,e){return me.call(e,t)?i=-1<--v:void 0\n});return u.pop(),o.pop(),f&&(l(u),l(o)),i}function it(n,t,e,r,u){(Te(t)?St:h)(t,function(t,o){var i,a,f=t,l=n[o];if(t&&((a=Te(t))||Pe(t))){for(f=r.length;f--;)if(i=r[f]==t){l=u[f];break}if(!i){var c;e&&(f=e(l,t),c=typeof f!=\"undefined\")&&(l=f),c||(l=a?Te(l)?l:[]:Pe(l)?l:{}),r.push(t),u.push(l),c||it(l,t,e,r,u)}}else e&&(f=e(l,t),typeof f==\"undefined\"&&(f=t)),typeof f!=\"undefined\"&&(l=f);n[o]=l})}function at(n,t){return n+he(Re()*(t-n+1))}function ft(e,r,u){var i=-1,f=st(),p=e?e.length:0,s=[],v=!r&&p>=b&&f===n,h=u||v?a():s;\nfor(v&&(h=o(h),f=t);++i<p;){var g=e[i],y=u?u(g,i,e):g;(r?!i||h[h.length-1]!==y:0>f(h,y))&&((u||v)&&h.push(y),s.push(g))}return v?(l(h.k),c(h)):u&&l(h),s}function lt(n){return function(t,e,r){var u={};e=J.createCallback(e,r,3),r=-1;var o=t?t.length:0;if(typeof o==\"number\")for(;++r<o;){var i=t[r];n(u,i,e(i,r,t),t)}else h(t,function(t,r,o){n(u,t,e(t,r,o),o)});return u}}function ct(n,t,e,r,u,o){var i=1&t,a=4&t,f=16&t,l=32&t;if(!(2&t||dt(n)))throw new ie;f&&!e.length&&(t&=-17,f=e=false),l&&!r.length&&(t&=-33,l=r=false);\nvar c=n&&n.__bindData__;return c&&true!==c?(c=p(c),c[2]&&(c[2]=p(c[2])),c[3]&&(c[3]=p(c[3])),!i||1&c[1]||(c[4]=u),!i&&1&c[1]&&(t|=8),!a||4&c[1]||(c[5]=o),f&&be.apply(c[2]||(c[2]=[]),e),l&&we.apply(c[3]||(c[3]=[]),r),c[1]|=t,ct.apply(null,c)):(1==t||17===t?X:et)([n,t,e,r,u,o])}function pt(n){return Be[n]}function st(){var t=(t=J.indexOf)===Wt?n:t;return t}function vt(n){return typeof n==\"function\"&&pe.test(n)}function ht(n){var t,e;return n&&ce.call(n)==q&&(t=n.constructor,!dt(t)||t instanceof t)?(g(n,function(n,t){e=t\n}),typeof e==\"undefined\"||me.call(n,e)):false}function gt(n){return We[n]}function yt(n){return n&&typeof n==\"object\"&&typeof n.length==\"number\"&&ce.call(n)==D||false}function mt(n,t,e){var r=Fe(n),u=r.length;for(t=tt(t,e,3);u--&&(e=r[u],false!==t(n[e],e,n)););return n}function bt(n){var t=[];return g(n,function(n,e){dt(n)&&t.push(e)}),t.sort()}function _t(n){for(var t=-1,e=Fe(n),r=e.length,u={};++t<r;){var o=e[t];u[n[o]]=o}return u}function dt(n){return typeof n==\"function\"}function wt(n){return!(!n||!V[typeof n])\n}function jt(n){return typeof n==\"number\"||n&&typeof n==\"object\"&&ce.call(n)==W||false}function kt(n){return typeof n==\"string\"||n&&typeof n==\"object\"&&ce.call(n)==P||false}function xt(n){for(var t=-1,e=Fe(n),r=e.length,u=Xt(r);++t<r;)u[t]=n[e[t]];return u}function Ct(n,t,e){var r=-1,u=st(),o=n?n.length:0,i=false;return e=(0>e?Ie(0,o+e):e)||0,Te(n)?i=-1<u(n,t,e):typeof o==\"number\"?i=-1<(kt(n)?n.indexOf(t,e):u(n,t,e)):h(n,function(n){return++r<e?void 0:!(i=n===t)}),i}function Ot(n,t,e){var r=true;t=J.createCallback(t,e,3),e=-1;\nvar u=n?n.length:0;if(typeof u==\"number\")for(;++e<u&&(r=!!t(n[e],e,n)););else h(n,function(n,e,u){return r=!!t(n,e,u)});return r}function Nt(n,t,e){var r=[];t=J.createCallback(t,e,3),e=-1;var u=n?n.length:0;if(typeof u==\"number\")for(;++e<u;){var o=n[e];t(o,e,n)&&r.push(o)}else h(n,function(n,e,u){t(n,e,u)&&r.push(n)});return r}function It(n,t,e){t=J.createCallback(t,e,3),e=-1;var r=n?n.length:0;if(typeof r!=\"number\"){var u;return h(n,function(n,e,r){return t(n,e,r)?(u=n,false):void 0}),u}for(;++e<r;){var o=n[e];\nif(t(o,e,n))return o}}function St(n,t,e){var r=-1,u=n?n.length:0;if(t=t&&typeof e==\"undefined\"?t:tt(t,e,3),typeof u==\"number\")for(;++r<u&&false!==t(n[r],r,n););else h(n,t);return n}function Et(n,t,e){var r=n?n.length:0;if(t=t&&typeof e==\"undefined\"?t:tt(t,e,3),typeof r==\"number\")for(;r--&&false!==t(n[r],r,n););else{var u=Fe(n),r=u.length;h(n,function(n,e,o){return e=u?u[--r]:--r,t(o[e],e,o)})}return n}function Rt(n,t,e){var r=-1,u=n?n.length:0;if(t=J.createCallback(t,e,3),typeof u==\"number\")for(var o=Xt(u);++r<u;)o[r]=t(n[r],r,n);\nelse o=[],h(n,function(n,e,u){o[++r]=t(n,e,u)});return o}function At(n,t,e){var u=-1/0,o=u;if(typeof t!=\"function\"&&e&&e[t]===n&&(t=null),null==t&&Te(n)){e=-1;for(var i=n.length;++e<i;){var a=n[e];a>o&&(o=a)}}else t=null==t&&kt(n)?r:J.createCallback(t,e,3),St(n,function(n,e,r){e=t(n,e,r),e>u&&(u=e,o=n)});return o}function Dt(n,t,e,r){if(!n)return e;var u=3>arguments.length;t=J.createCallback(t,r,4);var o=-1,i=n.length;if(typeof i==\"number\")for(u&&(e=n[++o]);++o<i;)e=t(e,n[o],o,n);else h(n,function(n,r,o){e=u?(u=false,n):t(e,n,r,o)\n});return e}function $t(n,t,e,r){var u=3>arguments.length;return t=J.createCallback(t,r,4),Et(n,function(n,r,o){e=u?(u=false,n):t(e,n,r,o)}),e}function Tt(n){var t=-1,e=n?n.length:0,r=Xt(typeof e==\"number\"?e:0);return St(n,function(n){var e=at(0,++t);r[t]=r[e],r[e]=n}),r}function Ft(n,t,e){var r;t=J.createCallback(t,e,3),e=-1;var u=n?n.length:0;if(typeof u==\"number\")for(;++e<u&&!(r=t(n[e],e,n)););else h(n,function(n,e,u){return!(r=t(n,e,u))});return!!r}function Bt(n,t,e){var r=0,u=n?n.length:0;if(typeof t!=\"number\"&&null!=t){var o=-1;\nfor(t=J.createCallback(t,e,3);++o<u&&t(n[o],o,n);)r++}else if(r=t,null==r||e)return n?n[0]:v;return p(n,0,Se(Ie(0,r),u))}function Wt(t,e,r){if(typeof r==\"number\"){var u=t?t.length:0;r=0>r?Ie(0,u+r):r||0}else if(r)return r=zt(t,e),t[r]===e?r:-1;return n(t,e,r)}function qt(n,t,e){if(typeof t!=\"number\"&&null!=t){var r=0,u=-1,o=n?n.length:0;for(t=J.createCallback(t,e,3);++u<o&&t(n[u],u,n);)r++}else r=null==t||e?1:Ie(0,t);return p(n,r)}function zt(n,t,e,r){var u=0,o=n?n.length:u;for(e=e?J.createCallback(e,r,1):Ut,t=e(t);u<o;)r=u+o>>>1,e(n[r])<t?u=r+1:o=r;\nreturn u}function Pt(n,t,e,r){return typeof t!=\"boolean\"&&null!=t&&(r=e,e=typeof t!=\"function\"&&r&&r[t]===n?null:t,t=false),null!=e&&(e=J.createCallback(e,r,3)),ft(n,t,e)}function Kt(){for(var n=1<arguments.length?arguments:arguments[0],t=-1,e=n?At(Ve(n,\"length\")):0,r=Xt(0>e?0:e);++t<e;)r[t]=Ve(n,t);return r}function Lt(n,t){var e=-1,r=n?n.length:0,u={};for(t||!r||Te(n[0])||(t=[]);++e<r;){var o=n[e];t?u[o]=t[e]:o&&(u[o[0]]=o[1])}return u}function Mt(n,t){return 2<arguments.length?ct(n,17,p(arguments,2),null,t):ct(n,1,null,null,t)\n}function Vt(n,t,e){function r(){c&&ve(c),i=c=p=v,(g||h!==t)&&(s=Ue(),a=n.apply(l,o),c||i||(o=l=null))}function u(){var e=t-(Ue()-f);0<e?c=_e(u,e):(i&&ve(i),e=p,i=c=p=v,e&&(s=Ue(),a=n.apply(l,o),c||i||(o=l=null)))}var o,i,a,f,l,c,p,s=0,h=false,g=true;if(!dt(n))throw new ie;if(t=Ie(0,t)||0,true===e)var y=true,g=false;else wt(e)&&(y=e.leading,h=\"maxWait\"in e&&(Ie(t,e.maxWait)||0),g=\"trailing\"in e?e.trailing:g);return function(){if(o=arguments,f=Ue(),l=this,p=g&&(c||!y),false===h)var e=y&&!c;else{i||y||(s=f);var v=h-(f-s),m=0>=v;\nm?(i&&(i=ve(i)),s=f,a=n.apply(l,o)):i||(i=_e(r,v))}return m&&c?c=ve(c):c||t===h||(c=_e(u,t)),e&&(m=true,a=n.apply(l,o)),!m||c||i||(o=l=null),a}}function Ut(n){return n}function Gt(n,t,e){var r=true,u=t&&bt(t);t&&(e||u.length)||(null==e&&(e=t),o=Q,t=n,n=J,u=bt(t)),false===e?r=false:wt(e)&&\"chain\"in e&&(r=e.chain);var o=n,i=dt(o);St(u,function(e){var u=n[e]=t[e];i&&(o.prototype[e]=function(){var t=this.__chain__,e=this.__wrapped__,i=[e];if(be.apply(i,arguments),i=u.apply(n,i),r||t){if(e===i&&wt(i))return this;\ni=new o(i),i.__chain__=t}return i})})}function Ht(){}function Jt(n){return function(t){return t[n]}}function Qt(){return this.__wrapped__}e=e?Y.defaults(G.Object(),e,Y.pick(G,A)):G;var Xt=e.Array,Yt=e.Boolean,Zt=e.Date,ne=e.Function,te=e.Math,ee=e.Number,re=e.Object,ue=e.RegExp,oe=e.String,ie=e.TypeError,ae=[],fe=re.prototype,le=e._,ce=fe.toString,pe=ue(\"^\"+oe(ce).replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\").replace(/toString| for [^\\]]+/g,\".*?\")+\"$\"),se=te.ceil,ve=e.clearTimeout,he=te.floor,ge=ne.prototype.toString,ye=vt(ye=re.getPrototypeOf)&&ye,me=fe.hasOwnProperty,be=ae.push,_e=e.setTimeout,de=ae.splice,we=ae.unshift,je=function(){try{var n={},t=vt(t=re.defineProperty)&&t,e=t(n,n,n)&&t\n}catch(r){}return e}(),ke=vt(ke=re.create)&&ke,xe=vt(xe=Xt.isArray)&&xe,Ce=e.isFinite,Oe=e.isNaN,Ne=vt(Ne=re.keys)&&Ne,Ie=te.max,Se=te.min,Ee=e.parseInt,Re=te.random,Ae={};Ae[$]=Xt,Ae[T]=Yt,Ae[F]=Zt,Ae[B]=ne,Ae[q]=re,Ae[W]=ee,Ae[z]=ue,Ae[P]=oe,Q.prototype=J.prototype;var De=J.support={};De.funcDecomp=!vt(e.a)&&E.test(s),De.funcNames=typeof ne.name==\"string\",J.templateSettings={escape:/<%-([\\s\\S]+?)%>/g,evaluate:/<%([\\s\\S]+?)%>/g,interpolate:N,variable:\"\",imports:{_:J}},ke||(nt=function(){function n(){}return function(t){if(wt(t)){n.prototype=t;\nvar r=new n;n.prototype=null}return r||e.Object()}}());var $e=je?function(n,t){M.value=t,je(n,\"__bindData__\",M)}:Ht,Te=xe||function(n){return n&&typeof n==\"object\"&&typeof n.length==\"number\"&&ce.call(n)==$||false},Fe=Ne?function(n){return wt(n)?Ne(n):[]}:H,Be={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\"},We=_t(Be),qe=ue(\"(\"+Fe(We).join(\"|\")+\")\",\"g\"),ze=ue(\"[\"+Fe(Be).join(\"\")+\"]\",\"g\"),Pe=ye?function(n){if(!n||ce.call(n)!=q)return false;var t=n.valueOf,e=vt(t)&&(e=ye(t))&&ye(e);return e?n==e||ye(n)==e:ht(n)\n}:ht,Ke=lt(function(n,t,e){me.call(n,e)?n[e]++:n[e]=1}),Le=lt(function(n,t,e){(me.call(n,e)?n[e]:n[e]=[]).push(t)}),Me=lt(function(n,t,e){n[e]=t}),Ve=Rt,Ue=vt(Ue=Zt.now)&&Ue||function(){return(new Zt).getTime()},Ge=8==Ee(d+\"08\")?Ee:function(n,t){return Ee(kt(n)?n.replace(I,\"\"):n,t||0)};return J.after=function(n,t){if(!dt(t))throw new ie;return function(){return 1>--n?t.apply(this,arguments):void 0}},J.assign=U,J.at=function(n){for(var t=arguments,e=-1,r=ut(t,true,false,1),t=t[2]&&t[2][t[1]]===n?1:r.length,u=Xt(t);++e<t;)u[e]=n[r[e]];\nreturn u},J.bind=Mt,J.bindAll=function(n){for(var t=1<arguments.length?ut(arguments,true,false,1):bt(n),e=-1,r=t.length;++e<r;){var u=t[e];n[u]=ct(n[u],1,null,null,n)}return n},J.bindKey=function(n,t){return 2<arguments.length?ct(t,19,p(arguments,2),null,n):ct(t,3,null,null,n)},J.chain=function(n){return n=new Q(n),n.__chain__=true,n},J.compact=function(n){for(var t=-1,e=n?n.length:0,r=[];++t<e;){var u=n[t];u&&r.push(u)}return r},J.compose=function(){for(var n=arguments,t=n.length;t--;)if(!dt(n[t]))throw new ie;\nreturn function(){for(var t=arguments,e=n.length;e--;)t=[n[e].apply(this,t)];return t[0]}},J.constant=function(n){return function(){return n}},J.countBy=Ke,J.create=function(n,t){var e=nt(n);return t?U(e,t):e},J.createCallback=function(n,t,e){var r=typeof n;if(null==n||\"function\"==r)return tt(n,t,e);if(\"object\"!=r)return Jt(n);var u=Fe(n),o=u[0],i=n[o];return 1!=u.length||i!==i||wt(i)?function(t){for(var e=u.length,r=false;e--&&(r=ot(t[u[e]],n[u[e]],null,true)););return r}:function(n){return n=n[o],i===n&&(0!==i||1/i==1/n)\n}},J.curry=function(n,t){return t=typeof t==\"number\"?t:+t||n.length,ct(n,4,null,null,null,t)},J.debounce=Vt,J.defaults=_,J.defer=function(n){if(!dt(n))throw new ie;var t=p(arguments,1);return _e(function(){n.apply(v,t)},1)},J.delay=function(n,t){if(!dt(n))throw new ie;var e=p(arguments,2);return _e(function(){n.apply(v,e)},t)},J.difference=function(n){return rt(n,ut(arguments,true,true,1))},J.filter=Nt,J.flatten=function(n,t,e,r){return typeof t!=\"boolean\"&&null!=t&&(r=e,e=typeof t!=\"function\"&&r&&r[t]===n?null:t,t=false),null!=e&&(n=Rt(n,e,r)),ut(n,t)\n},J.forEach=St,J.forEachRight=Et,J.forIn=g,J.forInRight=function(n,t,e){var r=[];g(n,function(n,t){r.push(t,n)});var u=r.length;for(t=tt(t,e,3);u--&&false!==t(r[u--],r[u],n););return n},J.forOwn=h,J.forOwnRight=mt,J.functions=bt,J.groupBy=Le,J.indexBy=Me,J.initial=function(n,t,e){var r=0,u=n?n.length:0;if(typeof t!=\"number\"&&null!=t){var o=u;for(t=J.createCallback(t,e,3);o--&&t(n[o],o,n);)r++}else r=null==t||e?1:t||r;return p(n,0,Se(Ie(0,u-r),u))},J.intersection=function(){for(var e=[],r=-1,u=arguments.length,i=a(),f=st(),p=f===n,s=a();++r<u;){var v=arguments[r];\n(Te(v)||yt(v))&&(e.push(v),i.push(p&&v.length>=b&&o(r?e[r]:s)))}var p=e[0],h=-1,g=p?p.length:0,y=[];n:for(;++h<g;){var m=i[0],v=p[h];if(0>(m?t(m,v):f(s,v))){for(r=u,(m||s).push(v);--r;)if(m=i[r],0>(m?t(m,v):f(e[r],v)))continue n;y.push(v)}}for(;u--;)(m=i[u])&&c(m);return l(i),l(s),y},J.invert=_t,J.invoke=function(n,t){var e=p(arguments,2),r=-1,u=typeof t==\"function\",o=n?n.length:0,i=Xt(typeof o==\"number\"?o:0);return St(n,function(n){i[++r]=(u?t:n[t]).apply(n,e)}),i},J.keys=Fe,J.map=Rt,J.mapValues=function(n,t,e){var r={};\nreturn t=J.createCallback(t,e,3),h(n,function(n,e,u){r[e]=t(n,e,u)}),r},J.max=At,J.memoize=function(n,t){function e(){var r=e.cache,u=t?t.apply(this,arguments):m+arguments[0];return me.call(r,u)?r[u]:r[u]=n.apply(this,arguments)}if(!dt(n))throw new ie;return e.cache={},e},J.merge=function(n){var t=arguments,e=2;if(!wt(n))return n;if(\"number\"!=typeof t[2]&&(e=t.length),3<e&&\"function\"==typeof t[e-2])var r=tt(t[--e-1],t[e--],2);else 2<e&&\"function\"==typeof t[e-1]&&(r=t[--e]);for(var t=p(arguments,1,e),u=-1,o=a(),i=a();++u<e;)it(n,t[u],r,o,i);\nreturn l(o),l(i),n},J.min=function(n,t,e){var u=1/0,o=u;if(typeof t!=\"function\"&&e&&e[t]===n&&(t=null),null==t&&Te(n)){e=-1;for(var i=n.length;++e<i;){var a=n[e];a<o&&(o=a)}}else t=null==t&&kt(n)?r:J.createCallback(t,e,3),St(n,function(n,e,r){e=t(n,e,r),e<u&&(u=e,o=n)});return o},J.omit=function(n,t,e){var r={};if(typeof t!=\"function\"){var u=[];g(n,function(n,t){u.push(t)});for(var u=rt(u,ut(arguments,true,false,1)),o=-1,i=u.length;++o<i;){var a=u[o];r[a]=n[a]}}else t=J.createCallback(t,e,3),g(n,function(n,e,u){t(n,e,u)||(r[e]=n)\n});return r},J.once=function(n){var t,e;if(!dt(n))throw new ie;return function(){return t?e:(t=true,e=n.apply(this,arguments),n=null,e)}},J.pairs=function(n){for(var t=-1,e=Fe(n),r=e.length,u=Xt(r);++t<r;){var o=e[t];u[t]=[o,n[o]]}return u},J.partial=function(n){return ct(n,16,p(arguments,1))},J.partialRight=function(n){return ct(n,32,null,p(arguments,1))},J.pick=function(n,t,e){var r={};if(typeof t!=\"function\")for(var u=-1,o=ut(arguments,true,false,1),i=wt(n)?o.length:0;++u<i;){var a=o[u];a in n&&(r[a]=n[a])\n}else t=J.createCallback(t,e,3),g(n,function(n,e,u){t(n,e,u)&&(r[e]=n)});return r},J.pluck=Ve,J.property=Jt,J.pull=function(n){for(var t=arguments,e=0,r=t.length,u=n?n.length:0;++e<r;)for(var o=-1,i=t[e];++o<u;)n[o]===i&&(de.call(n,o--,1),u--);return n},J.range=function(n,t,e){n=+n||0,e=typeof e==\"number\"?e:+e||1,null==t&&(t=n,n=0);var r=-1;t=Ie(0,se((t-n)/(e||1)));for(var u=Xt(t);++r<t;)u[r]=n,n+=e;return u},J.reject=function(n,t,e){return t=J.createCallback(t,e,3),Nt(n,function(n,e,r){return!t(n,e,r)\n})},J.remove=function(n,t,e){var r=-1,u=n?n.length:0,o=[];for(t=J.createCallback(t,e,3);++r<u;)e=n[r],t(e,r,n)&&(o.push(e),de.call(n,r--,1),u--);return o},J.rest=qt,J.shuffle=Tt,J.sortBy=function(n,t,e){var r=-1,o=Te(t),i=n?n.length:0,p=Xt(typeof i==\"number\"?i:0);for(o||(t=J.createCallback(t,e,3)),St(n,function(n,e,u){var i=p[++r]=f();o?i.m=Rt(t,function(t){return n[t]}):(i.m=a())[0]=t(n,e,u),i.n=r,i.o=n}),i=p.length,p.sort(u);i--;)n=p[i],p[i]=n.o,o||l(n.m),c(n);return p},J.tap=function(n,t){return t(n),n\n},J.throttle=function(n,t,e){var r=true,u=true;if(!dt(n))throw new ie;return false===e?r=false:wt(e)&&(r=\"leading\"in e?e.leading:r,u=\"trailing\"in e?e.trailing:u),L.leading=r,L.maxWait=t,L.trailing=u,Vt(n,t,L)},J.times=function(n,t,e){n=-1<(n=+n)?n:0;var r=-1,u=Xt(n);for(t=tt(t,e,1);++r<n;)u[r]=t(r);return u},J.toArray=function(n){return n&&typeof n.length==\"number\"?p(n):xt(n)},J.transform=function(n,t,e,r){var u=Te(n);if(null==e)if(u)e=[];else{var o=n&&n.constructor;e=nt(o&&o.prototype)}return t&&(t=J.createCallback(t,r,4),(u?St:h)(n,function(n,r,u){return t(e,n,r,u)\n})),e},J.union=function(){return ft(ut(arguments,true,true))},J.uniq=Pt,J.values=xt,J.where=Nt,J.without=function(n){return rt(n,p(arguments,1))},J.wrap=function(n,t){return ct(t,16,[n])},J.xor=function(){for(var n=-1,t=arguments.length;++n<t;){var e=arguments[n];if(Te(e)||yt(e))var r=r?ft(rt(r,e).concat(rt(e,r))):e}return r||[]},J.zip=Kt,J.zipObject=Lt,J.collect=Rt,J.drop=qt,J.each=St,J.eachRight=Et,J.extend=U,J.methods=bt,J.object=Lt,J.select=Nt,J.tail=qt,J.unique=Pt,J.unzip=Kt,Gt(J),J.clone=function(n,t,e,r){return typeof t!=\"boolean\"&&null!=t&&(r=e,e=t,t=false),Z(n,t,typeof e==\"function\"&&tt(e,r,1))\n},J.cloneDeep=function(n,t,e){return Z(n,true,typeof t==\"function\"&&tt(t,e,1))},J.contains=Ct,J.escape=function(n){return null==n?\"\":oe(n).replace(ze,pt)},J.every=Ot,J.find=It,J.findIndex=function(n,t,e){var r=-1,u=n?n.length:0;for(t=J.createCallback(t,e,3);++r<u;)if(t(n[r],r,n))return r;return-1},J.findKey=function(n,t,e){var r;return t=J.createCallback(t,e,3),h(n,function(n,e,u){return t(n,e,u)?(r=e,false):void 0}),r},J.findLast=function(n,t,e){var r;return t=J.createCallback(t,e,3),Et(n,function(n,e,u){return t(n,e,u)?(r=n,false):void 0\n}),r},J.findLastIndex=function(n,t,e){var r=n?n.length:0;for(t=J.createCallback(t,e,3);r--;)if(t(n[r],r,n))return r;return-1},J.findLastKey=function(n,t,e){var r;return t=J.createCallback(t,e,3),mt(n,function(n,e,u){return t(n,e,u)?(r=e,false):void 0}),r},J.has=function(n,t){return n?me.call(n,t):false},J.identity=Ut,J.indexOf=Wt,J.isArguments=yt,J.isArray=Te,J.isBoolean=function(n){return true===n||false===n||n&&typeof n==\"object\"&&ce.call(n)==T||false},J.isDate=function(n){return n&&typeof n==\"object\"&&ce.call(n)==F||false\n},J.isElement=function(n){return n&&1===n.nodeType||false},J.isEmpty=function(n){var t=true;if(!n)return t;var e=ce.call(n),r=n.length;return e==$||e==P||e==D||e==q&&typeof r==\"number\"&&dt(n.splice)?!r:(h(n,function(){return t=false}),t)},J.isEqual=function(n,t,e,r){return ot(n,t,typeof e==\"function\"&&tt(e,r,2))},J.isFinite=function(n){return Ce(n)&&!Oe(parseFloat(n))},J.isFunction=dt,J.isNaN=function(n){return jt(n)&&n!=+n},J.isNull=function(n){return null===n},J.isNumber=jt,J.isObject=wt,J.isPlainObject=Pe,J.isRegExp=function(n){return n&&typeof n==\"object\"&&ce.call(n)==z||false\n},J.isString=kt,J.isUndefined=function(n){return typeof n==\"undefined\"},J.lastIndexOf=function(n,t,e){var r=n?n.length:0;for(typeof e==\"number\"&&(r=(0>e?Ie(0,r+e):Se(e,r-1))+1);r--;)if(n[r]===t)return r;return-1},J.mixin=Gt,J.noConflict=function(){return e._=le,this},J.noop=Ht,J.now=Ue,J.parseInt=Ge,J.random=function(n,t,e){var r=null==n,u=null==t;return null==e&&(typeof n==\"boolean\"&&u?(e=n,n=1):u||typeof t!=\"boolean\"||(e=t,u=true)),r&&u&&(t=1),n=+n||0,u?(t=n,n=0):t=+t||0,e||n%1||t%1?(e=Re(),Se(n+e*(t-n+parseFloat(\"1e-\"+((e+\"\").length-1))),t)):at(n,t)\n},J.reduce=Dt,J.reduceRight=$t,J.result=function(n,t){if(n){var e=n[t];return dt(e)?n[t]():e}},J.runInContext=s,J.size=function(n){var t=n?n.length:0;return typeof t==\"number\"?t:Fe(n).length},J.some=Ft,J.sortedIndex=zt,J.template=function(n,t,e){var r=J.templateSettings;n=oe(n||\"\"),e=_({},e,r);var u,o=_({},e.imports,r.imports),r=Fe(o),o=xt(o),a=0,f=e.interpolate||S,l=\"__p+='\",f=ue((e.escape||S).source+\"|\"+f.source+\"|\"+(f===N?x:S).source+\"|\"+(e.evaluate||S).source+\"|$\",\"g\");n.replace(f,function(t,e,r,o,f,c){return r||(r=o),l+=n.slice(a,c).replace(R,i),e&&(l+=\"'+__e(\"+e+\")+'\"),f&&(u=true,l+=\"';\"+f+\";\\n__p+='\"),r&&(l+=\"'+((__t=(\"+r+\"))==null?'':__t)+'\"),a=c+t.length,t\n}),l+=\"';\",f=e=e.variable,f||(e=\"obj\",l=\"with(\"+e+\"){\"+l+\"}\"),l=(u?l.replace(w,\"\"):l).replace(j,\"$1\").replace(k,\"$1;\"),l=\"function(\"+e+\"){\"+(f?\"\":e+\"||(\"+e+\"={});\")+\"var __t,__p='',__e=_.escape\"+(u?\",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}\":\";\")+l+\"return __p}\";try{var c=ne(r,\"return \"+l).apply(v,o)}catch(p){throw p.source=l,p}return t?c(t):(c.source=l,c)},J.unescape=function(n){return null==n?\"\":oe(n).replace(qe,gt)},J.uniqueId=function(n){var t=++y;return oe(null==n?\"\":n)+t\n},J.all=Ot,J.any=Ft,J.detect=It,J.findWhere=It,J.foldl=Dt,J.foldr=$t,J.include=Ct,J.inject=Dt,Gt(function(){var n={};return h(J,function(t,e){J.prototype[e]||(n[e]=t)}),n}(),false),J.first=Bt,J.last=function(n,t,e){var r=0,u=n?n.length:0;if(typeof t!=\"number\"&&null!=t){var o=u;for(t=J.createCallback(t,e,3);o--&&t(n[o],o,n);)r++}else if(r=t,null==r||e)return n?n[u-1]:v;return p(n,Ie(0,u-r))},J.sample=function(n,t,e){return n&&typeof n.length!=\"number\"&&(n=xt(n)),null==t||e?n?n[at(0,n.length-1)]:v:(n=Tt(n),n.length=Se(Ie(0,t),n.length),n)\n},J.take=Bt,J.head=Bt,h(J,function(n,t){var e=\"sample\"!==t;J.prototype[t]||(J.prototype[t]=function(t,r){var u=this.__chain__,o=n(this.__wrapped__,t,r);return u||null!=t&&(!r||e&&typeof t==\"function\")?new Q(o,u):o})}),J.VERSION=\"2.4.1\",J.prototype.chain=function(){return this.__chain__=true,this},J.prototype.toString=function(){return oe(this.__wrapped__)},J.prototype.value=Qt,J.prototype.valueOf=Qt,St([\"join\",\"pop\",\"shift\"],function(n){var t=ae[n];J.prototype[n]=function(){var n=this.__chain__,e=t.apply(this.__wrapped__,arguments);\nreturn n?new Q(e,n):e}}),St([\"push\",\"reverse\",\"sort\",\"unshift\"],function(n){var t=ae[n];J.prototype[n]=function(){return t.apply(this.__wrapped__,arguments),this}}),St([\"concat\",\"slice\",\"splice\"],function(n){var t=ae[n];J.prototype[n]=function(){return new Q(t.apply(this.__wrapped__,arguments),this.__chain__)}}),J}var v,h=[],g=[],y=0,m=+new Date+\"\",b=75,_=40,d=\" \\t\\x0B\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\",w=/\\b__p\\+='';/g,j=/\\b(__p\\+=)''\\+/g,k=/(__e\\(.*?\\)|\\b__t\\))\\+'';/g,x=/\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g,C=/\\w*$/,O=/^\\s*function[ \\n\\r\\t]+\\w/,N=/<%=([\\s\\S]+?)%>/g,I=RegExp(\"^[\"+d+\"]*0+(?=.$)\"),S=/($^)/,E=/\\bthis\\b/,R=/['\\n\\r\\t\\u2028\\u2029\\\\]/g,A=\"Array Boolean Date Function Math Number Object RegExp String _ attachEvent clearTimeout isFinite isNaN parseInt setTimeout\".split(\" \"),D=\"[object Arguments]\",$=\"[object Array]\",T=\"[object Boolean]\",F=\"[object Date]\",B=\"[object Function]\",W=\"[object Number]\",q=\"[object Object]\",z=\"[object RegExp]\",P=\"[object String]\",K={};\nK[B]=false,K[D]=K[$]=K[T]=K[F]=K[W]=K[q]=K[z]=K[P]=true;var L={leading:false,maxWait:0,trailing:false},M={configurable:false,enumerable:false,value:null,writable:false},V={\"boolean\":false,\"function\":true,object:true,number:false,string:false,undefined:false},U={\"\\\\\":\"\\\\\",\"'\":\"'\",\"\\n\":\"n\",\"\\r\":\"r\",\"\\t\":\"t\",\"\\u2028\":\"u2028\",\"\\u2029\":\"u2029\"},G=V[typeof window]&&window||this,H=V[typeof exports]&&exports&&!exports.nodeType&&exports,J=V[typeof module]&&module&&!module.nodeType&&module,Q=J&&J.exports===H&&H,X=V[typeof global]&&global;!X||X.global!==X&&X.window!==X||(G=X);\nvar Y=s();typeof define==\"function\"&&typeof define.amd==\"object\"&&define.amd?(G._=Y, define(function(){return Y})):H&&J?Q?(J.exports=Y)._=Y:H._=Y:G._=Y}).call(this);","/*!\n * Modernizr v2.8.3\n * www.modernizr.com\n *\n * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton\n * Available under the BSD and MIT licenses: www.modernizr.com/license/\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in\n * the current UA and makes the results available to you in two ways:\n * as properties on a global Modernizr object, and as classes on the\n * <html> element. This information allows you to progressively enhance\n * your pages with a granular level of control over the experience.\n *\n * Modernizr has an optional (not included) conditional resource loader\n * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).\n * To get a build that includes Modernizr.load(), as well as choosing\n * which tests to include, go to www.modernizr.com/download/\n *\n * Authors        Faruk Ates, Paul Irish, Alex Sexton\n * Contributors   Ryan Seddon, Ben Alman\n */\n\nwindow.Modernizr = (function( window, document, undefined ) {\n\n    var version = '2.8.3',\n\n    Modernizr = {},\n\n    /*>>cssclasses*/\n    // option for enabling the HTML classes to be added\n    enableClasses = true,\n    /*>>cssclasses*/\n\n    docElement = document.documentElement,\n\n    /**\n     * Create our \"modernizr\" element that we do most feature tests on.\n     */\n    mod = 'modernizr',\n    modElem = document.createElement(mod),\n    mStyle = modElem.style,\n\n    /**\n     * Create the input element for various Web Forms feature tests.\n     */\n    inputElem /*>>inputelem*/ = document.createElement('input') /*>>inputelem*/ ,\n\n    /*>>smile*/\n    smile = ':)',\n    /*>>smile*/\n\n    toString = {}.toString,\n\n    // TODO :: make the prefixes more granular\n    /*>>prefixes*/\n    // List of property values to set for css tests. See ticket #21\n    prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),\n    /*>>prefixes*/\n\n    /*>>domprefixes*/\n    // Following spec is to expose vendor-specific style properties as:\n    //   elem.style.WebkitBorderRadius\n    // and the following would be incorrect:\n    //   elem.style.webkitBorderRadius\n\n    // Webkit ghosts their properties in lowercase but Opera & Moz do not.\n    // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n    //   erik.eae.net/archives/2008/03/10/21.48.10/\n\n    // More here: github.com/Modernizr/Modernizr/issues/issue/21\n    omPrefixes = 'Webkit Moz O ms',\n\n    cssomPrefixes = omPrefixes.split(' '),\n\n    domPrefixes = omPrefixes.toLowerCase().split(' '),\n    /*>>domprefixes*/\n\n    /*>>ns*/\n    ns = {'svg': 'http://www.w3.org/2000/svg'},\n    /*>>ns*/\n\n    tests = {},\n    inputs = {},\n    attrs = {},\n\n    classes = [],\n\n    slice = classes.slice,\n\n    featureName, // used in testing loop\n\n\n    /*>>teststyles*/\n    // Inject element with style element and some CSS rules\n    injectElementWithStyles = function( rule, callback, nodes, testnames ) {\n\n      var style, ret, node, docOverflow,\n          div = document.createElement('div'),\n          // After page load injecting a fake body doesn't work so check if body exists\n          body = document.body,\n          // IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.\n          fakeBody = body || document.createElement('body');\n\n      if ( parseInt(nodes, 10) ) {\n          // In order not to give false positives we create a node for each test\n          // This also allows the method to scale for unspecified uses\n          while ( nodes-- ) {\n              node = document.createElement('div');\n              node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n              div.appendChild(node);\n          }\n      }\n\n      // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed\n      // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element\n      // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.\n      // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx\n      // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277\n      style = ['&#173;','<style id=\"s', mod, '\">', rule, '</style>'].join('');\n      div.id = mod;\n      // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n      // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n      (body ? div : fakeBody).innerHTML += style;\n      fakeBody.appendChild(div);\n      if ( !body ) {\n          //avoid crashing IE8, if background image is used\n          fakeBody.style.background = '';\n          //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n          fakeBody.style.overflow = 'hidden';\n          docOverflow = docElement.style.overflow;\n          docElement.style.overflow = 'hidden';\n          docElement.appendChild(fakeBody);\n      }\n\n      ret = callback(div, rule);\n      // If this is done after page load we don't want to remove the body so check if body exists\n      if ( !body ) {\n          fakeBody.parentNode.removeChild(fakeBody);\n          docElement.style.overflow = docOverflow;\n      } else {\n          div.parentNode.removeChild(div);\n      }\n\n      return !!ret;\n\n    },\n    /*>>teststyles*/\n\n    /*>>mq*/\n    // adapted from matchMedia polyfill\n    // by Scott Jehl and Paul Irish\n    // gist.github.com/786768\n    testMediaQuery = function( mq ) {\n\n      var matchMedia = window.matchMedia || window.msMatchMedia;\n      if ( matchMedia ) {\n        return matchMedia(mq) && matchMedia(mq).matches || false;\n      }\n\n      var bool;\n\n      injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function( node ) {\n        bool = (window.getComputedStyle ?\n                  getComputedStyle(node, null) :\n                  node.currentStyle)['position'] == 'absolute';\n      });\n\n      return bool;\n\n     },\n     /*>>mq*/\n\n\n    /*>>hasevent*/\n    //\n    // isEventSupported determines if a given element supports the given event\n    // kangax.github.com/iseventsupported/\n    //\n    // The following results are known incorrects:\n    //   Modernizr.hasEvent(\"webkitTransitionEnd\", elem) // false negative\n    //   Modernizr.hasEvent(\"textInput\") // in Webkit. github.com/Modernizr/Modernizr/issues/333\n    //   ...\n    isEventSupported = (function() {\n\n      var TAGNAMES = {\n        'select': 'input', 'change': 'input',\n        'submit': 'form', 'reset': 'form',\n        'error': 'img', 'load': 'img', 'abort': 'img'\n      };\n\n      function isEventSupported( eventName, element ) {\n\n        element = element || document.createElement(TAGNAMES[eventName] || 'div');\n        eventName = 'on' + eventName;\n\n        // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and \"resize\", whereas `in` \"catches\" those\n        var isSupported = eventName in element;\n\n        if ( !isSupported ) {\n          // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element\n          if ( !element.setAttribute ) {\n            element = document.createElement('div');\n          }\n          if ( element.setAttribute && element.removeAttribute ) {\n            element.setAttribute(eventName, '');\n            isSupported = is(element[eventName], 'function');\n\n            // If property was created, \"remove it\" (by setting value to `undefined`)\n            if ( !is(element[eventName], 'undefined') ) {\n              element[eventName] = undefined;\n            }\n            element.removeAttribute(eventName);\n          }\n        }\n\n        element = null;\n        return isSupported;\n      }\n      return isEventSupported;\n    })(),\n    /*>>hasevent*/\n\n    // TODO :: Add flag for hasownprop ? didn't last time\n\n    // hasOwnProperty shim by kangax needed for Safari 2.0 support\n    _hasOwnProperty = ({}).hasOwnProperty, hasOwnProp;\n\n    if ( !is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined') ) {\n      hasOwnProp = function (object, property) {\n        return _hasOwnProperty.call(object, property);\n      };\n    }\n    else {\n      hasOwnProp = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));\n      };\n    }\n\n    // Adapted from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js\n    // es5.github.com/#x15.3.4.5\n\n    if (!Function.prototype.bind) {\n      Function.prototype.bind = function bind(that) {\n\n        var target = this;\n\n        if (typeof target != \"function\") {\n            throw new TypeError();\n        }\n\n        var args = slice.call(arguments, 1),\n            bound = function () {\n\n            if (this instanceof bound) {\n\n              var F = function(){};\n              F.prototype = target.prototype;\n              var self = new F();\n\n              var result = target.apply(\n                  self,\n                  args.concat(slice.call(arguments))\n              );\n              if (Object(result) === result) {\n                  return result;\n              }\n              return self;\n\n            } else {\n\n              return target.apply(\n                  that,\n                  args.concat(slice.call(arguments))\n              );\n\n            }\n\n        };\n\n        return bound;\n      };\n    }\n\n    /**\n     * setCss applies given styles to the Modernizr DOM node.\n     */\n    function setCss( str ) {\n        mStyle.cssText = str;\n    }\n\n    /**\n     * setCssAll extrapolates all vendor-specific css strings.\n     */\n    function setCssAll( str1, str2 ) {\n        return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));\n    }\n\n    /**\n     * is returns a boolean for if typeof obj is exactly type.\n     */\n    function is( obj, type ) {\n        return typeof obj === type;\n    }\n\n    /**\n     * contains returns a boolean for if substr is found within str.\n     */\n    function contains( str, substr ) {\n        return !!~('' + str).indexOf(substr);\n    }\n\n    /*>>testprop*/\n\n    // testProps is a generic CSS / DOM property test.\n\n    // In testing support for a given CSS property, it's legit to test:\n    //    `elem.style[styleName] !== undefined`\n    // If the property is supported it will return an empty string,\n    // if unsupported it will return undefined.\n\n    // We'll take advantage of this quick test and skip setting a style\n    // on our modernizr element, but instead just testing undefined vs\n    // empty string.\n\n    // Because the testing of the CSS property names (with \"-\", as\n    // opposed to the camelCase DOM properties) is non-portable and\n    // non-standard but works in WebKit and IE (but not Gecko or Opera),\n    // we explicitly reject properties with dashes so that authors\n    // developing in WebKit or IE first don't end up with\n    // browser-specific content by accident.\n\n    function testProps( props, prefixed ) {\n        for ( var i in props ) {\n            var prop = props[i];\n            if ( !contains(prop, \"-\") && mStyle[prop] !== undefined ) {\n                return prefixed == 'pfx' ? prop : true;\n            }\n        }\n        return false;\n    }\n    /*>>testprop*/\n\n    // TODO :: add testDOMProps\n    /**\n     * testDOMProps is a generic DOM property test; if a browser supports\n     *   a certain property, it won't return undefined for it.\n     */\n    function testDOMProps( props, obj, elem ) {\n        for ( var i in props ) {\n            var item = obj[props[i]];\n            if ( item !== undefined) {\n\n                // return the property name as a string\n                if (elem === false) return props[i];\n\n                // let's bind a function\n                if (is(item, 'function')){\n                  // default to autobind unless override\n                  return item.bind(elem || obj);\n                }\n\n                // return the unbound function or obj or value\n                return item;\n            }\n        }\n        return false;\n    }\n\n    /*>>testallprops*/\n    /**\n     * testPropsAll tests a list of DOM properties we want to check against.\n     *   We specify literally ALL possible (known and/or likely) properties on\n     *   the element including the non-vendor prefixed one, for forward-\n     *   compatibility.\n     */\n    function testPropsAll( prop, prefixed, elem ) {\n\n        var ucProp  = prop.charAt(0).toUpperCase() + prop.slice(1),\n            props   = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n        // did they call .prefixed('boxSizing') or are we just testing a prop?\n        if(is(prefixed, \"string\") || is(prefixed, \"undefined\")) {\n          return testProps(props, prefixed);\n\n        // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n        } else {\n          props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n          return testDOMProps(props, prefixed, elem);\n        }\n    }\n    /*>>testallprops*/\n\n\n    /**\n     * Tests\n     * -----\n     */\n\n    // The *new* flexbox\n    // dev.w3.org/csswg/css3-flexbox\n\n    tests['flexbox'] = function() {\n      return testPropsAll('flexWrap');\n    };\n\n    // The *old* flexbox\n    // www.w3.org/TR/2009/WD-css3-flexbox-20090723/\n\n    tests['flexboxlegacy'] = function() {\n        return testPropsAll('boxDirection');\n    };\n\n    // On the S60 and BB Storm, getContext exists, but always returns undefined\n    // so we actually have to call getContext() to verify\n    // github.com/Modernizr/Modernizr/issues/issue/97/\n\n    tests['canvas'] = function() {\n        var elem = document.createElement('canvas');\n        return !!(elem.getContext && elem.getContext('2d'));\n    };\n\n    tests['canvastext'] = function() {\n        return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));\n    };\n\n    // webk.it/70117 is tracking a legit WebGL feature detect proposal\n\n    // We do a soft detect which may false positive in order to avoid\n    // an expensive context creation: bugzil.la/732441\n\n    tests['webgl'] = function() {\n        return !!window.WebGLRenderingContext;\n    };\n\n    /*\n     * The Modernizr.touch test only indicates if the browser supports\n     *    touch events, which does not necessarily reflect a touchscreen\n     *    device, as evidenced by tablets running Windows 7 or, alas,\n     *    the Palm Pre / WebOS (touch) phones.\n     *\n     * Additionally, Chrome (desktop) used to lie about its support on this,\n     *    but that has since been rectified: crbug.com/36415\n     *\n     * We also test for Firefox 4 Multitouch Support.\n     *\n     * For more info, see: modernizr.github.com/Modernizr/touch.html\n     */\n\n    tests['touch'] = function() {\n        var bool;\n\n        if(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {\n          bool = true;\n        } else {\n          injectElementWithStyles(['@media (',prefixes.join('touch-enabled),('),mod,')','{#modernizr{top:9px;position:absolute}}'].join(''), function( node ) {\n            bool = node.offsetTop === 9;\n          });\n        }\n\n        return bool;\n    };\n\n\n    // geolocation is often considered a trivial feature detect...\n    // Turns out, it's quite tricky to get right:\n    //\n    // Using !!navigator.geolocation does two things we don't want. It:\n    //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513\n    //   2. Disables page caching in WebKit: webk.it/43956\n    //\n    // Meanwhile, in Firefox < 8, an about:config setting could expose\n    // a false positive that would throw an exception: bugzil.la/688158\n\n    tests['geolocation'] = function() {\n        return 'geolocation' in navigator;\n    };\n\n\n    tests['postmessage'] = function() {\n      return !!window.postMessage;\n    };\n\n\n    // Chrome incognito mode used to throw an exception when using openDatabase\n    // It doesn't anymore.\n    tests['websqldatabase'] = function() {\n      return !!window.openDatabase;\n    };\n\n    // Vendors had inconsistent prefixing with the experimental Indexed DB:\n    // - Webkit's implementation is accessible through webkitIndexedDB\n    // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB\n    // For speed, we don't test the legacy (and beta-only) indexedDB\n    tests['indexedDB'] = function() {\n      return !!testPropsAll(\"indexedDB\", window);\n    };\n\n    // documentMode logic from YUI to filter out IE8 Compat Mode\n    //   which false positives.\n    tests['hashchange'] = function() {\n      return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);\n    };\n\n    // Per 1.6:\n    // This used to be Modernizr.historymanagement but the longer\n    // name has been deprecated in favor of a shorter and property-matching one.\n    // The old API is still available in 1.6, but as of 2.0 will throw a warning,\n    // and in the first release thereafter disappear entirely.\n    tests['history'] = function() {\n      return !!(window.history && history.pushState);\n    };\n\n    tests['draganddrop'] = function() {\n        var div = document.createElement('div');\n        return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);\n    };\n\n    // FF3.6 was EOL'ed on 4/24/12, but the ESR version of FF10\n    // will be supported until FF19 (2/12/13), at which time, ESR becomes FF17.\n    // FF10 still uses prefixes, so check for it until then.\n    // for more ESR info, see: mozilla.org/en-US/firefox/organizations/faq/\n    tests['websockets'] = function() {\n        return 'WebSocket' in window || 'MozWebSocket' in window;\n    };\n\n\n    // css-tricks.com/rgba-browser-support/\n    tests['rgba'] = function() {\n        // Set an rgba() color and check the returned value\n\n        setCss('background-color:rgba(150,255,150,.5)');\n\n        return contains(mStyle.backgroundColor, 'rgba');\n    };\n\n    tests['hsla'] = function() {\n        // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,\n        //   except IE9 who retains it as hsla\n\n        setCss('background-color:hsla(120,40%,100%,.5)');\n\n        return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');\n    };\n\n    tests['multiplebgs'] = function() {\n        // Setting multiple images AND a color on the background shorthand property\n        //  and then querying the style.background property value for the number of\n        //  occurrences of \"url(\" is a reliable method for detecting ACTUAL support for this!\n\n        setCss('background:url(https://),url(https://),red url(https://)');\n\n        // If the UA supports multiple backgrounds, there should be three occurrences\n        //   of the string \"url(\" in the return value for elemStyle.background\n\n        return (/(url\\s*\\(.*?){3}/).test(mStyle.background);\n    };\n\n\n\n    // this will false positive in Opera Mini\n    //   github.com/Modernizr/Modernizr/issues/396\n\n    tests['backgroundsize'] = function() {\n        return testPropsAll('backgroundSize');\n    };\n\n    tests['borderimage'] = function() {\n        return testPropsAll('borderImage');\n    };\n\n\n    // Super comprehensive table about all the unique implementations of\n    // border-radius: muddledramblings.com/table-of-css3-border-radius-compliance\n\n    tests['borderradius'] = function() {\n        return testPropsAll('borderRadius');\n    };\n\n    // WebOS unfortunately false positives on this test.\n    tests['boxshadow'] = function() {\n        return testPropsAll('boxShadow');\n    };\n\n    // FF3.0 will false positive on this test\n    tests['textshadow'] = function() {\n        return document.createElement('div').style.textShadow === '';\n    };\n\n\n    tests['opacity'] = function() {\n        // Browsers that actually have CSS Opacity implemented have done so\n        //  according to spec, which means their return values are within the\n        //  range of [0.0,1.0] - including the leading zero.\n\n        setCssAll('opacity:.55');\n\n        // The non-literal . in this regex is intentional:\n        //   German Chrome returns this value as 0,55\n        // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632\n        return (/^0.55$/).test(mStyle.opacity);\n    };\n\n\n    // Note, Android < 4 will pass this test, but can only animate\n    //   a single property at a time\n    //   goo.gl/v3V4Gp\n    tests['cssanimations'] = function() {\n        return testPropsAll('animationName');\n    };\n\n\n    tests['csscolumns'] = function() {\n        return testPropsAll('columnCount');\n    };\n\n\n    tests['cssgradients'] = function() {\n        /**\n         * For CSS Gradients syntax, please see:\n         * webkit.org/blog/175/introducing-css-gradients/\n         * developer.mozilla.org/en/CSS/-moz-linear-gradient\n         * developer.mozilla.org/en/CSS/-moz-radial-gradient\n         * dev.w3.org/csswg/css3-images/#gradients-\n         */\n\n        var str1 = 'background-image:',\n            str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',\n            str3 = 'linear-gradient(left top,#9f9, white);';\n\n        setCss(\n             // legacy webkit syntax (FIXME: remove when syntax not in use anymore)\n              (str1 + '-webkit- '.split(' ').join(str2 + str1) +\n             // standard syntax             // trailing 'background-image:'\n              prefixes.join(str3 + str1)).slice(0, -str1.length)\n        );\n\n        return contains(mStyle.backgroundImage, 'gradient');\n    };\n\n\n    tests['cssreflections'] = function() {\n        return testPropsAll('boxReflect');\n    };\n\n\n    tests['csstransforms'] = function() {\n        return !!testPropsAll('transform');\n    };\n\n\n    tests['csstransforms3d'] = function() {\n\n        var ret = !!testPropsAll('perspective');\n\n        // Webkit's 3D transforms are passed off to the browser's own graphics renderer.\n        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in\n        //   some conditions. As a result, Webkit typically recognizes the syntax but\n        //   will sometimes throw a false positive, thus we must do a more thorough check:\n        if ( ret && 'webkitPerspective' in docElement.style ) {\n\n          // Webkit allows this media query to succeed only if the feature is enabled.\n          // `@media (transform-3d),(-webkit-transform-3d){ ... }`\n          injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function( node, rule ) {\n            ret = node.offsetLeft === 9 && node.offsetHeight === 3;\n          });\n        }\n        return ret;\n    };\n\n\n    tests['csstransitions'] = function() {\n        return testPropsAll('transition');\n    };\n\n\n    /*>>fontface*/\n    // @font-face detection routine by Diego Perini\n    // javascript.nwbox.com/CSSSupport/\n\n    // false positives:\n    //   WebOS github.com/Modernizr/Modernizr/issues/342\n    //   WP7   github.com/Modernizr/Modernizr/issues/538\n    tests['fontface'] = function() {\n        var bool;\n\n        injectElementWithStyles('@font-face {font-family:\"font\";src:url(\"https://\")}', function( node, rule ) {\n          var style = document.getElementById('smodernizr'),\n              sheet = style.sheet || style.styleSheet,\n              cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';\n\n          bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;\n        });\n\n        return bool;\n    };\n    /*>>fontface*/\n\n    // CSS generated content detection\n    tests['generatedcontent'] = function() {\n        var bool;\n\n        injectElementWithStyles(['#',mod,'{font:0/0 a}#',mod,':after{content:\"',smile,'\";visibility:hidden;font:3px/1 a}'].join(''), function( node ) {\n          bool = node.offsetHeight >= 3;\n        });\n\n        return bool;\n    };\n\n\n\n    // These tests evaluate support of the video/audio elements, as well as\n    // testing what types of content they support.\n    //\n    // We're using the Boolean constructor here, so that we can extend the value\n    // e.g.  Modernizr.video     // true\n    //       Modernizr.video.ogg // 'probably'\n    //\n    // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845\n    //                     thx to NielsLeenheer and zcorpan\n\n    // Note: in some older browsers, \"no\" was a return value instead of empty string.\n    //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2\n    //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5\n\n    tests['video'] = function() {\n        var elem = document.createElement('video'),\n            bool = false;\n\n        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224\n        try {\n            if ( bool = !!elem.canPlayType ) {\n                bool      = new Boolean(bool);\n                bool.ogg  = elem.canPlayType('video/ogg; codecs=\"theora\"')      .replace(/^no$/,'');\n\n                // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546\n                bool.h264 = elem.canPlayType('video/mp4; codecs=\"avc1.42E01E\"') .replace(/^no$/,'');\n\n                bool.webm = elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/,'');\n            }\n\n        } catch(e) { }\n\n        return bool;\n    };\n\n    tests['audio'] = function() {\n        var elem = document.createElement('audio'),\n            bool = false;\n\n        try {\n            if ( bool = !!elem.canPlayType ) {\n                bool      = new Boolean(bool);\n                bool.ogg  = elem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/,'');\n                bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');\n\n                // Mimetypes accepted:\n                //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\n                //   bit.ly/iphoneoscodecs\n                bool.wav  = elem.canPlayType('audio/wav; codecs=\"1\"')     .replace(/^no$/,'');\n                bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||\n                              elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');\n            }\n        } catch(e) { }\n\n        return bool;\n    };\n\n\n    // In FF4, if disabled, window.localStorage should === null.\n\n    // Normally, we could not test that directly and need to do a\n    //   `('localStorage' in window) && ` test first because otherwise Firefox will\n    //   throw bugzil.la/365772 if cookies are disabled\n\n    // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem\n    // will throw the exception:\n    //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.\n    // Peculiarly, getItem and removeItem calls do not throw.\n\n    // Because we are forced to try/catch this, we'll go aggressive.\n\n    // Just FWIW: IE8 Compat mode supports these features completely:\n    //   www.quirksmode.org/dom/html5.html\n    // But IE8 doesn't support either with local files\n\n    tests['localstorage'] = function() {\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    tests['sessionstorage'] = function() {\n        try {\n            sessionStorage.setItem(mod, mod);\n            sessionStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n\n    tests['webworkers'] = function() {\n        return !!window.Worker;\n    };\n\n\n    tests['applicationcache'] = function() {\n        return !!window.applicationCache;\n    };\n\n\n    // Thanks to Erik Dahlstrom\n    tests['svg'] = function() {\n        return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;\n    };\n\n    // specifically for SVG inline in HTML, not within XHTML\n    // test page: paulirish.com/demo/inline-svg\n    tests['inlinesvg'] = function() {\n      var div = document.createElement('div');\n      div.innerHTML = '<svg/>';\n      return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;\n    };\n\n    // SVG SMIL animation\n    tests['smil'] = function() {\n        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));\n    };\n\n    // This test is only for clip paths in SVG proper, not clip paths on HTML content\n    // demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg\n\n    // However read the comments to dig into applying SVG clippaths to HTML content here:\n    //   github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491\n    tests['svgclippaths'] = function() {\n        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));\n    };\n\n    /*>>webforms*/\n    // input features and input types go directly onto the ret object, bypassing the tests loop.\n    // Hold this guy to execute in a moment.\n    function webforms() {\n        /*>>input*/\n        // Run through HTML5's new input attributes to see if the UA understands any.\n        // We're using f which is the <input> element created early on\n        // Mike Taylr has created a comprehensive resource for testing these attributes\n        //   when applied to all input types:\n        //   miketaylr.com/code/input-type-attr.html\n        // spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n\n        // Only input placeholder is tested while textarea's placeholder is not.\n        // Currently Safari 4 and Opera 11 have support only for the input placeholder\n        // Both tests are available in feature-detects/forms-placeholder.js\n        Modernizr['input'] = (function( props ) {\n            for ( var i = 0, len = props.length; i < len; i++ ) {\n                attrs[ props[i] ] = !!(props[i] in inputElem);\n            }\n            if (attrs.list){\n              // safari false positive's on datalist: webk.it/74252\n              // see also github.com/Modernizr/Modernizr/issues/146\n              attrs.list = !!(document.createElement('datalist') && window.HTMLDataListElement);\n            }\n            return attrs;\n        })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));\n        /*>>input*/\n\n        /*>>inputtypes*/\n        // Run through HTML5's new input types to see if the UA understands any.\n        //   This is put behind the tests runloop because it doesn't return a\n        //   true/false like all the other tests; instead, it returns an object\n        //   containing each input type with its corresponding true/false value\n\n        // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/\n        Modernizr['inputtypes'] = (function(props) {\n\n            for ( var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++ ) {\n\n                inputElem.setAttribute('type', inputElemType = props[i]);\n                bool = inputElem.type !== 'text';\n\n                // We first check to see if the type we give it sticks..\n                // If the type does, we feed it a textual value, which shouldn't be valid.\n                // If the value doesn't stick, we know there's input sanitization which infers a custom UI\n                if ( bool ) {\n\n                    inputElem.value         = smile;\n                    inputElem.style.cssText = 'position:absolute;visibility:hidden;';\n\n                    if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {\n\n                      docElement.appendChild(inputElem);\n                      defaultView = document.defaultView;\n\n                      // Safari 2-4 allows the smiley as a value, despite making a slider\n                      bool =  defaultView.getComputedStyle &&\n                              defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&\n                              // Mobile android web browser has false positive, so must\n                              // check the height to see if the widget is actually there.\n                              (inputElem.offsetHeight !== 0);\n\n                      docElement.removeChild(inputElem);\n\n                    } else if ( /^(search|tel)$/.test(inputElemType) ){\n                      // Spec doesn't define any special parsing or detectable UI\n                      //   behaviors so we pass these through as true\n\n                      // Interestingly, opera fails the earlier test, so it doesn't\n                      //  even make it here.\n\n                    } else if ( /^(url|email)$/.test(inputElemType) ) {\n                      // Real url and email support comes with prebaked validation.\n                      bool = inputElem.checkValidity && inputElem.checkValidity() === false;\n\n                    } else {\n                      // If the upgraded input compontent rejects the :) text, we got a winner\n                      bool = inputElem.value != smile;\n                    }\n                }\n\n                inputs[ props[i] ] = !!bool;\n            }\n            return inputs;\n        })('search tel url email datetime date month week time datetime-local number range color'.split(' '));\n        /*>>inputtypes*/\n    }\n    /*>>webforms*/\n\n\n    // End of test definitions\n    // -----------------------\n\n\n\n    // Run through all tests and detect their support in the current UA.\n    // todo: hypothetically we could be doing an array of tests and use a basic loop here.\n    for ( var feature in tests ) {\n        if ( hasOwnProp(tests, feature) ) {\n            // run the test, throw the return value into the Modernizr,\n            //   then based on that boolean, define an appropriate className\n            //   and push it into an array of classes we'll join later.\n            featureName  = feature.toLowerCase();\n            Modernizr[featureName] = tests[feature]();\n\n            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);\n        }\n    }\n\n    /*>>webforms*/\n    // input tests need to run.\n    Modernizr.input || webforms();\n    /*>>webforms*/\n\n\n    /**\n     * addTest allows the user to define their own feature tests\n     * the result will be added onto the Modernizr object,\n     * as well as an appropriate className set on the html element\n     *\n     * @param feature - String naming the feature\n     * @param test - Function returning true if feature is supported, false if not\n     */\n     Modernizr.addTest = function ( feature, test ) {\n       if ( typeof feature == 'object' ) {\n         for ( var key in feature ) {\n           if ( hasOwnProp( feature, key ) ) {\n             Modernizr.addTest( key, feature[ key ] );\n           }\n         }\n       } else {\n\n         feature = feature.toLowerCase();\n\n         if ( Modernizr[feature] !== undefined ) {\n           // we're going to quit if you're trying to overwrite an existing test\n           // if we were to allow it, we'd do this:\n           //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n           //   docElement.className = docElement.className.replace( re, '' );\n           // but, no rly, stuff 'em.\n           return Modernizr;\n         }\n\n         test = typeof test == 'function' ? test() : test;\n\n         if (typeof enableClasses !== \"undefined\" && enableClasses) {\n           docElement.className += ' ' + (test ? '' : 'no-') + feature;\n         }\n         Modernizr[feature] = test;\n\n       }\n\n       return Modernizr; // allow chaining.\n     };\n\n\n    // Reset modElem.cssText to nothing to reduce memory footprint.\n    setCss('');\n    modElem = inputElem = null;\n\n    /*>>shiv*/\n    /**\n     * @preserve HTML5 Shiv prev3.7.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed\n     */\n    ;(function(window, document) {\n        /*jshint evil:true */\n        /** version */\n        var version = '3.7.0';\n\n        /** Preset options */\n        var options = window.html5 || {};\n\n        /** Used to skip problem elements */\n        var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n\n        /** Not all elements can be cloned in IE **/\n        var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n\n        /** Detect whether the browser supports default html5 styles */\n        var supportsHtml5Styles;\n\n        /** Name of the expando, to work with multiple documents or to re-shiv one document */\n        var expando = '_html5shiv';\n\n        /** The id for the the documents expando */\n        var expanID = 0;\n\n        /** Cached data for each document */\n        var expandoData = {};\n\n        /** Detect whether the browser supports unknown elements */\n        var supportsUnknownElements;\n\n        (function() {\n          try {\n            var a = document.createElement('a');\n            a.innerHTML = '<xyz></xyz>';\n            //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n            supportsHtml5Styles = ('hidden' in a);\n\n            supportsUnknownElements = a.childNodes.length == 1 || (function() {\n              // assign a false positive if unable to shiv\n              (document.createElement)('a');\n              var frag = document.createDocumentFragment();\n              return (\n                typeof frag.cloneNode == 'undefined' ||\n                typeof frag.createDocumentFragment == 'undefined' ||\n                typeof frag.createElement == 'undefined'\n              );\n            }());\n          } catch(e) {\n            // assign a false positive if detection fails => unable to shiv\n            supportsHtml5Styles = true;\n            supportsUnknownElements = true;\n          }\n\n        }());\n\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * Creates a style sheet with the given CSS text and adds it to the document.\n         * @private\n         * @param {Document} ownerDocument The document.\n         * @param {String} cssText The CSS text.\n         * @returns {StyleSheet} The style element.\n         */\n        function addStyleSheet(ownerDocument, cssText) {\n          var p = ownerDocument.createElement('p'),\n          parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\n\n          p.innerHTML = 'x<style>' + cssText + '</style>';\n          return parent.insertBefore(p.lastChild, parent.firstChild);\n        }\n\n        /**\n         * Returns the value of `html5.elements` as an array.\n         * @private\n         * @returns {Array} An array of shived element node names.\n         */\n        function getElements() {\n          var elements = html5.elements;\n          return typeof elements == 'string' ? elements.split(' ') : elements;\n        }\n\n        /**\n         * Returns the data associated to the given document\n         * @private\n         * @param {Document} ownerDocument The document.\n         * @returns {Object} An object of data.\n         */\n        function getExpandoData(ownerDocument) {\n          var data = expandoData[ownerDocument[expando]];\n          if (!data) {\n            data = {};\n            expanID++;\n            ownerDocument[expando] = expanID;\n            expandoData[expanID] = data;\n          }\n          return data;\n        }\n\n        /**\n         * returns a shived element for the given nodeName and document\n         * @memberOf html5\n         * @param {String} nodeName name of the element\n         * @param {Document} ownerDocument The context document.\n         * @returns {Object} The shived element.\n         */\n        function createElement(nodeName, ownerDocument, data){\n          if (!ownerDocument) {\n            ownerDocument = document;\n          }\n          if(supportsUnknownElements){\n            return ownerDocument.createElement(nodeName);\n          }\n          if (!data) {\n            data = getExpandoData(ownerDocument);\n          }\n          var node;\n\n          if (data.cache[nodeName]) {\n            node = data.cache[nodeName].cloneNode();\n          } else if (saveClones.test(nodeName)) {\n            node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n          } else {\n            node = data.createElem(nodeName);\n          }\n\n          // Avoid adding some elements to fragments in IE < 9 because\n          // * Attributes like `name` or `type` cannot be set/changed once an element\n          //   is inserted into a document/fragment\n          // * Link elements with `src` attributes that are inaccessible, as with\n          //   a 403 response, will cause the tab/window to crash\n          // * Script elements appended to fragments will execute when their `src`\n          //   or `text` property is set\n          return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;\n        }\n\n        /**\n         * returns a shived DocumentFragment for the given document\n         * @memberOf html5\n         * @param {Document} ownerDocument The context document.\n         * @returns {Object} The shived DocumentFragment.\n         */\n        function createDocumentFragment(ownerDocument, data){\n          if (!ownerDocument) {\n            ownerDocument = document;\n          }\n          if(supportsUnknownElements){\n            return ownerDocument.createDocumentFragment();\n          }\n          data = data || getExpandoData(ownerDocument);\n          var clone = data.frag.cloneNode(),\n          i = 0,\n          elems = getElements(),\n          l = elems.length;\n          for(;i<l;i++){\n            clone.createElement(elems[i]);\n          }\n          return clone;\n        }\n\n        /**\n         * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n         * @private\n         * @param {Document|DocumentFragment} ownerDocument The document.\n         * @param {Object} data of the document.\n         */\n        function shivMethods(ownerDocument, data) {\n          if (!data.cache) {\n            data.cache = {};\n            data.createElem = ownerDocument.createElement;\n            data.createFrag = ownerDocument.createDocumentFragment;\n            data.frag = data.createFrag();\n          }\n\n\n          ownerDocument.createElement = function(nodeName) {\n            //abort shiv\n            if (!html5.shivMethods) {\n              return data.createElem(nodeName);\n            }\n            return createElement(nodeName, ownerDocument, data);\n          };\n\n          ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +\n                                                          'var n=f.cloneNode(),c=n.createElement;' +\n                                                          'h.shivMethods&&(' +\n                                                          // unroll the `createElement` calls\n                                                          getElements().join().replace(/[\\w\\-]+/g, function(nodeName) {\n            data.createElem(nodeName);\n            data.frag.createElement(nodeName);\n            return 'c(\"' + nodeName + '\")';\n          }) +\n            ');return n}'\n                                                         )(html5, data.frag);\n        }\n\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * Shivs the given document.\n         * @memberOf html5\n         * @param {Document} ownerDocument The document to shiv.\n         * @returns {Document} The shived document.\n         */\n        function shivDocument(ownerDocument) {\n          if (!ownerDocument) {\n            ownerDocument = document;\n          }\n          var data = getExpandoData(ownerDocument);\n\n          if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\n            data.hasCSS = !!addStyleSheet(ownerDocument,\n                                          // corrects block display not defined in IE6/7/8/9\n                                          'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +\n                                            // adds styling not present in IE6/7/8/9\n                                            'mark{background:#FF0;color:#000}' +\n                                            // hides non-rendered elements\n                                            'template{display:none}'\n                                         );\n          }\n          if (!supportsUnknownElements) {\n            shivMethods(ownerDocument, data);\n          }\n          return ownerDocument;\n        }\n\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * The `html5` object is exposed so that more elements can be shived and\n         * existing shiving can be detected on iframes.\n         * @type Object\n         * @example\n         *\n         * // options can be changed before the script is included\n         * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n         */\n        var html5 = {\n\n          /**\n           * An array or space separated string of node names of the elements to shiv.\n           * @memberOf html5\n           * @type Array|String\n           */\n          'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video',\n\n          /**\n           * current version of html5shiv\n           */\n          'version': version,\n\n          /**\n           * A flag to indicate that the HTML5 style sheet should be inserted.\n           * @memberOf html5\n           * @type Boolean\n           */\n          'shivCSS': (options.shivCSS !== false),\n\n          /**\n           * Is equal to true if a browser supports creating unknown/HTML5 elements\n           * @memberOf html5\n           * @type boolean\n           */\n          'supportsUnknownElements': supportsUnknownElements,\n\n          /**\n           * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n           * methods should be overwritten.\n           * @memberOf html5\n           * @type Boolean\n           */\n          'shivMethods': (options.shivMethods !== false),\n\n          /**\n           * A string to describe the type of `html5` object (\"default\" or \"default print\").\n           * @memberOf html5\n           * @type String\n           */\n          'type': 'default',\n\n          // shivs the document according to the specified `html5` object options\n          'shivDocument': shivDocument,\n\n          //creates a shived element\n          createElement: createElement,\n\n          //creates a shived documentFragment\n          createDocumentFragment: createDocumentFragment\n        };\n\n        /*--------------------------------------------------------------------------*/\n\n        // expose html5\n        window.html5 = html5;\n\n        // shiv the document\n        shivDocument(document);\n\n    }(this, document));\n    /*>>shiv*/\n\n    // Assign private properties to the return object with prefix\n    Modernizr._version      = version;\n\n    // expose these for the plugin API. Look in the source for how to join() them against your input\n    /*>>prefixes*/\n    Modernizr._prefixes     = prefixes;\n    /*>>prefixes*/\n    /*>>domprefixes*/\n    Modernizr._domPrefixes  = domPrefixes;\n    Modernizr._cssomPrefixes  = cssomPrefixes;\n    /*>>domprefixes*/\n\n    /*>>mq*/\n    // Modernizr.mq tests a given media query, live against the current state of the window\n    // A few important notes:\n    //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false\n    //   * A max-width or orientation query will be evaluated against the current state, which may change later.\n    //   * You must specify values. Eg. If you are testing support for the min-width media query use:\n    //       Modernizr.mq('(min-width:0)')\n    // usage:\n    // Modernizr.mq('only screen and (max-width:768)')\n    Modernizr.mq            = testMediaQuery;\n    /*>>mq*/\n\n    /*>>hasevent*/\n    // Modernizr.hasEvent() detects support for a given event, with an optional element to test on\n    // Modernizr.hasEvent('gesturestart', elem)\n    Modernizr.hasEvent      = isEventSupported;\n    /*>>hasevent*/\n\n    /*>>testprop*/\n    // Modernizr.testProp() investigates whether a given style property is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testProp('pointerEvents')\n    Modernizr.testProp      = function(prop){\n        return testProps([prop]);\n    };\n    /*>>testprop*/\n\n    /*>>testallprops*/\n    // Modernizr.testAllProps() investigates whether a given style property,\n    //   or any of its vendor-prefixed variants, is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testAllProps('boxSizing')\n    Modernizr.testAllProps  = testPropsAll;\n    /*>>testallprops*/\n\n\n    /*>>teststyles*/\n    // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards\n    // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })\n    Modernizr.testStyles    = injectElementWithStyles;\n    /*>>teststyles*/\n\n\n    /*>>prefixed*/\n    // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input\n    // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'\n\n    // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.\n    // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:\n    //\n    //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');\n\n    // If you're trying to ascertain which transition end event to bind to, you might do something like...\n    //\n    //     var transEndEventNames = {\n    //       'WebkitTransition' : 'webkitTransitionEnd',\n    //       'MozTransition'    : 'transitionend',\n    //       'OTransition'      : 'oTransitionEnd',\n    //       'msTransition'     : 'MSTransitionEnd',\n    //       'transition'       : 'transitionend'\n    //     },\n    //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];\n\n    Modernizr.prefixed      = function(prop, obj, elem){\n      if(!obj) {\n        return testPropsAll(prop, 'pfx');\n      } else {\n        // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'\n        return testPropsAll(prop, obj, elem);\n      }\n    };\n    /*>>prefixed*/\n\n\n    /*>>cssclasses*/\n    // Remove \"no-js\" class from <html> element, if it exists:\n    docElement.className = docElement.className.replace(/(^|\\s)no-js(\\s|$)/, '$1$2') +\n\n                            // Add the new classes to the <html> element.\n                            (enableClasses ? ' js ' + classes.join(' ') : '');\n    /*>>cssclasses*/\n\n    return Modernizr;\n\n})(this, this.document);\n","// ==========================================================================\n// Project:   Ember ListView\n// Copyright: ©2012-2013 Erik Bryn, Yapp Inc., and contributors.\n// License:   Licensed under MIT license\n// Version:   0.0.5\n// ==========================================================================\n\n(function(global){\nvar define, requireModule, require, requirejs;\n\n(function() {\n\n  var _isArray;\n  if (!Array.isArray) {\n    _isArray = function (x) {\n      return Object.prototype.toString.call(x) === \"[object Array]\";\n    };\n  } else {\n    _isArray = Array.isArray;\n  }\n  \n  var registry = {}, seen = {}, state = {};\n  var FAILED = false;\n\n  define = function(name, deps, callback) {\n  \n    if (!_isArray(deps)) {\n      callback = deps;\n      deps     =  [];\n    }\n  \n    registry[name] = {\n      deps: deps,\n      callback: callback\n    };\n  };\n\n  function reify(deps, name, seen) {\n    var length = deps.length;\n    var reified = new Array(length);\n    var dep;\n    var exports;\n\n    for (var i = 0, l = length; i < l; i++) {\n      dep = deps[i];\n      if (dep === 'exports') {\n        exports = reified[i] = seen;\n      } else {\n        reified[i] = require(resolve(dep, name));\n      }\n    }\n\n    return {\n      deps: reified,\n      exports: exports\n    };\n  }\n\n  requirejs = require = requireModule = function(name) {\n    if (state[name] !== FAILED &&\n        seen.hasOwnProperty(name)) {\n      return seen[name];\n    }\n\n    if (!registry[name]) {\n      throw new Error('Could not find module ' + name);\n    }\n\n    var mod = registry[name];\n    var reified;\n    var module;\n    var loaded = false;\n\n    seen[name] = { }; // placeholder for run-time cycles\n\n    try {\n      reified = reify(mod.deps, name, seen[name]);\n      module = mod.callback.apply(this, reified.deps);\n      loaded = true;\n    } finally {\n      if (!loaded) {\n        state[name] = FAILED;\n      }\n    }\n\n    return reified.exports ? seen[name] : (seen[name] = module);\n  };\n\n  function resolve(child, name) {\n    if (child.charAt(0) !== '.') { return child; }\n\n    var parts = child.split('/');\n    var nameParts = name.split('/');\n    var parentBase;\n\n    if (nameParts.length === 1) {\n      parentBase = nameParts;\n    } else {\n      parentBase = nameParts.slice(0, -1);\n    }\n\n    for (var i = 0, l = parts.length; i < l; i++) {\n      var part = parts[i];\n\n      if (part === '..') { parentBase.pop(); }\n      else if (part === '.') { continue; }\n      else { parentBase.push(part); }\n    }\n\n    return parentBase.join('/');\n  }\n\n  requirejs.entries = requirejs._eak_seen = registry;\n  requirejs.clear = function(){\n    requirejs.entries = requirejs._eak_seen = registry = {};\n    seen = state = {};\n  };\n})();\n\ndefine(\"list-view/helper\",\n  [\"./list_view\",\"./virtual_list_view\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var EmberListView = __dependency1__[\"default\"];\n    var EmberVirtualListView = __dependency2__[\"default\"];\n\n    function createHelper (view, options) {\n      var hash = options.hash;\n      var types = options.hashTypes;\n\n      hash.content = hash.items;\n      delete hash.items;\n\n      types.content = types.items;\n      delete types.items;\n\n      if (!hash.content) {\n        hash.content = 'this';\n        types.content = 'ID';\n      }\n\n      for (var prop in hash) {\n        if (/-/.test(prop)) {\n          var camelized = Ember.String.camelize(prop);\n          hash[camelized] = hash[prop];\n          types[camelized] = types[prop];\n          delete hash[prop];\n          delete types[prop];\n        }\n      }\n\n      /*jshint validthis:true */\n      return Ember.Handlebars.helpers.collection.call(this, view, options);\n    }\n\n    function EmberList (options) {\n      return createHelper.call(this, EmberListView, options);\n    }\n\n    __exports__.EmberList = EmberList;__exports__[\"default\"] = EmberList;\n\n    function EmberVirtualList (options) {\n      return createHelper.call(this, EmberVirtualListView, options);\n    }\n\n    __exports__.EmberVirtualList = EmberVirtualList;\n  });\ndefine(\"list-view/list_item_view\",\n  [\"list-view/list_item_view_mixin\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /*jshint validthis:true */\n\n    var ListItemViewMixin = __dependency1__[\"default\"];\n\n    var get = Ember.get, set = Ember.set;\n\n    /**\n      The `Ember.ListItemView` view class renders a\n      [div](https://developer.mozilla.org/en/HTML/Element/div) HTML element\n      with `ember-list-item-view` class. It allows you to specify a custom item\n      handlebars template for `Ember.ListView`.\n\n      Example:\n\n      ```handlebars\n      <script type=\"text/x-handlebars\" data-template-name=\"row_item\">\n        {{name}}\n      </script>\n      ```\n\n      ```javascript\n      App.ListView = Ember.ListView.extend({\n        height: 500,\n        rowHeight: 20,\n        itemViewClass: Ember.ListItemView.extend({templateName: \"row_item\"})\n      });\n      ```\n\n      @extends Ember.View\n      @class ListItemView\n      @namespace Ember\n    */\n    __exports__[\"default\"] = Ember.View.extend(ListItemViewMixin, {\n      updateContext: function(newContext) {\n        var context = get(this, 'context');\n\n        Ember.instrument('view.updateContext.render', this, function() {\n          if (context !== newContext) {\n            set(this, 'context', newContext);\n            if (newContext && newContext.isController) {\n              set(this, 'controller', newContext);\n            }\n          }\n        }, this);\n      },\n\n      rerender: function () {\n        if (this.isDestroying || this.isDestroyed) {\n          return;\n        }\n\n        return this._super.apply(this, arguments);\n      },\n\n      _contextDidChange: Ember.observer(function () {\n        Ember.run.once(this, this.rerender);\n      }, 'context', 'controller')\n    });\n  });\ndefine(\"list-view/list_item_view_mixin\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /*jshint validthis:true */\n\n    function samePosition(a, b) {\n      return a && b && a.x === b.x && a.y === b.y;\n    }\n\n    function positionElement() {\n      var element, position, _position;\n\n      Ember.instrument('view.updateContext.positionElement', this, function() {\n        element = this.element;\n        position = this.position;\n        _position = this._position;\n\n        if (!position || !element) {\n          return;\n        }\n\n        // // TODO: avoid needing this by avoiding unnecessary\n        // // calls to this method in the first place\n        if (samePosition(position, _position)) {\n          return;\n        }\n\n        Ember.run.schedule('render', this, this._parentView.applyTransform, this, position.x, position.y);\n        this._position = position;\n      }, this);\n    }\n\n    __exports__[\"default\"] = Ember.Mixin.create({\n      classNames: ['ember-list-item-view'],\n      style: '',\n      attributeBindings: ['style'],\n      _position: null,\n      _positionElement: positionElement,\n\n      positionElementWhenInserted: Ember.on('init', function(){\n        this.one('didInsertElement', positionElement);\n      }),\n\n      updatePosition: function(position) {\n        this.position = position;\n        this._positionElement();\n      }\n    });\n  });\ndefine(\"list-view/list_view\",\n  [\"list-view/list_view_helper\",\"list-view/list_view_mixin\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ListViewHelper = __dependency1__[\"default\"];\n    var ListViewMixin = __dependency2__[\"default\"];\n\n    var get = Ember.get;\n\n    /**\n      The `Ember.ListView` view class renders a\n      [div](https://developer.mozilla.org/en/HTML/Element/div) HTML element,\n      with `ember-list-view` class.\n\n      The context of each item element within the `Ember.ListView` are populated\n      from the objects in the `Element.ListView`'s `content` property.\n\n      ### `content` as an Array of Objects\n\n      The simplest version of an `Ember.ListView` takes an array of object as its\n      `content` property. The object will be used as the `context` each item element\n      inside the rendered `div`.\n\n      Example:\n\n      ```javascript\n      App.ContributorsRoute = Ember.Route.extend({\n        model: function() {\n          return [{ name: 'Stefan Penner' }, { name: 'Alex Navasardyan' }, { name: 'Ray Cohen'}];\n        }\n      });\n      ```\n\n      ```handlebars\n      {{#ember-list items=contributors height=500 rowHeight=50}}\n        {{name}}\n      {{/ember-list}}\n      ```\n\n      Would result in the following HTML:\n\n      ```html\n       <div id=\"ember181\" class=\"ember-view ember-list-view\" style=\"height:500px;width:500px;position:relative;overflow:scroll;-webkit-overflow-scrolling:touch;overflow-scrolling:touch;\">\n        <div class=\"ember-list-container\">\n          <div id=\"ember186\" class=\"ember-view ember-list-item-view\" style=\"-webkit-transform: translate3d(0px, 0px, 0);\">\n            <script id=\"metamorph-0-start\" type=\"text/x-placeholder\"></script>Stefan Penner<script id=\"metamorph-0-end\" type=\"text/x-placeholder\"></script>\n          </div>\n          <div id=\"ember187\" class=\"ember-view ember-list-item-view\" style=\"-webkit-transform: translate3d(0px, 50px, 0);\">\n            <script id=\"metamorph-1-start\" type=\"text/x-placeholder\"></script>Alex Navasardyan<script id=\"metamorph-1-end\" type=\"text/x-placeholder\"></script>\n          </div>\n          <div id=\"ember188\" class=\"ember-view ember-list-item-view\" style=\"-webkit-transform: translate3d(0px, 100px, 0);\">\n            <script id=\"metamorph-2-start\" type=\"text/x-placeholder\"></script>Rey Cohen<script id=\"metamorph-2-end\" type=\"text/x-placeholder\"></script>\n          </div>\n          <div id=\"ember189\" class=\"ember-view ember-list-scrolling-view\" style=\"height: 150px\"></div>\n        </div>\n      </div>\n      ```\n\n      By default `Ember.ListView` provides support for `height`,\n      `rowHeight`, `width`, `elementWidth`, `scrollTop` parameters.\n\n      Note, that `height` and `rowHeight` are required parameters.\n\n      ```handlebars\n      {{#ember-list items=this height=500 rowHeight=50}}\n        {{name}}\n      {{/ember-list}}\n      ```\n\n      If you would like to have multiple columns in your view layout, you can\n      set `width` and `elementWidth` parameters respectively.\n\n      ```handlebars\n      {{#ember-list items=this height=500 rowHeight=50 width=500 elementWidth=80}}\n        {{name}}\n      {{/ember-list}}\n      ```\n\n      ### extending `Ember.ListView`\n\n      Example:\n\n      ```handlebars\n      {{view App.ListView contentBinding=\"content\"}}\n\n      <script type=\"text/x-handlebars\" data-template-name=\"row_item\">\n        {{name}}\n      </script>\n      ```\n\n      ```javascript\n      App.ListView = Ember.ListView.extend({\n        height: 500,\n        width: 500,\n        elementWidth: 80,\n        rowHeight: 20,\n        itemViewClass: Ember.ListItemView.extend({templateName: \"row_item\"})\n      });\n      ```\n\n      @extends Ember.ContainerView\n      @class ListView\n      @namespace Ember\n    */\n    __exports__[\"default\"] = Ember.ContainerView.extend(ListViewMixin, {\n      css: {\n        position: 'relative',\n        overflow: 'auto',\n        '-webkit-overflow-scrolling': 'touch',\n        'overflow-scrolling': 'touch'\n      },\n\n      applyTransform: ListViewHelper.applyTransform,\n\n      _scrollTo: function(scrollTop) {\n        var element = this.element;\n\n        if (element) { element.scrollTop = scrollTop; }\n      },\n\n      didInsertElement: function() {\n        var that = this;\n\n        this._updateScrollableHeight();\n\n        this._scroll = function(e) { that.scroll(e); };\n\n        Ember.$(this.element).on('scroll', this._scroll);\n      },\n\n      willDestroyElement: function() {\n        Ember.$(this.element).off('scroll', this._scroll);\n      },\n\n      scroll: function(e) {\n        this.scrollTo(e.target.scrollTop);\n      },\n\n      scrollTo: function(y) {\n        this._scrollTo(y);\n        this._scrollContentTo(y);\n      },\n\n      totalHeightDidChange: Ember.observer(function () {\n        Ember.run.scheduleOnce('afterRender', this, this._updateScrollableHeight);\n      }, 'totalHeight'),\n\n      _updateScrollableHeight: function () {\n        var height, state;\n\n        // Support old and new Ember versions\n        state = this._state || this.state;\n\n        if (state === 'inDOM') {\n          // if the list is currently displaying the emptyView, remove the height\n          if (this._isChildEmptyView()) {\n              height = '';\n          } else {\n              height = get(this, 'totalHeight');\n          }\n\n          this.$('.ember-list-container').css({\n            height: height\n          });\n        }\n      }\n    });\n  });\ndefine(\"list-view/list_view_helper\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // TODO - remove this!\n    var el    = document.body || document.createElement('div');\n    var style = el.style;\n    var set   = Ember.set;\n\n    function getElementStyle (prop) {\n      var uppercaseProp = prop.charAt(0).toUpperCase() + prop.slice(1);\n\n      var props = [\n        prop,\n        'webkit' + prop,\n        'webkit' + uppercaseProp,\n        'Moz'    + uppercaseProp,\n        'moz'    + uppercaseProp,\n        'ms'     + uppercaseProp,\n        'ms'     + prop\n      ];\n\n      for (var i=0; i < props.length; i++) {\n        var property = props[i];\n\n        if (property in style) {\n          return property;\n        }\n      }\n\n      return null;\n    }\n\n    function getCSSStyle (attr) {\n      var styleName = getElementStyle(attr);\n      var prefix    = styleName.toLowerCase().replace(attr, '');\n\n      var dic = {\n        webkit: '-webkit-' + attr,\n        moz:    '-moz-' + attr,\n        ms:     '-ms-' + attr\n      };\n\n      if (prefix && dic[prefix]) {\n        return dic[prefix];\n      }\n\n      return styleName;\n    }\n\n    var styleAttributeName = getElementStyle('transform');\n    var transformProp      = getCSSStyle('transform');\n    var perspectiveProp    = getElementStyle('perspective');\n    var supports2D         = !!transformProp;\n    var supports3D         = !!perspectiveProp;\n\n    function setStyle (optionalStyleString) {\n      return function (obj, x, y) {\n        var isElement = obj instanceof Element;\n\n        if (optionalStyleString && (supports2D || supports3D)) {\n          var style = Ember.String.fmt(optionalStyleString, x, y);\n\n          if (isElement) {\n            obj.style[styleAttributeName] = style;\n          } else {\n            set(obj, 'style', transformProp + ': ' + style);\n          }\n        } else {\n          if (isElement) {\n            obj.style.top = y;\n            obj.style.left = x;\n          }\n        }\n      };\n    }\n\n    __exports__[\"default\"] = {\n      transformProp: transformProp,\n      applyTransform: (function () {\n        if (supports2D) {\n          return setStyle('translate(%@px, %@px)');\n        }\n\n        return setStyle();\n      })(),\n      apply3DTransform: (function () {\n        if (supports3D) {\n          return setStyle('translate3d(%@px, %@px, 0)');\n        } else if (supports2D) {\n          return setStyle('translate(%@px, %@px)');\n        }\n\n        return setStyle();\n      })()\n    };\n  });\ndefine(\"list-view/list_view_mixin\",\n  [\"list-view/reusable_list_item_view\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /*jshint validthis:true */\n\n    var ReusableListItemView = __dependency1__[\"default\"];\n\n    var get     = Ember.get;\n    var set     = Ember.set;\n    var min     = Math.min;\n    var max     = Math.max;\n    var floor   = Math.floor;\n    var ceil    = Math.ceil;\n    var forEach = Ember.ArrayPolyfills.forEach;\n\n    function addContentArrayObserver() {\n      var content = get(this, 'content');\n      if (content) {\n        content.addArrayObserver(this);\n      }\n    }\n\n    function removeAndDestroy(object) {\n      this.removeObject(object);\n      object.destroy();\n    }\n\n    function syncChildViews() {\n      Ember.run.once(this, '_syncChildViews');\n    }\n\n    function sortByContentIndex (viewOne, viewTwo) {\n      return get(viewOne, 'contentIndex') - get(viewTwo, 'contentIndex');\n    }\n\n    function removeEmptyView() {\n      var emptyView = get(this, 'emptyView');\n      if (emptyView && emptyView instanceof Ember.View) {\n        emptyView.removeFromParent();\n        if (this.totalHeightDidChange !== undefined) {\n            this.totalHeightDidChange();\n        }\n      }\n    }\n\n    function addEmptyView() {\n      var emptyView = get(this, 'emptyView');\n\n      if (!emptyView) {\n        return;\n      }\n\n      if ('string' === typeof emptyView) {\n        emptyView = get(emptyView) || emptyView;\n      }\n\n      emptyView = this.createChildView(emptyView);\n      set(this, 'emptyView', emptyView);\n\n      if (Ember.CoreView.detect(emptyView)) {\n        this._createdEmptyView = emptyView;\n      }\n\n      this.unshiftObject(emptyView);\n    }\n\n    function enableProfilingOutput() {\n      function before(name, time/*, payload*/) {\n        console.time(name);\n      }\n\n      function after (name, time/*, payload*/) {\n        console.timeEnd(name);\n      }\n\n      if (Ember.ENABLE_PROFILING) {\n        Ember.subscribe('view._scrollContentTo', {\n          before: before,\n          after: after\n        });\n        Ember.subscribe('view.updateContext', {\n          before: before,\n          after: after\n        });\n      }\n    }\n\n    /**\n      @class Ember.ListViewMixin\n      @namespace Ember\n    */\n    __exports__[\"default\"] = Ember.Mixin.create({\n      itemViewClass: ReusableListItemView,\n      emptyViewClass: Ember.View,\n      classNames: ['ember-list-view'],\n      attributeBindings: ['style'],\n      classNameBindings: ['_isGrid:ember-list-view-grid:ember-list-view-list'],\n      scrollTop: 0,\n      bottomPadding: 0, // TODO: maybe this can go away\n      _lastEndingIndex: 0,\n      paddingCount: 1,\n      _cachedPos: 0,\n\n      _isGrid: Ember.computed('columnCount', function() {\n        return this.get('columnCount') > 1;\n      }).readOnly(),\n\n      /**\n        @private\n\n        Setup a mixin.\n        - adding observer to content array\n        - creating child views based on height and length of the content array\n\n        @method init\n      */\n      init: function() {\n        this._super();\n        this._cachedHeights = [0];\n        this.on('didInsertElement', this._syncListContainerWidth);\n        this.columnCountDidChange();\n        this._syncChildViews();\n        this._addContentArrayObserver();\n      },\n\n      _addContentArrayObserver: Ember.beforeObserver(function() {\n        addContentArrayObserver.call(this);\n      }, 'content'),\n\n      /**\n        Called on your view when it should push strings of HTML into a\n        `Ember.RenderBuffer`.\n\n        Adds a [div](https://developer.mozilla.org/en-US/docs/HTML/Element/div)\n        with a required `ember-list-container` class.\n\n        @method render\n        @param {Ember.RenderBuffer} buffer The render buffer\n      */\n      render: function (buffer) {\n        var element          = buffer.element();\n        var dom              = buffer.dom;\n        var container        = dom.createElement('div');\n        container.className  = 'ember-list-container';\n        element.appendChild(container);\n\n        this._childViewsMorph = dom.createMorph(container, container, null);\n\n        return container;\n      },\n\n      createChildViewsMorph: function (element) {\n        this._childViewsMorph = this._renderer._dom.createMorph(element.lastChild, element.lastChild, null);\n        return element;\n      },\n\n      willInsertElement: function() {\n        if (!this.get('height') || !this.get('rowHeight')) {\n          throw new Error('A ListView must be created with a height and a rowHeight.');\n        }\n        this._super();\n      },\n\n      /**\n        @private\n\n        Sets inline styles of the view:\n        - height\n        - width\n        - position\n        - overflow\n        - -webkit-overflow\n        - overflow-scrolling\n\n        Called while attributes binding.\n\n        @property {Ember.ComputedProperty} style\n      */\n      style: Ember.computed('height', 'width', function() {\n        var height, width, style, css;\n\n        height = get(this, 'height');\n        width = get(this, 'width');\n        css = get(this, 'css');\n\n        style = '';\n\n        if (height) {\n          style += 'height:' + height + 'px;';\n        }\n\n        if (width)  {\n          style += 'width:' + width  + 'px;';\n        }\n\n        for ( var rule in css ) {\n          if (css.hasOwnProperty(rule)) {\n            style += rule + ':' + css[rule] + ';';\n          }\n        }\n\n        return style;\n      }),\n\n      /**\n        @private\n\n        Performs visual scrolling. Is overridden in Ember.ListView.\n\n        @method scrollTo\n      */\n      scrollTo: function(y) {\n        throw new Error('must override to perform the visual scroll and effectively delegate to _scrollContentTo');\n      },\n\n      /**\n        @private\n\n        Internal method used to force scroll position\n\n        @method scrollTo\n      */\n      _scrollTo: Ember.K,\n\n      /**\n        @private\n        @method _scrollContentTo\n      */\n      _scrollContentTo: function(y) {\n        var startingIndex, endingIndex,\n            contentIndex, visibleEndingIndex, maxContentIndex,\n            contentIndexEnd, contentLength, scrollTop, content;\n\n        scrollTop = max(0, y);\n\n        if (this.scrollTop === scrollTop) {\n          return;\n        }\n\n        // allow a visual overscroll, but don't scroll the content. As we are doing needless\n        // recycyling, and adding unexpected nodes to the DOM.\n        var maxScrollTop = max(0, get(this, 'totalHeight') - get(this, 'height'));\n        scrollTop = min(scrollTop, maxScrollTop);\n\n        content = get(this, 'content');\n        contentLength = get(content, 'length');\n        startingIndex = this._startingIndex(contentLength);\n\n        Ember.instrument('view._scrollContentTo', {\n          scrollTop: scrollTop,\n          content: content,\n          startingIndex: startingIndex,\n          endingIndex: min(max(contentLength - 1, 0), startingIndex + this._numChildViewsForViewport())\n        }, function () {\n          this.scrollTop = scrollTop;\n\n          maxContentIndex = max(contentLength - 1, 0);\n\n          startingIndex = this._startingIndex();\n          visibleEndingIndex = startingIndex + this._numChildViewsForViewport();\n\n          endingIndex = min(maxContentIndex, visibleEndingIndex);\n\n          if (startingIndex === this._lastStartingIndex &&\n              endingIndex === this._lastEndingIndex) {\n\n            this.trigger('scrollYChanged', y);\n            return;\n          } else {\n\n            Ember.run(this, function() {\n              this._reuseChildren();\n\n              this._lastStartingIndex = startingIndex;\n              this._lastEndingIndex = endingIndex;\n              this.trigger('scrollYChanged', y);\n            });\n          }\n        }, this);\n\n      },\n\n      /**\n        @private\n\n        Computes the height for a `Ember.ListView` scrollable container div.\n        You must specify `rowHeight` parameter for the height to be computed properly.\n\n        @property {Ember.ComputedProperty} totalHeight\n      */\n      totalHeight: Ember.computed('content.length',\n                                  'rowHeight',\n                                  'columnCount',\n                                  'bottomPadding', function() {\n        if (typeof this.heightForIndex === 'function') {\n          return this._totalHeightWithHeightForIndex();\n        } else {\n          return this._totalHeightWithStaticRowHeight();\n       }\n      }),\n\n      _doRowHeightDidChange: function() {\n        this._cachedHeights = [0];\n        this._cachedPos = 0;\n        this._syncChildViews();\n      },\n\n      _rowHeightDidChange: Ember.observer('rowHeight', function() {\n        Ember.run.once(this, this._doRowHeightDidChange);\n      }),\n\n      _totalHeightWithHeightForIndex: function() {\n        var length = this.get('content.length');\n        return this._cachedHeightLookup(length);\n      },\n\n      _totalHeightWithStaticRowHeight: function() {\n        var contentLength, rowHeight, columnCount, bottomPadding;\n\n        contentLength = get(this, 'content.length');\n        rowHeight = get(this, 'rowHeight');\n        columnCount = get(this, 'columnCount');\n        bottomPadding = get(this, 'bottomPadding');\n\n        return ((ceil(contentLength / columnCount)) * rowHeight) + bottomPadding;\n      },\n\n      /**\n        @private\n        @method _prepareChildForReuse\n      */\n      _prepareChildForReuse: function(childView) {\n        childView.prepareForReuse();\n      },\n\n      createChildView: function (_view) {\n        return this._super(_view, this._itemViewProps || {});\n      },\n\n      /**\n        @private\n        @method _reuseChildForContentIndex\n      */\n      _reuseChildForContentIndex: function(childView, contentIndex) {\n        var content, context, newContext, childsCurrentContentIndex, position, enableProfiling, oldChildView;\n\n        var contentViewClass = this.itemViewForIndex(contentIndex);\n\n        if (childView.constructor !== contentViewClass) {\n          // rather then associative arrays, lets move childView + contentEntry maping to a Map\n          var i = this._childViews.indexOf(childView);\n          childView.destroy();\n          childView = this.createChildView(contentViewClass);\n          this.insertAt(i, childView);\n        }\n\n        content         = get(this, 'content');\n        enableProfiling = get(this, 'enableProfiling');\n        position        = this.positionForIndex(contentIndex);\n        childView.updatePosition(position);\n\n        set(childView, 'contentIndex', contentIndex);\n\n        if (enableProfiling) {\n          Ember.instrument('view._reuseChildForContentIndex', position, function() {\n\n          }, this);\n        }\n\n        newContext = content.objectAt(contentIndex);\n        childView.updateContext(newContext);\n      },\n\n      /**\n        @private\n        @method positionForIndex\n      */\n      positionForIndex: function(index) {\n        if (typeof this.heightForIndex !== 'function') {\n          return this._singleHeightPosForIndex(index);\n        }\n        else {\n          return this._multiHeightPosForIndex(index);\n        }\n      },\n\n      _singleHeightPosForIndex: function(index) {\n        var elementWidth, width, columnCount, rowHeight, y, x;\n\n        elementWidth = get(this, 'elementWidth') || 1;\n        width = get(this, 'width') || 1;\n        columnCount = get(this, 'columnCount');\n        rowHeight = get(this, 'rowHeight');\n\n        y = (rowHeight * floor(index/columnCount));\n        x = (index % columnCount) * elementWidth;\n\n        return {\n          y: y,\n          x: x\n        };\n      },\n\n      // 0 maps to 0, 1 maps to heightForIndex(i)\n      _multiHeightPosForIndex: function(index) {\n        var elementWidth, width, columnCount, rowHeight, y, x;\n\n        elementWidth = get(this, 'elementWidth') || 1;\n        width = get(this, 'width') || 1;\n        columnCount = get(this, 'columnCount');\n\n        x = (index % columnCount) * elementWidth;\n        y = this._cachedHeightLookup(index);\n\n        return {\n          x: x,\n          y: y\n        };\n      },\n\n      _cachedHeightLookup: function(index) {\n        for (var i = this._cachedPos; i < index; i++) {\n          this._cachedHeights[i + 1] = this._cachedHeights[i] + this.heightForIndex(i);\n        }\n        this._cachedPos = i;\n        return this._cachedHeights[index];\n      },\n\n      /**\n        @private\n        @method _childViewCount\n      */\n      _childViewCount: function() {\n        var contentLength, childViewCountForHeight;\n\n        contentLength = get(this, 'content.length');\n        childViewCountForHeight = this._numChildViewsForViewport();\n\n        return min(contentLength, childViewCountForHeight);\n      },\n\n      /**\n        @private\n\n        Returns a number of columns in the Ember.ListView (for grid layout).\n\n        If you want to have a multi column layout, you need to specify both\n        `width` and `elementWidth`.\n\n        If no `elementWidth` is specified, it returns `1`. Otherwise, it will\n        try to fit as many columns as possible for a given `width`.\n\n        @property {Ember.ComputedProperty} columnCount\n      */\n      columnCount: Ember.computed('width', 'elementWidth', function() {\n        var elementWidth, width, count;\n\n        elementWidth = get(this, 'elementWidth');\n        width = get(this, 'width');\n\n        if (elementWidth && width > elementWidth) {\n          count = floor(width / elementWidth);\n        } else {\n          count = 1;\n        }\n\n        return count;\n      }),\n\n      /**\n        @private\n\n        Fires every time column count is changed.\n\n        @event columnCountDidChange\n      */\n      columnCountDidChange: Ember.observer(function() {\n        var ratio, currentScrollTop, proposedScrollTop, maxScrollTop,\n            scrollTop, lastColumnCount, newColumnCount, element;\n\n        lastColumnCount = this._lastColumnCount;\n\n        currentScrollTop = this.scrollTop;\n        newColumnCount = get(this, 'columnCount');\n        maxScrollTop = get(this, 'maxScrollTop');\n        element = this.element;\n\n        this._lastColumnCount = newColumnCount;\n\n        if (lastColumnCount) {\n          ratio = (lastColumnCount / newColumnCount);\n          proposedScrollTop = currentScrollTop * ratio;\n          scrollTop = min(maxScrollTop, proposedScrollTop);\n\n          this._scrollTo(scrollTop);\n          this.scrollTop = scrollTop;\n        }\n\n        if (arguments.length > 0) {\n          // invoked by observer\n          Ember.run.schedule('afterRender', this, this._syncListContainerWidth);\n        }\n      }, 'columnCount'),\n\n      /**\n        @private\n\n        Computes max possible scrollTop value given the visible viewport\n        and scrollable container div height.\n\n        @property {Ember.ComputedProperty} maxScrollTop\n      */\n      maxScrollTop: Ember.computed('height', 'totalHeight', function(){\n        var totalHeight, viewportHeight;\n\n        totalHeight = get(this, 'totalHeight');\n        viewportHeight = get(this, 'height');\n\n        return max(0, totalHeight - viewportHeight);\n      }),\n\n      /**\n        @private\n\n        Determines whether the emptyView is the current childView.\n\n        @method _isChildEmptyView\n      */\n      _isChildEmptyView: function() {\n        var emptyView = get(this, 'emptyView');\n\n        return emptyView && emptyView instanceof Ember.View &&\n               this._childViews.length === 1 && this._childViews.indexOf(emptyView) === 0;\n      },\n\n      /**\n        @private\n\n        Computes the number of views that would fit in the viewport area.\n        You must specify `height` and `rowHeight` parameters for the number of\n        views to be computed properly.\n\n        @method _numChildViewsForViewport\n      */\n      _numChildViewsForViewport: function() {\n\n        if (this.heightForIndex) {\n          return this._numChildViewsForViewportWithMultiHeight();\n        } else {\n          return this._numChildViewsForViewportWithoutMultiHeight();\n        }\n      },\n\n      _numChildViewsForViewportWithoutMultiHeight:  function() {\n        var height, rowHeight, paddingCount, columnCount;\n\n        height = get(this, 'height');\n        rowHeight = get(this, 'rowHeight');\n        paddingCount = get(this, 'paddingCount');\n        columnCount = get(this, 'columnCount');\n\n        return (ceil(height / rowHeight) * columnCount) + (paddingCount * columnCount);\n      },\n\n      _numChildViewsForViewportWithMultiHeight:  function() {\n        var rowHeight, paddingCount, columnCount;\n        var scrollTop = this.scrollTop;\n        var viewportHeight = this.get('height');\n        var length = this.get('content.length');\n        var heightfromTop = 0;\n        var padding = get(this, 'paddingCount');\n\n        var startingIndex = this._calculatedStartingIndex();\n        var currentHeight = 0;\n\n        var offsetHeight = this._cachedHeightLookup(startingIndex);\n        for (var i = 0; i < length; i++) {\n          if (this._cachedHeightLookup(startingIndex + i + 1) - offsetHeight > viewportHeight) {\n            break;\n          }\n        }\n\n        return i + padding + 1;\n      },\n\n\n      /**\n        @private\n\n        Computes the starting index of the item views array.\n        Takes `scrollTop` property of the element into account.\n\n        Is used in `_syncChildViews`.\n\n        @method _startingIndex\n      */\n      _startingIndex: function(_contentLength) {\n        var scrollTop, rowHeight, columnCount, calculatedStartingIndex,\n            contentLength;\n\n        if (_contentLength === undefined) {\n          contentLength = get(this, 'content.length');\n        } else {\n          contentLength = _contentLength;\n        }\n\n        scrollTop = this.scrollTop;\n        rowHeight = get(this, 'rowHeight');\n        columnCount = get(this, 'columnCount');\n\n        if (this.heightForIndex) {\n          calculatedStartingIndex = this._calculatedStartingIndex();\n        } else {\n          calculatedStartingIndex = floor(scrollTop / rowHeight) * columnCount;\n        }\n\n        var viewsNeededForViewport = this._numChildViewsForViewport();\n        var paddingCount = (1 * columnCount);\n        var largestStartingIndex = max(contentLength - viewsNeededForViewport, 0);\n\n        return min(calculatedStartingIndex, largestStartingIndex);\n      },\n\n      _calculatedStartingIndex: function() {\n        var rowHeight, paddingCount, columnCount;\n        var scrollTop = this.scrollTop;\n        var viewportHeight = this.get('height');\n        var length = this.get('content.length');\n        var heightfromTop = 0;\n        var padding = get(this, 'paddingCount');\n\n        for (var i = 0; i < length; i++) {\n          if (this._cachedHeightLookup(i + 1) >= scrollTop) {\n            break;\n          }\n        }\n\n        return i;\n      },\n\n      /**\n        @private\n        @event contentWillChange\n      */\n      contentWillChange: Ember.beforeObserver(function() {\n        var content = get(this, 'content');\n\n        if (content) {\n          content.removeArrayObserver(this);\n        }\n      }, 'content'),\n\n      /**),\n        @private\n        @event contentDidChange\n      */\n      contentDidChange: Ember.observer(function() {\n        addContentArrayObserver.call(this);\n        syncChildViews.call(this);\n      }, 'content'),\n\n      /**\n        @private\n        @property {Function} needsSyncChildViews\n      */\n      needsSyncChildViews: Ember.observer(syncChildViews, 'height', 'width', 'columnCount'),\n\n      /**\n        @private\n\n        Returns a new item view. Takes `contentIndex` to set the context\n        of the returned view properly.\n\n        @param {Number} contentIndex item index in the content array\n        @method _addItemView\n      */\n      _addItemView: function (contentIndex) {\n        var itemViewClass, childView;\n\n        itemViewClass = this.itemViewForIndex(contentIndex);\n        childView = this.createChildView(itemViewClass);\n        this.pushObject(childView);\n      },\n\n      /**\n        @public\n\n        Returns a view class for the provided contentIndex. If the view is\n        different then the one currently present it will remove the existing view\n        and replace it with an instance of the class provided\n\n        @param {Number} contentIndex item index in the content array\n        @method _addItemView\n        @returns {Ember.View} ember view class for this index\n      */\n      itemViewForIndex: function(contentIndex) {\n        return get(this, 'itemViewClass');\n      },\n\n      /**\n        @public\n\n        Returns a view class for the provided contentIndex. If the view is\n        different then the one currently present it will remove the existing view\n        and replace it with an instance of the class provided\n\n        @param {Number} contentIndex item index in the content array\n        @method _addItemView\n        @returns {Ember.View} ember view class for this index\n      */\n      heightForIndex: null,\n\n      /**\n        @private\n\n        Intelligently manages the number of childviews.\n\n        @method _syncChildViews\n       **/\n      _syncChildViews: function () {\n        var childViews, childViewCount,\n            numberOfChildViews, numberOfChildViewsNeeded,\n            contentIndex, startingIndex, endingIndex,\n            contentLength, emptyView, count, delta;\n\n        if (this.isDestroyed || this.isDestroying) {\n          return;\n        }\n\n        contentLength = get(this, 'content.length');\n        emptyView = get(this, 'emptyView');\n\n        childViewCount = this._childViewCount();\n        childViews = this.positionOrderedChildViews();\n\n        if (this._isChildEmptyView()) {\n          removeEmptyView.call(this);\n        }\n\n        startingIndex = this._startingIndex();\n        endingIndex = startingIndex + childViewCount;\n\n        numberOfChildViewsNeeded = childViewCount;\n        numberOfChildViews = childViews.length;\n\n        delta = numberOfChildViewsNeeded - numberOfChildViews;\n\n        if (delta === 0) {\n          // no change\n        } else if (delta > 0) {\n          // more views are needed\n          contentIndex = this._lastEndingIndex;\n\n          for (count = 0; count < delta; count++, contentIndex++) {\n            this._addItemView(contentIndex);\n          }\n        } else {\n          // less views are needed\n          forEach.call(\n            childViews.splice(numberOfChildViewsNeeded, numberOfChildViews),\n            removeAndDestroy,\n            this\n          );\n        }\n\n        this._reuseChildren();\n\n        this._lastStartingIndex = startingIndex;\n        this._lastEndingIndex   = this._lastEndingIndex + delta;\n\n        if (contentLength === 0 || contentLength === undefined) {\n          addEmptyView.call(this);\n        }\n      },\n\n      /**\n        @private\n\n        Applies an inline width style to the list container.\n\n        @method _syncListContainerWidth\n       **/\n      _syncListContainerWidth: function() {\n        var elementWidth, columnCount, containerWidth, element;\n\n        elementWidth = get(this, 'elementWidth');\n        columnCount = get(this, 'columnCount');\n        containerWidth = elementWidth * columnCount;\n        element = this.$('.ember-list-container');\n\n        if (containerWidth && element) {\n          element.css('width', containerWidth);\n        }\n      },\n\n      /**\n        @private\n        @method _reuseChildren\n      */\n      _reuseChildren: function(){\n        var contentLength, childViews, childViewsLength,\n            startingIndex, endingIndex, childView, attrs,\n            contentIndex, visibleEndingIndex, maxContentIndex,\n            contentIndexEnd, scrollTop;\n\n        scrollTop          = this.scrollTop;\n        contentLength      = get(this, 'content.length');\n        maxContentIndex    = max(contentLength - 1, 0);\n        childViews         = this.getReusableChildViews();\n        childViewsLength   =  childViews.length;\n\n        startingIndex      = this._startingIndex();\n        visibleEndingIndex = startingIndex + this._numChildViewsForViewport();\n\n        endingIndex        = min(maxContentIndex, visibleEndingIndex);\n\n        contentIndexEnd    = min(visibleEndingIndex, startingIndex + childViewsLength);\n\n        for (contentIndex = startingIndex; contentIndex < contentIndexEnd; contentIndex++) {\n          childView = childViews[contentIndex % childViewsLength];\n          this._reuseChildForContentIndex(childView, contentIndex);\n        }\n      },\n\n      /**\n        @private\n        @method getReusableChildViews\n      */\n      getReusableChildViews: function() {\n        return this._childViews;\n      },\n\n      /**\n        @private\n        @method positionOrderedChildViews\n      */\n      positionOrderedChildViews: function() {\n        return this.getReusableChildViews().sort(sortByContentIndex);\n      },\n\n      arrayWillChange: Ember.K,\n\n      /**\n        @private\n        @event arrayDidChange\n      */\n      // TODO: refactor\n      arrayDidChange: function(content, start, removedCount, addedCount) {\n        var index, contentIndex, state;\n\n        if (this._isChildEmptyView()) {\n          removeEmptyView.call(this);\n        }\n\n        // Support old and new Ember versions\n        state = this._state || this.state;\n\n        if (state === 'inDOM') {\n          // ignore if all changes are out of the visible change\n          if (start >= this._lastStartingIndex || start < this._lastEndingIndex) {\n            index = 0;\n            // ignore all changes not in the visible range\n            // this can re-position many, rather then causing a cascade of re-renders\n            forEach.call(\n              this.positionOrderedChildViews(),\n              function(childView) {\n                contentIndex = this._lastStartingIndex + index;\n                this._reuseChildForContentIndex(childView, contentIndex);\n                index++;\n              },\n              this\n            );\n          }\n\n          syncChildViews.call(this);\n        }\n      },\n\n      destroy: function () {\n        if (!this._super()) {\n          return;\n        }\n\n        if (this._createdEmptyView) {\n          this._createdEmptyView.destroy();\n        }\n\n        return this;\n      }\n    });\n  });\ndefine(\"list-view/main\",\n  [\"list-view/reusable_list_item_view\",\"list-view/virtual_list_view\",\"list-view/list_item_view\",\"list-view/helper\",\"list-view/list_view\",\"list-view/list_view_helper\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__) {\n    \"use strict\";\n    var ReusableListItemView = __dependency1__[\"default\"];\n    var VirtualListView = __dependency2__[\"default\"];\n    var ListItemView = __dependency3__[\"default\"];\n    var EmberList = __dependency4__.EmberList;\n    var EmberVirtualList = __dependency4__.EmberVirtualList;\n    var ListView = __dependency5__[\"default\"];\n    var ListViewHelper = __dependency6__[\"default\"];\n\n    Ember.ReusableListItemView = ReusableListItemView;\n    Ember.VirtualListView      = VirtualListView;\n    Ember.ListItemView         = ListItemView;\n    Ember.ListView             = ListView;\n    Ember.ListViewHelper       = ListViewHelper;\n\n    Ember.Handlebars.registerHelper('ember-list', EmberList);\n    Ember.Handlebars.registerHelper('ember-virtual-list', EmberVirtualList);\n  });\ndefine(\"list-view/reusable_list_item_view\",\n  [\"list-view/list_item_view_mixin\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ListItemViewMixin = __dependency1__[\"default\"];\n\n    var get = Ember.get, set = Ember.set;\n\n    __exports__[\"default\"] = Ember.View.extend(ListItemViewMixin, {\n      prepareForReuse: Ember.K,\n\n      init: function () {\n        this._super();\n        var context = Ember.ObjectProxy.create();\n        this.set('context', context);\n        this._proxyContext = context;\n      },\n\n      isVisible: Ember.computed('context.content', function () {\n        return !!this.get('context.content');\n      }),\n\n      updateContext: function (newContext) {\n        var context = get(this._proxyContext, 'content');\n\n        // Support old and new Ember versions\n        var state = this._state || this.state;\n\n        if (context !== newContext) {\n          if (state === 'inDOM') {\n            this.prepareForReuse(newContext);\n          }\n\n          set(this._proxyContext, 'content', newContext);\n\n          if (newContext && newContext.isController) {\n            set(this, 'controller', newContext);\n          }\n        }\n      }\n    });\n  });\ndefine(\"list-view/virtual_list_scroller_events\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /*jshint validthis:true */\n\n    var fieldRegex = /input|textarea|select/i,\n      hasTouch = ('ontouchstart' in window) || window.DocumentTouch && document instanceof window.DocumentTouch,\n      handleStart, handleMove, handleEnd, handleCancel,\n      startEvent, moveEvent, endEvent, cancelEvent;\n    if (hasTouch) {\n      startEvent = 'touchstart';\n      handleStart = function (e) {\n        var touch = e.touches[0],\n          target = touch && touch.target;\n        // avoid e.preventDefault() on fields\n        if (target && fieldRegex.test(target.tagName)) {\n          return;\n        }\n        bindWindow(this.scrollerEventHandlers);\n        this.willBeginScroll(e.touches, e.timeStamp);\n        e.preventDefault();\n      };\n      moveEvent = 'touchmove';\n      handleMove = function (e) {\n        this.continueScroll(e.touches, e.timeStamp);\n      };\n      endEvent = 'touchend';\n      handleEnd = function (e) {\n        // if we didn't end up scrolling we need to\n        // synthesize click since we did e.preventDefault()\n        // on touchstart\n        if (!this._isScrolling) {\n          synthesizeClick(e);\n        }\n        unbindWindow(this.scrollerEventHandlers);\n        this.endScroll(e.timeStamp);\n      };\n      cancelEvent = 'touchcancel';\n      handleCancel = function (e) {\n        unbindWindow(this.scrollerEventHandlers);\n        this.endScroll(e.timeStamp);\n      };\n    } else {\n      startEvent = 'mousedown';\n      handleStart = function (e) {\n        if (e.which !== 1) {\n          return;\n        }\n        var target = e.target;\n        // avoid e.preventDefault() on fields\n        if (target && fieldRegex.test(target.tagName)) {\n          return;\n        }\n        bindWindow(this.scrollerEventHandlers);\n        this.willBeginScroll([e], e.timeStamp);\n        e.preventDefault();\n      };\n      moveEvent = 'mousemove';\n      handleMove = function (e) {\n        this.continueScroll([e], e.timeStamp);\n      };\n      endEvent = 'mouseup';\n      handleEnd = function (e) {\n        unbindWindow(this.scrollerEventHandlers);\n        this.endScroll(e.timeStamp);\n      };\n      cancelEvent = 'mouseout';\n      handleCancel = function (e) {\n        if (e.relatedTarget) {\n          return;\n        }\n        unbindWindow(this.scrollerEventHandlers);\n        this.endScroll(e.timeStamp);\n      };\n    }\n\n    function handleWheel(e) {\n      this.mouseWheel(e);\n      e.preventDefault();\n    }\n\n    function bindElement(el, handlers) {\n      el.addEventListener(startEvent, handlers.start, false);\n      el.addEventListener('mousewheel', handlers.wheel, false);\n    }\n\n    function unbindElement(el, handlers) {\n      el.removeEventListener(startEvent, handlers.start, false);\n      el.removeEventListener('mousewheel', handlers.wheel, false);\n    }\n\n    function bindWindow(handlers) {\n      window.addEventListener(moveEvent, handlers.move, true);\n      window.addEventListener(endEvent, handlers.end, true);\n      window.addEventListener(cancelEvent, handlers.cancel, true);\n    }\n\n    function unbindWindow(handlers) {\n      window.removeEventListener(moveEvent, handlers.move, true);\n      window.removeEventListener(endEvent, handlers.end, true);\n      window.removeEventListener(cancelEvent, handlers.cancel, true);\n    }\n\n    __exports__[\"default\"] = Ember.Mixin.create({\n      init: function() {\n        this.on('didInsertElement', this, 'bindScrollerEvents');\n        this.on('willDestroyElement', this, 'unbindScrollerEvents');\n        this.scrollerEventHandlers = {\n          start: bind(this, handleStart),\n          move: bind(this, handleMove),\n          end: bind(this, handleEnd),\n          cancel: bind(this, handleCancel),\n          wheel: bind(this, handleWheel)\n        };\n        return this._super();\n      },\n      scrollElement: Ember.computed.oneWay('element').readOnly(),\n      bindScrollerEvents: function() {\n        var el = this.get('scrollElement'),\n          handlers = this.scrollerEventHandlers;\n        bindElement(el, handlers);\n      },\n      unbindScrollerEvents: function() {\n        var el = this.get('scrollElement'),\n          handlers = this.scrollerEventHandlers;\n        unbindElement(el, handlers);\n        unbindWindow(handlers);\n      }\n    });\n\n    function bind(view, handler) {\n      return function (evt) {\n        handler.call(view, evt);\n      };\n    }\n\n    function synthesizeClick(e) {\n      var point = e.changedTouches[0],\n        target = point.target,\n        ev;\n      if (target && fieldRegex.test(target.tagName)) {\n        ev = document.createEvent('MouseEvents');\n        ev.initMouseEvent('click', true, true, e.view, 1, point.screenX, point.screenY, point.clientX, point.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, 0, null);\n        return target.dispatchEvent(ev);\n      }\n    }\n  });\ndefine(\"list-view/virtual_list_view\",\n  [\"list-view/list_view_mixin\",\"list-view/list_view_helper\",\"list-view/virtual_list_scroller_events\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    /*\n      global Scroller\n    */\n\n    var ListViewMixin = __dependency1__[\"default\"];\n    var ListViewHelper = __dependency2__[\"default\"];\n    var VirtualListScrollerEvents = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n\n    function updateScrollerDimensions(target) {\n      var width, height, totalHeight;\n\n      target = target || this; // jshint ignore:line\n\n      width = get(target, 'width');\n      height = get(target, 'height');\n      totalHeight = get(target, 'totalHeight'); // jshint ignore:line\n\n      target.scroller.setDimensions(width, height, width, totalHeight);\n      target.trigger('scrollerDimensionsDidChange');\n    }\n\n    /**\n      VirtualListView\n\n      @class VirtualListView\n      @namespace Ember\n    */\n    __exports__[\"default\"] = Ember.ContainerView.extend(ListViewMixin, VirtualListScrollerEvents, {\n      _isScrolling: false,\n      _mouseWheel: null,\n      css: {\n        position: 'relative',\n        overflow: 'hidden'\n      },\n\n      init: function(){\n        this._super();\n        this.setupScroller();\n        this.setupPullToRefresh();\n      },\n      _scrollerTop: 0,\n      applyTransform: ListViewHelper.apply3DTransform,\n\n      setupScroller: function(){\n        var view = this;\n\n        view.scroller = new Scroller(function(left, top/*, zoom*/) {\n          // Support old and new Ember versions\n          var state = view._state || view.state;\n\n          if (state !== 'inDOM') {\n            return;\n          }\n\n          if (view.listContainerElement) {\n            view._scrollerTop = top;\n            view._scrollContentTo(top);\n            view.applyTransform(view.listContainerElement, 0, -top);\n          }\n        }, {\n          scrollingX: false,\n          scrollingComplete: function(){\n            view.trigger('scrollingDidComplete');\n          }\n        });\n\n        view.trigger('didInitializeScroller');\n        updateScrollerDimensions(view);\n      },\n      setupPullToRefresh: function() {\n        if (!this.pullToRefreshViewClass) {\n          return;\n        }\n\n        this._insertPullToRefreshView();\n        this._activateScrollerPullToRefresh();\n      },\n      _insertPullToRefreshView: function(){\n        this.pullToRefreshView = this.createChildView(this.pullToRefreshViewClass);\n        this.insertAt(0, this.pullToRefreshView);\n\n        var view = this;\n\n        this.pullToRefreshView.on('didInsertElement', function() {\n          Ember.run.scheduleOnce('afterRender', this, function(){\n            view.applyTransform(this.element, 0, -1 * view.pullToRefreshViewHeight);\n          });\n        });\n      },\n      _activateScrollerPullToRefresh: function(){\n        var view = this;\n        function activatePullToRefresh(){\n          view.pullToRefreshView.set('active', true);\n          view.trigger('activatePullToRefresh');\n        }\n        function deactivatePullToRefresh() {\n          view.pullToRefreshView.set('active', false);\n          view.trigger('deactivatePullToRefresh');\n        }\n        function startPullToRefresh() {\n          Ember.run(function(){\n            view.pullToRefreshView.set('refreshing', true);\n\n            function finishRefresh(){\n              if (view && !view.get('isDestroyed') && !view.get('isDestroying')) {\n                view.scroller.finishPullToRefresh();\n                view.pullToRefreshView.set('refreshing', false);\n              }\n            }\n            view.startRefresh(finishRefresh);\n          });\n        }\n        this.scroller.activatePullToRefresh(\n          this.pullToRefreshViewHeight,\n          activatePullToRefresh,\n          deactivatePullToRefresh,\n          startPullToRefresh\n        );\n      },\n\n      getReusableChildViews: function(){\n        var firstView = this._childViews[0];\n        if (firstView && firstView === this.pullToRefreshView) {\n          return this._childViews.slice(1);\n        } else {\n          return this._childViews;\n        }\n      },\n\n      scrollerDimensionsNeedToChange: Ember.observer(function() {\n        Ember.run.once(this, updateScrollerDimensions);\n      }, 'width', 'height', 'totalHeight'),\n\n      didInsertElement: function() {\n        this.listContainerElement = this.$('> .ember-list-container')[0];\n      },\n\n      willBeginScroll: function(touches, timeStamp) {\n        this._isScrolling = false;\n        this.trigger('scrollingDidStart');\n\n        this.scroller.doTouchStart(touches, timeStamp);\n      },\n\n      continueScroll: function(touches, timeStamp) {\n        var startingScrollTop, endingScrollTop, event;\n\n        if (this._isScrolling) {\n          this.scroller.doTouchMove(touches, timeStamp);\n        } else {\n          startingScrollTop = this._scrollerTop;\n\n          this.scroller.doTouchMove(touches, timeStamp);\n\n          endingScrollTop = this._scrollerTop;\n\n          if (startingScrollTop !== endingScrollTop) {\n            event = Ember.$.Event(\"scrollerstart\");\n            Ember.$(touches[0].target).trigger(event);\n\n            this._isScrolling = true;\n          }\n        }\n      },\n\n      endScroll: function(timeStamp) {\n        this.scroller.doTouchEnd(timeStamp);\n      },\n\n      // api\n      scrollTo: function(y, animate) {\n        if (animate === undefined) {\n          animate = true;\n        }\n\n        this.scroller.scrollTo(0, y, animate, 1);\n      },\n\n      // events\n      mouseWheel: function(e){\n        var inverted, delta, candidatePosition;\n\n        inverted = e.webkitDirectionInvertedFromDevice;\n        delta = e.wheelDeltaY * (inverted ? 0.8 : -0.8);\n        candidatePosition = this.scroller.__scrollTop + delta;\n\n        if ((candidatePosition >= 0) && (candidatePosition <= this.scroller.__maxScrollTop)) {\n          this.scroller.scrollBy(0, delta, true);\n          e.stopPropagation();\n        }\n\n        return false;\n      }\n    });\n  });\n requireModule('list-view/main');\n})(this);"],"names":[],"mappingszmzrkhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzpcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrtfile":"vendor.js"}