/*!
* ember-widgets v0.2.0
* Copyright 2013-2014 Addepar Inc.
* See LICENSE.
*/
eval("(function() {\n\nvar _ref;\n\nEmber.Widgets = Ember.Namespace.create();\n\nEmber.Widgets.VERSION = '0.2.0';\n\nEmber.Widgets.DISABLE_ANIMATIONS = false;\n\nif ((_ref = Ember.libraries) != null) {\n  _ref.register('Ember Widgets', Ember.Widgets.VERSION);\n}\n\n\n})();//@ sourceURL=build/src/ember_widgets.js"),eval("(function() {\n\nEmber.AddeparMixins = Ember.AddeparMixins || Ember.Namespace.create();\n\nEmber.AddeparMixins.ResizeHandlerMixin = Ember.Mixin.create({\n  resizeEndDelay: 200,\n  resizing: false,\n  onResizeStart: Ember.K,\n  onResizeEnd: Ember.K,\n  onResize: Ember.K,\n  endResize: Ember.computed(function() {\n    return function(event) {\n      if (this.isDestroyed) {\n        return;\n      }\n      this.set('resizing', false);\n      return typeof this.onResizeEnd === \"function\" ? this.onResizeEnd(event) : void 0;\n    };\n  }),\n  handleWindowResize: function(event) {\n    if (!this.get('resizing')) {\n      this.set('resizing', true);\n      if (typeof this.onResizeStart === \"function\") {\n        this.onResizeStart(event);\n      }\n    }\n    if (typeof this.onResize === \"function\") {\n      this.onResize(event);\n    }\n    return Ember.run.debounce(this, this.get('endResize'), event, this.get('resizeEndDelay'));\n  },\n  didInsertElement: function() {\n    this._super();\n    return this._setupResizeDocumentHandlers();\n  },\n  willDestroyElement: function() {\n    this._removeResizeDocumentHandlers();\n    return this._super();\n  },\n  _setupResizeDocumentHandlers: function() {\n    if (this._resizeHandler) {\n      return;\n    }\n    this._resizeHandler = jQuery.proxy(this.get('handleWindowResize'), this);\n    return jQuery(window).on(\"resize.\" + this.elementId, this._resizeHandler);\n  },\n  _removeResizeDocumentHandlers: function() {\n    jQuery(window).off(\"resize.\" + this.elementId, this._resizeHandler);\n    return this._resizeHandler = null;\n  }\n});\n\n\n})();//@ sourceURL=dependencies/ember-addepar-mixins/resize_handler.js"),eval('(function() {\n\nEmber.TEMPLATES["accordion-group-layout"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1;\n\n\n  data.buffer.push("<div class=\\"panel-heading\\">\\n  <h4 class=\\"panel-title\\">\\n    <a class=\\"accordion-toggle collapsed\\">\\n      ");\n  stack1 = helpers._triageMustache.call(depth0, "view.title", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n    </a>\\n  </h4>\\n</div>\\n<div class=\\"panel-collapse collapse\\">\\n  <div class=\\"panel-body\\">");\n  stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("</div>\\n</div>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["carousel"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.CollectionView", {hash:{\n    \'tagName\': ("ol"),\n    \'class\': ("carousel-indicators"),\n    \'contentBinding\': ("view.content"),\n    \'itemViewClass\': ("Ember.Widgets.CarouselIndicator")\n  },hashTypes:{\'tagName\': "STRING",\'class\': "STRING",\'contentBinding\': "STRING",\'itemViewClass\': "STRING"},hashContexts:{\'tagName\': depth0,\'class\': depth0,\'contentBinding\': depth0,\'itemViewClass\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n<div class=\\"carousel-inner\\">\\n  ");\n  stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n</div>\\n<a class=\\"left carousel-control\\"  href=\\"#\\" ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "prev", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">‹</a>\\n<a class=\\"right carousel-control\\" href=\\"#\\" ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "next", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">›</a>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["color-picker-cell"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  \n\n\n  data.buffer.push("<div class=\\"no-color-indicator-holder\\"></div>");\n  \n});\n\nEmber.TEMPLATES["color-picker"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \'\';\n  data.buffer.push("\\n      ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Widgets.ColorPickerCell", {hash:{\n    \'colorBinding\': ("selectedColor"),\n    \'classNames\': ("color-picker-cell-transparent")\n  },hashTypes:{\'colorBinding\': "STRING",\'classNames\': "STRING"},hashContexts:{\'colorBinding\': depth0,\'classNames\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n    ");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \'\';\n  data.buffer.push("\\n      ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Widgets.ColorPickerCell", {hash:{\n    \'colorBinding\': ("selectedColor")\n  },hashTypes:{\'colorBinding\': "STRING"},hashContexts:{\'colorBinding\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n    ");\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n      <div class=\\"color-row clearfix\\">\\n        ");\n  stack1 = helpers.each.call(depth0, "color", "in", "row", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n      </div>\\n      <hr>\\n    ");\n  return buffer;\n  }\nfunction program6(depth0,data) {\n  \n  var buffer = \'\';\n  data.buffer.push("\\n          ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Widgets.ColorPickerCell", {hash:{\n    \'colorBinding\': ("color")\n  },hashTypes:{\'colorBinding\': "STRING"},hashContexts:{\'colorBinding\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n        ");\n  return buffer;\n  }\n\n  data.buffer.push("<div class=\\"dropdown\\">\\n  <a class=\\"clearfix color-picker-dropdown-button\\" data-toggle=\\"dropdown\\" href=\\"#\\">\\n    ");\n  stack1 = helpers[\'if\'].call(depth0, "isColorTransparent", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n    <span class=\\"pull-right fa fa-caret-down color-picker-dropdown-caret\\"></span>\\n  </a>\\n  <div ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":dropdown-menu :color-picker-dropdown dropdownClass")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    role=\\"menu\\" aria-labelledby=\\"dLabel\\">\\n    ");\n  stack1 = helpers.each.call(depth0, "row", "in", "colorRows", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n    <form ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":color-picker-custom-form isCustomColorValid:valid:invalid")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(">\\n      <div class=\\"form-group form-group-sm\\">\\n        <div class=\\"input-group\\">\\n          <span ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":input-group-addon\\n            :color-picker-custom-preview isCustomColor:active"),\n    \'style\': ("customColorCSS")\n  },hashTypes:{\'class\': "STRING",\'style\': "STRING"},hashContexts:{\'class\': depth0,\'style\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("></span>\\n          ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.TextField", {hash:{\n    \'valueBinding\': ("customColor"),\n    \'class\': ("form-control input-sm"),\n    \'type\': ("text"),\n    \'placeholder\': ("HEX code")\n  },hashTypes:{\'valueBinding\': "STRING",\'class\': "STRING",\'type\': "STRING",\'placeholder\': "STRING"},hashContexts:{\'valueBinding\': depth0,\'class\': depth0,\'type\': depth0,\'placeholder\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n        </div>\\n      </div>\\n    </form>\\n  </div>\\n</div>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["component-default-content"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1;\n\n\n  data.buffer.push("<p>");\n  stack1 = helpers._triageMustache.call(depth0, "content", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("</p>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["editable-label"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \'\';\n  data.buffer.push("\\n  ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "view.innerTextField", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n  <span ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "editLabel", {hash:{\n    \'target\': ("view")\n  },hashTypes:{\'target\': "STRING"},hashContexts:{\'target\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push(">");\n  stack1 = helpers._triageMustache.call(depth0, "view.displayName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("</span>\\n");\n  return buffer;\n  }\n\n  stack1 = helpers[\'if\'].call(depth0, "view.isEditing", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["font-chooser-item"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push("<div ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'style\': ("view.style")\n  },hashTypes:{\'style\': "STRING"},hashContexts:{\'style\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(">\\n  ");\n  stack1 = helpers._triageMustache.call(depth0, "view.label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n</div>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["modal-footer"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n  <button type=\\"button\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":btn :btn-primary :btn-confirm isValid::disabled")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "sendConfirm", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">");\n  stack1 = helpers._triageMustache.call(depth0, "confirmText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n  </button>\\n");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n  <button type=\\"button\\" class=\\"btn btn-default btn-cancel\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "sendCancel", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">");\n  stack1 = helpers._triageMustache.call(depth0, "cancelText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n  </button>\\n");\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n  <button type=\\"button\\" class=\\"btn btn-default btn-close\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "sendClose", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">");\n  stack1 = helpers._triageMustache.call(depth0, "closeText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n  </button>\\n");\n  return buffer;\n  }\n\n  stack1 = helpers[\'if\'].call(depth0, "confirmText", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n\\n");\n  stack1 = helpers[\'if\'].call(depth0, "cancelText", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n\\n");\n  stack1 = helpers[\'if\'].call(depth0, "closeText", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["modal"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push("<div ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":modal-dialog sizeClass")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(">\\n  <div class=\\"modal-content\\">\\n    <div class=\\"modal-header\\">\\n      ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "_headerViewClass", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n    </div>\\n    <div class=\\"modal-body\\">\\n      ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "_contentViewClass", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n    </div>\\n    <div class=\\"modal-footer\\">\\n      ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "_footerViewClass", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n    </div>\\n  </div>\\n</div>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["modal_header"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push("<button type=\\"button\\" class=\\"close\\" ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "sendClose", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">&times;</button>\\n<h4 class=\\"modal-title\\">");\n  stack1 = helpers._triageMustache.call(depth0, "headerText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("</h4>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["multi-select-item"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push("<div>");\n  stack1 = helpers._triageMustache.call(depth0, "view.label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("</div>\\n<a class=\\"ember-select-search-choice-close\\" href=\\"#\\"\\n  ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "removeSelectItem", "view.content", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));\n  data.buffer.push(">×\\n</a>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["multi-select"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n    <span class=\\"ember-select-no-results\\">No results match \\"");\n  stack1 = helpers._triageMustache.call(depth0, "query", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\"</span>\\n  ");\n  return buffer;\n  }\n\n  data.buffer.push("<div class=\\"ember-select-container ember-select-multi dropdown-toggle js-dropdown-toggle\\">\\n  <ul ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":form-control :ember-select-choices choicesFieldClass")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(">\\n    ");\n  data.buffer.push(escapeExpression(helpers.each.call(depth0, "selections", {hash:{\n    \'itemViewClass\': ("view.selectionItemView")\n  },hashTypes:{\'itemViewClass\': "STRING"},hashContexts:{\'itemViewClass\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n    <li class=\\"ember-select-search-field\\">\\n      \\n      <span class=\\"invisible-placeholder\\">");\n  stack1 = helpers._triageMustache.call(depth0, "invisiblePlaceholderText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("</span>\\n      ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "searchView", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n    </li>\\n  </ul>\\n</div>\\n\\n<div class=\\"dropdown-menu js-dropdown-menu\\">\\n  ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "listView", {hash:{\n    \'tagName\': ("ul"),\n    \'classNames\': ("ember-select-results"),\n    \'heightBinding\': ("dropdownHeight"),\n    \'rowHeightBinding\': ("rowHeight"),\n    \'contentBinding\': ("groupedContent"),\n    \'itemViewClassBinding\': ("itemView")\n  },hashTypes:{\'tagName\': "STRING",\'classNames\': "STRING",\'heightBinding\': "STRING",\'rowHeightBinding\': "STRING",\'contentBinding\': "STRING",\'itemViewClassBinding\': "STRING"},hashContexts:{\'tagName\': depth0,\'classNames\': depth0,\'heightBinding\': depth0,\'rowHeightBinding\': depth0,\'contentBinding\': depth0,\'itemViewClassBinding\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n  ");\n  stack1 = helpers[\'if\'].call(depth0, "hasNoResults", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n</div>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["non-editable-text-pill-configuration"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n    \'valueBinding\': ("content.text"),\n    \'placeholder\': ("Enter custom text"),\n    \'class\': ("form-control")\n  },hashTypes:{\'valueBinding\': "STRING",\'placeholder\': "STRING",\'class\': "STRING"},hashContexts:{\'valueBinding\': depth0,\'placeholder\': depth0,\'class\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));\n  data.buffer.push("\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["popover-link-popover"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n  <h4 class=\\"popover-title\\">");\n  stack1 = helpers._triageMustache.call(depth0, "title", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("</h4>\\n");\n  return buffer;\n  }\n\n  data.buffer.push("<div class=\\"arrow\\" ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'style\': ("view.arrowStyle")\n  },hashTypes:{\'style\': "STRING"},hashContexts:{\'style\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("></div>\\n");\n  stack1 = helpers[\'if\'].call(depth0, "title", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n<div class=\\"popover-content\\">\\n  ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "view._contentViewClass", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n</div>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["popover"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n  <h4 class=\\"popover-title\\">");\n  stack1 = helpers._triageMustache.call(depth0, "title", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("</h4>\\n");\n  return buffer;\n  }\n\n  data.buffer.push("<div class=\\"arrow\\" ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'style\': ("arrowStyle")\n  },hashTypes:{\'style\': "STRING"},hashContexts:{\'style\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("></div>\\n");\n  stack1 = helpers[\'if\'].call(depth0, "title", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n<div class=\\"popover-content\\">\\n  ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "view._contentViewClass", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n</div>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["radio-button-layout"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Widgets.RadioButtonComponent", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n");\n  stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["select-item-layout"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n  ");\n  stack1 = helpers._triageMustache.call(depth0, "view.content.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n  ");\n  stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n");\n  return buffer;\n  }\n\n  stack1 = helpers[\'if\'].call(depth0, "view.content.isGroupOption", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["select-item"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n  <span ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'title\': ("view.label")\n  },hashTypes:{\'title\': "ID"},hashContexts:{\'title\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(">\\n    ");\n  stack1 = helpers._triageMustache.call(depth0, "view.label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n  </span>\\n");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n  ");\n  stack1 = helpers._triageMustache.call(depth0, "view.label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n");\n  return buffer;\n  }\n\n  stack1 = helpers[\'if\'].call(depth0, "controller.titleOnOptions", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["select"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \'\';\n  data.buffer.push("\\n      ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "selectedItemView", {hash:{\n    \'contentBinding\': ("selection")\n  },hashTypes:{\'contentBinding\': "STRING"},hashContexts:{\'contentBinding\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n      <i ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': ("view.dropdownToggleIcon")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("></i>\\n    ");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n      <span>");\n  stack1 = helpers._triageMustache.call(depth0, "prompt", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("</span>\\n      <i ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': ("view.dropdownToggleIcon")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("></i>\\n    ");\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = \'\';\n  data.buffer.push("\\n    <div class=\\"ember-select-search\\">\\n      ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "searchView", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n    </div>\\n  ");\n  return buffer;\n  }\n\nfunction program7(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "listView", {hash:{\n    \'tagName\': ("ul"),\n    \'classNames\': ("ember-select-results"),\n    \'heightBinding\': ("dropdownHeight"),\n    \'rowHeightBinding\': ("rowHeight"),\n    \'contentBinding\': ("groupedContent"),\n    \'itemViewClassBinding\': ("itemView")\n  },hashTypes:{\'tagName\': "STRING",\'classNames\': "STRING",\'heightBinding\': "STRING",\'rowHeightBinding\': "STRING",\'contentBinding\': "STRING",\'itemViewClassBinding\': "STRING"},hashContexts:{\'tagName\': depth0,\'classNames\': depth0,\'heightBinding\': depth0,\'rowHeightBinding\': depth0,\'contentBinding\': depth0,\'itemViewClassBinding\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n    ");\n  stack1 = helpers[\'if\'].call(depth0, "hasNoResults", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n  ");\n  return buffer;\n  }\nfunction program8(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n      <span class=\\"ember-select-no-results\\">No results match \\"");\n  stack1 = helpers._triageMustache.call(depth0, "query", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\"</span>\\n    ");\n  return buffer;\n  }\n\nfunction program10(depth0,data) {\n  \n  var buffer = \'\';\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "selectMenuView", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n  ");\n  return buffer;\n  }\n\n  data.buffer.push("<div class=\\"ember-select-container dropdown-toggle js-dropdown-toggle\\" ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleDropdown", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n  <a ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":form-control :ember-select-choice buttonClass disabled:disabled")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(">\\n    ");\n  stack1 = helpers[\'if\'].call(depth0, "selection", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n  </a>\\n</div>\\n\\n<div ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":dropdown-menu :js-dropdown-menu dropdownMenuClass\\n  isDropdownMenuPulledRight:pull-right")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(">\\n  ");\n  stack1 = helpers.unless.call(depth0, "isSelect", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n  ");\n  stack1 = helpers[\'if\'].call(depth0, "showDropdown", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n  ");\n  stack1 = helpers[\'if\'].call(depth0, "selectMenuView", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n</div>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["text-editor-config"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(escapeExpression((helper = helpers[\'select-component\'] || (depth0 && depth0[\'select-component\']),options={hash:{\n    \'content\': ("fontNames"),\n    \'placeholder\': ("Select a Font"),\n    \'selection\': ("textEditor.selectedFontName"),\n    \'class\': ("ember-text-editor-font-family-select js-ember-text-editor-font-family-select"),\n    \'isSelect\': ("true"),\n    \'buttonClass\': ("btn btn-default btn-sm btn-form text-left"),\n    \'itemViewClass\': ("fontChooserItemViewClass"),\n    \'userSelected\': ("applyFontName")\n  },hashTypes:{\'content\': "ID",\'placeholder\': "STRING",\'selection\': "ID",\'class\': "STRING",\'isSelect\': "STRING",\'buttonClass\': "STRING",\'itemViewClass\': "ID",\'userSelected\': "STRING"},hashContexts:{\'content\': depth0,\'placeholder\': depth0,\'selection\': depth0,\'class\': depth0,\'isSelect\': depth0,\'buttonClass\': depth0,\'itemViewClass\': depth0,\'userSelected\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-component", options))));\n  data.buffer.push("\\n\\n");\n  data.buffer.push(escapeExpression((helper = helpers[\'select-component\'] || (depth0 && depth0[\'select-component\']),options={hash:{\n    \'content\': ("fontSizes"),\n    \'placeholder\': ("Select Font Size"),\n    \'optionLabelPath\': ("name"),\n    \'optionValuePath\': ("size"),\n    \'value\': ("textEditor.selectedFontSize"),\n    \'sortLabels\': (false),\n    \'class\': ("ember-text-editor-font-size-select"),\n    \'isSelect\': ("true"),\n    \'buttonClass\': ("btn btn-default btn-sm"),\n    \'userSelected\': ("applyFontSize")\n  },hashTypes:{\'content\': "ID",\'placeholder\': "STRING",\'optionLabelPath\': "STRING",\'optionValuePath\': "STRING",\'value\': "ID",\'sortLabels\': "BOOLEAN",\'class\': "STRING",\'isSelect\': "STRING",\'buttonClass\': "STRING",\'userSelected\': "STRING"},hashContexts:{\'content\': depth0,\'placeholder\': depth0,\'optionLabelPath\': depth0,\'optionValuePath\': depth0,\'value\': depth0,\'sortLabels\': depth0,\'class\': depth0,\'isSelect\': depth0,\'buttonClass\': depth0,\'userSelected\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-component", options))));\n  data.buffer.push("\\n\\n");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Widgets.ColorPicker", {hash:{\n    \'selectedColor\': ("textEditor.selectedForeColor"),\n    \'class\': ("btn btn-default btn-sm"),\n    \'userSelected\': ("applyForeColor")\n  },hashTypes:{\'selectedColor\': "ID",\'class\': "STRING",\'userSelected\': "STRING"},hashContexts:{\'selectedColor\': depth0,\'class\': depth0,\'userSelected\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n\\n<div class=\\"btn-group\\">\\n  <button type=\\"button\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":btn :btn-default :btn-sm textEditor.isBold:active :js-btn-bold")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleBold", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-bold\\"></i>\\n  </button>\\n  <button type=\\"button\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":btn :btn-default :btn-sm textEditor.isItalic:active")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleItalic", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-italic\\"></i>\\n  </button>\\n  <button type=\\"button\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":btn :btn-default :btn-sm textEditor.isUnderline:active")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleUnderline", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-underline\\"></i>\\n  </button>\\n</div>\\n\\n<div class=\\"btn-group\\">\\n  <button type=\\"button\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":btn :btn-default :btn-sm textEditor.isJustifyLeft:active")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "justifyLeft", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-align-left\\"></i>\\n  </button>\\n  <button type=\\"button\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":btn :btn-default :btn-sm textEditor.isJustifyCenter:active")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "justifyCenter", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-align-center\\"></i>\\n  </button>\\n  <button type=\\"button\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":btn :btn-default :btn-sm textEditor.isJustifyRight:active")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "justifyRight", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-align-right\\"></i>\\n  </button>\\n</div>\\n\\n<div class=\\"btn-group\\">\\n  <button type=\\"button\\" class=\\"btn btn-default btn-sm\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "insertOrderedList", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-list-ol\\"></i>\\n  </button>\\n  <button type=\\"button\\" class=\\"btn btn-default btn-sm\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "insertUnorderedList", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-list-ul\\"></i>\\n  </button>\\n</div>\\n\\n<div class=\\"btn-group\\">\\n  <button type=\\"button\\" class=\\"btn btn-default btn-sm\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "outdent", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-outdent\\"></i>\\n  </button>\\n  <button type=\\"button\\" class=\\"btn btn-default btn-sm\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "indent", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-indent\\"></i>\\n  </button>\\n</div>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["text-editor-pill-menu"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n<div class=\\"ember-select-container dropdown-toggle\\" ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleDropdown", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n  <a ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":ember-select-choice buttonClass")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(">\\n    ");\n  stack1 = helpers[\'if\'].call(depth0, "selection", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n  </a>\\n</div>\\n");\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \'\';\n  data.buffer.push("\\n      ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "selectedItemView", {hash:{\n    \'contentBinding\': ("selection")\n  },hashTypes:{\'contentBinding\': "STRING"},hashContexts:{\'contentBinding\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n      <i ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': ("view.dropdownToggleIcon")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("></i>\\n    ");\n  return buffer;\n  }\n\nfunction program4(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n      <span>");\n  stack1 = helpers._triageMustache.call(depth0, "prompt", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("</span>\\n      <i ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': ("view.dropdownToggleIcon")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("></i>\\n    ");\n  return buffer;\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \'\';\n  data.buffer.push("\\n    <div class=\\"ember-select-search\\">\\n      ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "searchView", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n    </div>\\n  ");\n  return buffer;\n  }\n\nfunction program8(depth0,data) {\n  \n  var buffer = \'\', stack1;\n  data.buffer.push("\\n    <span class=\\"ember-select-no-results\\">No results match \\"");\n  stack1 = helpers._triageMustache.call(depth0, "query", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\"</span>\\n  ");\n  return buffer;\n  }\n\nfunction program10(depth0,data) {\n  \n  var buffer = \'\';\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "selectMenuView", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n  ");\n  return buffer;\n  }\n\n  stack1 = helpers[\'if\'].call(depth0, "showButton", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n\\n<div ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":dropdown-menu dropdownMenuClass")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(">\\n  ");\n  stack1 = helpers.unless.call(depth0, "isSelect", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n  ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "listView", {hash:{\n    \'tagName\': ("ul"),\n    \'classNames\': ("ember-select-results"),\n    \'heightBinding\': ("dropdownHeight"),\n    \'rowHeightBinding\': ("rowHeight"),\n    \'contentBinding\': ("groupedContent"),\n    \'itemViewClassBinding\': ("itemView")\n  },hashTypes:{\'tagName\': "STRING",\'classNames\': "STRING",\'heightBinding\': "STRING",\'rowHeightBinding\': "STRING",\'contentBinding\': "STRING",\'itemViewClassBinding\': "STRING"},hashContexts:{\'tagName\': depth0,\'classNames\': depth0,\'heightBinding\': depth0,\'rowHeightBinding\': depth0,\'contentBinding\': depth0,\'itemViewClassBinding\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n  ");\n  stack1 = helpers[\'if\'].call(depth0, "hasNoResults", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n  ");\n  stack1 = helpers[\'if\'].call(depth0, "selectMenuView", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n</div>\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["text-editor-with-non-editable-config"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(escapeExpression((helper = helpers[\'select-component\'] || (depth0 && depth0[\'select-component\']),options={hash:{\n    \'content\': ("fontNames"),\n    \'placeholder\': ("Select a Font"),\n    \'selection\': ("textEditor.selectedFontName"),\n    \'class\': ("ember-text-editor-font-family-select js-ember-text-editor-font-family-select"),\n    \'isSelect\': ("true"),\n    \'buttonClass\': ("btn btn-default btn-sm btn-form text-left"),\n    \'itemViewClass\': ("fontChooserItemViewClass"),\n    \'userSelected\': ("applyFontName")\n  },hashTypes:{\'content\': "ID",\'placeholder\': "STRING",\'selection\': "ID",\'class\': "STRING",\'isSelect\': "STRING",\'buttonClass\': "STRING",\'itemViewClass\': "ID",\'userSelected\': "STRING"},hashContexts:{\'content\': depth0,\'placeholder\': depth0,\'selection\': depth0,\'class\': depth0,\'isSelect\': depth0,\'buttonClass\': depth0,\'itemViewClass\': depth0,\'userSelected\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-component", options))));\n  data.buffer.push("\\n\\n\\n\\n\\n\\n");\n  data.buffer.push(escapeExpression((helper = helpers[\'select-component\'] || (depth0 && depth0[\'select-component\']),options={hash:{\n    \'content\': ("fontSizes"),\n    \'placeholder\': ("Select Font Size"),\n    \'optionLabelPath\': ("name"),\n    \'optionValuePath\': ("size"),\n    \'value\': ("textEditor.selectedFontSize"),\n    \'sortLabels\': (false),\n    \'class\': ("ember-text-editor-font-size-select"),\n    \'isSelect\': ("true"),\n    \'buttonClass\': ("btn btn-default btn-sm"),\n    \'userSelected\': ("applyFontSize")\n  },hashTypes:{\'content\': "ID",\'placeholder\': "STRING",\'optionLabelPath\': "STRING",\'optionValuePath\': "STRING",\'value\': "ID",\'sortLabels\': "BOOLEAN",\'class\': "STRING",\'isSelect\': "STRING",\'buttonClass\': "STRING",\'userSelected\': "STRING"},hashContexts:{\'content\': depth0,\'placeholder\': depth0,\'optionLabelPath\': depth0,\'optionValuePath\': depth0,\'value\': depth0,\'sortLabels\': depth0,\'class\': depth0,\'isSelect\': depth0,\'buttonClass\': depth0,\'userSelected\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "select-component", options))));\n  data.buffer.push("\\n\\n");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Widgets.ColorPicker", {hash:{\n    \'selectedColor\': ("textEditor.selectedForeColor"),\n    \'class\': ("btn btn-default btn-sm"),\n    \'userSelected\': ("applyForeColor")\n  },hashTypes:{\'selectedColor\': "ID",\'class\': "STRING",\'userSelected\': "STRING"},hashContexts:{\'selectedColor\': depth0,\'class\': depth0,\'userSelected\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n\\n<div class=\\"btn-group\\">\\n  <button type=\\"button\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":btn :btn-default :btn-sm textEditor.isBold:active :js-btn-bold")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleBold", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-bold\\"></i>\\n  </button>\\n  <button type=\\"button\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":btn :btn-default :btn-sm textEditor.isItalic:active")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleItalic", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-italic\\"></i>\\n  </button>\\n  <button type=\\"button\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":btn :btn-default :btn-sm textEditor.isUnderline:active")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleUnderline", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-underline\\"></i>\\n  </button>\\n</div>\\n\\n<div class=\\"btn-group\\">\\n  <button type=\\"button\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":btn :btn-default :btn-sm textEditor.isJustifyLeft:active")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "justifyLeft", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-align-left\\"></i>\\n  </button>\\n  <button type=\\"button\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":btn :btn-default :btn-sm textEditor.isJustifyCenter:active")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "justifyCenter", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-align-center\\"></i>\\n  </button>\\n  <button type=\\"button\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n    \'class\': (":btn :btn-default :btn-sm textEditor.isJustifyRight:active")\n  },hashTypes:{\'class\': "STRING"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push("\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "justifyRight", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-align-right\\"></i>\\n  </button>\\n</div>\\n\\n<div class=\\"btn-group\\">\\n  <button type=\\"button\\" class=\\"btn btn-default btn-sm\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "insertOrderedList", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-list-ol\\"></i>\\n  </button>\\n  <button type=\\"button\\" class=\\"btn btn-default btn-sm\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "insertUnorderedList", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-list-ul\\"></i>\\n  </button>\\n</div>\\n\\n<div class=\\"btn-group\\">\\n  <button type=\\"button\\" class=\\"btn btn-default btn-sm\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "outdent", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-outdent\\"></i>\\n  </button>\\n  <button type=\\"button\\" class=\\"btn btn-default btn-sm\\"\\n    ");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, "indent", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));\n  data.buffer.push(">\\n    <i class=\\"fa fa-indent\\"></i>\\n  </button>\\n</div>\\n\\n");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Widgets.PillSelect", {hash:{\n    \'class\': ("insert-non-editable-btn"),\n    \'isSelect\': ("pillHideSearchBox"),\n    \'query\': ("query"),\n    \'showDropdown\': ("showConfigPopover"),\n    \'content\': ("_pillOptions"),\n    \'optionLabelPath\': ("label"),\n    \'optionValuePath\': ("value"),\n    \'prompt\': ("Insert Non-Editable"),\n    \'selection\': ("selectedPillOption"),\n    \'buttonClass\': ("btn btn-default btn-sm"),\n    \'viewName\': ("pillChooser"),\n    \'userSelected\': ("insertPill")\n  },hashTypes:{\'class\': "STRING",\'isSelect\': "ID",\'query\': "ID",\'showDropdown\': "ID",\'content\': "ID",\'optionLabelPath\': "STRING",\'optionValuePath\': "STRING",\'prompt\': "STRING",\'selection\': "ID",\'buttonClass\': "STRING",\'viewName\': "STRING",\'userSelected\': "STRING"},hashContexts:{\'class\': depth0,\'isSelect\': depth0,\'query\': depth0,\'showDropdown\': depth0,\'content\': depth0,\'optionLabelPath\': depth0,\'optionValuePath\': depth0,\'prompt\': depth0,\'selection\': depth0,\'buttonClass\': depth0,\'viewName\': depth0,\'userSelected\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["text-editor-with-non-editable"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push("<iframe class=\\"text-editor-frame\\" src=\\"about:blank\\">\\n</iframe>\\n\\n");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Widgets.PillSelect", {hash:{\n    \'class\': ("insert-non-editable-btn"),\n    \'isSelect\': ("pillHideSearchBox"),\n    \'query\': ("query"),\n    \'showDropdown\': ("showConfigPopover"),\n    \'content\': ("_pillOptions"),\n    \'optionLabelPath\': ("label"),\n    \'optionValuePath\': ("value"),\n    \'prompt\': ("Insert Non-Editable"),\n    \'selection\': ("selectedPillOption"),\n    \'buttonClass\': ("btn btn-default btn-sm"),\n    \'viewName\': ("pillChooserInLine"),\n    \'userSelected\': ("insertPill"),\n    \'showButton\': (false)\n  },hashTypes:{\'class\': "STRING",\'isSelect\': "ID",\'query\': "ID",\'showDropdown\': "ID",\'content\': "ID",\'optionLabelPath\': "STRING",\'optionValuePath\': "STRING",\'prompt\': "STRING",\'selection\': "ID",\'buttonClass\': "STRING",\'viewName\': "STRING",\'userSelected\': "STRING",\'showButton\': "BOOLEAN"},hashContexts:{\'class\': depth0,\'isSelect\': depth0,\'query\': depth0,\'showDropdown\': depth0,\'content\': depth0,\'optionLabelPath\': depth0,\'optionValuePath\': depth0,\'prompt\': depth0,\'selection\': depth0,\'buttonClass\': depth0,\'viewName\': depth0,\'userSelected\': depth0,\'showButton\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["text-editor"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  \n\n\n  data.buffer.push("<iframe class=\\"text-editor-frame\\" src=\\"about:blank\\">\\n</iframe>\\n");\n  \n});\n\nEmber.TEMPLATES["typeahead"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \'\';\n  data.buffer.push("\\n  <div class=\\"dropdown-menu\\">\\n    ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "listView", {hash:{\n    \'tagName\': ("ul"),\n    \'classNames\': ("ember-typeahead-results"),\n    \'heightBinding\': ("dropdownHeight"),\n    \'rowHeightBinding\': ("rowHeight"),\n    \'contentBinding\': ("groupedContent"),\n    \'itemViewClassBinding\': ("itemView")\n  },hashTypes:{\'tagName\': "STRING",\'classNames\': "STRING",\'heightBinding\': "STRING",\'rowHeightBinding\': "STRING",\'contentBinding\': "STRING",\'itemViewClassBinding\': "STRING"},hashContexts:{\'tagName\': depth0,\'classNames\': depth0,\'heightBinding\': depth0,\'rowHeightBinding\': depth0,\'contentBinding\': depth0,\'itemViewClassBinding\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n  </div>\\n");\n  return buffer;\n  }\n\n  data.buffer.push("<div>\\n  ");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, "searchView", {hash:{\n    \'classBinding\': ("searchFieldClass")\n  },hashTypes:{\'classBinding\': "STRING"},hashContexts:{\'classBinding\': depth0},contexts:[depth0],types:["ID"],data:data})));\n  data.buffer.push("\\n</div>\\n");\n  stack1 = helpers.unless.call(depth0, "hasNoResults", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES["view-parent-view-content"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,\'>= 1.0.0\'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = \'\', stack1;\n\n\n  stack1 = helpers._triageMustache.call(depth0, "view.parentView.content", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push("\\n");\n  return buffer;\n  \n});\n\n})();//@ sourceURL=build/src/templates.js'),eval("(function() {\n\nEmber.Widgets.StyleBindingsMixin = Ember.Mixin.create({\n  concatenatedProperties: ['styleBindings'],\n  attributeBindings: ['style'],\n  unitType: 'px',\n  createStyleString: function(styleName, property) {\n    var value;\n    value = this.get(property);\n    if (value === void 0) {\n      return;\n    }\n    if (Ember.typeOf(value) === 'number') {\n      value = value + this.get('unitType');\n    }\n    return \"\" + styleName + \":\" + value + \";\";\n  },\n  applyStyleBindings: function() {\n    var lookup, properties, styleBindings, styleComputed, styles,\n      _this = this;\n    styleBindings = this.styleBindings;\n    if (!styleBindings) {\n      return;\n    }\n    lookup = {};\n    styleBindings.forEach(function(binding) {\n      var property, style, _ref;\n      _ref = binding.split(':'), property = _ref[0], style = _ref[1];\n      return lookup[style || property] = property;\n    });\n    styles = _.keys(lookup);\n    properties = _.values(lookup);\n    styleComputed = Ember.computed(function() {\n      var styleString, styleTokens;\n      styleTokens = styles.map(function(style) {\n        return _this.createStyleString(style, lookup[style]);\n      });\n      styleString = styleTokens.join('');\n      if (styleString.length !== 0) {\n        return styleString;\n      }\n    });\n    styleComputed.property.apply(styleComputed, properties);\n    return Ember.defineProperty(this, 'style', styleComputed);\n  },\n  init: function() {\n    this.applyStyleBindings();\n    return this._super();\n  }\n});\n\nEmber.Widgets.BodyEventListener = Ember.Mixin.create({\n  bodyElementSelector: 'html',\n  bodyClick: Ember.K,\n  didInsertElement: function() {\n    this._super();\n    return Ember.run.next(this, this._setupDocumentHandlers);\n  },\n  willDestroyElement: function() {\n    this._super();\n    return this._removeDocumentHandlers();\n  },\n  _setupDocumentHandlers: function() {\n    var _this = this;\n    if (this._clickHandler || this.isDestroying) {\n      return;\n    }\n    this._clickHandler = function(event) {\n      return Ember.run(function() {\n        if ((_this.get('_state') || _this.get('state')) === 'inDOM' && Ember.isEmpty(_this.$().has($(event.target)))) {\n          return _this.bodyClick();\n        }\n      });\n    };\n    return $(this.get('bodyElementSelector')).on(\"click\", this._clickHandler);\n  },\n  _removeDocumentHandlers: function() {\n    $(this.get('bodyElementSelector')).off(\"click\", this._clickHandler);\n    return this._clickHandler = null;\n  }\n});\n\n\n})();//@ sourceURL=build/src/mixins.js"),eval("(function() {\n\nEmber.Widgets.AccordionComponent = Ember.Component.extend({\n  classNames: 'panel-group',\n  activeIndex: 0\n});\n\nEmber.Widgets.AccordionItem = Ember.View.extend({\n  defaultTemplate: Ember.Handlebars.compile('{{view.content}}'),\n  layoutName: 'accordion-group-layout',\n  classNames: 'panel panel-default',\n  title: 'Untitled Accordion Group',\n  index: 0,\n  isActive: false,\n  content: Ember.computed.alias('parentView.content'),\n  isActiveDidChange: Ember.observer(function() {\n    this.set('isActive', this.get('parentView.activeIndex') === this.get('index'));\n    if (this.get('isActive')) {\n      return this.show();\n    } else {\n      return this.hide();\n    }\n  }, 'parentView.activeIndex'),\n  didInsertElement: function() {\n    var index;\n    index = this.get('parentView').$('.panel').index(this.$());\n    this.set('index', index);\n    return this.isActiveDidChange();\n  },\n  click: function(event) {\n    if (!(this.$(event.target).closest('.panel-heading').length > 0)) {\n      return;\n    }\n    if (this.get('isActive')) {\n      return this.set('parentView.activeIndex', null);\n    } else {\n      return this.set('parentView.activeIndex', this.get('index'));\n    }\n  },\n  hide: function() {\n    var $accordionBody,\n      _this = this;\n    $accordionBody = this.$('.panel-collapse');\n    $accordionBody.height($accordionBody.height())[0].offsetHeight;\n    $accordionBody.removeClass('collapse').removeClass('in').addClass('collapsing');\n    $accordionBody.height(0);\n    return this._onTransitionEnd($accordionBody, function() {\n      return $accordionBody.removeClass('collapsing').addClass('collapse');\n    });\n  },\n  show: function() {\n    var $accordionBody,\n      _this = this;\n    $accordionBody = this.$('.panel-collapse');\n    $accordionBody.removeClass('collapse').addClass('collapsing').height(0);\n    $accordionBody.height($accordionBody[0]['scrollHeight']);\n    return this._onTransitionEnd($(), function() {\n      return $accordionBody.removeClass('collapsing').addClass('in').height('auto');\n    });\n  },\n  _onTransitionEnd: function($el, callback) {\n    if (Ember.Widgets.DISABLE_ANIMATIONS) {\n      return callback();\n    } else {\n      return $el.one($.support.transition.end, callback);\n    }\n  }\n});\n\nEmber.Handlebars.helper('accordion-component', Ember.Widgets.AccordionComponent);\n\nEmber.Handlebars.helper('accordion-item', Ember.Widgets.AccordionItem);\n\n\n})();//@ sourceURL=build/src/accordion.js"),eval("(function() {\n\nEmber.Widgets.CarouselComponent = Ember.Component.extend({\n  layoutName: 'carousel',\n  classNames: ['carousel', 'slide'],\n  classNameBindings: Ember.A(['sliding']),\n  activeIndex: 0,\n  didInsertElement: function() {\n    if (!this.get('content')) {\n      return this.set('content', Ember.A(new Array(this.$('.item').length)));\n    }\n  },\n  actions: {\n    prev: function() {\n      var activeIndex, contentLength, nextIndex;\n      if (this.get('sliding')) {\n        return;\n      }\n      activeIndex = this.get('activeIndex');\n      contentLength = this.get('content.length');\n      nextIndex = activeIndex - 1;\n      nextIndex = nextIndex < 0 ? contentLength - 1 : nextIndex;\n      return this.slide('prev', nextIndex);\n    },\n    next: function() {\n      var activeIndex, contentLength, nextIndex;\n      if (this.get('sliding')) {\n        return;\n      }\n      activeIndex = this.get('activeIndex');\n      contentLength = this.get('content.length');\n      nextIndex = activeIndex + 1;\n      nextIndex = nextIndex >= contentLength ? 0 : nextIndex;\n      return this.slide('next', nextIndex);\n    }\n  },\n  to: function(pos) {\n    var direction;\n    if (this.get('sliding')) {\n      return;\n    }\n    if (!((0 <= pos && pos < this.get('content.length')))) {\n      return;\n    }\n    direction = pos > this.get('activeIndex') ? 'next' : 'prev';\n    return this.slide(direction, pos);\n  },\n  slide: function(type, nextIndex) {\n    var $active, $next, direction,\n      _this = this;\n    if (this.get('activeIndex') === nextIndex) {\n      return;\n    }\n    direction = type === 'next' ? 'left' : 'right';\n    $active = $(this.$('.item').get(this.get('activeIndex')));\n    $next = $(this.$('.item').get(nextIndex));\n    if (!Ember.Widgets.DISABLE_ANIMATIONS) {\n      this.set('sliding', true);\n      $next.addClass(type);\n      $next[0].offsetWidth;\n      $active.addClass(direction);\n      $next.addClass(direction);\n    }\n    return this._onTransitionEnd($next, function() {\n      return Ember.run(_this, function() {\n        this.set('activeIndex', nextIndex);\n        $next.removeClass([type, direction].join(' ')).addClass('active');\n        $active.removeClass(['active', direction].join(' '));\n        return this.set('sliding', false);\n      });\n    });\n  },\n  _onTransitionEnd: function($el, callback) {\n    if (Ember.Widgets.DISABLE_ANIMATIONS) {\n      return callback();\n    } else {\n      return $el.one($.support.transition.end, callback);\n    }\n  }\n});\n\nEmber.Widgets.CarouselIndicator = Ember.View.extend({\n  classNameBindings: 'isActive:active',\n  isActive: Ember.computed(function() {\n    return this.get('contentIndex') === this.get('controller.activeIndex');\n  }).property('contentIndex', 'controller.activeIndex'),\n  click: function() {\n    return this.get('controller').to(this.get('contentIndex'));\n  }\n});\n\nEmber.Widgets.CarouselItem = Ember.View.extend({\n  classNames: 'item'\n});\n\nEmber.Handlebars.helper('carousel-component', Ember.Widgets.CarouselComponent);\n\nEmber.Handlebars.helper('carousel-item', Ember.Widgets.CarouselItem);\n\n\n})();//@ sourceURL=build/src/carousel.js"),eval("(function() {\n\nEmber.Widgets.EditableLabel = Ember.View.extend({\n  templateName: 'editable-label',\n  classNames: ['editable-label'],\n  placeholder: '',\n  isEditing: false,\n  value: null,\n  displayName: Ember.computed(function() {\n    if (Ember.isNone(this.get('value')) || this.get('value') === '') {\n      return this.get('placeholder');\n    } else {\n      return this.get('value');\n    }\n  }).property('value', 'placeholder'),\n  innerTextField: Ember.TextField.extend({\n    valueBinding: Ember.Binding.oneWay('parentView.value'),\n    didInsertElement: function() {\n      return this.$().focus();\n    },\n    blur: function() {\n      this.set('parentView.isEditing', false);\n      return this.set('parentView.value', this.get('value'));\n    }\n  }),\n  editLabel: function() {\n    return this.set('isEditing', true);\n  }\n});\n\nEmber.Handlebars.helper('editable-label-component', Ember.Widgets.EditableLabel);\n\n\n})();//@ sourceURL=build/src/editable_label.js"),eval("(function() {\n\nEmber.Widgets.ModalComponent = Ember.Component.extend(Ember.Widgets.StyleBindingsMixin, {\n  layoutName: 'modal',\n  classNames: ['modal'],\n  classNameBindings: ['isShowing:in', 'hasCloseButton::has-no-close-button', 'fadeEnabled:fade'],\n  modalPaneBackdrop: '<div class=\"modal-backdrop\"></div>',\n  bodyElementSelector: '.modal-backdrop',\n  enforceModality: false,\n  escToCancel: true,\n  backdrop: true,\n  isShowing: false,\n  hasCloseButton: true,\n  fade: true,\n  headerText: \"Modal Header\",\n  confirmText: \"Confirm\",\n  cancelText: \"Cancel\",\n  closeText: null,\n  content: \"\",\n  size: \"normal\",\n  isValid: true,\n  fadeEnabled: Ember.computed(function() {\n    if (Ember.Widgets.DISABLE_ANIMATIONS) {\n      return false;\n    }\n    return this.get('fade');\n  }).property('fade'),\n  confirm: Ember.K,\n  cancel: Ember.K,\n  close: Ember.K,\n  headerViewClass: Ember.View.extend({\n    templateName: 'modal_header'\n  }),\n  contentViewClass: Ember.View.extend({\n    template: Ember.Handlebars.compile(\"<p>{{content}}</p>\")\n  }),\n  footerViewClass: Ember.View.extend({\n    templateName: 'modal-footer'\n  }),\n  _headerViewClass: Ember.computed(function() {\n    var headerViewClass;\n    headerViewClass = this.get('headerViewClass');\n    if (typeof headerViewClass === 'string') {\n      return Ember.get(headerViewClass);\n    } else {\n      return headerViewClass;\n    }\n  }).property('headerViewClass'),\n  _contentViewClass: Ember.computed(function() {\n    var contentViewClass;\n    contentViewClass = this.get('contentViewClass');\n    if (typeof contentViewClass === 'string') {\n      return Ember.get(contentViewClass);\n    } else {\n      return contentViewClass;\n    }\n  }).property('contentViewClass'),\n  _footerViewClass: Ember.computed(function() {\n    var footerViewClass;\n    footerViewClass = this.get('footerViewClass');\n    if (typeof footerViewClass === 'string') {\n      return Ember.get(footerViewClass);\n    } else {\n      return footerViewClass;\n    }\n  }).property('footerViewClass'),\n  sizeClass: Ember.computed(function() {\n    switch (this.get('size')) {\n      case 'large':\n        return 'modal-lg';\n      case 'small':\n        return 'modal-sm';\n      default:\n        return '';\n    }\n  }).property('size'),\n  actions: {\n    sendCancel: function() {\n      var cancel;\n      if (!this.get('isShowing')) {\n        return;\n      }\n      cancel = this.get('cancel');\n      if (typeof cancel === 'function') {\n        this.cancel(this);\n      } else {\n        this.sendAction('cancel');\n      }\n      return this.hide();\n    },\n    sendConfirm: function() {\n      var confirm;\n      if (!this.get('isShowing')) {\n        return;\n      }\n      confirm = this.get('confirm');\n      if (typeof confirm === 'function') {\n        this.confirm(this);\n      } else {\n        this.sendAction('confirm');\n      }\n      return this.hide();\n    },\n    sendClose: function() {\n      var close;\n      if (!this.get('isShowing')) {\n        return;\n      }\n      close = this.get('close');\n      if (typeof close === 'function') {\n        this.close(this);\n      } else {\n        this.sendAction('close');\n      }\n      return this.hide();\n    }\n  },\n  didInsertElement: function() {\n    this._super();\n    if (this.get('fade')) {\n      this.$()[0].offsetWidth;\n    }\n    if (this.get('backdrop')) {\n      this._appendBackdrop();\n    }\n    Ember.run.next(this, function() {\n      return this.set('isShowing', true);\n    });\n    $(document.body).addClass('modal-open');\n    return this._setupDocumentHandlers();\n  },\n  willDestroyElement: function() {\n    this._super();\n    this._removeDocumentHandlers();\n    if (this._backdrop) {\n      return this._backdrop.remove();\n    }\n  },\n  keyHandler: Ember.computed(function() {\n    var _this = this;\n    return function(event) {\n      if (event.which === 27 && _this.get('escToCancel')) {\n        return _this.send('sendCancel');\n      }\n    };\n  }),\n  click: function(event) {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    if (!this.get('enforceModality')) {\n      return this.send('sendCancel');\n    }\n  },\n  hide: function() {\n    var _this = this;\n    this.set('isShowing', false);\n    $(document.body).removeClass('modal-open');\n    if (this._backdrop) {\n      this._backdrop.removeClass('in');\n    }\n    if (this.get('fadeEnabled')) {\n      return this.$().one($.support.transition.end, function() {\n        return Ember.run(_this, _this.destroy);\n      });\n    } else {\n      return Ember.run(this, this.destroy);\n    }\n  },\n  _appendBackdrop: function() {\n    var modalPaneBackdrop, parentLayer;\n    parentLayer = this.$().parent();\n    modalPaneBackdrop = this.get('modalPaneBackdrop');\n    if (this.get('fadeEnabled')) {\n      this._backdrop = jQuery(modalPaneBackdrop).addClass('fade');\n    }\n    this._backdrop.appendTo(parentLayer);\n    return Ember.run.next(this, function() {\n      return this._backdrop.addClass('in');\n    });\n  },\n  _setupDocumentHandlers: function() {\n    var _this = this;\n    this._super();\n    if (!this._hideHandler) {\n      this._hideHandler = function() {\n        return _this.hide();\n      };\n      $(document).on('modal:hide', this._hideHandler);\n    }\n    return $(document).on('keyup', this.get('keyHandler'));\n  },\n  _removeDocumentHandlers: function() {\n    this._super();\n    $(document).off('modal:hide', this._hideHandler);\n    this._hideHandler = null;\n    return $(document).off('keyup', this.get('keyHandler'));\n  }\n});\n\nEmber.Widgets.ModalComponent.reopenClass({\n  rootElement: '.ember-application',\n  poppedModal: null,\n  hideAll: function() {\n    return $(document).trigger('modal:hide');\n  },\n  popup: function(options) {\n    var modal, rootElement;\n    if (options == null) {\n      options = {};\n    }\n    this.hideAll();\n    rootElement = options.rootElement || this.rootElement;\n    modal = this.create(options);\n    if (modal.get('targetObject.container')) {\n      modal.set('container', modal.get('targetObject.container'));\n    }\n    modal.appendTo(rootElement);\n    return modal;\n  }\n});\n\nEmber.Handlebars.helper('modal-component', Ember.Widgets.ModalComponent);\n\n\n})();//@ sourceURL=build/src/modal.js"),eval("(function() {\n\nEmber.Widgets.PopoverMixin = Ember.Mixin.create(Ember.Widgets.StyleBindingsMixin, Ember.Widgets.BodyEventListener, {\n  layoutName: 'popover',\n  classNames: ['popover'],\n  classNameBindings: ['isShowing:in', 'fadeEnabled:fade', 'placement'],\n  styleBindings: ['left', 'top', 'display', 'visibility'],\n  targetElement: null,\n  contentViewClass: null,\n  fade: true,\n  escToCancel: true,\n  placement: 'top',\n  display: 'block',\n  visibility: 'hidden',\n  debounceTime: 100,\n  fadeEnabled: Ember.computed(function() {\n    if (Ember.Widgets.DISABLE_ANIMATIONS) {\n      return false;\n    }\n    return this.get('fade');\n  }).property('fade'),\n  left: 0,\n  top: 0,\n  marginTop: 23,\n  marginLeft: 10,\n  isShowing: false,\n  inserted: false,\n  title: '',\n  content: '',\n  _resizeHandler: null,\n  _scrollHandler: null,\n  _contentViewClass: Ember.computed(function() {\n    if (this.get('contentViewClass')) {\n      return this.get('contentViewClass');\n    }\n    return Ember.View.extend({\n      content: Ember.computed.alias('parentView.content'),\n      templateName: 'view-parent-view-content'\n    });\n  }).property('contentViewClass'),\n  didInsertElement: function() {\n    this._super();\n    this.snapToPosition();\n    this.set('visibility', 'visible');\n    return this.set('isShowing', true);\n  },\n  bodyClick: function() {\n    return this.hide();\n  },\n  hide: function() {\n    var _this = this;\n    if (this.get('isDestroyed')) {\n      return;\n    }\n    this.set('isShowing', false);\n    if (this.get('fadeEnabled')) {\n      return this.$().one($.support.transition.end, function() {\n        return Ember.run(_this, _this.destroy);\n      });\n    } else {\n      return Ember.run(this, this.destroy);\n    }\n  },\n  /*\n  Calculate the offset of the given iframe relative to the top window.\n  - Walks up the iframe chain, checking the offset of each one till it reaches top\n  - Only works with friendly iframes.\n  - Takes into account scrolling, but comes up with a result relative to\n  top iframe, regardless of being visibile withing intervening frames.\n  \n  @param window win    the iframe we're interested in (e.g. window)\n  @param object pos   an object containing the offset so far:\n  { left: [x], top: [y] }\n  (optional - initializes with 0,0 if undefined)\n  @return pos object above\n  \n  via http://stackoverflow.com/a/9676655\n  */\n\n  computeFrameOffset: function(win, pos) {\n    var found, frame, frames, rect, _i, _len;\n    if (pos == null) {\n      pos = {\n        top: 0,\n        left: 0\n      };\n    }\n    frames = win.parent.document.getElementsByTagName(\"iframe\");\n    found = false;\n    for (_i = 0, _len = frames.length; _i < _len; _i++) {\n      frame = frames[_i];\n      if (frame.contentWindow === win) {\n        found = true;\n        break;\n      }\n    }\n    if (found) {\n      rect = frame.getBoundingClientRect();\n      pos.left += rect.left;\n      pos.top += rect.top;\n      if (win !== top) {\n        this.computeFrameOffset(win.parent, pos);\n      }\n    }\n    return pos;\n  },\n  getOffset: function($target) {\n    var doc, pos, win;\n    pos = $target.offset();\n    doc = $target[0].ownerDocument;\n    win = doc.defaultView;\n    return this.computeFrameOffset(win, pos);\n  },\n  snapToPosition: function() {\n    var $target, actualHeight, actualWidth, pos;\n    $target = $(this.get('targetElement'));\n    if ((this.get('_state') || this.get('state')) !== 'inDOM') {\n      return;\n    }\n    actualWidth = this.$()[0].offsetWidth;\n    actualHeight = this.$()[0].offsetHeight;\n    if (Ember.isEmpty($target)) {\n      pos = {\n        top: this.get('top'),\n        left: this.get('left'),\n        width: 0,\n        height: 0\n      };\n    } else {\n      pos = this.getOffset($target);\n      pos.width = $target[0].offsetWidth;\n      pos.height = $target[0].offsetHeight;\n    }\n    switch (this.get('placement')) {\n      case 'bottom':\n        this.set('top', pos.top + pos.height);\n        this.set('left', pos.left + pos.width / 2 - actualWidth / 2);\n        break;\n      case 'top':\n        this.set('top', pos.top - actualHeight);\n        this.set('left', pos.left + pos.width / 2 - actualWidth / 2);\n        break;\n      case 'top-right':\n        this.set('top', pos.top);\n        this.set('left', pos.left + pos.width);\n        break;\n      case 'top-left':\n        this.set('top', pos.top);\n        this.set('left', pos.left - actualWidth);\n        break;\n      case 'bottom-right':\n        this.set('top', pos.top + pos.height);\n        this.set('left', pos.left + pos.width - actualWidth);\n        break;\n      case 'bottom-left':\n        this.set('top', pos.top + pos.height);\n        this.set('left', pos.left);\n        break;\n      case 'left':\n        this.set('top', pos.top - this.get('marginTop'));\n        this.set('left', pos.left - actualWidth);\n        break;\n      case 'right':\n        this.set('top', pos.top - this.get('marginTop'));\n        this.set('left', pos.left + pos.width);\n        break;\n    }\n    this.correctIfOffscreen();\n    if (!Ember.isEmpty($target)) {\n      return this.positionArrow();\n    }\n  },\n  positionArrow: function() {\n    var $target, arrowSize, left, pos, top;\n    $target = $(this.get('targetElement'));\n    pos = this.getOffset($target);\n    pos.width = $target[0].offsetWidth;\n    pos.height = $target[0].offsetHeight;\n    arrowSize = 22;\n    switch (this.get('placement')) {\n      case 'left':\n      case 'right':\n        top = pos.top + pos.height / 2 - this.get('top') - arrowSize / 2;\n        return this.set('arrowStyle', \"margin-top:\" + top + \"px;\");\n      case 'top':\n      case 'bottom':\n        left = pos.left + pos.width / 2 - this.get('left') - arrowSize / 2;\n        return this.set('arrowStyle', \"margin-left:\" + left + \"px;\");\n    }\n  },\n  correctIfOffscreen: function() {\n    var actualHeight, actualWidth, bodyHeight, bodyWidth;\n    bodyWidth = $('body').width();\n    bodyHeight = $('body').height();\n    actualWidth = this.$()[0].offsetWidth;\n    actualHeight = this.$()[0].offsetHeight;\n    if (this.get('left') + actualWidth > bodyWidth) {\n      this.set('left', bodyWidth - actualWidth - this.get('marginLeft'));\n    }\n    if (this.get('left') < 0) {\n      this.set('left', this.get('marginLeft'));\n    }\n    if (this.get('top') + actualHeight > bodyHeight) {\n      this.set('top', bodyHeight - actualHeight - this.get('marginTop'));\n    }\n    if (this.get('top') < 0) {\n      return this.set('top', this.get('marginTop'));\n    }\n  },\n  keyHandler: Ember.computed(function() {\n    var _this = this;\n    return function(event) {\n      if (event.keyCode === 27 && _this.get('escToCancel')) {\n        return _this.hide();\n      }\n    };\n  }),\n  debounceSnapToPosition: Ember.computed(function() {\n    var _this = this;\n    return function() {\n      return Ember.run.debounce(_this, _this.snapToPosition, _this.get('debounceTime'));\n    };\n  }),\n  _setupDocumentHandlers: function() {\n    var _this = this;\n    this._super();\n    if (!this._hideHandler) {\n      this._hideHandler = function() {\n        return _this.hide();\n      };\n      $(document).on('popover:hide', this._hideHandler);\n    }\n    if (!this._resizeHandler) {\n      this._resizeHandler = this.get('debounceSnapToPosition');\n      $(document).on('resize', this._resizeHandler);\n    }\n    if (!this._scrollHandler) {\n      this._scrollHandler = this.get('debounceSnapToPosition');\n      $(document).on('scroll', this._scrollHandler);\n    }\n    return $(document).on('keyup', this.get('keyHandler'));\n  },\n  _removeDocumentHandlers: function() {\n    this._super();\n    $(document).off('popover:hide', this._hideHandler);\n    this._hideHandler = null;\n    $(document).off('resize', this._resizeHandler);\n    this._resizeHandler = null;\n    $(document).off('scroll', this._scrollHandler);\n    this._scrollHandler = null;\n    return $(document).off('keyup', this.get('keyHandler'));\n  }\n});\n\nEmber.Widgets.PopoverComponent = Ember.Component.extend(Ember.Widgets.PopoverMixin);\n\nEmber.Widgets.PopoverComponent.reopenClass({\n  rootElement: '.ember-application',\n  hideAll: function() {\n    return $(document).trigger('popover:hide');\n  },\n  popup: function(options) {\n    var popover, rootElement;\n    this.hideAll();\n    rootElement = options.rootElement || this.rootElement;\n    popover = this.create(options);\n    if (popover.get('targetObject.container')) {\n      popover.set('container', popover.get('targetObject.container'));\n    }\n    popover.appendTo(rootElement);\n    return popover;\n  }\n});\n\nEmber.Handlebars.helper('popover-component', Ember.Widgets.PopoverComponent);\n\n\n})();//@ sourceURL=build/src/popover.js"),eval("(function() {\n\nEmber.Widgets.PopoverLinkComponent = Ember.Component.extend({\n  classNames: ['popover-link'],\n  classNameBindings: ['disabled'],\n  placement: 'top',\n  content: null,\n  title: null,\n  contentViewClass: null,\n  disabled: false,\n  popoverClassNames: [],\n  rootElement: '.ember-application',\n  fade: true,\n  _contentViewClass: Ember.computed(function() {\n    var contentViewClass;\n    contentViewClass = this.get('contentViewClass');\n    if (typeof contentViewClass === 'string') {\n      return Ember.get(contentViewClass);\n    }\n    return contentViewClass;\n  }).property('contentViewClass'),\n  click: function(event) {\n    var popover, popoverView;\n    if (this.get('disabled')) {\n      return;\n    }\n    popover = this.get('_popover');\n    if (((popover != null ? popover.get('_state') : void 0) || (popover != null ? popover.get('state') : void 0)) === 'inDOM') {\n      return popover.hide();\n    } else {\n      popoverView = Ember.View.extend(Ember.Widgets.PopoverMixin, {\n        layoutName: 'popover-link-popover',\n        classNames: this.get('popoverClassNames'),\n        controller: this,\n        targetElement: this.get('element'),\n        container: this.get('container'),\n        placement: Ember.computed.alias('controller.placement'),\n        title: Ember.computed.alias('controller.title'),\n        contentViewClass: this.get('_contentViewClass'),\n        fade: this.get('fade')\n      });\n      popover = popoverView.create();\n      this.set('_popover', popover);\n      return popover.appendTo(this.get('rootElement'));\n    }\n  }\n});\n\nEmber.Handlebars.helper('popover-link-component', Ember.Widgets.PopoverLinkComponent);\n\n\n})();//@ sourceURL=build/src/popover_link.js"),eval("(function() {\n\nEmber.Widgets.SelectOptionView = Ember.ListItemView.extend({\n  tagName: 'li',\n  templateName: 'select-item',\n  layoutName: 'select-item-layout',\n  classNames: 'ember-select-result-item',\n  classNameBindings: Ember.A(['content.isGroupOption:ember-select-group', 'isHighlighted:highlighted']),\n  labelPath: Ember.computed.alias('controller.optionLabelPath'),\n  isHighlighted: Ember.computed(function() {\n    return this.get('controller.highlighted') === this.get('content');\n  }).property('controller.highlighted', 'content'),\n  labelPathDidChange: Ember.observer(function() {\n    var labelPath, path;\n    labelPath = this.get('labelPath');\n    path = labelPath ? \"content.\" + labelPath : 'content';\n    Ember.defineProperty(this, 'label', Ember.computed.alias(path));\n    return this.notifyPropertyChange('label');\n  }, 'content', 'labelPath'),\n  didInsertElement: function() {\n    this._super();\n    return this.labelPathDidChange();\n  },\n  updateContext: function(context) {\n    this._super(context);\n    return this.set('content', context);\n  },\n  click: function() {\n    if (this.get('content.isGroupOption')) {\n      return;\n    }\n    this.set('controller.selection', this.get('content'));\n    this.get('controller').userDidSelect(this.get('content'));\n    if (this.get('controller.showDropdown')) {\n      this.get('controller').send('hideDropdown');\n      return false;\n    }\n  },\n  mouseEnter: function() {\n    if (this.get('content.isGroupOption')) {\n      return;\n    }\n    return this.set('controller.highlighted', this.get('content'));\n  }\n});\n\nEmber.Widgets.SelectComponent = Ember.Component.extend(Ember.Widgets.BodyEventListener, Ember.AddeparMixins.ResizeHandlerMixin, {\n  layoutName: 'select',\n  classNames: 'ember-select',\n  attributeBindings: Ember.A(['tabindex']),\n  classNameBindings: Ember.A(['showDropdown:open', 'isDropup:dropup']),\n  itemViewClass: 'Ember.Widgets.SelectOptionView',\n  prompt: 'Select a Value',\n  placeholder: void 0,\n  disabled: false,\n  highlightedIndex: -1,\n  tabindex: -1,\n  showDropdown: false,\n  dropdownHeight: 300,\n  rowHeight: 26,\n  sortLabels: true,\n  titleOnOptions: false,\n  isSelect: false,\n  isDropup: false,\n  isDropdownMenuPulledRight: false,\n  dropdownToggleIcon: 'fa fa-caret-down',\n  buttonClass: 'btn btn-default',\n  dropdownMenuClass: '',\n  content: Ember.A([]),\n  selection: null,\n  query: '',\n  optionLabelPath: '',\n  optionValuePath: '',\n  optionGroupPath: '',\n  optionDefaultPath: '',\n  selectMenuView: null,\n  updateDropdownLayout: Ember.observer(function() {\n    var dropdownButton, dropdownButtonHeight, dropdownButtonOffset, dropdownMargin, dropdownMenu, dropdownMenuBottom, dropdownMenuHeight, dropdownMenuOffset, dropdownMenuWidth, dropupMenuTop;\n    if ((this.get('_state') || this.get('state')) !== 'inDOM' || this.get('showDropdown') === false) {\n      return;\n    }\n    this.$('.js-dropdown-menu').css('visibility', 'hidden');\n    dropdownButton = this.$('.js-dropdown-toggle')[0];\n    dropdownButtonHeight = this.$(dropdownButton).outerHeight();\n    dropdownButtonOffset = this.$(dropdownButton).offset();\n    dropdownMenu = this.$('.js-dropdown-menu')[0];\n    dropdownMenuHeight = this.$(dropdownMenu).outerHeight();\n    dropdownMenuWidth = this.$(dropdownMenu).outerWidth();\n    dropdownMenuOffset = this.$(dropdownMenu).offset();\n    dropdownMargin = 15;\n    if (this.get('isDropup')) {\n      dropdownMenuBottom = dropdownButtonOffset.top + dropdownButtonHeight + dropdownMenuHeight + dropdownMargin;\n    } else {\n      dropdownMenuBottom = dropdownMenuOffset.top + dropdownMenuHeight;\n    }\n    dropupMenuTop = dropdownButtonOffset.top - dropdownMenuHeight - dropdownMargin;\n    this.set('isDropup', dropupMenuTop > window.scrollY && dropdownMenuBottom > window.innerHeight);\n    this.set('isDropdownMenuPulledRight', dropdownButtonOffset.left + dropdownMenuWidth + dropdownMargin > window.innerWidth);\n    return this.$('.js-dropdown-menu').css('visibility', 'visible');\n  }, 'showDropdown'),\n  onResizeEnd: function() {\n    return Ember.run(this, this.updateDropdownLayout);\n  },\n  itemView: Ember.computed(function() {\n    var itemViewClass;\n    itemViewClass = this.get('itemViewClass');\n    if (typeof itemViewClass === 'string') {\n      return Ember.get(itemViewClass);\n    }\n    return itemViewClass;\n  }).property('itemViewClass'),\n  selectedItemView: Ember.computed(function() {\n    return this.get('itemView').extend({\n      tagName: 'span',\n      labelPath: Ember.computed.alias('controller.optionLabelPath'),\n      context: Ember.computed.alias('controller.selection')\n    });\n  }).property('itemView'),\n  selectedLabel: Ember.computed(function() {\n    return Ember.get(this.get('selection'), this.get('optionLabelPath'));\n  }).property('selection', 'optionLabelPath'),\n  searchView: Ember.TextField.extend({\n    placeholder: Ember.computed.alias('parentView.placeholder'),\n    valueBinding: 'parentView.query',\n    showDropdownDidChange: Ember.observer(function() {\n      return Ember.run.schedule('afterRender', this, function() {\n        if ((this.get('_state') || this.get('state')) === 'inDOM') {\n          return this.$().focus();\n        }\n      });\n    }, 'parentView.showDropdown')\n  }),\n  listView: Ember.ListView.extend({\n    style: Ember.computed(function() {\n      var height;\n      height = Math.min(this.get('height'), this.get('totalHeight'));\n      return \"height: \" + height + \"px\";\n    }).property('height', 'totalHeight')\n  }),\n  preparedContent: Ember.computed(function() {\n    if (this.get('sortLabels')) {\n      return this.get('sortedFilteredContent');\n    } else {\n      return this.get('filteredContent');\n    }\n  }).property('sortLabels', 'filteredContent', 'sortedFilteredContent'),\n  contentProxy: Ember.computed(function() {\n    var ContentProxy, matcher, optionLabelPath, query,\n      _this = this;\n    matcher = function(searchText, item) {\n      return _this.matcher(searchText, item);\n    };\n    optionLabelPath = this.get('optionLabelPath');\n    query = this.get('query');\n    ContentProxy = Ember.ObjectProxy.extend({\n      filteredContent: Ember.computed(function() {\n        return (this.get('content') || []).filter(function(item) {\n          return matcher(query, item);\n        });\n      }).property(\"content.@each.\" + optionLabelPath),\n      sortedFilteredContent: Ember.computed(function() {\n        var _this = this;\n        return _.sortBy(this.get('filteredContent'), function(item) {\n          var _ref;\n          return (_ref = Ember.get(item, optionLabelPath)) != null ? _ref.toLowerCase() : void 0;\n        });\n      }).property(\"filteredContent\")\n    });\n    return ContentProxy.create({\n      content: this.get('content')\n    });\n  }).property('content', 'optionLabelPath', 'query'),\n  filteredContent: Ember.computed.alias('contentProxy.filteredContent'),\n  sortedFilteredContent: Ember.computed.alias('contentProxy.sortedFilteredContent'),\n  groupedContent: Ember.computed(function() {\n    var content, groups, path, result;\n    path = this.get('optionGroupPath');\n    content = this.get('preparedContent');\n    if (!path) {\n      return content;\n    }\n    groups = _.groupBy(content, function(item) {\n      return Ember.get(item, path);\n    });\n    result = Ember.A();\n    _.keys(groups).sort().forEach(function(key) {\n      result.pushObject(Ember.Object.create({\n        isGroupOption: true,\n        name: key\n      }));\n      return result.pushObjects(groups[key]);\n    });\n    return result;\n  }).property('preparedContent', 'optionGroupPath', 'labels.[]'),\n  hasNoResults: Ember.computed.empty('filteredContent'),\n  value: Ember.computed(function(key, value) {\n    var selection, valuePath;\n    if (arguments.length === 2) {\n      valuePath = this.get('optionValuePath');\n      selection = value;\n      if (valuePath) {\n        selection = this.get('content').findProperty(valuePath, value);\n      }\n      this.set('selection', selection);\n      return value;\n    } else {\n      valuePath = this.get('optionValuePath');\n      selection = this.get('selection');\n      if (valuePath) {\n        return Ember.get(selection, valuePath);\n      } else {\n        return selection;\n      }\n    }\n  }).property('selection'),\n  didInsertElement: function() {\n    this._super();\n    return this.setDefaultSelection();\n  },\n  matcher: function(searchText, item) {\n    var escapedSearchText, label, regex;\n    if (!searchText) {\n      return true;\n    }\n    label = Ember.get(item, this.get('optionLabelPath'));\n    escapedSearchText = searchText.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n    regex = new RegExp(escapedSearchText, 'i');\n    return regex.test(label);\n  },\n  setDefaultSelection: Ember.observer(function() {\n    var content, defaultPath;\n    if (this.get('selection')) {\n      return;\n    }\n    content = this.get('content');\n    defaultPath = this.get('optionDefaultPath');\n    if (!(content && defaultPath)) {\n      return;\n    }\n    return this.set('selection', content.findProperty(defaultPath));\n  }, 'content.@each'),\n  selectableOptionsDidChange: Ember.observer(function() {\n    var highlighted;\n    if (this.get('showDropdown')) {\n      highlighted = this.get('highlighted');\n      if (!this.get('selectableOptions').contains(highlighted)) {\n        return this.set('highlighted', this.get('selectableOptions.firstObject'));\n      }\n    }\n  }, 'selectableOptions', 'showDropdown'),\n  /*\n  # SELECTION RELATED\n  */\n\n  KEY_EVENTS: {\n    8: 'deletePressed',\n    27: 'escapePressed',\n    13: 'enterPressed',\n    38: 'upArrowPressed',\n    40: 'downArrowPressed'\n  },\n  selectableOptions: Ember.computed(function() {\n    return Ember.A((this.get('groupedContent') || []).filter(function(item) {\n      return !Ember.get(item, 'isGroupOption');\n    }));\n  }).property('groupedContent'),\n  highlighted: Ember.computed(function(key, value) {\n    var content, index;\n    content = this.get('selectableOptions') || Ember.A([]);\n    value = value || Ember.A([]);\n    if (arguments.length === 1) {\n      index = this.get('highlightedIndex');\n      value = content.objectAt(index);\n    } else {\n      index = content.indexOf(value);\n      this.setHighlightedIndex(index, true);\n    }\n    return value;\n  }).property('selectableOptions', 'highlightedIndex'),\n  bodyClick: function() {\n    return this.send('hideDropdown');\n  },\n  keyDown: function(event) {\n    var map, method, _ref;\n    if (!this.get('showDropdown')) {\n      return this.set('showDropdown', true);\n    }\n    map = this.get('KEY_EVENTS');\n    method = map[event.keyCode];\n    if (method) {\n      return (_ref = this.get(method)) != null ? _ref.apply(this, arguments) : void 0;\n    }\n  },\n  deletePressed: Ember.K,\n  escapePressed: function(event) {\n    return this.send('hideDropdown');\n  },\n  enterPressed: function(event) {\n    var item;\n    item = this.get('highlighted');\n    if (!Ember.isEmpty(item)) {\n      this.set('selection', item);\n    }\n    if (!Ember.isEmpty(item)) {\n      this.userDidSelect(item);\n    }\n    this.send('hideDropdown');\n    return event.preventDefault();\n  },\n  upArrowPressed: function(event) {\n    var index, sel;\n    sel = this.get('highlightedIndex');\n    index = event.ctrlKey || event.metaKey ? 0 : sel - 1;\n    this.setHighlightedIndex(index, true);\n    return event.preventDefault();\n  },\n  downArrowPressed: function(event) {\n    var clen, index, sel;\n    sel = this.get('highlightedIndex');\n    clen = this.get('selectableOptions.length');\n    index = event.ctrlKey || event.metaKey ? clen - 1 : sel + 1;\n    this.setHighlightedIndex(index, true);\n    return event.preventDefault();\n  },\n  setHighlightedIndex: function(index, ensureVisible) {\n    if (!this.ensureIndex(index)) {\n      return;\n    }\n    this.set('highlightedIndex', index);\n    if (ensureVisible) {\n      return this.ensureVisible(index);\n    }\n  },\n  ensureIndex: function(index) {\n    var clen;\n    clen = this.get('selectableOptions.length');\n    return index >= 0 && index < clen;\n  },\n  ensureVisible: function(index) {\n    var $listView, endIndex, item, listView, newIndex, numRows, startIndex;\n    $listView = this.$('.ember-list-view');\n    listView = Ember.View.views[$listView.attr('id')];\n    if (!listView) {\n      return;\n    }\n    startIndex = listView._startingIndex();\n    numRows = listView._childViewCount() - 1;\n    endIndex = startIndex + numRows;\n    item = this.get('selectableOptions').objectAt(index);\n    newIndex = this.get('groupedContent').indexOf(item);\n    if (index === 0) {\n      return $listView.scrollTop(0);\n    } else if (newIndex < startIndex) {\n      return $listView.scrollTop(newIndex * this.get('rowHeight'));\n    } else if (newIndex >= endIndex) {\n      return $listView.scrollTop((newIndex - numRows + 1.5) * this.get('rowHeight'));\n    }\n  },\n  userDidSelect: function(selection) {\n    return this.sendAction('userSelected', selection);\n  },\n  actions: {\n    toggleDropdown: function(event) {\n      if (this.get('disabled')) {\n        return;\n      }\n      return this.toggleProperty('showDropdown');\n    },\n    hideDropdown: function(event) {\n      if (this.get('isDestroyed') || this.get('isDestroying')) {\n        return;\n      }\n      return this.set('showDropdown', false);\n    }\n  }\n});\n\nEmber.Handlebars.helper('select-component', Ember.Widgets.SelectComponent);\n\n\n})();//@ sourceURL=build/src/select.js"),eval("(function() {\n\nEmber.Widgets.MultiSelectOptionView = Ember.View.extend({\n  tagName: 'li',\n  templateName: 'multi-select-item',\n  classNames: 'ember-select-search-choice',\n  labelPath: Ember.computed.alias('controller.optionLabelPath'),\n  didInsertElement: function() {\n    this._super();\n    return this.labelPathDidChange();\n  },\n  labelPathDidChange: Ember.observer(function() {\n    var labelPath, path;\n    labelPath = this.get('labelPath');\n    path = labelPath ? \"context.\" + labelPath : 'context';\n    Ember.defineProperty(this, 'label', Ember.computed.alias(path));\n    return this.notifyPropertyChange('label');\n  }, 'context', 'labelPath')\n});\n\nEmber.Widgets.MultiSelectComponent = Ember.Widgets.SelectComponent.extend({\n  layoutName: 'multi-select',\n  selections: void 0,\n  choicesFieldClass: '',\n  placeholder: void 0,\n  persistentPlaceholder: void 0,\n  values: Ember.computed(function(key, value) {\n    var selections, valuePath;\n    if (arguments.length === 2) {\n      if (!value) {\n        return;\n      }\n      valuePath = this.get('optionValuePath');\n      this.set('selections', Ember.A(this.get('content').filter(function(item) {\n        return value.contains(Ember.get(item, valuePath));\n      })));\n      return value;\n    } else {\n      valuePath = this.get('optionValuePath');\n      selections = this.get('selections');\n      if (valuePath) {\n        return selections.getEach(valuePath);\n      } else {\n        return selections;\n      }\n    }\n  }).property('selections.@each'),\n  selectionItemView: Ember.Widgets.MultiSelectOptionView,\n  invisiblePlaceholderText: Ember.computed(function() {\n    if (this.get('query')) {\n      return this.get('query');\n    }\n    if (this.get('selections.length')) {\n      return this.get('persistentPlaceholder');\n    }\n    return this.get('placeholder') || this.get('persistentPlaceholder');\n  }).property('query', 'placeholder', 'persistentPlaceholder', 'selections.length'),\n  searchView: Ember.TextField.extend({\n    \"class\": 'ember-select-input',\n    valueBinding: 'parentView.query',\n    focusIn: function(event) {\n      return this.set('parentView.showDropdown', true);\n    },\n    placeholder: Ember.computed(function() {\n      if (this.get('parentView.selections.length')) {\n        return this.get('parentView.persistentPlaceholder');\n      }\n      return this.get('parentView.placeholder') || this.get('parentView.persistentPlaceholder');\n    }).property('parentView.placeholder', 'parentView.persistentPlaceholder', 'parentView.selections.length')\n  }),\n  preparedContent: Ember.computed(function() {\n    var content, selections;\n    content = this.get('content');\n    selections = this.get('selections');\n    if (!(content && selections)) {\n      return Ember.A([]);\n    }\n    if (this.get('sortLabels')) {\n      return this.get('sortedFilteredContent').filter(function(item) {\n        return !selections.contains(item);\n      });\n    } else {\n      return this.get('filteredContent').filter(function(item) {\n        return !selections.contains(item);\n      });\n    }\n  }).property('content.@each', 'filteredContent.[]', 'sortedFilteredContent.[]', 'selections.@each', 'sortLabels'),\n  selectionDidChange: Ember.observer(function() {\n    var selection, selections;\n    selections = this.get('selections');\n    selection = this.get('selection');\n    this.set('selection', null);\n    this.set('query', '');\n    if (!Ember.isEmpty(selection) && !selections.contains(selection)) {\n      return selections.pushObject(selection);\n    }\n  }, 'selection'),\n  didInsertElement: function() {\n    this._super();\n    if (!this.get('selections')) {\n      this.set('selections', Ember.A([]));\n    }\n    if (!this.get('values')) {\n      return this.set('values', Ember.A([]));\n    }\n  },\n  deletePressed: function(event) {\n    if (event.target.selectionStart === 0) {\n      return this.removeSelectItem(this.get('selections.lastObject'));\n    }\n  },\n  removeSelectItem: function(item) {\n    return this.get('selections').removeObject(item);\n  },\n  actions: {\n    removeSelectItem: function(item) {\n      return this.removeSelectItem(item);\n    }\n  }\n});\n\nEmber.Handlebars.helper('multi-select-component', Ember.Widgets.MultiSelectComponent);\n\n\n})();//@ sourceURL=build/src/multi_select.js"),eval("(function() {\n\nEmber.Widgets.RadioButtonComponent = Ember.Component.extend({\n  attributeBindings: ['type', 'checked', 'disabled'],\n  classNames: ['radio-input'],\n  tagName: 'input',\n  type: 'radio',\n  checked: Ember.computed.alias('parentView.checked'),\n  disabled: Ember.computed.alias('parentView._disabled')\n});\n\nEmber.Widgets.RadioButtonWrapperComponent = Ember.Component.extend({\n  layoutName: 'radio-button-layout',\n  value: null,\n  disabled: false,\n  selectedValue: Ember.computed.alias('parentView.selectedValue'),\n  classNames: ['radio-button'],\n  checked: false,\n  _disabled: Ember.computed.or('parentView.disabled', 'disabled'),\n  selectedValueChanged: Ember.on('init', Ember.observer(function() {\n    var selectedValue;\n    selectedValue = this.get('selectedValue');\n    if (!Ember.isEmpty(selectedValue) && this.get('value') === selectedValue) {\n      return this.set('checked', true);\n    } else {\n      return this.set('checked', false);\n    }\n  }, 'selectedValue')),\n  click: function(event) {\n    if (this.get('_disabled')) {\n      return;\n    }\n    this.set('checked', true);\n    return this.set('selectedValue', this.get('value'));\n  }\n});\n\nEmber.Widgets.RadioButtonGroupComponent = Ember.Component.extend({\n  classNames: ['ember-radio-button-group'],\n  selectedValue: null,\n  disabled: false\n});\n\nEmber.Handlebars.helper('radio-button-group-component', Ember.Widgets.RadioButtonGroupComponent);\n\nEmber.Handlebars.helper('radio-button', Ember.Widgets.RadioButtonWrapperComponent);\n\n\n})();//@ sourceURL=build/src/radio_button.js"),eval("(function() {\n\nEmber.Widgets.DomHelper = Ember.Mixin.create({\n  KEY_CODES: {\n    BACKSPACE: 8,\n    DELETE: 46,\n    DOWN: 40,\n    ENTER: 13,\n    LEFT: 37,\n    RIGHT: 39,\n    SPACEBAR: 32,\n    TAB: 9,\n    UP: 38,\n    ESCAPE: 27\n  },\n  selectElement: function(document, element, collapseMode) {\n    var range;\n    if (collapseMode == null) {\n      collapseMode = \"end\";\n    }\n    if (document.createRange) {\n      range = document.createRange();\n      range.selectNodeContents(element);\n      if (collapseMode !== \"none\") {\n        range.collapse(collapseMode === \"beginning\" ? true : false);\n      }\n      return this.activateRange(document, range);\n    }\n  },\n  activateRange: function(document, range) {\n    var selection;\n    selection = document.getSelection();\n    selection.removeAllRanges();\n    selection.addRange(range);\n    return range;\n  },\n  deleteRange: function(range, shouldDeleteContainer) {\n    var endParent, startParent;\n    if (shouldDeleteContainer == null) {\n      shouldDeleteContainer = true;\n    }\n    startParent = range.startContainer.parentNode;\n    endParent = range.endContainer.parentNode;\n    range.deleteContents();\n    if (this.isEmpty(startParent) && shouldDeleteContainer) {\n      $(startParent).remove();\n    }\n    if (this.isEmpty(endParent) && shouldDeleteContainer) {\n      return $(endParent).remove();\n    }\n  },\n  insertHTMLAtRange: function(range, html) {\n    return this.insertElementAtRange(range, this.createElementsFromString(html)[0]);\n  },\n  insertElementAtRange: function(range, node) {\n    this.deleteRange(range, false);\n    range.insertNode(node);\n    return node;\n  },\n  getCurrentRange: function() {\n    var idocument, iframe;\n    iframe = this.$('iframe.text-editor-frame')[0];\n    idocument = iframe.contentDocument || iframe.contentWindow.document;\n    if (idocument.getSelection().rangeCount > 0) {\n      return idocument.getSelection().getRangeAt(0);\n    } else {\n      return null;\n    }\n  },\n  isEmpty: function(element) {\n    var _ref;\n    return element.children.length === 0 && element.childNodes.length <= 1 && ((_ref = element.childNodes[0]) != null ? _ref.length : void 0) === 0;\n  },\n  createElementsFromString: function(string) {\n    return $(\"<div/>\").html(string).contents();\n  },\n  convertElementsToString: function(elements) {\n    return $(\"<div/>\").html(elements).html();\n  },\n  getNonEmptySideNode: function(range, left, deep) {\n    var index, node, nodeIsEmpty, sideNode, _ref;\n    if (left == null) {\n      left = true;\n    }\n    nodeIsEmpty = function(node) {\n      var _ref;\n      return (node != null ? (_ref = node.nodeValue) != null ? _ref.trim().length : void 0 : void 0) === 0;\n    };\n    node = range[left ? 'startContainer' : 'endContainer'];\n    while (((sideNode = node[left ? 'previousSibling' : 'nextSibling']) === null || nodeIsEmpty(sideNode)) && !$(node).hasClass(this.EDITOR_CLASS)) {\n      if (nodeIsEmpty(sideNode)) {\n        node = node[left ? 'previousSibling' : 'nextSibling'];\n      } else {\n        node = node.parentNode;\n      }\n    }\n    if (deep) {\n      while ((sideNode != null ? (_ref = sideNode.children) != null ? _ref.length : void 0 : void 0) > 0) {\n        index = left ? sideNode.children.length - 1 : 0;\n        sideNode = sideNode.children[index];\n      }\n    }\n    return sideNode;\n  },\n  getCharactersPrecedingCaret: function() {\n    var precedingChars, range;\n    range = this.getCurrentRange();\n    if (range === null) {\n      return \"\";\n    }\n    range.collapse(true);\n    range.setStart(range.startContainer, 0);\n    precedingChars = range.toString();\n    return precedingChars;\n  },\n  deleteCharactersPrecedingCaret: function(length, shouldDeleteContainer) {\n    var range;\n    if (shouldDeleteContainer == null) {\n      shouldDeleteContainer = true;\n    }\n    range = this.getCurrentRange();\n    if (range === null) {\n      return \"\";\n    }\n    range.collapse(true);\n    range.setStart(range.startContainer, range.endOffset - length);\n    return this.deleteRange(range, shouldDeleteContainer);\n  },\n  wrapInDiv: function(htmlElements) {\n    var endSlice, isDiv, newElement, slicedElements, _results;\n    isDiv = htmlElements.map(function(i, el) {\n      var _ref;\n      return ((_ref = el.tagName) != null ? _ref.toLowerCase() : void 0) === \"div\";\n    });\n    isDiv = isDiv.toArray();\n    if (isDiv.every(function(elem) {\n      return elem;\n    })) {\n      return;\n    }\n    if (htmlElements.length === 1 && htmlElements[0].className === \"rangySelectionBoundary\") {\n      return;\n    }\n    _results = [];\n    while (htmlElements.length > 0) {\n      endSlice = isDiv.indexOf(true);\n      if (endSlice === -1) {\n        endSlice = isDiv.length;\n      }\n      if (endSlice > 0) {\n        slicedElements = htmlElements.slice(0, endSlice);\n        newElement = slicedElements.wrapAll('<div/>');\n        slicedElements.wrapAll('<div/>').parent().replaceWith(newElement);\n      } else {\n        endSlice = 1;\n      }\n      htmlElements = htmlElements.slice(endSlice);\n      _results.push(isDiv = isDiv.slice(endSlice));\n    }\n    return _results;\n  }\n});\n\n\n})();//@ sourceURL=build/src/text_widget/dom_helper.js"),eval("(function() {\n\nEmber.Widgets.TextEditorComponent = Ember.Component.extend(Ember.Widgets.DomHelper, {\n  layoutName: 'text-editor',\n  selectedFontName: 'Helvetica Neue',\n  selectedFontSize: '2',\n  selectedForeColor: 'rgb(0, 0, 0)',\n  isToolbarVisible: true,\n  EDITOR_CLASS: 'text-editor',\n  PLACEHOLDER_TEXT: 'Click to edit',\n  commands: Ember.A(['bold', 'italic', 'underline', 'fontName', 'fontSize', 'foreColor', 'indent', 'outdent', 'insertOrderedList', 'insertUnorderedList', 'justifyLeft', 'justifyCenter', 'justifyRight', 'strikeThrough']),\n  iframeHeadContents: Ember.computed(function() {\n    return \"<style>\\n  html,\\n  body {\\n    min-height: 0;\\n    min-width: 0;\\n    margin: 0;\\n    background: transparent;\\n    font-family: \\\"Helvetica Neue\\\";\\n  }\\n  .\" + this.EDITOR_CLASS + \" {\\n  min-height: 100%;\\n  -webkit-box-sizing: border-box;\\n  -moz-box-sizing: border-box;\\n  box-sizing: border-box;\\n  padding: 5px;\\n}\\n.\" + this.EDITOR_CLASS + \":focus {\\n    outline: none;\\n  }\\n  .non-editable {\\n    display: inline-block;\\n    padding: 0 4px;\\n    margin: 0 1px;\\n    background-color: #e7e7e7;\\n    list-style-type: none;\\n  }\\n  .configurable {\\n    cursor: pointer;\\n  }\\n  p:first-of-type:empty:not(:focus):before {\\n    content: attr(data-ph);\\n    color: grey;\\n    font-style: italic;\\n  }\\n</style>\";\n  }).property('EDITOR_CLASS'),\n  iframeBodyContents: Ember.computed(function() {\n    return '<p data-ph=\"' + this.PLACEHOLDER_TEXT + '\"></p>';\n  }).property('PLACEHOLDER_TEXT'),\n  getEditor: function() {\n    return this.$('iframe.text-editor-frame').contents().find('.' + this.EDITOR_CLASS);\n  },\n  getDocument: function() {\n    var iframe;\n    iframe = this.$('iframe.text-editor-frame')[0];\n    return iframe.contentDocument || iframe.contentWindow.document;\n  },\n  didInsertElement: function() {\n    var $body, $head, $iframe, $iframeContents, iframe,\n      _this = this;\n    this._super();\n    $iframe = this.$('iframe.text-editor-frame');\n    $iframeContents = $iframe.contents();\n    $head = $iframeContents.find('head');\n    $head.append(this.get('iframeHeadContents'));\n    $body = $iframeContents.find('body');\n    $body.addClass(this.EDITOR_CLASS);\n    $body.attr('contentEditable', true);\n    $body.append(this.get('iframeBodyContents'));\n    iframe = $iframe[0];\n    iframe.contentWindow.onkeyup = function(event) {\n      return _this.keyUp(event);\n    };\n    iframe.contentWindow.onkeydown = function(event) {\n      return _this.keyDown(event);\n    };\n    iframe.contentWindow.onmouseup = function(event) {\n      return _this.mouseUp(event);\n    };\n    iframe.contentWindow.onmousedown = function(event) {\n      return _this.mouseDown(event);\n    };\n    iframe.contentWindow.onclick = function(event) {\n      return _this.click(event);\n    };\n    return this.get('commands').forEach(function(command) {\n      return _this.set(command, function(arg) {\n        _this.getDocument().execCommand(command, true, arg);\n        return _this.queryCommandState();\n      });\n    });\n  },\n  keyUp: function(event) {\n    var $body, $iframe, $iframeContents, iframeDocument, range, selection;\n    if (event.keyCode === this.KEY_CODES.BACKSPACE) {\n      $iframe = this.$('iframe.text-editor-frame');\n      $iframeContents = $iframe.contents();\n      $body = $iframeContents.find('body');\n      if (!$body.children().length) {\n        $body.append(this.get('iframeBodyContents'));\n        iframeDocument = this.getDocument();\n        selection = iframeDocument.getSelection();\n        selection.removeAllRanges();\n        range = iframeDocument.createRange();\n        range.selectNodeContents(iframeDocument.body.firstChild);\n        return selection.addRange(range);\n      }\n    } else {\n      return this.queryCommandState();\n    }\n  },\n  mouseUp: function(event) {\n    return this.queryCommandState();\n  },\n  queryCommandState: function() {\n    var fontName, idocument;\n    idocument = this.getDocument();\n    this.set('isBold', idocument.queryCommandState('bold'));\n    this.set('isItalic', idocument.queryCommandState('italic'));\n    this.set('isUnderline', idocument.queryCommandState('underline'));\n    this.set('isJustifyLeft', idocument.queryCommandState('justifyLeft'));\n    this.set('isJustifyCenter', idocument.queryCommandState('justifyCenter'));\n    this.set('isJustifyRight', idocument.queryCommandState('justifyRight'));\n    fontName = idocument.queryCommandValue('fontName') || '';\n    this.set('selectedFontName', fontName.replace(/^'/, '').replace(/'$/, ''));\n    this.set('selectedFontSize', idocument.queryCommandValue('fontSize'));\n    return this.set('selectedForeColor', idocument.queryCommandValue('foreColor'));\n  },\n  click: function(event) {\n    return Ember.K;\n  },\n  keyDown: function(event) {\n    return Ember.K;\n  },\n  mouseDown: function(event) {\n    return Ember.K;\n  }\n});\n\n\n})();//@ sourceURL=build/src/text_widget/text_editor.js"),eval("(function() {\n\nEmber.Widgets.BaseNonEditablePill = Ember.Controller.extend(Ember.Widgets.DomHelper, {\n  textEditor: null,\n  params: Ember.computed(function() {\n    return {};\n  }),\n  name: null,\n  result: function() {\n    return Ember.K;\n  },\n  configurable: false,\n  configure: function() {\n    return this.send('modalConfirm');\n  },\n  actions: {\n    modalConfirm: function() {\n      if (this.get('params.pillId')) {\n        return this.get('textEditor').updatePill(this);\n      } else {\n        this.set('params.pillId', this.get('textEditor').getNewPillId());\n        this.set('params.type', \"\" + this.constructor);\n        return this.get('textEditor').insertPill(this);\n      }\n    },\n    modalCancel: function() {\n      return Ember.K;\n    }\n  },\n  updateContent: function() {\n    return $(this.get('pillElement')).text(this.result());\n  },\n  render: function() {\n    var key, span, value, _ref;\n    span = this.createElementsFromString(\"<span></span>\");\n    span.addClass('non-editable');\n    if (this.get('configurable')) {\n      span.addClass('configurable');\n    }\n    span.attr({\n      'title': this.get('name')\n    });\n    span.attr('contentEditable', false);\n    _ref = this.get('params');\n    for (key in _ref) {\n      value = _ref[key];\n      span.attr('data-' + Ember.String.dasherize(key), value);\n    }\n    this.set('pillElement', span);\n    this.updateContent(span);\n    return span[0];\n  }\n});\n\nEmber.Widgets.NonEditableTextPill = Ember.Widgets.BaseNonEditablePill.extend({\n  name: \"Custom Text\",\n  text: Ember.computed.alias('params.text'),\n  result: function() {\n    return this.get('params.text');\n  },\n  configurable: true,\n  configure: function() {\n    var modal;\n    return modal = Ember.Widgets.ModalComponent.popup({\n      content: this,\n      targetObject: this,\n      confirm: \"modalConfirm\",\n      cancel: \"modalCancel\",\n      contentViewClass: Ember.View.extend({\n        templateName: 'non-editable-text-pill-configuration'\n      }),\n      headerText: this.get('name'),\n      confirmText: \"Insert\"\n    });\n  }\n});\n\nEmber.Widgets.TodaysDatePill = Ember.Widgets.BaseNonEditablePill.extend({\n  name: \"Today's Date\",\n  result: function() {\n    return Date();\n  }\n});\n\nEmber.Widgets.PillSelect = Ember.Widgets.SelectComponent.extend({\n  templateName: 'text-editor-pill-menu',\n  isSelect: true,\n  showButton: true\n});\n\nEmber.Widgets.PillInsertMixin = Ember.Mixin.create({\n  pillOptions: Ember.A([Ember.Widgets.TodaysDatePill, Ember.Widgets.NonEditableTextPill]),\n  _pillOptions: Ember.computed(function() {\n    var _this = this;\n    return Ember.A(this.getWithDefault('pillOptions', []).map(function(option) {\n      return {\n        label: option.create().name,\n        value: option\n      };\n    }));\n  }).property('pillOptions'),\n  actions: {\n    insertPill: function(pillOption) {\n      var selectedPillOption;\n      selectedPillOption = pillOption.value.create({\n        textEditor: this.get('textEditor') || this\n      });\n      selectedPillOption.configure();\n      return this.set('selectedPillOption', null);\n    }\n  }\n});\n\n\n})();//@ sourceURL=build/src/text_widget/non_editable_pill.js"),eval("(function() {\n\nEmber.Widgets.TextEditorConfigComponent = Ember.Component.extend({\n  layoutName: 'text-editor-config',\n  classNames: Ember.A(['ember-text-editor-toolbar']),\n  selectedFontName: 'Helvetica Neue',\n  selectedFontSize: '2',\n  selectedForeColor: 'rgb(0, 0, 0)',\n  textEditor: null,\n  fontNames: Ember.computed(function() {\n    return Ember.A(['Arial', 'Calibri', 'Cambria', 'Consolas', 'Corsiva', 'Courier New', 'Georgia', 'Helvetica Neue', 'Helvetica', 'Sans-Serif', 'Serif', 'Syncopate', 'Times New Roman', 'Trebuchet MS', 'Verdana']);\n  }),\n  fontSizes: Ember.computed(function() {\n    return Ember.A([\n      {\n        size: '1',\n        name: '8'\n      }, {\n        size: '2',\n        name: '10'\n      }, {\n        size: '3',\n        name: '12'\n      }, {\n        size: '4',\n        name: '14'\n      }, {\n        size: '5',\n        name: '18'\n      }, {\n        size: '6',\n        name: '24'\n      }, {\n        size: '7',\n        name: '36'\n      }\n    ]);\n  }),\n  fontChooserItemViewClass: Ember.Widgets.SelectOptionView.extend({\n    templateName: 'font-chooser-item',\n    style: Ember.computed(function() {\n      return \"font-family:\" + (this.get('label')) + \";\";\n    }).property('label')\n  }),\n  actions: {\n    applyFontSize: function(options) {\n      this.get('textEditor').fontSize(options.size);\n      return this.get('textEditor').getEditor().focus();\n    },\n    applyFontName: function(font) {\n      this.get('textEditor').fontName(font);\n      return this.get('textEditor').getEditor().focus();\n    },\n    applyForeColor: function(color) {\n      this.get('textEditor').foreColor(color);\n      return this.get('textEditor').getEditor().focus();\n    },\n    toggleBold: function() {\n      this.get('textEditor').bold();\n      return this.get('textEditor').getEditor().focus();\n    },\n    toggleItalic: function() {\n      this.get('textEditor').italic();\n      return this.get('textEditor').getEditor().focus();\n    },\n    toggleUnderline: function() {\n      this.get('textEditor').underline();\n      return this.get('textEditor').getEditor().focus();\n    },\n    justifyLeft: function() {\n      this.get('textEditor').justifyLeft();\n      return this.get('textEditor').getEditor().focus();\n    },\n    justifyCenter: function() {\n      this.get('textEditor').justifyCenter();\n      return this.get('textEditor').getEditor().focus();\n    },\n    justifyRight: function() {\n      this.get('textEditor').justifyRight();\n      return this.get('textEditor').getEditor().focus();\n    },\n    insertOrderedList: function() {\n      this.get('textEditor').insertOrderedList();\n      return this.get('textEditor').getEditor().focus();\n    },\n    insertUnorderedList: function() {\n      this.get('textEditor').insertUnorderedList();\n      return this.get('textEditor').getEditor().focus();\n    },\n    outdent: function() {\n      this.get('textEditor').outdent();\n      return this.get('textEditor').getEditor().focus();\n    },\n    indent: function() {\n      this.get('textEditor').indent();\n      return this.get('textEditor').getEditor().focus();\n    }\n  }\n});\n\nEmber.Widgets.TextEditorWithNonEditableConfigComponent = Ember.Widgets.TextEditorConfigComponent.extend(Ember.Widgets.PillInsertMixin, {\n  templateName: 'text-editor-with-non-editable-config'\n});\n\n\n})();//@ sourceURL=build/src/text_widget/text_editor_config.js"),eval("(function() {\n\nEmber.Widgets.TextEditorWithNonEditableComponent = Ember.Widgets.TextEditorComponent.extend(Ember.Widgets.PillInsertMixin, {\n  layoutName: 'text-editor-with-non-editable',\n  pillOptions: Ember.A([Ember.Widgets.TodaysDatePill, Ember.Widgets.NonEditableTextPill]),\n  getInsertSelectController: function() {\n    return this.get('pillChooserInLine');\n  },\n  INVISIBLE_CHAR: '\\uFEFF',\n  INSERT_PILL_CHAR: '=',\n  insertPillRegex: Ember.computed(function() {\n    return new RegExp(this.INSERT_PILL_CHAR + '[A-Za-z0-9_\\+\\-]*$', 'gi');\n  }).property('INSERT_PILL_CHAR'),\n  pillId: 0,\n  mouseDownTarget: null,\n  pillHideSearchBox: false,\n  showConfigPopover: false,\n  selectedPillOption: null,\n  isTargetInEditor: function(event) {\n    return !Ember.isEmpty($(event.target).closest('.' + this.EDITOR_CLASS));\n  },\n  getEditor: function() {\n    return this.$('iframe.text-editor-frame').contents().find('.' + this.EDITOR_CLASS);\n  },\n  inEditor: function(range) {\n    return this.$(range.endContainer).parents().has(range.startContainer).first().closest('.' + this.EDITOR_CLASS).length > 0;\n  },\n  _getPillFromElement: function(pillElement) {\n    var data, key, params, value;\n    data = $(pillElement).data();\n    if (!data.type) {\n      return;\n    }\n    params = {};\n    for (key in data) {\n      value = data[key];\n      params[key] = value;\n    }\n    return Ember.get(data.type).create({\n      'textEditor': this,\n      'params': params\n    });\n  },\n  _getElementFromPill: function(pill) {\n    var pillId;\n    pillId = pill.get('params.pillId');\n    return this.getEditor().find('.non-editable[data-pill-id=\"' + pillId + '\"]');\n  },\n  serialize: function() {\n    var div, raw_html;\n    raw_html = this.getEditor().html();\n    div = $('<div/>').html(raw_html);\n    $('.non-editable', div).empty();\n    return div.html();\n  },\n  updateNonEditablePillContent: function() {\n    var pill, pillElement, pillElements, _i, _len;\n    pillElements = this.getEditor().find('.non-editable[data-pill-id]');\n    for (_i = 0, _len = pillElements.length; _i < _len; _i++) {\n      pillElement = pillElements[_i];\n      pill = this._getPillFromElement(pillElement);\n      if (!pill) {\n        return;\n      }\n      $(pillElement).text(pill.result());\n    }\n  },\n  getNewPillId: function() {\n    return this.incrementProperty('pillId');\n  },\n  updatePill: function(pill) {\n    var pillElement;\n    pillElement = this._getElementFromPill(pill);\n    return $(pillElement).text(pill.result());\n  },\n  insertPill: function(pill) {\n    var factor, iframeDocument, matches, precedingCharacters, range, selection;\n    iframeDocument = this.getDocument();\n    precedingCharacters = this.getCharactersPrecedingCaret(this.getEditor()[0]);\n    matches = precedingCharacters.match(this.get('insertPillRegex'));\n    if (matches) {\n      this.deleteCharactersPrecedingCaret(matches[0].length, false);\n    }\n    range = this.getCurrentRange();\n    if (!range || !this.inEditor(range)) {\n      selection = iframeDocument.getSelection();\n      selection.removeAllRanges();\n      range = iframeDocument.createRange();\n      range.selectNodeContents(iframeDocument.body.firstChild);\n      selection.addRange(range);\n    }\n    factor = this.insertElementAtRange(range, pill.render());\n    this.getEditor().focus();\n    selection = iframeDocument.getSelection();\n    selection.removeAllRanges();\n    range = iframeDocument.createRange();\n    range.setStartAfter(factor);\n    range.collapse();\n    return selection.addRange(range);\n  },\n  configurePill: function($pill) {\n    var pillClass, selectedPillOption;\n    pillClass = $pill.attr('data-type');\n    selectedPillOption = Ember.get(window, pillClass).create({\n      textEditor: this,\n      params: {\n        text: $pill.text(),\n        pillId: $pill.attr('data-pill-id')\n      }\n    });\n    return selectedPillOption.configure();\n  },\n  _showPillConfig: function(query) {\n    this.set('showConfigPopover', true);\n    this.set('pillHideSearchBox', true);\n    return this.set('query', query);\n  },\n  _hidePillConfig: function() {\n    this.set('showConfigPopover', false);\n    this.set('pillHideSearchBox', false);\n    return this.set('query', null);\n  },\n  _handlePillConfig: function() {\n    var matches, precedingCharacters, query;\n    precedingCharacters = this.getCharactersPrecedingCaret(this.getEditor()[0]);\n    matches = precedingCharacters.match(this.get('insertPillRegex'));\n    if (matches) {\n      query = matches[0].split(\" \").reverse()[0].slice(1);\n      return this._showPillConfig(query);\n    } else {\n      return this._hidePillConfig();\n    }\n  },\n  keyDown: function(event) {\n    var insertSelect, keyCode;\n    keyCode = event.keyCode;\n    if (this.showConfigPopover) {\n      insertSelect = this.getInsertSelectController();\n      if (keyCode === this.KEY_CODES.DOWN) {\n        return insertSelect.downArrowPressed(event);\n      } else if (keyCode === this.KEY_CODES.UP) {\n        return insertSelect.upArrowPressed(event);\n      } else if ((keyCode === this.KEY_CODES.ENTER || keyCode === this.KEY_CODES.TAB) && insertSelect.get('preparedContent').length > 0) {\n        return insertSelect.enterPressed(event);\n      } else if (keyCode === this.KEY_CODES.ESCAPE) {\n        return insertSelect.escapePressed(event);\n      }\n    }\n  },\n  keyUp: function(event) {\n    if (!this.isTargetInEditor(event)) {\n      return;\n    }\n    if (event.keyCode !== this.KEY_CODES.ESCAPE) {\n      this._handlePillConfig();\n      return this._super.apply(this, arguments);\n    }\n  },\n  click: function(event) {\n    var $target;\n    $target = $(event.target);\n    if ($target.attr('contentEditable') === \"false\" && $target.hasClass('configurable')) {\n      return this.configurePill($target);\n    }\n  }\n});\n\n\n})();//@ sourceURL=build/src/text_widget/text_editor_with_non_editable.js"),eval('(function() {\n\nvar colorNameToHexMap, colorToHex, rgbToHex;\n\nrgbToHex = function(r, g, b) {\n  return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n};\n\ncolorNameToHexMap = {\n  aliceblue: "#f0f8ff",\n  antiquewhite: "#faebd7",\n  aqua: "#00ffff",\n  aquamarine: "#7fffd4",\n  azure: "#f0ffff",\n  beige: "#f5f5dc",\n  bisque: "#ffe4c4",\n  black: "#000000",\n  blanchedalmond: "#ffebcd",\n  blue: "#0000ff",\n  blueviolet: "#8a2be2",\n  brown: "#a52a2a",\n  burlywood: "#deb887",\n  cadetblue: "#5f9ea0",\n  chartreuse: "#7fff00",\n  chocolate: "#d2691e",\n  coral: "#ff7f50",\n  cornflowerblue: "#6495ed",\n  cornsilk: "#fff8dc",\n  crimson: "#dc143c",\n  cyan: "#00ffff",\n  darkblue: "#00008b",\n  darkcyan: "#008b8b",\n  darkgoldenrod: "#b8860b",\n  darkgray: "#a9a9a9",\n  darkgreen: "#006400",\n  darkkhaki: "#bdb76b",\n  darkmagenta: "#8b008b",\n  darkolivegreen: "#556b2f",\n  darkorange: "#ff8c00",\n  darkorchid: "#9932cc",\n  darkred: "#8b0000",\n  darksalmon: "#e9967a",\n  darkseagreen: "#8fbc8f",\n  darkslateblue: "#483d8b",\n  darkslategray: "#2f4f4f",\n  darkturquoise: "#00ced1",\n  darkviolet: "#9400d3",\n  deeppink: "#ff1493",\n  deepskyblue: "#00bfff",\n  dimgray: "#696969",\n  dodgerblue: "#1e90ff",\n  firebrick: "#b22222",\n  floralwhite: "#fffaf0",\n  forestgreen: "#228b22",\n  fuchsia: "#ff00ff",\n  gainsboro: "#dcdcdc",\n  ghostwhite: "#f8f8ff",\n  gold: "#ffd700",\n  goldenrod: "#daa520",\n  gray: "#808080",\n  green: "#008000",\n  greenyellow: "#adff2f",\n  honeydew: "#f0fff0",\n  hotpink: "#ff69b4",\n  "indianred ": "#cd5c5c",\n  indigo: "#4b0082",\n  ivory: "#fffff0",\n  khaki: "#f0e68c",\n  lavender: "#e6e6fa",\n  lavenderblush: "#fff0f5",\n  lawngreen: "#7cfc00",\n  lemonchiffon: "#fffacd",\n  lightblue: "#add8e6",\n  lightcoral: "#f08080",\n  lightcyan: "#e0ffff",\n  lightgoldenrodyellow: "#fafad2",\n  lightgrey: "#d3d3d3",\n  lightgreen: "#90ee90",\n  lightpink: "#ffb6c1",\n  lightsalmon: "#ffa07a",\n  lightseagreen: "#20b2aa",\n  lightskyblue: "#87cefa",\n  lightslategray: "#778899",\n  lightsteelblue: "#b0c4de",\n  lightyellow: "#ffffe0",\n  lime: "#00ff00",\n  limegreen: "#32cd32",\n  linen: "#faf0e6",\n  magenta: "#ff00ff",\n  maroon: "#800000",\n  mediumaquamarine: "#66cdaa",\n  mediumblue: "#0000cd",\n  mediumorchid: "#ba55d3",\n  mediumpurple: "#9370d8",\n  mediumseagreen: "#3cb371",\n  mediumslateblue: "#7b68ee",\n  mediumspringgreen: "#00fa9a",\n  mediumturquoise: "#48d1cc",\n  mediumvioletred: "#c71585",\n  midnightblue: "#191970",\n  mintcream: "#f5fffa",\n  mistyrose: "#ffe4e1",\n  moccasin: "#ffe4b5",\n  navajowhite: "#ffdead",\n  navy: "#000080",\n  oldlace: "#fdf5e6",\n  olive: "#808000",\n  olivedrab: "#6b8e23",\n  orange: "#ffa500",\n  orangered: "#ff4500",\n  orchid: "#da70d6",\n  palegoldenrod: "#eee8aa",\n  palegreen: "#98fb98",\n  paleturquoise: "#afeeee",\n  palevioletred: "#d87093",\n  papayawhip: "#ffefd5",\n  peachpuff: "#ffdab9",\n  peru: "#cd853f",\n  pink: "#ffc0cb",\n  plum: "#dda0dd",\n  powderblue: "#b0e0e6",\n  purple: "#800080",\n  red: "#ff0000",\n  rosybrown: "#bc8f8f",\n  royalblue: "#4169e1",\n  saddlebrown: "#8b4513",\n  salmon: "#fa8072",\n  sandybrown: "#f4a460",\n  seagreen: "#2e8b57",\n  seashell: "#fff5ee",\n  sienna: "#a0522d",\n  silver: "#c0c0c0",\n  skyblue: "#87ceeb",\n  slateblue: "#6a5acd",\n  slategray: "#708090",\n  snow: "#fffafa",\n  springgreen: "#00ff7f",\n  steelblue: "#4682b4",\n  tan: "#d2b48c",\n  teal: "#008080",\n  thistle: "#d8bfd8",\n  tomato: "#ff6347",\n  turquoise: "#40e0d0",\n  violet: "#ee82ee",\n  wheat: "#f5deb3",\n  white: "#ffffff",\n  whitesmoke: "#f5f5f5",\n  yellow: "#ffff00",\n  yellowgreen: "#9acd32"\n};\n\ncolorToHex = function(color) {\n  var blue, digits, green, opacity, red;\n  if (!color) {\n    return color;\n  }\n  if (color.substr(0, 1) === "#" || color === "transparent") {\n    return color.toLowerCase();\n  }\n  if (color in colorNameToHexMap) {\n    return colorNameToHexMap[color.toLowerCase()];\n  }\n  digits = /(.*?)rgb(a)?\\((\\d+), (\\d+), (\\d+)(, (\\d+))?\\)/.exec(color);\n  if ((digits != null ? digits.length : void 0) === 8) {\n    red = parseInt(digits[3]);\n    green = parseInt(digits[4]);\n    blue = parseInt(digits[5]);\n    opacity = parseInt(digits[7]);\n    if (opacity === 0) {\n      return "transparent";\n    }\n    return rgbToHex(red, green, blue);\n  }\n  return void 0;\n};\n\nEmber.Widgets.ColorPicker = Ember.Component.extend({\n  layoutName: \'color-picker\',\n  classNames: [\'color-picker-button\'],\n  colorPickerPlacement: \'right\',\n  dropdownClass: null,\n  INITIAL_COLOR: \'#0074D9\',\n  selectedColor: \'#0074D9\',\n  selectedColorRGB: Ember.computed(function() {\n    return colorToHex(this.get(\'selectedColor\'));\n  }).property(\'selectedColor\'),\n  customColor: \'\',\n  isColorTransparent: Ember.computed.equal(\'selectedColorRGB\', \'transparent\'),\n  colorRows: Ember.A([Ember.A([\'#000000\', \'#111111\', \'#434343\', \'#666666\', \'#999999\', \'#AAAAAA\', \'#B7B7B7\', \'#CCCCCC\', \'#D9D9D9\', \'#EFEFEF\', \'#F3F3F3\', \'#FFFFFF\']), Ember.A([\'#001F3F\', \'#0074D9\', \'#7FDBFF\', \'#39CCCC\', \'#2ECC40\', \'#01FF70\', \'#FFDC00\', \'#FF851B\', \'#FF4136\', \'#85144B\', \'#B10DC9\', \'transparent\'])]),\n  setCustomColor: Ember.observer(function() {\n    if (this.get(\'isCustomColorValid\') === true) {\n      return this.set(\'selectedColor\', this.get(\'customColor\'));\n    }\n  }, \'customColor\', \'isCustomColorValid\'),\n  isCustomColorValid: Ember.computed(function() {\n    return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test("" + (this.get(\'customColor\')));\n  }).property(\'customColor\'),\n  customColorCSS: Ember.computed(function() {\n    return "background-color: " + (this.get(\'customColor\'));\n  }).property(\'customColor\'),\n  actions: {\n    setColor: function(color) {\n      this.set(\'customColor\', \'\');\n      return this.set(\'selectedColor\', color);\n    }\n  },\n  userDidSelect: function(selection) {\n    return this.sendAction(\'userSelected\', selection);\n  }\n});\n\nEmber.Widgets.ColorPickerCell = Ember.View.extend(Ember.Widgets.StyleBindingsMixin, {\n  templateName: \'color-picker-cell\',\n  classNames: [\'pull-left\', \'color-picker-cell\'],\n  classNameBindings: Ember.A([\'isActive:active:inactive\']),\n  styleBindings: \'color:background-color\',\n  color: null,\n  isActive: Ember.computed(function() {\n    return colorToHex(this.get(\'controller.selectedColor\')) === colorToHex(this.get(\'color\'));\n  }).property(\'controller.selectedColor\', \'color\'),\n  click: function(event) {\n    this.get(\'controller\').send(\'setColor\', this.get(\'color\'));\n    return this.get(\'controller\').userDidSelect(this.get(\'color\'));\n  }\n});\n\n\n})();//@ sourceURL=build/src/color_picker.js'),eval("(function() {\n\nEmber.Widgets.TypeaheadComponent = Ember.Widgets.SelectComponent.extend({\n  layoutName: 'typeahead',\n  searchFieldClass: 'form-control',\n  searchView: Ember.TextField.extend({\n    \"class\": 'ember-select-input',\n    valueBinding: 'parentView.query',\n    focusIn: function(event) {\n      return this.set('parentView.showDropdown', true);\n    }\n  }),\n  userDidSelect: function(selection) {\n    this._super;\n    return this.set('query', this.get('selection'));\n  }\n});\n\nEmber.Handlebars.helper('typeahead-component', Ember.Widgets.TypeaheadComponent);\n\n\n})();//@ sourceURL=build/src/typeahead.js");
